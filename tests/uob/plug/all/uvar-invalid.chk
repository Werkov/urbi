// Test that invalid usage of UVar does not stop the engine.
//#uobject test/all
uobjectsAll();
Event.unsubscribeFaultySubscriber = true|;

all.invalidRead();
[00000001:error] !!! input.u:@.1-17: invalidRead: exception caught while calling all.invalidRead: invalid use of unbound UVar
all.invalidWrite();
[00000002:error] !!! input.u:@.1-18: invalidWrite: exception caught while calling all.invalidWrite: invalid use of unbound UVar
all.writeByName("canard.coin", 12);
[00000003:error] !!! input.u:@.1-34: writeByName: UVar creation on non existing object: canard.coin
all.readByName("canard.coin");
[00000004:error] !!! input.u:@.1-29: readByName: UVar creation on non existing object: canard.coin

all.&a.notifyChange(closure() {all.invalidRead()})|;
all.setNotifyChange(0)|;
all.a = 17|;
[00000005:error] !!! exception caught while processing Event:
[00000006:error] !!! input.u:15.32-48: invalidRead: exception caught while calling all.invalidRead: invalid use of unbound UVar
[00000007:error] !!!    called from: input.u:17.1-3: updateSlot


all.lastChange;
[00000008] "all.a"

all.lastChange = ""|;
all.a = 17|;

all.lastChange;
[00000009] "all.a"

all.setNotifyChangeByUVar(12);
[00000010:error] !!! input.u:32.1-29: setNotifyChangeByUVar: exception caught while calling all.setNotifyChangeByUVar: invalid cast to UVar from non-string value.

all.setNotifyChangeByUVar("canard.coin");
[00000011:error] !!! input.u:35.1-40: setNotifyChangeByUVar: UVar creation on non existing object: canard.coin
