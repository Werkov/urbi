// Check nonInterruptible behaviour

import System.*;
{ nonInterruptible; 1 };
[00000001] 1
{ nonInterruptible; sleep (1s); 1 };
[00000002:error] !!! input.u:@.21-30: attempt to sleep in non-interruptible code
// [00000002:error] !!!    called from: input.u:@1.21-30: sleep
{ nonInterruptible; { sleep (1s); 1 }};
[00000003:error] !!! input.u:@.23-32: attempt to sleep in non-interruptible code
// [00000003:error] !!!    called from: input.u:@1.23-32: sleep
{
  nonInterruptible;
  var c = cycle;
  1;
  2;
  echo (cycle - c);
  {
    // Since the parent scope cannot be interrupted, this one cannot either
    1;
    2;
    echo (cycle - c);
  };
  echo (cycle - c)
};
[00000004] *** 0
[00000005] *** 0
[00000006] *** 0
{
  1,
  2
};
[00000007] 2
{
  nonInterruptible;
  1,
  2
};
[00000008:error] !!! input.u:@3.3-@1.3: dependency on other task in non-interruptible code


// Check non-interruptible vs Tag.freeze.
{
  var t = Tag.new();
  { sleep(100ms); t.unfreeze() },
  { nonInterruptible; t: { t.freeze(); 1 } }
};
[00000009:error] !!! input.u:@1.28-37: attempt to wait in non-interruptible code
// [00000009:error] !!!    called from: input.u:@2.28-35: freeze

// Check non-interruptible vs semaphore.
{
  var s = Semaphore.new(0);
  { sleep(100ms); s.release() },
  { nonInterruptible; s.acquire(); 1 }
};
[00000010:error] !!! input.u:@1.23-33: attempt to wait in non-interruptible code
// [00000010:error] !!!    called from: input.u:@2.23-31: acquire

// Check non-interruptible vs barrier.
{
  var b = Barrier.new();
  { sleep(100ms); b.signal(1) },
  { nonInterruptible; b.wait(); 1 }
};
[00000011:error] !!! input.u:@1.23-30: attempt to wait in non-interruptible code
// [00000011:error] !!!    called from: input.u:@2.23-28: wait

// Check non-interruptible vs wait.
{
  var e = Event.new();
  { sleep(100ms); e! },
  { nonInterruptible; waituntil(e?); 1 }
};
[00000012:error] !!! input.u:@1.33: attempt to wait in non-interruptible code
// [00000012:error] !!!    called from: input.u:@2.33: waituntil
