#! /bin/sh

set -e

# Let uconsole find the files to load.
export URBI_PATH=$srcdir/urbivalid/checkfiles

banner ()
{
  if (figlet foo) >/dev/null 2>&1; then
    figlet "$@"
  else
    echo
    echo ===== "$@" =====
    echo
  fi
}

# filter_output FILE
# ------------------
# Select the lines corresponding to output, normalizing the tags.
# Strip the banner.  Neutralize ping/pong performances.
filter_output ()
{
  sed -n -e '/^\*\*\* /,/^Ready\.$/d' \
	 -e '/^\[[0-9]*\(:[^]]*\]\)/s//[XXXXXXXXX\1/' \
	 -e "s,$URBI_PATH/,," \
	 -e '/^\[X*\(:[^]]*\]\)/p' \
      "$1" |
   sed -e 's/\(pong time=\).*/\1XXXXXX/g'
}

chk=$1
test -f $chk
me=$(basename "$chk" ".chk")

banner >&2 "Test: $me"

# Compute input and expected output.
sed  -e '/^\[[^]]*\] /d'         $chk >$me.in
filter_output $chk >$me.expout

# Be sure to end with a shutdown.
cat <<EOF >>$me.in
noop;
wait 2s;
shutdown;
EOF

# Feed the input to the console.
cmd="../src/uconsole $me.in >$me.out"

if [ x"$USE_VALGRIND" != x ] || [ x"$WITH_VALGRIND" != x ]; then
  : ${VALGRIND=valgrind}
  if ($VALGRIND --version) >/dev/null 2>/dev/null; then
    valgrind="$VALGRIND"
    valgrind_args="--error-exitcode=242 --log-file-exactly=$me.valgrind.log"
    eval $valgrind $valgrind_args -- $cmd
    test $? -eq 242 && cat $me.valgrind.log
  fi
  echo 'Could not find valgrind.' >&2
  eval $cmd
else
  eval $cmd
fi

# Strip the banner.
filter_output $me.out > $me.out.2
mv $me.out.2 $me.out

# Display input and output.
banner >&2 "Input:"
cat >&2 $me.in

banner >&2 "Output:"
cat >&2 $me.out

# Compare expected output with actual output.
banner >&2 "Diffs:"
diff -u $me.expout $me.out >&2

# Do not run rm -rf $me.* because of $me.chk...
rm -f $me.in $me.out $me.expout $me.valgrind.log
