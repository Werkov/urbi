# -*- org -*-
#+TITLE: Urbi kernel roadmap
#+AUTHOR: Gostai kernel team
#+EMAIL: kernel@lists.gostai.com
#+OPTIONS: num:2 toc:2
#+LANG: en

* Scope of this document

The goal of this document is to gather ideas and features to be
implemented in the upcoming kernels.

Please do not edit this file unless something has been agreed (except
in the initial phase where we are filling up features).

* Planned features

** Version 2.0 technical preview 3 (date?)

*** Fix parser memory leaks

This requires:
  - that we delete unused data structures in the grammar;
  - or that we use a modified version of Bison which can use
    boost::variant or an equivalent type supporting non-POD C++ types

** Version 2.0 technical preview 4 (date?)

*** Implement events

We need to settle on the syntax used to represent unbound variables
that will be matched against incoming events. We also need to
implement proper events support, including timed events.

** Version 2.0 beta 1 (date?)

*** Add tags signalling

The tools team will need to know when a tagged statement starts or
ends its execution by use of a special event.

*** Add complete kernel documentation

We need the Urbiscript language reference manual as well as the
UObject (plugged and remote) reference manual. This will be necessary
for the engines team to build engines and associated sensors and
effectors, and for the tools team to build their tools on them.

We also need to document clearly the differences between kernel 1.x
and kernel 2.0 so that developers can adapt their code easily.

** Version 2.0 beta 2 (date?)

*** Tools support

This version should have fixed problems found by the tools and engines
teams. Tools should be roughly functional.

** Version 2.0 release candidate 1 (date?)

*** Engines

We need some engines so that people can really use Urbi.

*** Tutorials

We need an Urbiscript and an Uobject tutorial.

** Version 2.0 final (date?)

Hopefully, the final version will correspond to one of the release
candidates.

** Version 2.0.1 (date?)

This will be a bugfix version.

** Version 2.1 (date?)

** Future features not associated with any particular version

*** Load compressed .u files in the kernel

We might need to load compressed Urbiscript files in the kernel in
order to reduce the space requirement on embedded targets.

*** Embed .u files into the kernel

It would be great to have Urbiscript files embedded into the kernel,
in a compressed or uncompressed form, so that we can ship one sole
executable.

*** Cleanup output presented to the user

Right now, the user sees an expanded version of the tree which may not
correspond to something that could be used as input.

*** Separate parser and execution modules

We may not have enough room available on some targets to be able to
embed the parser. Some sort of AST serialization is needed.

*** Cleanup "at" scoping

Decide what scoping is appropriate for "at" jobs.

*** Use real slots

We need to check what other languages have been using. Once we have
real slots, we will be able to set properties on local variables as
well.

*** Real-time features

We need to prioritize jobs or tagged jobs.

*** Start-of-cycle and end-of-cycle executions

This is needed for UObject to work correctly, by being able to read
sensors at the beginning of each cycle and give orders to effectors at
the end of each cycle.

*** Better syntax for lambda functions

Lambda functions are quite verbose, a lightweight syntax should be
used.

*** Pattern matching

It would be great to have broad pattern matching available.
