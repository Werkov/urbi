#! /bin/sh -e

stderr ()
{
  local i
  for i
  do
    echo >&2 "$0: $i"
  done
}

error ()
{
  local sta=$1
  shift
  stderr "$@"
  exit $sta
}

fatal ()
{
  error 1 "$@"
}

usage ()
{
  cat <<EOF
usage: $0 [OPTIONS...] [RELEASE...]

Call this script when a release is to be publish to the download
site.  Don't forget to tag it if it is a release.

RELEASE can be specified (e.g., \`2.0-rc-1'), otherwise it is computed
automatically from the latest time stamp.

Options:
  -h, --help        display this message and exit successfully
  -u, --user NAME   use NAME to log on gate [$login]
EOF
}

getargs ()
{
  while test $# -ne 0;
  do
    case $1 in
      (-h|--help) usage;;
      (-u|--user) shift; login=$1;;
      (-*) fatal "invalid option: $1";;
      (*) latest=$1;;
    esac
    shift
  done
}

# The machine that has the built tarballs.
gate=bf-2.gostai.com
# The login to access the tarball.s
login=build
# The shared directory that contains the packages.
dir=share/built/kernel-2.0/archives

oses="windows linux macos"

getargs "$@"

# Get the content of the directory containing the latest successful builds:
# urbi-sdk-2.0-beta3-linux-x86.tar.gz
# urbi-sdk-2.0-beta3-macos-x86.tar.gz
# urbi-sdk-2.0-beta3-linux-x86-gcc4-debug_dynamic.tar.gz
# urbi-sdk-2.0-beta2-498-g4f7f361-windows-x86.zip
# urbi-sdk-2.0-beta2-498-g4f7f361-linux-x86-gcc4-debug_dynamic.tar.gz
# urbi-sdk-2.0-beta2-498-g4f7f361-linux-x86.tar.gz
# urbi-sdk-2.0-beta2-498-g4f7f361-macos-x86.tar.gz
all=$(ssh $login@$gate "cd $dir && ls -1t *windows*.zip *linux*.gz *macos-*.gz")

# Make sure that we have the same version for the three architectures.
test -n "$latest" ||
  latest=$(echo "$all" |
      perl -n -e 'if (m/((:?kernel-2.0|urbi-sdk)
                        -(?:beta|rc-)\d
                        (?:-\d+-g[\da-f]{7})?)
                        -(?:linux|macos|windows)
                        -(ARM|ppc|x86)
                        (?:-gcc4-debug_dynamic)?/x)
                  { print "$1\n"; exit 0; }')

test -n "$latest" ||
  fatal "cannot find latest version from:" $all

for os in $oses
do
  pack=$(echo "$all" | grep -e "$latest-$os" | grep -v 'debug' || true)
  test -n "$pack"||
    fatal "$latest does not exist for $os"
done

for os in $oses
do
  for pack in $(echo "$all" | grep -e "$latest-$os" | grep -v 'debug')
  do
    echo " --------------- $pack ---------------- "
    # For some reason, "scp A B" does not work, so
    # "scp A localhost && scp localhost B".
    cmd="scp \"$login@$gate:$dir/$pack\" /tmp/$pack &&
     scp /tmp/$pack downloads@www.gostai.com:urbi-sdk-2.0_beta/$os/$pack &&
     ssh downloads@www.gostai.com 'chmod 640 urbi-sdk-2.0_beta/$os/$pack'"
    stderr "$cmd"
    eval "$cmd"
  done
done
