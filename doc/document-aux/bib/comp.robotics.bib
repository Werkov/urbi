@Article{blank.03.jeric,
  author =       {Douglas Blank and Deepak Kumar and Lisa Meeden and
                  Holly Yanco},
  title =        {Pyro: A {Python}-based Versatile Programming
                  Environment for Teaching Robotics},
  journal =      {Journal of Educational Resources in Computing
                  (JERIC)},
  abstract =     {In this paper we describe a programming framework
                  called Pyro which provides a set of abstractions
                  that allows students to write platform-independent
                  robot programs. This project is unique because of
                  its focus on the pedagogical implications of
                  teaching mobile robotics via a top-down approach. We
                  describe the background of the project, novel
                  abstractions created, its library of objects, and
                  the many learning modules that have been created
                  from which curricula for different types of courses
                  can be drawn. Finally, we explore Pyro from the
                  students’ perspective in a case study.},
  volume =       {3},
  number =       {4},
  year =         {2003},
  issn =         {1531-4278},
  pages =        {1},
  doi =          {http://doi.acm.org/10.1145/1047568.1047569},
  publisher =    {ACM},
  address =      {New York, NY, USA},
}

@INPROCEEDINGS{blank.03.sigcse,
  author =       {Douglas Blank and Lisa Meeden and Deepak Kumar},
  title =        {{Python} {Robotics}: An Environment for Exploring
                  Robotics Beyond {LEGOs}},
  booktitle =    {In Proceedings of the SIGCSE Conference},
  year =         {2003},
  pages =        {317--321},
  publisher =    {ACM Press},
  abstract =     {This paper describes Pyro, a robotics programming
                  environment designed to allow inexperienced
                  undergraduates to explore topics in advanced
                  robotics. Pyro, which stands for Python Robotics,
                  runs on a number of advanced robotics platforms. In
                  addition, programs in Pyro can abstract away
                  low-level details such that individual programs can
                  work unchanged across very different robotics
                  hardware. Results of using Pyro in an undergraduate
                  course are discussed.}
}

@INPROCEEDINGS{blank.04.aaaiss,
  author =       {Douglas Blank and Holly Yanco and Deepak Kumar and
                  Lisa Meeden},
  title =        {Avoiding the {Karel}-the-{Robot} Paradox: A
                  framework for making sophisticated robotics
                  accessible},
  booktitle =    {In Proceedings of the 2004 AAAI Spring Symposium on
                  Accessible, Hands-on AI and Robotics Education},
  year =         {2004},
  publisher =    {AAAI Spring Symposium},
  abstract =     {As educators, we are often faced with the paradox of
                  having to create simplified examples in order to
                  demonstrate complicated ideas. The trick is in
                  finding the right kinds of simplifications---ones
                  that will scale up to the full range of possible
                  complexities we eventually would like our students
                  to tackle. In this paper, we argue that low-cost
                  robots have been a useful first step, but are now
                  becoming a dead-end because they do not allow our
                  students to explore more sophisticated robotics
                  methods. We suggest that it is time to shift our
                  focus from low-cost robots to creating software
                  tools with the right kinds of abstractions that will
                  make it easier for our students to learn the
                  fundamental issues relevant to robot programming. We
                  describe a programming framework called Pyro which
                  provides a set of abstractions that allows students
                  to write platform-independent robot programs.},
}

@article{blank.06.ai,
  author =       {Douglas Blank and Deepak Kumar and Lisa Meeden and
                  Holly Yanco},
  title =        {The {Pyro} toolkit for {AI} and robotics},
  journal =      {AI Magazine},
  volume =       {27},
  number =       {1},
  year =         {2006},
  abstract =     {This article introduces Pyro, an open source python
                  robotics toolkit for exploring topics in AI and
                  robotics. We present key abstractions that allow
                  Pyro controllers to run unchanged on a variety of
                  real and simulated robots. We demonstrate Pyro’s use
                  in a set of curricular modules. We then describe
                  how Pyro can provide a smooth transition for the
                  student from symbolic agents to real-world robots,
                  which significantly reduces the cost of learning to
                  use robots. Finally we show how Pyro has been
                  successfully integrated into existing AI and
                  robotics courses.},
}

@INPROCEEDINGS{gerkey.03.icar,
  author =       {Brian P. Gerkey and Richard T. Vaughan and Andrew
                  Howard},
  title =        {The {Player/Stage} Project: Tools for Multi-Robot and
                  Distributed Sensor Systems},
  booktitle =    {In Proceedings of the 11th International Conference
                  on Advanced Robotics},
  year =         {2003},
  pages =        {317--323},
  abstract =     {This paper describes the Player/Stage software tools
                  applied to multi-robot, distributed-robot and sensor
                  network systems. Player is a robot device server
                  that provides network transparent robot
                  control. Player seeks to constrain controller design
                  as little as possible; it is device independent,
                  non-locking and language- and style-neutral. Stage
                  is a lightweight, highly configurable robot
                  simulator that supports large
                  populations. Player/Stage is a community Free
                  Software project. Current usage of Player and Stage
                  is reviewed, and some interesting research
                  opportunities opened up by this infrastructure are
                  identified.},
}

@article{gottlob.02.jcss,
  author =       {Georg Gottlob and Nicola Leone and Francesco
                  Scarcello},
  title =        {Hypertree Decompositions and Tractable Queries},
  journal =      {Journal of Computer and System Sciences},
  volume =       64,
  number =       3,
  pages =        {579--627},
  month =        {May},
  year =         2002
}

@TechReport{hugel.03.tr,
  author =       {V. Hugel, P. Blazevic, O. Stasse and P. Bonnin},
  title =        {Trot Gait Design details for Quadrupeds},
  journal =      {Technical report, http://www.lrv.uvsq.fr/research/
                  legged/papers/ tech\_reports/2003/
                  2003\_symposium\_paper.pdf},
  year =         2003
}

@article{levesque.84.jai,
  author =       {Hector J. Levesque},
  title =        {Foundations of a functional approach to knowledge
                  representation},
  journal =      {Artificial Intelligence},
  volume =       23,
  number =       2,
  pages =        {155--212},
  month =        {July},
  year =         1984
}

@inproceedings{levesque.84.ncai,
  author =       {Hector J. Levesque},
  title =        {A logic of implicit and explicit belief},
  booktitle =    {Proceedings of the Fourth National Conference on
                  Artificial Intelligence},
  publisher =    {American Association for Artificial Intelligence},
  pages =        {198--202},
  address =      {Austin, Texas},
  month =        {August},
  year =         1984
}

@Article{michel.04.ars,
  AUTHOR =       {Olivier Michel},
  TITLE =        {Webots: Professional Mobile Robot Simulation},
  JOURNAL =      {Journal of Advanced Robotics Systems},
  YEAR =         {2004},
  VOLUME =       {1},
  NUMBER =       {1},
  PAGES =        {39--42},
  URL =
                  {http://www.ars-journal.com/International-Journal-of-Advanced-Robotic-Systems/Volume-1/39-42.pdf}
}

@article{nebel.00.jair,
  author =       {Bernhard Nebel},
  title =        {On the compilability and expressive power of
                  propositional planning formalisms},
  journal =      {Journal of Artificial Intelligence Research},
  volume =       12,
  pages =        {271--315},
  year =         2000,
}

@inproceedings {quigley.09.icra,
  title =        {{ROS}: an open-source {Robot Operating System}},
  booktitle =    {ICRA Workshop on Open Source Software},
  year =         {2009},
  author =       {Morgan Quigley and Ken Conley and Brian Gerkey and
                  Josh Faust and Tully Foote and Jeremy Leibs and Rob
                  Wheeler and Andrew Y. Ng},
  abstract =     {This paper gives an overview of ROS, an open-source
                  robot operating system. ROS is not an operating
                  system in the traditional sense of process
                  management and scheduling; rather, it provides a
                  structured communications layer above the host
                  operating systems of a heterogenous compute
                  cluster. In this paper, we discuss how ROS relates
                  to existing robot software frameworks, and briefly
                  overview some of the available application software
                  which uses ROS.},
}

@article{sony.05.openr,
  author =       {Sony},
  title =        {{Open-R} {SDK} for {Aibo} robots},
  url =          {http://www.openr.aibo.com},
  year =         {2005},
}

@article{touretzky.04.tne,
  author =       {David S. Touretzky and Ethan J. Tira-Thompson},
  title =        {Tekkotsu: a Sony AIBO application development
                  framework},
  journal =      {The Neuromorphic Engineer},
  volume =       {1.2},
  year =         {2004}
}

@InProceedings{vaughan.03.iros,
  author =       {Richard T. Vaughan and Brian Gerkey and Andrew
                  Howard},
  title =        {On Device Abstractions For Portable, Resuable Robot
                  Code},
  booktitle =    {Proceedings of the IEEE/RSJ International Conference
                  on Intelligent Robots and Systems (IROS'03)},
  pages =        {2121--2427},
  month =        {October},
  year =         {2003},
  abstract =     {We seek to make robot programming more efficient by
                  developing a standard abstract interface for robot
                  hardware, based on familiar techniques from
                  operating systems and network engineering. This
                  paper describes the application of three well known
                  abstractions, the character device model, the
                  interface/driver model, and the client/server model
                  to this purpose. These abstractions underlie
                  Player/Stage, our Open Source project for rapid
                  development of robot control systems. One product of
                  this project is the Player Abstract Device Interface
                  (PADI) specification, which defines a set of
                  interfaces that capture the functionality of
                  logically similar sensors and actuators. This
                  specification is the central abstraction that
                  enables Player-based controllers to run unchanged on
                  a variety of real and simulated devices. We propose
                  that PADI could be a starting point for development
                  of a standard platform for robot interfacing,
                  independent of Player, to enable code portability
                  and re-use, while still providing access to the
                  unique capabilities of individual devices.}
}

@Misc{webots.08.www,
  AUTHOR =       {Webots},
  TITLE =        {http://www.cyberbotics.com},
  NOTE =         {Commercial Mobile Robot Simulation Software},
  EDITOR =       {Cyberbotics Ltd.},
  URL =          {http://www.cyberbotics.com},
  year =         2008,
}
