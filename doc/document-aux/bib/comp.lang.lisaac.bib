@INPROCEEDINGS{sonntag.02.tools,
  author =       {Benoît Sonntag and Dominique Colnet},
  title =        {Lisaac: The Power of Simplicity At Work for
                  Operating System},
  booktitle =    {In Proceedings of the 40th International Conference
                  on Technology of Object-Oriented Languages and
                  Systems (TOOLS Pacific},
  year =         {2002},
  pages =        {45--52},
  publisher =    {Australian Computer Society, Inc},
  abstract =     {The design as well as the implementation of the
                  Isaac operating system (Sonntag 2000) led us to set
                  up a new programming language named Lisaac. Many
                  features from the Lisaac language come from the Self
                  programming language (Ungar \& Smith 1987). Comparing
                  to Self's skills, Lisaac integrates communications
                  protection mechanisms as well as other tools related
                  to operating systems' design. System interruptions
                  support as well as drivers memory mapping have been
                  considered in the design of Lisaac.  The use of
                  prototypes and especially dynamic inheritance, fits
                  a flexible operating system in the making.  First
                  benchmarks of our compiled objects show that it is
                  possible to obtain high-level prototype-based
                  language's executables as fast as C programs are.}
}

@inproceedings{sonntag.02.ecoop,
  HAL_ID =       {inria-00100788},
  URL =          {http://hal.inria.fr/inria-00100788/en/},
  title =        {{D}ynamic inheritance: a powerful mechanism for
                  operating system design},
  author =       {{S}onntag, {B}eno\^it and {C}olnet, {D}ominique and
                  {Z}endra, {O}livier},
  abstract =     {{T}he design of the {I}saac operating system comes
                  from several years of reflexion and implementation
                  on the need for flexibility and dynamism in future
                  operating systems. {O}ur goals progressively lead us
                  towards the object-oriented
                  concepts. {P}rototype-based languages appeared the
                  most elegant manner to materialize our vision of
                  operating system. {T}hese, coupled with a powerful
                  language allowing changing inheritance dynamically,
                  made it possible to create the innovating {I}saac
                  {OS} (http:www.{I}saac{OS}.com).},
  keywords =     {object-oriented language; prototype-based language;
                  operating system; dynamic inheritance; isaac ||
                  langage {\`a} objets; langage {\`a} prototypes;
                  syst{\`e}me d'exploitation; h{\'e}ritage dynamique;
                  isaac},
  language =     {{E}nglish},
  affiliation =  {{MIRO} - {INRIA} {SOPHIA} {ANTIPOLIS} / {INRIA}
                  {LORRAINE} - {LORIA} - {CNRS} : {UMR}7503 - {INRIA}
                  - {U}niversit{\'e} {H}enri {P}oincar{\'e} - {N}ancy
                  {I} - {U}niversit{\'e} {N}ancy {II} - {I}nstitut
                  {N}ational {P}olytechnique de {L}orraine},
  booktitle =    {5th {ECOOP} {W}orkshop on {O}bject-{O}rientation and
                  {O}perating {S}ystems - {ECOOP}-{OOOSWS}'2002},
  publisher =    {{S}pringer {V}erlag},
  pages =        {5 p},
  address =      {{M}alaga, {E}spagne},
  series =       {{L}ecture {N}otes in {C}omputer {S}cience},
  note =         {{C}olloque avec actes et comit{\'e} de
                  lecture. internationale.},
  audience =     {international},
  month =        Jun,
  year =         {2002},
}



@InProceedings{sonntag.01.renpar,
  author =       {Beno\^t Sonntag},
  title =        {Utilisation de la Segmentation Mémoire du Processeur
                  à Partir d'un Langage de Haut Niveau},
  year =         {2001},
  month =        {Apr},
  abstract =     {Cet article est le fruit d'une étude sur la mise en
                  place d'un nouveau système d'exploitation
                  entièrement en objets. En effet, à partir de
                  l'analyse de nos besoins en matière de communication
                  pour l'élaboration de nos mécanismes objets,
                  différents problèmes sont apparus. Ici, nous en
                  dénonçons un qui concerne le manque de flexibilité
                  de la gestion mémoire par l'absence d'utilisation de
                  la segmentation. Actuellement, certains processeurs
                  offrent des mécanismes élaborés de gestion de la
                  mémoire par segmentation. Mais malheureusement, ils
                  sont inutilisables dans le contexte d'un programme C
                  ansi par exemple. A première vue, la mise en place
                  d'un système d'exploitation utilisant ce mécanisme
                  nécessite de réécrire complètement le compilateur
                  pour que ce dernier prenne en compte les indexations
                  d'adressage mémoire. Cet article apporte une
                  solution simple et efficace pour permettre la prise
                  en charge de la segmentation processeur d'un
                  programme C en mémoire. Cette solution ne nécessite
                  aucune modification massive du compilateur.},
}


