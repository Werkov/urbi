//                                      -*- urbi -*-

// Too many unpredictable changes in the error messages.
LookupError.fixSpellingErrors = false |

// Determinism: asList and asString.
do (Dictionary)
{
  copySlot("keys", "oldKeys");
  keys->constant = false;
  keys = function ()
    {
      oldKeys.sort;
    };
}|

// We want random to become deterministic.
do (Float)
{
  var this.random_counter = 0;
  // chosen by fair dice roll.
  // guaranteed to be random.
  var this.random_values = [3, 1, 2];
  random->constant = false;
  random =
    function ()
    {
      var res = random_values[random_counter];
      // We don't want COW here, as the doc calls "5.random" repeatedly.
      Float.random_counter = (random_counter + 1) % random_values.size;
      res
    }
}|

// Deterministic localSlotNames.
do (Object)
{
  copySlot("localSlotNames", "oldLocalSlotNames");
  localSlotNames->constant = false;
  localSlotNames = function ()
    {
      oldLocalSlotNames.sort;
    };
}|

// Be robust to Windows:
// failed assertion: Path . new("/") . cd == Path . new("/")
//                   (Path("/") == Path("/"))
// failed assertion: Path . cwd == Path . new("/")
//                   (Path("/") == Path("/"))
// The following is taken from tests/test.u.  We need to factor.
{
  function neutralize(string)
  {
    if (2 < string.size && string[1] == ":")
      string[0, 2] = "";
    for (var i = 0; i < string.size; i++)
      if (string[i] == "\\")
        string[i] = "/";
    return string;
  };

  function wrap(o, msg, wrapper)
  {
    var old = o.getSlot(msg); o.removeSlot(msg);
    o.setSlot
    (msg,
    function()
    {
      return wrapper(old.apply([this]))
    }
    );
  };
  wrap(Path, "asString", neutralize);
  wrap(Path, "asPrintable", neutralize);
  wrap(Exception, "asString", neutralize);
}|

do (Path)
{
  '=='->constant = false;
  '==' = function (that)
  {
    clog << asString + " vs. " + that.asString;
    asString == that.asString;
  }
}|

// Deterministic String.fresh.
do (String)
{
  var counter_ = 5;
  fresh->constant = false;
  fresh = function ()
  {
    this + "_" + counter_++;
  }
}|
