This file summarizes the user-visible changes since the first beta1
release.

Grammar
=======

"object" and "from" as identifiers
----------------------------------

"object" and "from" are now regular identifiers and can be used as
other names.  For example, it is now legal to declare:

  var object = 1;
  var from = 1;

Hexadecimal numbers support
---------------------------

It is now possible to enter hexadecimal numbers by prefixing them with
"0x", as in:

  0x2a;
  [00000001] 42

Only integral numbers are supported.

The hexadecimal representation of a number can be obtained by specifying the
base to Float.asString:

  42.asString(16);
  [00000001] "2a"
  // Float.hex is a shortcut:
  42.hex;
  [00000001] "2a"


Standard library
================

"String.asList" method
----------------------

"String" now has a "asList" method, which can be used transparently
to iterate over the characters of a string:

  for (var c: "foo") echo (c);
  [00000001] *** f
  [00000002] *** o
  [00000003] *** o

"String.split" method
---------------------

The "split" method of "String" has been enhanced. It will not aggregate
components anymore by default:

  "foobar".split("o");
  [00000001] ["f", "", "bar"]

It moreover now supports a list of separators:

   "a:b;c".split([":", ";"]);
   [00000001] ["a", "b", "c"]

The optional second argument indicates whether to keep delimiters in
the resulting list (default: false):

   "aaa:bbb;ccc".split([":", ";"], true);
   [00000001] ["aaa", ":", "bbb", ";" "ccc"]

The optional third argument indicates whether to keep empty elements:

  "foobar".split("o", false, false);
  [00000001] ["f", "bar"]

Calling "split" with no arguments will tokenize the string over " ",
"\t", "\n" and "\r":

  "  abc  def\tghi\n".split;
  [00000001] ["abc", "def", "ghi"]

"min" and "max"
---------------

It is now possible to call "min" and "max" on a list. By default, the
"<" comparaison operator is used, but one explicit `lower than'
function can be provided as "min" or "max" argument should one be
needed. Here is an example on how to compare strings in case-sensitive
and case-insensitive modes:

  ["the", "brown", "Fox"].min;
  [00000001] "Fox"
  ["the", "brown", "Fox"].min(function (l, r) { l.toLower < r.toLower });
  [00000002] "brown"

Global function "min" and "max" taking an arbitrary number of
arguments have also been defined. In this case, the default "<" operator
is used for comparaison:

  min(3, 2, 17);
  [00000001] 2

UObjects
========

"UVar::type()" method
---------------------

It is now possible to get the type of a "UVar" by calling its "type()"
method, which returns a "UDataType" (see "urbi/uvalue.hh" for the
types declarations).

Runtime
=======

Stack exhaustion check on Windows
---------------------------------

As was done on Linux already, stack exhaustion condition is detected
on Windows, for example in the case of an infinite recursion. In this
case, SchedulingError will be raised and can be caught.

Errors from the trajectory generator are propagated
---------------------------------------------------

If the trajectory generator throws an exception, for example because it
cannot assign the result of its computation to a non-existent variable,
the error is propagated and the generator is stopped:

  y = 20 ampli:5 sin:10s,
  [00002140:error] !!! urbi/trajectory-generator.u:106.7-15: lookup failed: y

Bug fixes
=========

Support for Windows shares
--------------------------

Previous versions of the kernel could not be launched from a Windows
remote directory, whose name is starting with two slashes such as
"\\share\some\dir".

Implement "UVar::syncValue()" in plugged uobjects
-------------------------------------------------

Calling "syncValue()" on a "UVar" from a plugged uobject resulted in a
link error.  This method is now implemented, but does nothing as there
is nothing to do. However, its presence is required to be able to use
the same uobject in both remote and engine modes.

"isdef" works again
-------------------

The support for k1 compatibility function "isdef" was broken in the
case of composed names or variables whose content was "void". Note
that we do not recommend using "isdef" at all. Slots related methods
such as "getSlot", "hasSlot", "locateSlot", or "slotNames" have much
cleaner semantics.
