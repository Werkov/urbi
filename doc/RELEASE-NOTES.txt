This file summarizes the user-visible changes since the first beta1
release.

*******************************
* New since kernel 2.0 beta 2 *
*******************************

Meta
====

Frequently asked questions
--------------------------

A new document "FAQ.txt" addresses the questions most frequently asked by our
users during the beta-test period.

Grammar
=======

"new" syntax revamped
---------------------

The syntax "new myObject(myArgs)" has been deprecated and now gives a
warning. The recommended "myObject.new(myArgs)" is suggested.

"delete" has been removed
-------------------------

"delete" was never the right thing to do. A local variable should
not be deleted, and a slot can be removed using "removeSlot".
The construct "delete object" has been removed from the
language.

"__HERE__"
----------

The new "__HERE__" pseudo-symbol gives the current position.  It
features three self explanatory slots: "file", "line", and "column".

Operator "()"
-------------

It is now possible to define the "()" operator on objects and have
it called as soon as at least one parameter is given:

  class A {
    function '()' (x) { echo("A called with " + x) };
  };
  A;
  [00000001] A
  A();
  [00000002] A
  A(42);
  [00000003] *** A called with 42

"catch(<type> <name>)" syntax removed
-------------------------------------

The "catch(<type> <name>)", which was used to catch exceptions if and
only if they inherited <type>, has been removed. This behavior can be
obtained with the more general guard system:

catch (var e if e.isA(<type>)
{
  ...
}

Pattern matching and guards in catch blocks
-------------------------------------------

Exception can now be filtered thanks to pattern matching, just like
events. Moreover, the pattern can be followed by the "if" keyword and
an arbitrary guard. The block will catch the exception only if the
guard is true.

try
{ ... }
catch ("foo") // Catch only the "foo" string
{ ... }
catch (var x if x.isA(Float) && x > 10) // Catch all floats greater than 10
{ ... }
catch (var e)  // Catch any other exception
{ ... }

Parsing of integer literals
---------------------------

The parser could not read integer literals greater than 2**31-1.  This
constraint has been alleviated, and Urbi now accepts integer literals
up to 2**63-1.

Display of integer literals
---------------------------

Some large floating point values could not be displayed correctly at
the top level of the interpreter. This limitation has been removed.

Variables binding in event matching
-----------------------------------

Parentheses around variables bindings ("var x") are no longer required
in event matching:

at (?myEvent(var x, var y, 1))

instead of:

at (?myEvent((var x), (var y), 1))

Execution
=========

Waituntil and bindings
----------------------

Bindings performed in "waituntil" constructs are now available in its
context:

waituntil(?event(var x));
// x is available
echo (x);

Standard library
================

"List.insert" method
--------------------

The "List.insert" method now uses an index as its first argument and
inserts the given element before the index position:

  ["a", "b", "c"].insert(1, "xyzzy");
  [00000001] ["a", "xyzzy", "b", "c"]

"List.sort" method
------------------

The "List.sort" method now takes an optional argument, which is a
function to call instead of the "<" operator. Here are two examples
illustrating how to sort strings, depending on whether we want to
be case-sensitive (the default) or not:

  ["foo", "bar", "Baz"].sort;
  [00000001] ["Baz", "bar", "foo"]
  ["foo", "bar", "Baz"].sort(function(x, y) {x.toLower < y.toLower});
  [00000002] ["bar", "Baz", "foo"]

"System.searchPath" method
--------------------------

It is now possible to get the search path for files such as "urbi.u"
or "URBI.INI" by using "System.searchPath".

"System.getenv" method
----------------------

"System.getenv" now returns "nil" if a variable cannot be found in
the environment instead of "void". This allows you do to things such
as :

  var ne = System.getenv("nonexistent");
  if (!ne.isNil) do_something(ne);

while previously you had to retrieve the environment variable twice,
once to check for its existence and once to get its content.

"disown"
--------

It is now possible to start executing code in background while
dropping all the tags beforehand, including the connection tag. The
code will still continue to execute after the connection that created
it has died.

"Object.removeSlot"
-------------------

The "removeSlot" method now silently accepts non-existing slot
names instead of signaling an error.

"Semaphore.criticalSection"
---------------------------

It is now possible to define a critical section associated with
a semaphore. The "p" method will be called at the beginning,
and if after that the operation is interrupted by any means the
"v" operation will be called before going on. If there are no
interruption, the "v" operation will also be called at the end
of the callback :

  var s = Semaphore.new(1);
  s.criticalSection(function () { echo ("In the critical section") });

"System.stats"
--------------

The output of "System.stats" is now expressed in seconds rather than
milliseconds, for consistency with the rest of the kernel.

UObjects
========

void
----

The error message given to the user trying to cast a void UVar has been
specialized.

Remote bound methods can now return void.

Coroutine interface
-------------------

The functions yield(), yield_until(), and yield_until_things_changed()
have been added to the UObject API. They allow the user to write
plugin UObject code that behaves like any other coroutine in the
kernel: if yield() is called regularly, the kernel can continue to
work while the user code runs.  Meaningful implementation for these
functions is provided also in remote mode: calling yield() will allow
the UObject remote library to process pending messages from within the
user callback.

Remote UObject initialization
-----------------------------

Remote UObject instantiation is now atomic: the API now ensures that
all variables and functions bound from the UObject constructor and
init are visible as soon as the UObject itself is visible. Code like:

waituntil(uobjects.hasSlot("MyRemote")) | var m = MyRemote.new();

is now safe.

Urbi server
===========

If a file loaded from "URBI.INI" cannot be found, it is now properly
reported.

Auxiliary programs
==================

"urbi-launch" options cleaned up
--------------------------------

Now, options for "urbi-launch" are separated from options to give to the
underlying program (in remote and start modes) by using "--". Use
"urbi-launch --help" to get the full usage information.


*******************************
* New since kernel 2.0 beta 1 *
*******************************

Grammar
=======

"object" and "from" as identifiers
----------------------------------

"object" and "from" are now regular identifiers and can be used as
other names.  For example, it is now legal to declare:

  var object = 1;
  var from = 1;

Hexadecimal numbers support
---------------------------

It is now possible to enter hexadecimal numbers by prefixing them with
"0x", as in:

  0x2a;
  [00000001] 42

Only integral numbers are supported.

The hexadecimal representation of a number can be obtained by specifying the
base to Float.asString:

  42.asString(16);
  [00000001] "2a"
  // Float.hex is a shortcut:
  42.hex;
  [00000001] "2a"

Standard library
================

"String.asList" method
----------------------

"String" now has a "asList" method, which can be used transparently
to iterate over the characters of a string:

  for (var c: "foo") echo (c);
  [00000001] *** f
  [00000002] *** o
  [00000003] *** o

"String.split" method
---------------------

The "split" method of "String" has been enhanced. It will not aggregate
components anymore by default:

  "foobar".split("o");
  [00000001] ["f", "", "bar"]

It moreover now supports a list of separators:

   "a:b;c".split([":", ";"]);
   [00000001] ["a", "b", "c"]

The optional fourth argument indicates a maximum number of splits that
can occur. A negative number, which is the default, corresponds to
"no limit":

   "a:b:c".split(":", 1);
   [00000001] ["a", "b:c"]
   "a:b:c".split(":", -1);
   [00000002] ["a", "b", "c"]

The optional third argument indicates whether to keep delimiters in
the resulting list (default: false):

   "aaa:bbb;ccc".split([":", ";"], -1, true);
   [00000001] ["aaa", ":", "bbb", ";" "ccc"]

The optional fourth argument indicates whether to keep empty elements
(default: true):

  "foobar".split("o", -1, false, false);
  [00000001] ["f", "bar"]

Calling "split" with no arguments will tokenize the string over " ",
"\t", "\n" and "\r":

  "  abc  def\tghi\n".split;
  [00000001] ["abc", "def", "ghi"]

"String.join" method
--------------------

It is now possible to easily join list elements by inserting an
arbitrary string between them:

  ", ".join(["abc", "def", "ghi"]);
  [00000001] "abc, def, ghi"

"min" and "max"
---------------

It is now possible to call "min" and "max" on a list. By default, the
"<" comparison operator is used, but one explicit `lower than'
function can be provided as "min" or "max" argument should one be
needed. Here is an example on how to compare strings in case-sensitive
and case-insensitive modes:

  ["the", "brown", "Fox"].min;
  [00000001] "Fox"
  ["the", "brown", "Fox"].min(function (l, r) { l.toLower < r.toLower });
  [00000002] "brown"

Global function "min" and "max" taking an arbitrary number of
arguments have also been defined. In this case, the default "<" operator
is used for comparison:

  min(3, 2, 17);
  [00000001] 2

Negative indices
----------------

It is now possible to use negative indices when taking list elements.
For example, -1 designates the last element, and -2 the one before that.

  ["a", "b", "c"][-1]
  [00000001] "c"

Tag names
---------

Tags were displayed as "Tag_0xADDR" which did not make their "name" slot
apparent. They are now displayed as "Tag<name>":

  Tag.new;
  [00000001] Tag<tag1>
  Tag.new("mytag");
  [00000002] Tag<mytag>

"every" and exceptions
----------------------

If an exception is thrown and not caught during the execution of an "every"
block, the "every" expression is stopped and the exception displayed.

UObjects
========

"UVar::type()" method
---------------------

It is now possible to get the type of a "UVar" by calling its "type()"
method, which returns a "UDataType" (see "urbi/uvalue.hh" for the
types declarations).

Runtime
=======

Stack exhaustion check on Windows
---------------------------------

As was done on Linux already, stack exhaustion condition is detected
on Windows, for example in the case of an infinite recursion. In this
case, SchedulingError will be raised and can be caught.

Errors from the trajectory generator are propagated
---------------------------------------------------

If the trajectory generator throws an exception, for example because it
cannot assign the result of its computation to a non-existent variable,
the error is propagated and the generator is stopped:

  y = 20 ampli:5 sin:10s,
  [00002140:error] !!! urbi/trajectory-generator.u:106.7-15: lookup failed: y

Bug fixes
=========

Support for Windows shares
--------------------------

Previous versions of the kernel could not be launched from a Windows
remote directory, whose name is starting with two slashes such as
"\\share\some\dir".

Implement "UVar::syncValue()" in plugged uobjects
-------------------------------------------------

Calling "syncValue()" on a "UVar" from a plugged UObject resulted in a
link error.  This method is now implemented, but does nothing as there
is nothing to do. However, its presence is required to be able to use
the same UObject in both remote and engine modes.

"isdef" works again
-------------------

The support for k1 compatibility function "isdef" was broken in the
case of composed names or variables whose content was "void". Note
that we do not recommend using "isdef" at all. Slots related methods
such as "getSlot", "hasSlot", "locateSlot", or "slotNames" have much
cleaner semantics.

"__name" macro
--------------

In some cases, the "__name" macro could not be used with plugged
uobjects, for example in the following expression:

  send(__name + ".val = 1;");

This has been fixed. "__name" contains a valid slot name of
"uobjects".

Auxiliary programs
==================

The sample programs demonstrating the SDK Remote, i.e., how to write a
client for the Urbi server, have been renamed from "urbi*" to
"urbi-*".  For instance "urbisend" is now spelled "urbi-send".

Besides, their interfaces are being overhauled to be more consistent
with the Urbi command-line tool-box.  For instance while "urbisend"
used to require exactly two arguments (host-name, file to send), it
now supports options (e.g., --help, --port to specify the port etc.),
and as many files as provided on the command line.


 LocalWords:  txt myObject myArgs removeSlot isA Urbi myEvent xyzzy Baz toLower
 LocalWords:  searchPath urbi INI getenv ne isNil criticalSection UObjects UVar
 LocalWords:  Coroutine UObject API coroutine init waituntil uobjects hasSlot
 LocalWords:  MyRemote asString asList aaa bbb ccc abc tghi ghi indices xADDR
 LocalWords:  mytag UDataType Runtime SchedulingError ampli lookup dir isdef
 LocalWords:  syncValue getSlot locateSlot slotNames SDK urbisend
