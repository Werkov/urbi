This file summarizes the user-visible changes since the first beta1
release.

Grammar
=======

"object" as identifier
----------------------

"object" is now a regular identifier and can be used as other names.
For example, it is now legal to declare:

  var object = 1;

Standard library
================

"String.asList" method
----------------------

"String" now has a "asList" method, which can be used transparently
to iterate over the characters of a string:

  for (var c: "foo") echo (c);
  [00000001] *** f
  [00000002] *** o
  [00000003] *** o

"String.split" method
---------------------

The "split" method of "String" has been enhanced. It will not aggregate
components anymore by default:

  "foobar".split("o");
  [00000001] ["f", "", "bar"]

It moreover now supports a list of separators:

   "a:b;c".split([":", ";"]);
   [00000001] ["a", "b", "c"]

The optional second argument indicates whether to keep delimiters in
the resulting list (default: false):

   "aaa:bbb;ccc".split([":", ";"], true);
   [00000001] ["aaa", ":", "bbb", ";" "ccc"]

The optional third argument indicates whether to keep empty elements:

  "foobar".split("o", false, false);
  [00000001] ["f", "bar"]

UObjects
========

"UVar::type()" method
---------------------

It is now possible to get the type of a "UVar" by calling its "type()"
method, which returns a "UDataType" (see "urbi/uvalue.hh" for the
types declarations).

Bug fixes
=========

Support for Windows shares
--------------------------

Previous versions of the kernel could not be launched from a Windows
remote directory, whose name is starting with two slashes such as
"\\share\some\dir".

Implement "UVar::syncValue()" in plugged uobjects
-------------------------------------------------

Calling "syncValue()" on a "UVar" from a plugged uobject resulted in a
link error.  This method is now implemented, but does nothing as there
is nothing to do. However, its presence is required to be able to use
the same uobject in both remote and engine modes.

"isdef" works again
-------------------

The support for k1 compatibility function "isdef" was broken in the
case of composed names or variables whose content was "void". Note
that we do not recommend using "isdef" at all. Slots related methods
such as "getSlot", "hasSlot", "locateSlot", or "slotNames" have much
cleaner semantics.
