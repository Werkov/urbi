#! /usr/bin/perl -w

use strict;

my $keywords = <<'EOF';
and: Synonym for \lstinline|&&|
and_eq: Synonym for \lstinline|&=|
asm: Reserved
assert: \autoref{sec:lang:assert}
at: \autoref{sec:lang:at}
auto: Reserved
bitand: \autoref{sec:lang:op:bitwise}
bitor: \autoref{sec:lang:op:bitwise}
bool: Reserved
break: \autoref{sec:lang:break}
call: \autoref{sec:lang:rv}
case: \autoref{sec:lang:switch}
catch: \autoref{sec:lang:catch}, \autoref{sec:lang:timeout}
char: Reserved
class: \autoref{sec:lang:class}
closure:  \autoref{sec:lang:closure}
compl: \autoref{sec:lang:op:bitwise}
const: \autoref{sec:lang:prop:std}
const_cast: Reserved
continue: \autoref{sec:lang:continue}
default: \autoref{sec:lang:switch}
delete: Reserved
do: \autoref{sec:lang:do}
double: Reserved
dynamic_cast: Reserved
else: \autoref{sec:lang:if}
enum: \autoref{sec:lang:continue}
every: \autoref{sec:lang:every}
explicit: Reserved
export: Reserved
extern: Reserved
external: Reserved
float: Reserved
for: \lstinline|for&| and \lstinline-for|- flavors
foreach: Deprecated, use \lstinline|for|
freezeif:
friend: Reserved
function: \autoref{sec:lang:function}, \autoref{sec:lang:closure}
goto: Reserved
if: \autoref{sec:lang:if}
in: \autoref{sec:lang:for:each}
inline: Reserved
int: Reserved
internal: Deprecated
long: Reserved
loop: \lstinline|loop&|, \lstinline-loop|-, \autoref{sec:lang:loop}
mutable: Reserved
namespace: Reserved
new: \autoref{sec:tut:ctor}
not: Synonym for \lstinline|!|
not_eq: Synonym for \lstinline|!=|
onleave: \autoref{sec:lang:at}
or: Synonym for \lstinline-||-
or_eq: Synonym for \lstinline-|=-
private: Ignored
protected: Ignored
public: Ignored
register: Reserved
reinterpret_cast: Reserved
return: \autoref{sec:lang:rv}
short: Reserved
signed: Reserved
sizeof: Reserved
static: Deprecated
static_cast: Reserved
stopif:
struct: Reserved
switch: \autoref{sec:lang:switch}
template: Reserved
this:
throw: \autoref{sec:lang:throw}
timeout: \autoref{sec:lang:timeout}
try: \autoref{sec:lang:catch}
typedef: Reserved
typeid: Reserved
typename: Reserved
union: Reserved
unsigned: Reserved
using: Reserved
var:
virtual: Reserved
volatile: Reserved
waituntil: \autoref{sec:lang:waituntil}
watch: \autoref{sec:lang:watch}
wchar_t: Reserved
whenever: \autoref{sec:lang:whenever}
while: \lstinline|while&| and \lstinline-while|- flavors
xor: Synonym for \lstinline|^|
xor_eq: Synonym \lstinline|^=|
EOF

# keyword => description
my %keyword = map { split (/\s*:\s*/, $_, 2) }
              map { split ("\n") }
              $keywords;

# keywords, sorted.
my @keyword = sort keys %keyword;


# Generate for PDF: two columns.
sub pdf()
{
  # number of lines in the table.
  my $size = int ((scalar @keyword + 1) / 2);

  print <<'EOF';
\begin{tabular}{|c|l||c|l|}
  \hline
  Keyword & Remark & Keyword & Remark \\
  \hline
EOF

  # Issue the lines.
  for my $i (0 .. $size - 1)
  {
    my $k = $keyword[$i*2];
    printf("%20s & %-40s %s\n",
           "\\lstinline\"$k\"", $keyword{$k}, '&');
    if ($i * 2 + 1 < scalar @keyword)
    {
      $k = $keyword[$i*2 + 1];
      printf("%20s & %-40s %s\n",
             "\\lstinline\"$k\"", $keyword{$k}, '\\\\');
    }
    # In case we have an odd number of items.
    elsif ($i * 2 == scalar @keyword - 1)
    {
      print "\\\\\n";
    }
  }
  print <<'EOF';
  \hline
\end{tabular}
EOF
}

# Generate for HTML: one column only.
sub html()
{
  print <<'EOF';
\begin{tabular}{|c|l|}
  \hline
  Keyword & Remark \\
  \hline
EOF

  # Issue the lines.
  for my $k (@keyword)
  {
    my $desc = $keyword{$k};
    # There is something fishy here, TeX4HT issues some '<p
    # class="indent">' around our uses of \lstinline in tables.  This
    # is ugly.  It does so for both the first and second column, but
    # it's only troublesome in the latter.
    #
    # FIXME: send bug report.
    $desc =~ s/\\lstinline/\\verb/g;
    printf("%20s & %-40s %s\n",
           "\\lstinline\"$k\"", $desc, '\\\\');
  }
  print <<'EOF';
  \hline
\end{tabular}
EOF
}



## ------ ##
## Main.  ##
## ------ ##

print '\ifx\ifHtml\undefined', "\n";
pdf;
print '\else', "\n";
html;
print '\fi', "\n";



### Setup "Gostai" style for perl-mode and cperl-mode.
## Local Variables:
## perl-indent-level: 2
## perl-continued-statement-offset: 2
## perl-continued-brace-offset: -2
## perl-brace-offset: 0
## perl-brace-imaginary-offset: 0
## perl-label-offset: -2
## cperl-indent-level: 2
## cperl-brace-offset: 0
## cperl-continued-brace-offset: -2
## cperl-label-offset: -2
## cperl-extra-newline-before-brace: t
## cperl-merge-trailing-else: nil
## cperl-continued-statement-offset: 2
## End:
