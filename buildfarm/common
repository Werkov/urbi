#! /bin/sh

me=$(basename $0)

# stderr LINE...
# --------------
stderr ()
{
  set +xv
  local i
  for i
  do
    echo "$i"
  done | sed -e "s,^,$me: ,g" >&2
  eval "$env"
}

# error EXIT-STATUS LINE...
# -------------------------
error ()
{
  set +xv
  local status=$1
  shift
  stderr "$@"
  exit $status
}

# fatal LINE...
# -------------
fatal ()
{
  set +xv
  error 1 "$@"
}

run ()
{
  stderr "running: $*"
  eval "$@"
}

# find_prog EXE...
# ----------------
# Set find_prog_res to the first EXE found in the path, or set it to
# empty.
find_prog ()
{
  find_prog_res=
  local i
  for i in "$@"
  do
    if $i --version >/dev/null 2>&1; then
      find_prog_res=$i
      break
    fi
  done
}


# tree_copy SOURCE DEST
# ---------------------
# Copy a file-system tree from SOURCE to DEST.  Preserve rights etc.
# DEST is cleared first.
tree_copy ()
{
  local source=$1
  local dest=$2
  rm -rf "$dest"
  mkdir -p "$dest"
  tar -C "$source" -cf - . | tar -C "$dest" -xpBf -
}


# xcp ARG...
# ----------
# Wrapper around "cp" that tries to do things three times, then fail.
# This is because sometimes we get "Input/output error" with WebDAV,
# which is a huge waste of time on the BF.
xcp ()
{
  local i
  for i in 1 2 3
  do
    if cp "$@"; then
      return 0
    fi
  done
  fatal "cannot: cp $*"
}

# xmv ARG...
# ----------
# Wrapper around "mv" that tries to do things three times, then fail.
# This is because sometimes we get "Input/output error" with WebDAV,
# which is a huge waste of time on the BF.
xmv ()
{
  local i
  for i in 1 2 3
  do
    if mv "$@"; then
      return 0
    fi
  done
  fatal "cannot: mv $*"
}

# git_describe ARGS...
# --------------------
# Make a slight effort so that instead of 2.2-8-g9b02553 we get
# 2.2-008-g9b02553, which is better with "ls".
git_describe ()
{
  cd "$DIR_SOURCE"
  git describe "$@" |
    # Keep at least three digits for the patchlevel count (if present).
    perl -pe 's{(?<=-)(\d+)(?=-g[\da-f]+$)}{ sprintf "%03d", $1 }e'
}

## ----------- ##
## Variables.  ##
## ----------- ##

# Check predefined.
for v in BUILDFARM_COMPILER BUILDFARM_MODE BUILDFARM_OS \
         DIR_BUILD DIR_INSTALL DIR_SOURCE
do
  eval "val=\$$v"
  test -n "$val" ||
    fatal "\$$v is not set"
done


# ------- #
# Tools.  #
# ------- #
find_prog $MD5SUM gmd5sum md5sum
MD5SUM=$find_prog_res
test -n "$MD5SUM" ||
  fatal "cannot find md5sum"


# ------ #
# Host.  #
# ------ #

# Used to skip tests.
export BUILDFARM_HOSTNAME=$(hostname | sed -e 's/\..*//')

# --------- #
# Package.  #
# --------- #

# Short version, possibly without patchlevel and SHA1.
VERSION=$(git_describe)

# The full version of the package, with SHA1.
VERSION_LONG=$(git_describe --long)

# This --prefix, /usr, is chosen so that the Debian packages can use
# our builds.
prefix=/usr


# ------------- #
# Directories.  #
# ------------- #

# Where we make a temporary install before going into DIR_INSTALL.
# See buildfarm/install.
export DIR_STAGE=$(dirname "$DIR_INSTALL")/stage

# Where to put the packages that will be published.
export DIR_PACKAGES=$(dirname "$DIR_INSTALL")/packages

sharedir=$HOME/share

# Where to publish the packages.
#
# We could automatically install releases in releases/, but it is
# feared that this is too much automation, the maintainer should do
# that.  She might want also to get rid of the SHA1 part when copying
# for archives/ to releases/.
export DIR_ARCHIVE=$sharedir/built/$BUILDFARM_PROJECT/archives/$VERSION_LONG



## --------------------- ##
## Basic sanity checks.  ##
## --------------------- ##

stderr "$BUILDFARM_HOSTNAME: $BUILDFARM_PROJECT-$BUILDFARM_NAME-$BUILDFARM_MODE"
stderr "Version: $VERSION_LONG ($VERSION)"
stderr "https://share.gostai.com/built/urbi-sdk/archives/$VERSION_LONG/"

# We really want ps to work.
#
# When it does not, ld cannot work properly, so check-lib-deps does not
# work.  And configure fails to run "javac Test" failing this way:
#
# bf-2-ubuntu$ /usr/bin/javac Test
# /usr/bin/javac: error while loading shared libraries: libjli.so: cannot open shared object file: No such file or directory
#
# or
#
# bf-1-chroot$ javac Test.java
# Java HotSpot(TM) Client VM warning: Can't detect initial thread stack location - find_vma failed
#
# Beware that on OS X, if "ps" sees no process, it fails.  "ps x"
# should help.
if ! ps x >/dev/null; then
  fatal "ps does not work, is procfs properly mounted?"
fi

set -x

# We need share.
readme=$sharedir/README-share.txt
if test ! -f $readme; then
  fatal "share/ does not seem to be mounted properly: there is no $readme"
fi

# tools.
toolsdir=$sharedir/tools
case $BUILDFARM_OS in (windows)
  # We need vcxx-2005, not vcxx2005.
  vcxx=$(echo "$BUILDFARM_COMPILER" | perl -pe 's/(vcxx)(\d+)/$1-$2/')
  # vcredist has name with vcxx-2005, not vcxx2005.
  vcredist=$toolsdir/vcredist/vcredist_x86-$vcxx.exe
  gostai_console="$toolsdir/gostai-console/gostai-console-2.6-win32.exe"
  gostai_editor="$toolsdir/gostai-editor/gostai-editor-2.5-win32.exe"
  for i in vcredist gostai_console gostai_editor
  do
    eval "file=\$$i"
    test -r "$file" ||
      fatal "cannot read $i: $val"
    test -f "$file" ||
      fatal "not a file $i: $val"
    test -s "$file" ||
      fatal "empty file $i: $val"
  done
  ;;
esac

# colordiff sometimes does not tell different files apart (e.g., on
# Debian Etch).
if colordiff /dev/null $readme >/dev/null 2>&1; then
  fatal "colordiff exits successfully on different files"
fi
