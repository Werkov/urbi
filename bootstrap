#! /bin/sh

stderr ()
{
  local i
  local me
  me=$(basename "$0")
  for i
  do
    echo >&2 "$me: $i"
  done
}

error ()
{
  local exit="$1"
  shift
  stderr "$@"
  exit $exit
}

fatal ()
{
  error 1 "$@"
}

# packages PACKAGE-SYSTEM-NAME REGEXP
packages ()
{
  {
    perl -ne '
      if (/^(?:'"$2"'|package): (.*)/)
      {
        push @out, split /\s+/, $1;
      }
      END
      {
        use Text::Wrap;
        $Text::Wrap::columns = 60;
        print "*" x 66, "\n";
        print "You seem to be using '"$1"'.\n";
        print "At least the following packages are required:\n\n";
        print wrap("   ", "   ", sort @out), "\n\n";
        print "See README for more information.\n";
        print "*" x 66, "\n";
      }' <README
  } | sed -e "s,^,$0: * ,"
}

if test -x /opt/local/bin/port; then
  packages "MacPorts" "MacPorts"
elif test -x /usr/bin/apt-get; then
  packages "Debian or Ubuntu" "deb"
fi

# Failures do matter.
set -e

# The ast/ is generated, including its Makefile.
if test -f dev/ast-nodes-mk-gen && test -f src/ast/ast.yml; then
  python_check_mod_yaml='
import sys, imp
try:
  imp.find_module("yaml")
except ImportError:
  sys.exit(1)
'
  if ! python -c ''; then
    fatal "python is required"
  elif ! python -c "$python_check_mod_yaml"; then
    fatal "Python module \`yaml' is required.  See README."
  fi

  python dev/ast-nodes-mk-gen src/ast <src/ast/ast.yml \
    || error $? "

-----------------------------------------------------------------------
If the last error is \"./bootstrap: Python module \`yaml' is required\"
then you need to install Python Bindings for Yaml.

See README for instructions."
fi

# Finally, install the GNU Build System and our submodules.
exec build-aux/bootstrap "$@"
