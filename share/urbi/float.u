## ------- ##
## Float.  ##
## ------- ##

do Float
{
  addProto(Comparable);
  addProto(Orderable);

  function init(x) { self.set(x) };

  function sqr() { self * self };

  function '~='(x) { (self - x).abs <= epsilontilde };
  function '%='(x) { (1.0 - self / x).abs <= epsilonpercent };
  # FIXME: =~= cannot be correctly implemented without properties.
  function '=~='(x) { (self - x) <= self.delta + x.delta };
  function sgn() { if (self < 0) -1 else if (self > 0) 1 else 0 };

  function '!'() { self == false };

  // Create a list 0..(self - 1).
  function seq()
  {
    var result = [] |
    for| (var i = 0; i < self; i++)
      result.push_back(i.clone) |
    result
  };

  function '\'n'()
  {
    (self - self.rangemin) / (self.rangemax - self.rangemin)
  };

  function getNormHook() {
    function(n, value) {
      var rmin = self.rangemin|
      var rmax = self.rangemax|
      value = value*(rmax-rmin) + rmin|
      var value.rangemin = rmin|
      var value.rangemax = rmax|
      value.setProperty("'n", "updateHook",
	Float.getNormHook.inject("parent",parent).inject("name", name) )|
      parent.changeSlot(name, value)|
    }
  };

#   function propertyHook(parent, name, prop, value)
#   {
#     var modifiers = ["speed", "rangemin", "rangemax"]|
#     if (!modifiers.has(prop))
#       return|
#     if (prop == "speed")
#     {
#       parent.setProperty(name, "updateHook",
# 	function (name, value) {
# 	  var mod = (||)|
# 	  if (parent.hasProperty(name, "speed"))
# 	    _setSlot(mod, "speed", parent.getProperty(name, "speed"))|
# 	  var g = TrajectoryGenerator.new(getSlot(name), value, mod)|
# 	  g.run(parent, name);
# 	}.capture("parent").capture("name"));
#     }
#     else
#     {
#       if (!parent.hasProperty(name, "rangemin"))
# 	parent.setProperty(name, "rangemin", 0) |
#       if (!parent.hasProperty(name, "rangemax"))
# 	parent.setProperty(name, "rangemax", 0) |
#       parent.setProperty(name, "updateHook",
# 	function (name, value) {
# 	  var rmin = parent.getProperty(name, "rangemin")|
# 	  var rmax = parent.getProperty(name, "rangemax")|
# 	  if (value < rmin)
# 	    value = rmin
# 	  else if (value > rmax)
# 	    value = rmax |
# 	  var v = value+0|
# 	  var v.rangemin = rmin|
# 	  var v.rangemax = rmax|
# 	  parent.changeSlot(name, v)|
# 	  parent.getSlot(name).setSlot("'n",
# 		parent.getSlot(name).getSlot("'n"))|
# 	  parent.getSlot(name).setProperty("'n", "updateHook",
# 	    Float.getNormHook.inject("parent",parent).inject("name",name)) |
# 	  void
# 	}.capture("parent").capture("name"))|
#       var v = parent.getSlot(name) + 0|
#       var v.rangemin = parent.getProperty(name, "rangemin")|
#       var v.rangemax = parent.getProperty(name, "rangemax")|
#       parent.changeSlot(name, v)|
#       parent.getSlot(name).setProperty("'n", "updateHook",
# 	function(name, value) {
# 	  var rmin = parent.getSlot(name).rangemin|
# 	  var rmax = parent.getSlot(name).rangemin|
# 	  value = value*(rmax-rmin) + rmin|
# 	  var value.rangemin = rmin|
# 	  var value.rangemax = rmax|
# 	  parent.changeSlot(name, value)
# 	}.capture("parent").capture("name"))
#     }
#   };

  # Repeat \a action \a self times.
  function times (action)
  {
    for| (var i = 0; i < self; i++)
      action(i)
  };
};


