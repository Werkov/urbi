/*--------.
| Float.  |
`--------*/

do Float
{
  // The connectives == and < are builtins.
  //
  // Warning: We derive from Orderable first so that we use its
  // Object.==, otherwise String would use both Comparable.== and
  // Comparable.!= that bounce endlessly one on the other.
  setProtos([Orderable, Comparable]);

  function init(x) { set(x) };

  function sqr() { this * this };

  function '~='(x) { (this - x).abs <= epsilontilde };
  function '%='(x) { (1.0 - this / x).abs <= epsilonpercent };
  // FIXME: =~= cannot be correctly implemented without properties.
  function '=~='(x) { (this - x) <= delta + x.delta };
  function sgn() { if (this < 0) -1 else if (this > 0) 1 else 0 };

  // Create a list 0..(this - 1).
  function seq()
  {
    var result = [] |
    for| (var i = 0; i < this; i++)
      result.push_back(i.clone) |
    result
  };

  function '\'n'()
  {
    (this - rangemin) / (rangemax - rangemin)
  };

  function getNormHook() {
    function(n, value) {
      var rmin = rangemin|
      var rmax = rangemax|
      value = value*(rmax-rmin) + rmin|
      var value.rangemin = rmin|
      var value.rangemax = rmax|
      value.setProperty("'n", "updateHook",
	Float.getNormHook.inject("parent",parent).inject("name", name) )|
      parent.changeSlot(name, value)|
    }
  };

  function newPropertyHook(parent, name, prop, value)
  {
    installUpdateHookStack(parent, name);

    // Setup 'n mecanism
    {
      var slotName = name + "_quote_n";

      if (parent.locateSlot(slotName).isNil)
      {
        function quote_n()
        {
          var max = parent.getProperty(name, "rangemax") |
          var min = parent.getProperty(name, "rangemin") |
          var val =  parent.getSlot(name) |
          return (val - min) / (max - min) |
        };

        function hook(slot, val)
        {
          var max = parent.getProperty(name, "rangemax") |
          var min = parent.getProperty(name, "rangemin") |
          updateSlot(name, min + (max - min) * val) |
          return |
        };

        parent.setSlot(slotName, quote_n);
        parent.setProperty(slotName, "updateHook", hook);
      };
    };

    function rangeminHook(slot, val)
    {
      var min = getProperty(slot, "rangemin");
      if (val < min)
        min
      else
        val
    };

    function rangemaxHook(slot, val)
    {
      var max = getProperty(slot, "rangemax");
      if (val > max)
        max
      else
        val
    };

    switch (prop)
    {
      case "rangemin":
        parent.setProperty(name, "updateHook", rangeminHook);
      case "rangemax":
        parent.setProperty(name, "updateHook", rangemaxHook);
    };
  };

  // Repeat \a action \a this times.
  function times (action)
  {
    for| (var i = 0; i < this; i++)
      action()
  };

  // Repeat \a action \a this times.
  function each (action)
  {
    for| (var i = 0; i < this; i++)
      action(i)
  };
};


