/*
 * Copyright (C) 2009-2012, Gostai S.A.S.
 *
 * This software is provided "as is" without warranty of any kind,
 * either expressed or implied, including but not limited to the
 * implied warranties of fitness for a particular purpose.
 *
 * See the LICENSE file for more information.
 */

requireFile("urbi/loadable.u");
requireFile("urbi/nil.u");
requireFile("urbi/channel.u");
requireFile("urbi/global.u");
requireFile("urbi/object.u");
requireFile("urbi/boolean.u");
requireFile("urbi/control.u");

const var 'package'.lang.Mutex = Tag.new();
do (Mutex)
{
  var type = "Mutex";
  function asMutex() { this };
  var asString = Object.getSlotValue("asString");

  function init(maxQueue=inf)
  {
    var this.sem = Semaphore.new(1) |
    if (maxQueue == inf)
      initInf()
    else
      initMaxQueue(maxQueue)
  };

  function initInf()
  {
    function this.onEnter()
    {
      if (!Job.current.hasSlot("$mutexRelease"))
        var Job.current.'$mutexRelease' = [] |
      var l = Job.current.'$mutexRelease' |
      l.insertBack(false) |
      this.lock() |
      // This will not be executed if the semaphore is not acquired, but we
      // have to save this state because the unlock would be executed in all
      // cases.
      // This fixes the use case where job is terminated (by a stop for example)
      // while in lock()
      l.removeBack() |
      l.insertBack(true) |
    } |
    function this.onLeave()
    {
      var l = Job.current.'$mutexRelease' |
      if (l.back())
        this.unlock() |
      l.removeBack() |
    } |
  };

  function initMaxQueue(maxQueue)
  {
    var this.queueSize = 0|
    var this.ownerJob = nil|
    function this.onEnter()
    {
      if (this.ownerJob && queueSize >= maxQueue)
        Job.current.breakTag(-1, nil)|
      queueSize++|
      this.lock()|
      queueSize--|
      this.ownerJob = Job.current
    }|
    function this.onLeave()
    {
      if (ownerJob == Job.current)
      {
        this.unlock()|
        ownerJob = 0
      }
    }
  };

  function lock()
  {
    sem.acquire()
  };

  function unlock()
  {
    sem.release()
  };

  function '!'()
  {
    NotMutex.new(this)
  };
};

var 'package'.lang.NotMutex = Mutex.new();
do (NotMutex)
{
  var type = "NotMutex";
  function asNotMutex() { this };
  var asString = Object.getSlotValue("asString");

  function clone()
  {
    var res = Mutex.new()|
    res.protos = [NotMutex]|

    function res.onEnter()
    {
      this.unlock() |
    } |

    function res.onLeave()
    {
      // Ensure that the lock is acquired.
      var acquired = false |
      try
      {
        this.lock() |
        acquired = true |
      }
      finally
      {
        if (!acquired)
          this.onLeave() |
      } |
    } |

    res;
  };

  function init(var mtx)
  {
    var this.mtx = mtx
  };

  function lock()
  {
    mtx.unlock()
  };

  function unlock()
  {
    mtx.lock()
  };
};
