/*
 * Copyright (C) 2010, Gostai S.A.S.
 *
 * This software is provided "as is" without warranty of any kind,
 * either expressed or implied, including but not limited to the
 * implied warranties of fitness for a particular purpose.
 *
 * See the LICENSE file for more information.
 */

/*----------.
| Channel.  |
`----------*/

class Global.Channel
{
  /// Display nothing if false.
  var enabled = true;
  /// Use asTopLevelPrintable if set (display the string 'foo' as '"foo"')
  var quote = true;

  /// By default, the Channel prototype has no tag.
  var name = "";

  function init(x)
  {
    var this.name = x
  };

  // Top-level channel.
  var topLevel = new("");
  Lobby.setProtos([topLevel]); //Now 'lobby << 1' displays in "lobby"'s context.

  // Warning messages.
  var warning = new("warning");
  warning.quote = false;

  // Sort of /dev/null.
  var null = new("null");
  null.enabled = false;

  function '<<'(x)
  {
    if (enabled)
    {
      var toPrint = { if (quote) x.asToplevelPrintable else x.asString }|
      if (!toPrint.isNil)
	lobby.send(toPrint, name);
    }
  };
};

// Default channels.
do (Global)
{
  var cout = Channel.new("output");
  var cerr = Channel.new("error");
  cerr.quote = false;
  var clog = Channel.new("clog");

  function warn(msg)
  {
    Channel.warning << ("*** " + msg)
  };
};

{} // Global.asString is not yet defined: evaluate to void to avoid an error.
