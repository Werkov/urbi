class Global.Control
{
  function detach
  {
    spawn(closure() { call.evalArgAt(0) }, false)
  };

  function disown
  {
    spawn(closure() { call.evalArgAt(0) }, true)
  };


  // at_(test, on_true, on_false)
  //
  // Takes three expressions, a test and some code to execute each
  // time the test becomes true and some code to execute each time the
  // test becomes false.
  function at_
  {
    registerAtJob(call.args[0], call.args[1], call.args[2])
  };

  // 'every|sleep'(deadline, delay)
  //
  // Prepare the next iteration for every|, which should happen at
  // deadline + delay.  Return deadline.
  function 'every|sleep'(deadline, delay)
  {
    deadline += delay |
    var delta = deadline - shiftedTime |
    if (0 < delta)
      sleep(delta)
    else
      deadline -= delta |
    deadline
  };

  // whenever_(test, on_true, on_false)
  //
  // Takes three expressions, a test and some code to execute each
  // time the test is true and some code to execute each time the test
  // is false.
  function whenever_
  {
    detach ({
      loop call.evalArgAt ({ if (call.evalArgAt (0)) 1 else 2 })
    })
  };

  // persist takes an expression and a delay, and returns an object
  // whose val slot evaluates to true if the expression has been
  // continously true for this delay and false otherwise.
  //
  // This function is used to implement
  //   at (condition ~ delay) action [onleave leaveaction]
  // as
  //   var u = persist (condition, delay);
  //   at (u.val) action [onleave leaveaction]
  //
  // The "persist" action will be controlled by the same tags as
  // the initial "at" block.
  function persist
  {
    var res = false |
    var tag = Tag.new("persist".fresh) |
    var delay = call.evalArgAt (1) |
    Control.at_ (call.evalArgAt (0),
                 detach({tag: { sleep (delay) | res = true }}),
                 detach({ res = false | tag.stop })) |
    function () { res }
  };

  function finally(action, reaction)
  {
    var t = Tag.new |
    at (t.leave?)
      reaction() |
    t: action()
  };
};

// Import those at the global level
var Global.detach = Control.getSlot("detach");
var Global.disown = Control.getSlot("disown");
var Global.persist = Control.getSlot("persist");
