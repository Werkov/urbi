## -------- ##
## Object.  ##
## -------- ##

# Cannot use "copy", nor "from" which are k1 reserved words :) :) :)
var Object.slotCopy = function (frm, to) {
  # This is annoying: one has to specify "self" here, otherwise the
  # setSlot goes to the locals_ :(
  self . setSlot(to, getSlot(frm))
};
Object.slotCopy ("addParent", "inherit");
Object.slotCopy ("removeParent", "disinherit");


## --------- ##
## Channel.  ##
## --------- ##

// Does not have anything special.  Yet.
class Lobby.Channel
{
  var init = function (x) { var self.name = x };
  var <<   = function (x) { x.print (name); {} };
};


## ------- ##
## Float.  ##
## ------- ##

do Float
{
  var init = function (x) { self.set(x) };

  var sqr = function () { self * self };

  var += = function (x) { self.set (self + x) };
  var -= = function (x) { self.set (self - x) };
  var *= = function (x) { self.set (self * x) };
  var /= = function (x) { self.set (self / x) };

  // One would like to write
  //
  // ++ = function () { var res = self.clone; self += 1; res };
  //
  // but it does not return a Float, it returns an Object which
  // has Float as *grand*-parent.  As a result, it does not have
  // a value (it is not an Atom<Float>).  This might be to change,
  // but it is to me (akim) unclear how.
  //
  // This does not work either: var res = new Float(self), because it
  // creates an Object which derives from Float, but which is not a
  // Atom<Float>.  Not nice, eh?

  var ++ = function () { var res = 0; res.set(self); self += 1; res };
  var -- = function () { var res = 0; res.set(self); self -= 1; res };
};

## ----- ##
## Math. ##
## ----- ##

class Lobby.Math
{
  var abs    = function (x) { x.abs };
  var acos   = function (x) { x.acos };
  var asin   = function (x) { x.asin };
  var atan   = function (x) { x.atan };
  var cos    = function (x) { x.cos };
  var exp    = function (x) { x.exp };
  var log    = function (x) { x.log };
  var random = function (x) { x.random };
  var round  = function (x) { x.round };
  var sgn    = function (x) { x.sgn };
  var sin    = function (x) { x.sin };
  var sqr    = function (x) { x.sqr };
  var sqrt   = function (x) { x.sqrt };
  var tan    = function (x) { x.tan };
  var trunc  = function (x) { x.trunc };
};
Object inherits Math;

## -------- ##
## String.  ##
## -------- ##

# We do have ==, <, and != as builtins.
# FIXME: Introduce "Sortable", or whatever, which defines these
# operators, and derive from it.
do String
{
  var <= = function (rhs) { self < rhs || self == rhs };
  var >  = function (rhs) { rhs < self };
  var >= = function (rhs) { rhs < self || self == rhs };
};

## ------------- ##
## Ready to go.  ##
## ------------- ##

# This string is special and expected by uconsole-check as the
# signal that we have loaded urbi.u.  Messages before, and including
# this one, are ignored.
"Urbi is up and running.";
