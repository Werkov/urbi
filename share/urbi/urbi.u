# FIXME: this code should be split in several files, once we have
# a "load" that works.

## -------- ##
## Object.  ##
## -------- ##

{
  # Cannot use "copy", nor "from" which are k1 reserved words :) :) :)
  var Object.slotCopy = function (frm, to) {
    # This is annoying: one has to specify "self" here, otherwise the
    # setSlot goes to the locals_ :(
    self . setSlot(to, getSlot(frm))
  };
  Object.slotCopy ("addProto", "inherit");
  Object.slotCopy ("removeProto", "disinherit");
  
  Object.slotCopy ("sameAs", "==");
  void
};

## ----------------- ##
## VisibilityScope.  ##
## ----------------- ##

# Must be before the first 'do' or 'class'
# Do and class blocks are inheriting from VisibilityScope.
# VisibilityScope has special setSlot and updateSlot preventing to write to
# the locals. Only the target can be modified implicitly
# The slot __target is expected to be set to the target of the block.
{
  var Object.VisibilityScope = Object.clone;

  var VisibilityScope.updateSlot = function(x, y)
  {
    __target.updateSlot(x, getSlot("y"));
  };
  
  var VisibilityScope.setSlot = function(x, y)
  {
    __target.setSlot(x, getSlot("y"));
  };

  void
};

## --------- ##
## Constants ##
## --------- ##

class Object.Constants
{
  var true   = 1.0;
  var false  = 0.0;

  # FIXME: use real float infinity, or a special token, but not that
  var inf    = 999999999999999.0;

  var pi     = 3.14159265358979323846264338327950288;
  void;
};
Object.addProto (Constants);


## --------- ##
## Channel.  ##
## --------- ##

// Does not have anything special.  Yet.
class Object.Channel
{
  var init = function (x) { var self.name = x };
  var '<<' = function (x) { x.print (name); {} };
  void;
};

// Default channels.
do Object
{
  // Long names are k1 compatible.
  var output  = new Channel("output");
  var error   = new Channel("error");
  var warning = new Channel("warning");
  // Short names are user compatible.
  var cout  = output;
  var cerr  = error;

  var warn = function (msg) { echo (msg, "warning") };
  void;
};


## --------- ##
## Void      ##
## --------- ##
do void
{
  // void prints nothing.
  var print = function()
  {
  };
  // void is a singleton.
  var clone = function()
  {
    self;
  };
  void;
};


## ---- ##
## nil. ##
## ---- ##

do nil
{
  // nil is a singleton.
  var clone = function () { self };
  var isNil = Lobby.true;
  var '=='  = function (x) { x.isNil };

  var Object.isNil = false;
  void;
};


## -------- ##
## Closure. ##
## -------- ##

do Closure
{
  var apply = function (args, _ctx) {
    # We create a subcontext using clone in which the function arguments
    # will be bound.
    getSlot ("func").apply (args, context.clone)
  };
  void;
};


## ------------ ##
## Comparable.  ##
## ------------ ##

class Object.Comparable
{
  var '!=' = function (rhs) { ! (self == rhs) };
  var '==' = function (rhs) { ! (self != rhs) };
  void;
};


## ------- ##
## Float.  ##
## ------- ##

do Float
{
  var init = function (x) { self.set(x) };

  var sqr = function () { self * self };

  var '+=' = function (x) { self.set (self + x) };
  var '-=' = function (x) { self.set (self - x) };
  var '*=' = function (x) { self.set (self * x) };
  var '/=' = function (x) { self.set (self / x) };

  // One would like to write
  //
  // '++' = function () { var res = self.clone; self += 1; res };
  //
  // but it does not return a Float, it returns an Object which
  // has Float as *grand*-proto.  As a result, it does not have
  // a value (it is not an Atom<Float>).  This might be to change,
  // but it is to me (akim) unclear how.
  //
  // This does not work either: var res = new Float(self), because it
  // creates an Object which derives from Float, but which is not a
  // Atom<Float>.  Not nice, eh?

  var '++' = function () { var res = 0; res.set(self); self += 1; res };
  var '--' = function () { var res = 0; res.set(self); self -= 1; res };

  var '!' = function () { self == 0; };
  void;
};



## ----- ##
## List. ##
## ----- ##

do List
{
  var has = function (e)
  {
    # FIXME: for-in is not implemented yet.
    for (var t = self; t.size; t = t.tail)
      if (t.front == e)
	return true;
    return false;
  };
  void;
};

# k1 compatibility.
do Object
{
  var size = function(l)
  { 
    warn("`size(list)' is deprecated, use `list.size'");
    l.size
   };
  void;
};


## ----- ##
## Math. ##
## ----- ##

class Object.Math
{
  var abs    = function (x) { x.abs };
  var acos   = function (x) { x.acos };
  var asin   = function (x) { x.asin };
  var atan   = function (x) { x.atan };
  var cos    = function (x) { x.cos };
  var exp    = function (x) { x.exp };
  var log    = function (x) { x.log };
  var random = function (x) { x.random };
  var round  = function (x) { x.round };
  var sgn    = function (x) { x.sgn };
  var sin    = function (x) { x.sin };
  var sqr    = function (x) { x.sqr };
  var sqrt   = function (x) { x.sqrt };
  var tan    = function (x) { x.tan };
  var trunc  = function (x) { x.trunc };
  void;
};
Object.addProto (Math);



## ----------- ##
## Orderable.  ##
## ----------- ##

class Object.Orderable
{
  var '<'  = function (rhs) { rhs > self };
  var '<=' = function (rhs) { self < rhs || self == rhs };
  var '>'  = function (rhs) { rhs < self };
  var '>=' = function (rhs) { self > rhs || self == rhs };
  void;
};


## -------- ##
## String.  ##
## -------- ##

# The connectives == and < are builtins.
# FIXME: I'd like to put the addProto in a do, but then it goes
# to the locals :(
String.addProto(Comparable);
String.addProto(Orderable);


## ------------- ##
## Ready to go.  ##
## ------------- ##

# This string is special and expected by uconsole-check as the
# signal that we have loaded urbi.u.  Messages before, and including
# this one, are ignored.
"Urbi is up and running.";
