/*-------.
| List.  |
`-------*/

do (List)
{
  // Whether e is in the list.
  function has(e)
  {
    return any (function (i) { i == e })
  };

  // FIXME: We need to use a single convention for physical-equality
  // related functions. The first on used was prefix 'mem', as in
  // memSameAs, from Caml. We should either rename this method as
  // memHas, or choose another convention.
  function hasSame(e)
  {
    return any (function (i) { i === e })
  };

  function '=='(other)
  {
    if (size != other.size)
      return false|
    var l = this|
    var r = other|
    while (!l.empty && !r.empty)
    {
      if (l.head != r.head)
        return false|
      l = l.tail|
      r = r.tail|
    }|
    return true
  };

  function '<' (other)
  {
    var l = this|
    var r = other|
    while (!l.empty && !r.empty)
    {
      if (l.head < r.head)
        return true|
      if (l.head > r.head)
        return false|
      l = l.tail|
      r = r.tail|
    }|
    return l.empty && !r.empty
  };

  // Same contents except occurrences of e.
  // Not in place.
  function remove(e)
  {
    var res = this - [e] |
    clear |
    for| (var i: res)
      insertBack (i) |
    res
  };

  // Subtract a list from this.
  function '-' (rhs)
  {
    var res = [] |
    for| (var i: this)
      if (i not in rhs)
	res.insertBack(i) |
    return res
  };

  function empty()
  {
    return size == 0
  };

  // Add head, symmetric of tail
  copySlot ("front", "head");
  copySlot ("insertBack", "<<");

  // Concatenate the string representation of the members, separated by \a sep
  function join(sep)
  {
    if (empty)
      ""
    else
      foldl_head(function (a, b) { a.asString + sep + b.asString })
  };

  // We might want separate Range objects, with a literal syntax
  // (a..b, a:b, ...).
  function range
  {
    var fr = 0;
    var to = size;
    if (call.argsCount >= 2) // FIXME: throw when > 2
    {
      fr = call.argAt(0);
      to = call.argAt(1);
    }
    else
      to = call.argAt(0);
    var res = [];
    for (var i = fr; i < to; i++)
      res << this[i];
    res;
  };


  /*-------------------------.
  | Functional programming.  |
  `-------------------------*/

  // Build a new list containing the result of \a f applied to all elements
  function map (f)
  {
    var res = [] |
    for| (var i: this)
      res.insertBack (f (i)) |
    res
  };

  function foldl(action, value)
  {
    var res = value|
    for (var l = this; !l.empty; l = l.tail)
      res = action(res, l.head)|
    res
  };

  function foldl_head(action)
  {
    tail.foldl(action, head)
  };

  // Whether at least one element verifies the \a f predicate.
  function any (f)
  {
    for| (var i: this)
      if (f (i))
        return true |
    false
  };

  // Whether all the elements verify the \a f predicate.
  function all (f)
  {
    for| (var i: this)
      if (!f (i))
        return false |
    true
  };

  // The list of elements verifying the \a f predicate.
  function filter (f)
  {
    var res = [] |
    for| (var elt: this)
      if (f(elt))
        res << elt |
    return res
  };

  function asString ()
  {
    var res = "" |
    if (size)
    {
      res = front.acceptVoid.asPrintable |
      for| (var elt: tail)
        res += ", " + elt.acceptVoid.asPrintable |
    } |
    "[" + res + "]"
  };

  // Pattern matching
  function matchAgainst(handler, pattern)
  {
    if (!pattern.isA(List) || pattern.size != size)
      return false |
    // FIXME: do this with a crossed map
    var i = 0 |
    for| (var e : this)
    {
      if (!handler.matchPattern(pattern[i], e))
        return false |
      i++ |
    } |
    return true
  };

  function min(var comp = function (a, b) { a < b })
  {
    if (empty)
      throw Exception.new("list cannot be empty") |
    var res = head|
    for| (var elt in tail)
      if (comp(elt, res))
        res = elt |
    res
  };

  function max(var comp = function (a, b) { b < a })
  {
    min(comp)
  };
};


function Object.each(f)
{
  asList.each(f)
};

function Object.'each|'(f)
{
  asList.'each|'(f)
}
