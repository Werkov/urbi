## ----- ##
## List. ##
## ----- ##

do List
{
  // Whether e is in the list.
  function has(e)
  {
    for| i in self
    {
      if (i == e)
	return true
    } |
    return false
  };

  function hasSame(e)
  {
    for| i in self
    {
      if (i === e)
        return true
    } |
    return false
  };

  // Same contents except occurrences of e.
  function remove(e)
  {
    var res = self - [e] |
    clear |
    for| i in (res) {
      push_back (i)
    } |
    res
  };

  // Subtract a list from self.
  function '-' (rhs)
  {
    var res = [] |
    for| i in self
    {
      if (!rhs.has(i))
	res.push_back(i)
    } |
    return res
  };

  function empty
  {
    return size == 0
  };

  # The Lisp-like name.
  copySlot ("front", "head");

  function insert(e)
  {
    echo ("List.insert is deprecated, please use List.push_back") |
    push_back(e)
  };

  # Access element at index \a idx
  # FIXME: Inneficient. Do we want to implement Urbi lists as C++ std::vectors?
  # FIXME: Do we want to make [] available for this contstruct?
  # FIXME: Sadly, 'at' is reserved, and adding it as an identifier generates conflicts
  function idx(idx)
  {
    var res = self|
    for| (var i = 0; i < idx; i++)
      res = res.tail|
    return res.head|
  };


  ## ------------------------ ##
  ## Functional programming.  ##
  ## ------------------------ ##

  # Build a new list containing the result of \a f applied to all elements
  function map (f)
  {
    var res = [] |
    for| i in self { res += [f (i)] } |
    res
  };

  # Apply \a f on every element
  function each (f)
  {
    for| i in self { f (i) } |
    void
  };

  # Check whether at least one element verifies the \a f predicate
  function any (f)
  {
    for i in self { if (f (i)) return true } |
    false
  };

  # Check whether all elements verifies the \a f predicate
  function all (f)
  {
    for i in self { if (!f (i)) return false } |
    true
  };

  # Get the string representation
  function asString ()
  {
    if (self === List)
      return "<List>" |
    var res = "[" |
    if (self.size)
    {
      res += self.front.asString |
      for| elt in self.tail
      {
        res += ", " + elt.asString |
      }
    } |
    res += "]"
  };
};
