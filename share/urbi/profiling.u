/*
 * Copyright (C) 2010, Gostai S.A.S.
 *
 * This software is provided "as is" without warranty of any kind,
 * either expressed or implied, including but not limited to the
 * implied warranties of fitness for a particular purpose.
 *
 * See the LICENSE file for more information.
 */

requireFile("urbi/loadable.u");
requireFile("urbi/call-message.u");
requireFile("urbi/channel.u");
requireFile("urbi/global.u");
requireFile("urbi/exception.u");
requireFile("urbi/control.u");

/*-----------------------.
| Profiling operations.  |
`-----------------------*/


class Global.Profiling
{
  /// timen(CODE, #ITERATIONS).
  /// e.g. timen(2+2, 42).
  function timen
  {
    echo (this.new(call.argAt(0), call.argAt(1)))
  };

  /// timen(CODE, #ITERATIONS).
  /// e.g. init(2+2, 42).
  function init
  {
    if (call.argsCount != 2)
      throw Exception.Arity.new("init", call.argsCount, 2);
    var this.expr   = call.argString(0);
    var this.niters = call.evalArgAt (1);
    var start_time = time;
    var start_cycle = cycle |

    // Bench.
    for (niters)
      call.evalArgAt (0) |

    var this.ncycles = cycle - start_cycle;
    var this.expired = time - start_time;
  };

  // Display the results.
  function asString()
  {
    if (this === Profiling)
      return "Profiling";

      "Profiling information\n"
    + "  Expression:       " + expr + "\n"
    + "  Iterations:       " + niters + "\n"
    + "  Cycles:           " + ncycles + "\n"
    + "  Total time:       " + expired + " s\n"
    + "  Single iteration: " + expired / niters + " s\n"
    + "                    " + ncycles / niters + " cycles";
  };
};

class Global.FunctionCall
{
  function asString()
  {
    "%s('%s', %s, %.6f, %.6f)"
    % [type, name, calls, selfTime, selfTimePer]
  };
};

class Global.Profile
{
  function asString()
  {
    var str = "Profile(\n" |
    str += "  Yields: %s\n"                  % yields |
    str += "  Total time: %.6fs\n"           % totalTime |
    str += "  Wall clock time: %.6fs\n"      % wallClockTime |
    str += "  Function calls: %s\n"          % totalCalls |
    str += "  Max function call depth: %s\n" % maxFunctionCallDepth |
    str += "\n" |

    str += "  .--------------+---------+---------------+---------------.\n" |
    str += "  |   Function   |  Calls  |   Self time   | Self time per |\n" |
    str += "  |--------------+---------+---------------|---------------|\n" |

    var totalSelfTimes = 0 |
    var totalSelfTimePers = 0 |
    for (var c: calls)
    {
      str += "  | %12s | %7s | %13.6f | %13.6f |\n"
               % [c.name, c.calls, c.selfTime, c.selfTimePer] |
      totalSelfTimes    += c.selfTime |
      totalSelfTimePers += c.selfTimePer |
    } |

    str += "  |--------------+---------+---------------+---------------|\n" |
    str += "  | %12s | %7s | %13.6f | %13.6f |\n"
             % ["Totals", totalCalls, totalSelfTimes, totalSelfTimePers] |
    str += "  '--------------+---------+---------------+---------------'\n" |
    str += ")\n"
  };
};
