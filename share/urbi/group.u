class Global.Group
{
  function init ()
  {
    var self.members = [];
  };

  function add(g)
  {
    members.push_back(g);
  };

  copySlot("add", "<<");

  // Implements addgroup.  Cannot use "group" as an identifier,
  // reserved by k1.
  function addGroups(g)
  {
    members += g;
  };

  function remove(g)
  {
    members = members.remove(g);
  };

  // Implements delgroup.  Cannot use "group" as an identifier,
  // reserved by k1.
  function removeGroups(g)
  {
    members = self.members - g;
  };

  // FIXME: This implementation always evaluates the
  // arguments. There's no other way to do it for now.
  function fallback
  {
    function action (m)
    {
      m.getSlot(call.message).apply([m] + call.evalArgs)
    }|
    getSlot("action").makeClosure|
    members.map(getSlot("action"))
  };
};
