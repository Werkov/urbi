# k1 compatibility.
class Global.Kernel1Functions
{
  var asString = "<Kernel1Functions>";

  function copy(o)
  {
    warn("`copy(o)' is deprecated, use `o.copy'") |
    o.copy
  };

  function ping ()
  {
    echo ("pong time=" + time.asString);
  };

  /// Returns true if argument is defined. Argument can be of the form a.b.c.
  function isdef
  {
    var s = call.argString(1).split(". ") |
    var base = call.context |
    for c in s {
      var v = getSlot("base").locateSlot(c) |
      if (v.sameAs(nil))
        return false |
      base = getSlot("v").getSlot(c).apply([getSlot("v").getSlot(c)])
    } |
    return true
  };

  function seq(n)
  {
    warn("`seq(number)' is deprecated, use `number.seq'") |
    n.seq
  };

  function size(l)
  {
    warn("`size(list)' is deprecated, use `list.size'") |
    l.size
  };

  function strlen(s)
  {
    s.length
  };
};

# K1 compatibility: import the k1 functions.
Global.addProto(Global.Kernel1Functions);

class Global.Kernel1Methods
{
  ## --------------------------------- ##
  ## Dirty tricks to change foo.load.  ##
  ## --------------------------------- ##

  function on()
  {
    self.load = 1;
    self
  };

  function off()
  {
    self.load = 0;
    self
  };

  function switch()
  {
    if (self.load)
      self.load = 0
    else
      self.load = 1;
    self
  };
};
Object.addProto(Global.Kernel1Methods);



# Deprecated commands from k1.
# FIXME: Some commands should be rewritten once it becomes possible.
class Global.DeprecatedCommands
{
  var asString = "<DeprecatedCommands>";

  var deprecated_ = function () { echo("`" + name + "' is deprecated." ) };

  function deprecate(slotName)
  {
    self.setSlot(slotName, self.getSlot("deprecated_").clone());
    self.getSlot(slotName).context = self.getSlot("deprecated_").context.clone();
    self.getSlot(slotName).inject("name", slotName);
  };

  for i in
  [
    "commands",
    "connections",
    "devices",
    "events",
    "functions",
    "reset",
    "runningcommands",
    "strict",
    "taglist",
    "undefall",
    "unstrict",
    "uservars",
    "vars"
  ]
  {
    deprecate(i)
  };
};

Global.addProto(Global.DeprecatedCommands);
