# k1 compatibility.
class Protos.Kernel1Functions
{

  // isdef("name"): Check whether "name" is defined (here or above).
  function isdef
  {
    !call.target.locateSlot(call.argString(1)).isNil;
  };

  function ping ()
  {
    echo ("pong time=" + time.asString);
  };

  function seq(n)
  {
    warn("`seq(number)' is deprecated, use `number.seq'");
    n.seq
  };

  function size(l)
  { 
    warn("`size(list)' is deprecated, use `list.size'");
    l.size
  };

  function strlen(s)
  {
    s.length
  };


  ## --------------------------------- ##
  ## Dirty tricks to change foo.load.  ##
  ## --------------------------------- ##

  function on()
  {
    self.load = 1;
    self
  };

  function off()
  {
    self.load = 0;
    self
  };

  function switch()
  {
    if (self.load)
      self.load = 0
    else
      self.load = 1;
    self
  };
};

Protos.addProto(Protos.Kernel1Functions);

# Deprecated command from k1.
# FIXME: Some commands should be rewritten once it becomes possible.
class Protos.DeprecatedCommands
{
  var deprecated_ = function () { echo("`" + name + "' is deprecated." ) };

  function deprecate(f)
  {
    setSlot(f, getSlot("deprecated_").clone());
    getSlot(f).capture("name", f);
  };

  for i in
  [
    "commands",
    "connections",
    "devices",
    "events",
    "functions",
    "reset",
    "runningcommands",
    "strict",
    "taglist",
    "undefall",
    "unstrict",
    "uservars",
    "vars"
  ]
  {
    deprecate(i)
  };
};

Protos.addProto(Protos.DeprecatedCommands);
