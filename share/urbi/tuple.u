class Global.Tuple
{
  function init
  {
    var names = ["first", "second", "third", "fourth", "fifth", "sixth"] |
    var self.members = call.evalArgs |
    var self.size = members.size |
    var tuple = self |
    size.times(function (i) {
      if (names.size > i)
        tuple.setSlot(names.nth(i), function () { members.nth(i) })
    })
  };

  function asString ()
  {
    if (self === Tuple)
      "<TupleClass>"
    else
      "(" + members.map(methodToFunction("asPrintable")).join(", ") + ")"
  };

  function sameAs(other)
  {
    return members == other.members
  };

  function '<' (other)
  {
    members < other.members
  };

  function nth(n)
  {
    members.nth(n)
  };
};

{
  function makeTupleClass(name, size)
  {
    var res = Tuple.clone|
    var res.protoName = name|
    # FIXME: Check the number of argument in the ctor
    Global.setSlot(name, res)
  };

  makeTupleClass("Pair", 2);
  makeTupleClass("Triplet", 3);
};
