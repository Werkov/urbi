{
  function makeTupleClass(name, size)
  {
    var names = ["first", "second", "third", "fourth", "fifth", "sixth"];

    class Res
    {
      protoName = name;
      var members = List.new(size, nil);
      var size = size;

      function asString ()
      {
        var strs = members.map(methodToFunction("asPrintable")) |
        "(" + strs.join(", ") + ")"
      };

      function init
      {
        // if (call.argsCount >= size) throw;
        members = call.evalArgs |
        members += members.range(size - members.size) |
      };

      var idx = 0;
      for (var name: names.range(size))
      {
        var n = idx;
        setSlot(name, function () { members[n] });
        setProperty(name, "updateHook",
          function (name, val) {
            // Copy members if needed before altering it
            if (!ownsSlot("members"))
              members = members.clone;
            members[n] = val;
            void;
          });
        idx++;
      };

      function sameAs(other)
      {
        return members == other.members
      };

      function '<' (other)
      {
        members < other.members
      };

      function '[]'(n)
      {
        members[n]
      };
    };

    Global.setSlot(name, Res);
  };

  makeTupleClass("Pair", 2);
  makeTupleClass("Triplet", 3);
};
