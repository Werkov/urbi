# This is a meta class, used to generate specific tuple classes (Pair, ...)
class Global.TupleClass
{
  var protoName = "TupleClass";

  function init(name, size)
  {
    var names = ["first", "second", "third", "fourth", "fifth", "sixth"];
    var self.size = size|
    var self.protoName = name|
    var self.init = function
    {
      var self.members = call.evalArgs;
      # FIXME: check the number of argument against self.size.
    }|

    # Define named accessors
    size.times(function (i) {
      if (names.size > i)
        self.setSlot(names.nth(i), function () { members.nth(i) }.capture("i"))
    }.makeClosure)
  };

  function asString ()
  {
    if (self === TupleClass)
      "<TupleClass>"
    else
      "(" + members.map(methodToFunction("asPrintable")).join(", ") + ")"
  };

  function '<' (other)
  {
    var l = self.members|
    var r = other.members|
    while (!l.empty && !r.empty)
    {
      if (l.head < r.head)
        return true|
      if (l.head > r.head)
        return false|
      l = l.tail|
      r = r.tail|
    }|
    # FIXME: raise error, tuple sizes mismatch
    return false|
  };
};

var Global.Pair = TupleClass.new("Pair", 2);
var Global.Triplet = TupleClass.new("Triplet", 3);
