class Global.Tuple
{
  var protoName = "Tuple";

  function init
  {
    var names = ["first", "second", "third", "fourth", "fifth", "sixth"];
    var self.members = call.evalArgs;
    var self.size = members.size;
    size.times(function (i) {
      if (names.size > i)
        self.setSlot(names.nth(i), function () { members.nth(i) }.capture("i"))
    }.makeClosure)
  };

  function asString ()
  {
    if (self === Tuple)
      "<TupleClass>"
    else
      "(" + members.map(methodToFunction("asPrintable")).join(", ") + ")"
  };

  function '<' (other)
  {
    var l = self.members|
    var r = other.members|
    while (!l.empty && !r.empty)
    {
      if (l.head < r.head)
        return true|
      if (l.head > r.head)
        return false|
      l = l.tail|
      r = r.tail|
    }|
    # FIXME: raise error, tuple sizes mismatch
    return false|
  };

  function nth(n)
  {
    members.nth(n)
  };
};

{
  function makeTupleClass(name, size)
  {
    var res = Tuple.clone|
    var res.protoName = name|
    # FIXME: Check the number of argument in the ctor
    Global.setSlot(name, res)
  };

  makeTupleClass("Pair", 2);
  makeTupleClass("Triplet", 3);
};
