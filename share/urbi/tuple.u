class Tuple
{
  function asString ()
  {
    "(" + members.map(methodToFunction("asPrintable")).join(", ") + ")"
  };

  function '=='(other)
  {
    return members == other.members
  };

  function '<' (other)
  {
    members < other.members
  };

  function '[]'(n)
  {
    members[n]
  };

  function '[]='(n, v)
  {
    members[n] = v
  };
};

{
  function makeTupleClass(name, size)
  {
    var names = ["first", "second", "third", "fourth", "fifth", "sixth"];

    class Res : Tuple
    {
      type = name;
      var members = [nil] * size;
      var size = size;

      function init
      {
        // if (call.argsCount >= size) throw;
        members = call.evalArgs |
        members += members.range(size - members.size) |
      };

      var idx = 0;
      for (var name: names.range(size))
      {
        var n = idx;
        setSlot(name, function () { members[n] });
        setProperty(name, "updateHook",
          function (name, val) {
            // Copy members if needed before altering it
            if (!hasLocalSlot("members"))
              members = members.clone;
            members[n] = val;
            void;
          });
        idx++;
      };
    };
    Global.setSlot(name, Res);
  };

  makeTupleClass("Pair", 2);
  makeTupleClass("Triplet", 3);
};
