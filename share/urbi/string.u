do (String)
{
  // The connectives == and < are builtins.
  //
  // Warning: We derive from Orderable first so that we use its
  // Object.==, otherwise String would use both Comparable.== and
  // Comparable.!= that bounce endlessly one on the other.
  setProtos([Orderable, Comparable, RangeIterable]);

  // It is more natural to refer to the length of a string.  Besides,
  // other encodings will make a difference between size and length.
  copySlot("size", "length");

  // Allow to use a string in a "for" loop.
  function asList() { split("") };

  // If the Formatter object is not present, provide a simple implementation
  // of '%', only handling '%s'.
  if (!hasSlot("Formatter"))
    var this.'%' = function(list)
  {
    if (!list.isA(List))
      list = [list] |
    var chunks = split("%s") |
    if (list.size != chunks.size - 1)
      throw "Invalid format: wrong number of arguments" |
    var res = "" |
    for| (var el: chunks)
    {
      res += el |
      if (!list.empty)
        res += list.removeFront
    }|
    res
  }
  else
  var this.'%' = function(list)
  {
    Formatter.new(this) % list
  };

};
