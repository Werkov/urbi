/*
 * Copyright (C) 2008-2012, Gostai S.A.S.
 *
 * This software is provided "as is" without warranty of any kind,
 * either expressed or implied, including but not limited to the
 * implied warranties of fitness for a particular purpose.
 *
 * See the LICENSE file for more information.
 */

/* Urbi side of 2.0 UObject plugin/remote implementation.
*/

// We cannot use the "class Global.UObject: Finalizable" syntax here,
// because of specific constraints of Finalizable.
var 'package'.lang.UObject = Finalizable.new();
var 'package'.lang.UVar = Slot;
do (UObject)
{
  function uvalueSerialize()
  {
    if (hasLocalSlot("compactName"))
      compactName
    else if (hasLocalSlot("__uobjectName"))
      __uobjectName
    else
      throw "Object cannot be transmitted to remote"
  };
  var isRemote = false;
  var type = "UObject";
  var __uobject_cname = "UObject";
  // We need this indirection to delay the first evaluation until
  // urbi/logger is actually loaded, which requires the
  // UObject.searchPath, which is defined below by the UObjectInit
  // call.
  get logger()
  {
    UObject.logger->oget = nil |
    UObject.logger = Logger.new("Urbi.UObject")
  };

  var minimumInterval = System.period;
  var updateTask = 0;
  var timerTask = 0;
  var updateInterval = 0;
  // map lobby.uid+ event_name=>1 to know if event is already registered
  var remoteEventMap;
  function update()
  {
    logger.warn("update not defined")
  };

  // Override new to throw an exception if init returned a nonzero float
  function 'new'(var args[])
  {
    // The fresh child.
    var res = call.getSlotValue("target").clone() |
    if (!res.hasLocalSlot("tag"))
      var res.tag = Tag.new()|
    // Call the "init" from the parent, retargetted to the child.
    call.message = "init" |
    var ret;
    try {
      ret = res.callMessage(call).acceptVoid()|
    }
    catch(var e)
    {
      if (res.isRemote)
        res.destroy()|
      throw e
    }|
    if (ret.isA(Float) && ret != 0)
    {
      if (res.isRemote) // Remote still need explicit destruction
        res.destroy()|
      throw Exception.new("%s construction failed: init returned %s."
                            % [__uobjectName, ret])
    }
    else
      res
  };

  function init()
  {
    0
  };

  function uobjectInit()
  {
    // COW
    updateTask = Tag.new()|
    remoteEventMap = [ => ]|
    timerTask = [ => ]
  };

  /// Move a notifychange on 'from' setup by this object, move it on 'to'.
  function reconnect(from, to)
  {
    warn("reconnect is deprecated, use connections");
  };

  function destroy()
  {
    // Try to remove all global locations this object might be in.
    if (hasLocalSlot("__uobjectName") && uobjects.hasLocalSlot(__uobjectName))
      uobjects.removeLocalSlot(__uobjectName)| // yeah no quote
    if (isRemote())
      finalize()
  };
  function finalize()
  {
    var ir = isRemote|
    nonInterruptible|
    if (hasLocalSlot("lobby") && isRemote && lobby.connected)
    {
       var chan = Channel.new('external'.MODULE_TAG)|
       var chan.lobby = lobby|
       chan << ['external'.UEM_DELETE, __uobjectName]
    }|
    if (hasLocalSlot("timerTask"))
      for| (var t: timerTask)
        t.second.stop() |
    if (hasLocalSlot("updateTask"))
      updateTask.stop() |
    for|(var sn: localSlotNames())
    {
      getLocalSlot(sn).isVoid()|
      var s = getLocalSlot(sn)|
      s.dead = true|
      if (ir)
      { // Cleanup unnotify to avoid leaking dictionary entries
        // The remote will try to do it but it will be too late, slots will
        // be gone, and we cannot wait for it as we have no way of knowing when
        // it will be done.
        UObject.unnotify(this, sn, inf, lobby)|
        // Those may be closure that hold lobby or the object.
        s.get = nil|
        s.set = nil|
        s.oget = nil|
        s.oset = nil|
        removeLocalSlot(sn)|
      }
    }|
  };
  var defaultFinalize = getSlotValue("finalize");
  var bounceSetUpdate = Event.new();
  at(bounceSetUpdate?(var obj))
  {
    if (0 < obj.updateInterval)
      obj.updateTask: detach(obj.periodicCall(obj.updateInterval,
                                          obj.getSlotValue("update"),
                                      "update", [obj]))
  };

  /// Set a timer to call update at specified interval in seconds.
  function setUpdate(interval)
  {
    if (0 < interval < minimumInterval)
      interval = minimumInterval|
    // Stop current update task.
    updateTask.stop()|
    updateInterval = interval|
    bounceSetUpdate!(this)
  };

  /// Set a timer to call \b func every \b interval milliseconds.
  function setTimer(interval, func, tagName=nil)
  {
    if (!tagName)
      tagName = String.fresh()|
    if (interval < minimumInterval)
      interval = minimumInterval|
    if (!hasLocalSlot("timerTask"))
      timerTask = [ => ]|
    var tag = Tag.new()|
    disown({tag:loop{ func() | sleep(interval)}}) |
    timerTask[tagName] = tag
  };

  /// Remove timer associated with \b tagName
  function removeTimer(tagName)
  {
    var v = timerTask.getWithDefault(tagName, nil) |
    if (v)
    {
      v.stop() |
      timerTask.erase(tagName) |
      true
    }
    else
      false
  };

  /// Call hub update function \b for hub \b hubname
  function setHubUpdate(hubname, interval, func)
  {
    if (0 < interval < minimumInterval)
      interval = minimumInterval |
    // Ensure only one instance is running using a tag in slot hub<hubname>.
    var slotName = "hub"+hubname |
    if (!hasSlot(slotName))
      setSlotValue(slotName, Tag.new()) |
    getSlotValue(slotName).stop() |
    if (0 < interval)
      getSlotValue(slotName):
        detach({loop{ func() | sleep(interval)}})
  };

  // Decrease notify refcount for this UVar, stop notify if it reaches 0
  function unnotify(objname, varname, count, lobby=lobby)
  {
    var obj|
    if (objname.isA(String))
      obj = uobjects.findUObject(objname).acceptVoid() // FIXME should be nil
    else
      obj = objname|
    if (!obj.isVoid() && lobby.hasLocalSlot("__bindingCount"))
    {
      var except = nil|
      var cnt = -1|
      var fullName|
      try {
        // May fail if the slot is gone, in which case there is not much to
        // unnotify
        fullName = obj.getSlot(varname).fullName|
        cnt = lobby.__bindingCount.getWithDefault(fullName(), -1)|
      }
      catch(var e) {except = e}|
      if (cnt <= 0)
      {
        //logger.warn << "error: unnotify on unknown variable " + fullName
      }
      else
      {
        if (count.isInf())
          cnt = 0
        else
          cnt -= count |
        lobby.__bindingCount[fullName] = cnt |
        if (cnt<=0 && obj.hasSlot(varname))
        {
          // May or may not be present, never mind
          var handle = lobby.__bindingFunc[fullName]|
          // Check if the binding is a uconnection
          if (handle.isA(UConnection))
          {
            // The remote is using set on the target slot, which is a
            // closure on a ton of stuffs, so remove it.
            //if (handle.target)
              //handle.target.set = nil|
            handle.disconnect()
          }
          // Check if it is a notify handle (FIXME: no longuer possible)
          else if (handle.isA(Float) || handle.isA(Tag))
            obj.getSlot(varname)
              .removeNotifyChange(handle)|
          // Check if using the shared RTP object
          if (lobby.hasLocalSlot("sharedRTP")
              && handle === lobby.sharedRTP)
          {
            lobby.sharedRTP.unGroupedSendVar(fullName)
          }|
          // Check if it is a list of uobjects
          if (handle.isA(List))
          {
            for|(var i: handle)
              try{i.destroy()} catch {}|
            lobby.__bindingFunc[fullName] = []
          }|
          lobby.__bindingCount.erase(fullName)|
          obj.getSlot(varname).dereference()
        }
      }
    }
  };

  // Helper for implementation of remote UObject function calls.  For
  // each invocation we create a fresh NAME, and store a Barrier in
  // barriers[NAME].  The Remote UObject is then sent a request to run
  // the function call and to invoke Global.UObject.funCall(NAME,
  // RESULT) while we wait on the Barrier.
  function funCall(var name, var val = void)
  {
    // Get the barrier.
    var b = lobby.barriers[name] |
    lobby.barriers.erase(name) |
    b.signal(val.acceptVoid())
  };

  function syncGet(exp, tag)
  {
    try
    {
      Channel.new(tag) << System.eval(exp)
    }
    catch (var e)
    {
      lobby.send("!!! " + e, tag)
    }
  };
};

// All UVars accessed from remote objects are stored there also.
package lang.VAR
{
};

/*
 * UVar provides access and change notification on a slot.
 * instanciate with 'UVar.new(containerObject, slotName);
 * call notifyChange(someFunc) to have someFunc called (with no argument)
 * right after a new value is written, call notifyAccess(someFunc) to have
 * someFunc called just before a value is read. The contained value is stored
 * in the 'val' slot of the UVar.
 */
do (Slot)
{
  var initialName = "";
  function uvalueSerialize()
  {
    var n = fullName|
    if (Job.current.hasLocalSlot("targetLobby"))
    {
      var l = Job.current.targetLobby|
      var bc = l.__bindingCount.getWithDefault(n, nil)|
      if (bc.isNil())
      {
        reference()|
        l.__bindingCount[n] = 0
      }
    }|
    fullName
  };
  get logger()
  {
    Slot.logger->get = nil|
    Slot.logger = Logger.new("Urbi.UObject")
  };
  var traceSet = Event.new();
  var traceGet = Event.new();
  var traceBind = Event.new();
  // Name of the owning object if in a standard component node, VAR otherwise
  var ownerName = "VAR";
  // Unique ID associated with this UVar
  function uniqueID()
  {
    uniqueID = String.fresh()
  };
  get fullName()
  {
    if (ownerName == "VAR")
      "VAR." + uniqueID()
    else
      ownerName + "." + initialName
  };
  // Count of remote lobbies referencing this var
  var remoteRefCount = 0;
  /** Incremente remote ref count. No duplicate check.
   *  Makes sure the uvar is accessible by its full name
   */
  function reference()
  {
    // if ownerName is not VAR, then this UVar is globally accessible.
    if (!remoteRefCount && ownerName == "VAR")
    {
      VAR.setSlot(uniqueID(), this)
    }|
    remoteRefCount++
  };
  function dereference()
  {
    remoteRefCount--|
    if (!remoteRefCount && ownerName == "VAR" )
      VAR.removeSlot(uniqueID())
  };

  // If this is true, callbacks that throw will be removed from callback lists.
  var eraseThrowingCallbacks = true;
  eraseThrowingCallbacks->oset = function(val, slot)
  {
    warn("eraseThrowingCallbacks is deprecated, use unsubscribeFaultySubscriber"
          " on evennt")|
    if (this === Slot) // Set default
      Event.unsubscribeFaultySubscriber = val
    else
      changed.unsubscribeFaultySubscriber = val|
    setOutputValue(val)
  };
  /// Copy this UVar under slot \b slotName of \b targetObj
  function copy(targetObj, slotName)
  {
    targetObj.setSlot(slotName, this)
  };

  function init(args[]) //parent, name or nothing
  {
    if (args.size)
    {
      var parent = args[0] |
      var name = args[1] |
      nonInterruptible |
      this.initialName = name|
      // Check if our parent can be found, or use the VAR mechanism.
      var this.ownerName = {
        if (parent.hasLocalSlot("__uobjectName"))
          parent.__uobjectName
        else
          "VAR"
      }|
       parent.setSlot(name, this)
    }
  };
  function enableRTP()
  {disown({
    Lobby.systemLobby.echo("enablertp")|
    // Propagate to all remotes.
    // First find the list of lobbies that have remotes
    var lobbies = System.lobbies().filter(
                                        function(x) { x.hasLocalSlot("__bindingCount")});
    // Then ask them to use RTP and reset existing notifies.
    var chan = Channel.new('external'.MODULE_TAG)|
    var chan.lobby|
    var msg = ['external'.UEM_SETRTP, fullName, 1] |
    var tv = {if (split) outputValue.acceptVoid() else value.acceptVoid() }|
    for|(var l: lobbies)
    {
      chan.lobby = l |
      chan << msg |
      var parts = fullName.split(".")|
      var currentBindings = l.__bindingFunc.getWithDefault(fullName, nil)|
      if (currentBindings.isA(Float) || currentBindings.isA(Tag))
      {
        // Standard TCP notifychange, remove it...
        removeNotifyChange(currentBindings)|
        //... and replace it with RTP version
        'external'.setupRTP(tv.isA(Binary), parts[0], parts[1], l, nil)
        // Do not change bindingCount.
      }
      else if (currentBindings.isA(UConnection))
      {
        currentBindings.disconnect()|
        'external'.setupRTP(tv.isA(Binary), parts[0], parts[1], l, nil)
      }
    }
    })
  };

  // Compatibility with gostai studio which checks
  // UObject.hasLocalSlot(hasProperty)
  UObject.hasProperty = getSlotValue("hasProperty");
  var onHasNotifyAccess = Event.new();

  // If \a compatF is non-nil, warn about a deprecated use of function
  // \a fnName and return \a compatF, otherwise return \a f.
  function backwards(var fnName, f, compatF)
  {
    if (!compatF.isNil)
    {
      logger.warn() << ("%s(handle, func) is deprecated, use %s(func)"
                      % [fnName, fnName])|
      compatF
    }
    else
      f
  };

  /// Calls f each time the UVar is modified, returns an id to remove it
  function notifyChange(f, compatF = nil)
  {
    var cb = backwards("notifyChange", f, compatF)|
    var s = Subscription.new()|
    s.asynchronous = false|
    s.onEvent = closure() {cb()}|
    changed.subscribe(s)|
    s
  };
  function removeNotifyChange(h)
  {
    h.stop()
  };


  function notifyChangeOwned(f, compatF = nil)
  {
    var cb = backwards("notifyChangeOwned", f, compatF)|
    set = function() { cb()}|
    set
  };
  function removeNotifyChangeOwned(h)
  {
    if (set == h)
      set = nil
  };

  function notifyAccess(f, compatF = nil)
  {
    var cb = backwards("notifyAccess", f, compatF)|
    get = function() { cb() | if (split) output_value else value}|
    getSlotValue("get").uid
  };
  function removeNotifyAccess(h)
  {
    if (getSlotValue("get").uid == h)
      get = nil
  };

  function hookChangedEvent()
  {
    disown({
        /*
           echo("ppcheck")|
           echo(this)|
           echo(this.oget || this.get)|
           echo(this.changed.hasSubscribers())|
           echo(this.hasLocalSlot("watchIncompatible"))|*/
           // Handle the possible race where a subscriber appeared when
           // this job started
           if (changed.hasSubscribers())
             pushPullCheck(false)
           else
           {
             //echo("waiting...")|
             var t = Tag.new() |
             if (!changed.hasLocalSlot("onSubscribe"))
               var changed.onSubscribe = Event.new() |
             t: at (changed.onSubscribe?)
             {
               //echo("gogogo")|
               if (pushPullCheck(false))
               { // If loop mode is active, no need to monitor anymore.
                 changed.removeLocalSlot("onSubscribe")|
                 t.stop()
               }
             }

           }//|echo("hop")
    })
  };

  function '>>'(target)
  {
    UConnection.new(this, target)
  };
  function '<<'(source)
  {
    UConnection.new(source, this)
  };
  /// Return an UVar from its name
  function fromName(n)
  {
    var comps = n.split(".")|
    var base = lobby|
    for|(var i: comps.size()-1)
      base = base.getSlotValue(comps[i]) |
    base.getSlot(comps[-1])
  };
  void
};

do (UConnection)
{
  function init(from, to)
  {
    /// We cannot take a reference on those uvars.
    source = from |
    target = to |
    from.changed.subscribe(this) |
    from.pushPullCheck(false) |
    var this.start = time
  };
  function niceName(varname)
  {
    if (varname.initialName)
      varname.ownerName + "." + varname.initialName
    else
      varname.asString()
  };

  function asString()
  {
    if (!source)
      "Connection ()"
    else
      niceName(source) + " >> " + niceName(target)
  };

  function displayStats()
  {
    "" + fireRate +" Hz   mean " + meanCallTime*1000000 + " us   max "
      + maxCallTime * 1000000  + " us   min "
      + minCallTime * 1000000 + " us"
  };

  function disconnect()
  {
    try
    {
      stop()
    }
    catch(var e)
    {
      //wall(e)
    }|
    source = nil|
    target = nil
  };

  function reconnect(from)
  {
    var t = target|
    disconnect()|
    init(from, t)
  };

  function resetStats()
  {
    totalCallTime = callCount = 0|
    minCallTime = maxCallTime = 0|
    start = time
  };

  get meanCallTime()
  {
    if (callCount > 0)
      totalCallTime / callCount
    else
      0
  };

  get fireRate()
  {
    callCount / (time-start)
  };

  /// Return the list of all connections in the system
  function getAll()
  {
    instances() - [UConnection]
  };
};

/** BypassValue is UValue container which does only cast the content into
 *  an Urbi Object on request.
 */
do (UValue)
{
  var transparent = true;
  function asString()
  {
    if (transparent)
      extract.asString
    else
      '$id'
  };
  function asTopLevelPrintable()
  {
    if (transparent)
      extractAsToplevelPrintable
    else
      '$id'.asTopLevelPrintable
  };
  var asPrintable = getSlotValue("asTopLevelPrintable");
};

package lang
{
  class getUObject
  {
    function fallback()
    {
      uobjects.findUObject(call.message)
    };
    var &fallback.autoEval = true;
  };
};


uobjects.uobjectInit();

do (UObject)
{
get searchPath() { uobjects.searchPath};
};
// UObjects can use evaluate at initialization-time.

Slot.new(Global, "evaluate");
do (Global.&evaluate)
{
  copyOnWrite = false;
  split = true;
  changed.unsubscribeFaultySubscriber = false;
  set = function(v)
  {
    var res = System.eval(v).acceptVoid()|
    if (!res.isVoid)
      setOutputValue(res)
  };
};

var Global.currentLobbyId;
Global.currentLobbyId->get = function()
{
  Lobby.lobby.uid()
};

Slot.new(Global, "currentRunnerInUObjectUpdate");
Global.&currentRunnerInUObjectUpdate.get = function()
{
  Job.current.hasLocalSlot("$uobjectInUpdate")
};

// UObject remote API.

/*------------------.
| Global.external.  |
`------------------*/

package lang.'external'
{
  get logger()
  {
    'external'.logger->oget = nil|
    'external'.logger = Logger.new("Urbi.UObject")
  };
  var MODULE_TAG = "__ExternalMessage__";
  var UEM_EVALFUNCTION = 0;
  var UEM_ASSIGNVALUE  = 1;
  var UEM_EMITEVENT    = 2;
  var UEM_ENDEVENT     = 3;
  var UEM_NEW          = 4;
  var UEM_DELETE       = 5;
  var UEM_INIT         = 6;
  var UEM_TIMER        = 7;
  var UEM_NORTP        = 8; //< Disable RTP for this connection
  var UEM_SETRTP       = 9;
  var UEM_SETLOCAL     = 12;

  /* external object <objname>: Set clone to send a UEM_NEW message.
  The remote upon reception of the UEM_NEW message 'instantiate <objname>
  with name <newname>' will instantiate the UObject, and send:
  - var <newname>.load, which will fail (<newname> does not exist)
  - class <newname>{} (which will go in the lobby)
  - external object <newname>
  - external var/func <newname>.xxx from whatever

  So in external.object we move the instance from lobby to Global.uobjects and
  recreate <newname>.load, and in our custom cloner, we:
  - send the NEW message passing a uid as <newname>
  - wait until uobjects.<newname>.init is set
  -  return the instance, which is also left in uobjects.<newname> because the
  remote will use it using this name.
  */
  function object(objname)
  {
    if (!lobby.hasLocalSlot("$uobjectMutex"))
      lobby.setSlotValue("$uobjectMutex", Mutex.new())|
    nonInterruptible |
    if (uobjects.hasLocalSlot(objname))
      return|
    // The remote sent the code 'class <objname> {};' just before
    // calling this function, but we want objname in uobjects, not
    // lobby.
    // FIXME: just register to internal uobject hash
    uobjects.setSlotValue(objname, UObject.new()) |
    do (uobjects.getSlotValue(objname))
    {
      var __uobjectName = objname |
      var isRemote = true |
      uobjectInit() |
    }|
    if (!lobby.hasLocalSlot(objname))
      logger.err() << "error: lobby " + lobby + " has no slot " + objname
    else
      for| (var s: lobby.getSlotValue(objname).localSlotNames())
        uobjects.getSlotValue(objname).setSlotValue(s, lobby.getSlotValue(objname).getSlotValue(s))|
    lobby.removeLocalSlot(objname)|
    do (uobjects.getSlotValue(objname))
    {
      var lobby = lobby |
      init() |
    }|
    var chan = Channel.new(MODULE_TAG)|
    var chan.lobby = lobby|
    var chan.source = objname|
    function cloner()
    {
      var u = "object".fresh()|
      chan << ['external'.UEM_NEW, u, objname]|
      // Wait until the remote defines u.init.
      waituntil(uobjects.hasSlot(u)
                && uobjects.getSlotValue(u).hasLocalSlot("init")) |
      var ret = uobjects.getSlotValue(u)|
      ret.protos = [this]|
      ret
    }|
    uobjects.getSlotValue(objname).setSlotValue("clone", cloner)|
    'var'(objname, "load", objname)|
    void
  };

  /// Monitor a RTP connexion, call onfail if it does not seem to work
  function monitorRTP(src, dst, onfail)
  {
    // Do not use waituntil here, as stats is a primitive which
    // changes over time.  Something that waituntil does not know to
    // cope with currently.
    while (src.stats()["packetSent"] == 0)
    {
      sleep(System.period)|
    }|
    // Data has been transmitted. Wait a bit...
    sleep(20 * System.period)|
    // And check if something was received.
    if (!dst.stats()["bytesReceived"])
    {
      try
      {
        logger.warn() << "RTP connection %s=>%s seems to be failing,"
                       " falling back to TCP"
                       % [dst.getRemoteHost(), src.getRemoteHost()]
      }
      catch
      {
        // One of the getRemoteHost failed.
        logger.warn() << "RTP connection with %s seems to be failing,"
                       " falling back to TCP"
                       % lobby.remoteIP
      }|
      onfail()
    }
    // Connection started fine, assume it will stay that way and return.
  };

  function makeRTPPair(lobby=lobby)
  {
    if (!lobby.hasLocalSlot("_rtp_object_name"))
      throw "RTP subsystem not setup for this lobby: "|
    var rrtp = uobjects.getSlotValue(lobby._rtp_object_name).new()|
    var port = rrtp.listen("0.0.0.0", "0")|
    var host = lobby.remoteIP|
    var lrtp = URTP.new()|
    //wall("...connecting to " + host +":" + port)|
    lrtp.connect(host, port)|
    var lrtp.lobbyId = lobby.uid()|
    var l = lobby |
    // Destroy local rtp object when the remote disconnects
    disown({
           var t = Tag.new()|
           t:at(Lobby.onDisconnect?(l))
           {
             try{lrtp.destroy()} catch {} |
             t.stop()
           }
    })|
    (lrtp, rrtp)
  };

  /// Notify the remote when <objname>.<varname> is modified.
  function 'var'(objname, varname, fr)
  {
    noVoidError|
    var fullname = objname + "." + varname|

    if (!uobjects.hasSlot(objname))
    {
      if (varname == "load")
        return|
      logger.warn("external var called for non-uobject "+objname+"."+varname)
    }|
    if (!lobby.hasSlot("handle"))
    {
      function lobby.handle()
      {
        logger.warn("Lobby handles are no longuer used")|
        nil
      }
    }|
    var obj = uobjects.findUObject(objname)|
    // Setup a hook, notify the remote when a change occurrs.
    if (!obj.hasLocalSlot(varname))
      Slot.new(obj, varname)|
    var fullName = obj.getSlot(varname).fullName|
    // Refcount number of binds to this var
    if (!lobby.hasLocalSlot("__bindingCount"))
    {
      var lobby.__bindingCount = [ => ] |
      // Variable name => bound function for this lobby, or list of UObject
      var lobby.__bindingFunc = [ => ]
    } |
    var currentCount = lobby.__bindingCount.getWithDefault(fullName, nil) |
    if (currentCount.isNil())
    {
      currentCount = 0|
      obj.getSlot(varname).reference()
    }|
    lobby.__bindingCount[fullName] = currentCount + 1 |
    if (currentCount)
      return |

    // Try to use RTP mode for binaries, or if explicitly requested.
    var tv = obj.getSlotValue(varname).acceptVoid()|
    if (lobby.hasLocalSlot("_rtp_object_name")
        && !lobby.hasLocalSlot("noRTP")
        && (obj.getSlot(varname).rtp
            ||
            (tv.isA(Binary))))
      detach({ setupRTP(tv.isA(Binary), objname, varname, lobby, fr)})
    else
    {
      remoteNotifyChange(objname, varname, fr)
    }
  };

  // Setup RTP connection
  function setupRTP(isbin, objname, varname, lobby, fr)
  {
    // Attempt to use RTP mode
    // wall("attempting RTP connection...");
    // RTP setup will require usage of the connection which is stuck in
    // the foreground "external var" call, so detach.
    var obj = uobjects.findUObject(objname)|
    if (!obj.hasSlot(varname))
    {
      wall("fail fail " + objname +" " + obj)
    }|
    var fullname = obj.getSlot(varname).fullName()|
    if (isbin)
    {
      // each Binary UVar uses its own RTP connection.  Those are
      // UObjects, they persist so local variables are fine.
      (var lrtp, var rrtp) = makeRTPPair(lobby)|
      rrtp.localDeliver = objname + "." + varname|
      var Job.current.targetLobby = lobby |
      lrtp.sendVar(obj.getSlot(varname).uvalueSerialize())|
      Job.current.removeSlot("targetLobby")|
      lobby.__bindingFunc[fullname] = [rrtp, lrtp]|
      // Fallback to old TCP method if RTP fails.
      disown(monitorRTP(lrtp, rrtp,
        closure()
        {
          remoteNotifyChange(objname, varname, fr)|
          var lobby.noRTP = true
        }))|
    }
    else
    {
      // Other data types share one RTP connection
      //wall("rtp mode for " + varname)|
      lobby.'$uobjectMutex': if (!lobby.hasSlot("sharedRTP"))
      {
        try
        {
          (var lrtp, var rrtp) = makeRTPPair(lobby)|
          //wall("instanciating shared rtp for " + lobby +":" + lrtp)|
          var lobby.sharedRTP = lrtp|
          var lobby.remoteSharedRTP = rrtp|
          disown(monitorRTP(lrtp, rrtp,
                            closure()
                            {
                              remoteNotifyChange(objname, varname, fr)|
                              var lobby.noRTP = true
                            }))|
        }
        catch(var e)
        {
          logger.err() << "fatal error setting rtp: " + e
        }|
      }|
      lobby.__bindingFunc[fullname] = lobby.sharedRTP|
      var Job.current.targetLobby = lobby |
      lobby.sharedRTP.groupedSendVar(obj.getSlot(varname).uvalueSerialize())|
      Job.current.removeSlot("targetLobby")
    }
  };

  function remoteNotifyChange(objname, varname, fr)
  {
    // Create a 'notifyChange' function that generates the UObject
    // message and sends it through the remote connection.
    var uob = uobjects.findUObject(objname)|
    var chan = Channel.new(MODULE_TAG)|
    var chan.lobby = lobby|
    var fullname = objname + "." + varname|
    var fullName = uob.getSlot(varname).fullName()|
    var slotId = uob.getSlot(varname).uid()|
    var chan.source = fullname +" " + uob.protos[0].asString()|
    // Construct the setter function. Expects this=slot
    function f(args[])
    {
      var v|
      if (args.size())
        v = args[0]
      else
        v = this.value|
      // If source is the current lobby, loopback took care of notification
      if (lobby == chan.lobby
          && Job.current.hasLocalSlot("$uobjectInUpdate"))
      if (lobby == chan.lobby
          && Job.current.hasLocalSlot("$uobjectInUpdate")
          && Job.current.'$uobjectInUpdate' == slotId.asFloat())
        return|
        /*
      var uvar =
      {
        if (!args.size)
          uob.getSlot(varname)
        else
          args[0]
      }|*/
      var Job.current.targetLobby = chan.lobby|
      v = v.uvalueSerialize()  |
      Job.current.removeSlot("targetLobby")|
      if (!v.isNil() && !v.isVoid())
        chan << ['external'.UEM_ASSIGNVALUE,
                 fullName,
                 v,
                 timestamp]
    }|

    // Directly set it if the source UVar is from this connection
    // FIXME: cleanup
    if (uob.hasLocalSlot("lobby")
         && uob.lobby == lobby
        && objname == fr)
    {
      lobby.__bindingFunc[fullName] =
        uobjects.findUObject(objname).getSlot(varname).notifyChange(f)
    }
    else
    // Or use an intermediate UConnection and InputPort to handle
    // disconnect.
    {
      // Try to put the port into source UObject if it exists, or lobby.
      var o|
      if (uobjects.findUObject(fr).isVoid()
          || uobjects.findUObject(fr).lobby != lobby)
      {
        if (lobby.hasLocalSlot("hookPoint"))
          o = lobby.hookPoint
        else
          o = lobby|
        logger.warn() << ("Invalid source uobject " + fr +" in 'external var', using " + o)|
      }
      else
        o = uobjects.findUObject(fr)|
      var iportname = fullname.replace(".", "_")|
      if (!o.hasLocalSlot(iportname))
      {
        Slot.new(o, iportname)|
        var o.getSlot(iportname).inputPort = true
      }|
      o.getSlot(iportname).set = f|
      lobby.__bindingFunc[fullName] =
      findUObject(objname).getSlot(varname) >> o.getSlot(iportname)
          |
    }|
    void
  };

  function failRTP()
  {
    Channel.new(MODULE_TAG) << [UEM_NORTP]
  };

  // Bind a function call to the remote side.
  // Write to the slot a function that will generate an uobject call message,
  // send it to the remote side, and wait for the result.
  function 'function'(nargs, objname, fname, fr)
  {
    nonInterruptible|
    var functionName = objname + "." + fname|
    var chan = Channel.new(MODULE_TAG)|
    var chan.lobby = lobby|
    var chan.source = functionName |
    if (!lobby.hasLocalSlot("barriers"))
      var lobby.barriers = Dictionary.new()|
    var ownerLobby = lobby|
    function f(var args[])
    {
      var Job.current.targetLobby = chan.lobby|
      args = args.uvalueSerialize()|
      Job.current.removeSlot("targetLobby")|
      if (args.size != nargs)
        throw Exception.Arity.new("Remote bound function", args.size, nargs)|
      var u = String.fresh() |
      chan.lobby.barriers[u] = Barrier.new() |
      chan << [ 'external'.UEM_EVALFUNCTION,
                functionName + "__" + args.size,
                u ] + args|
      var res = chan.lobby.barriers[u].wait()|
      if (res.isA(Exception))
        throw res
      else
        res.uvalueDeserialize().unacceptVoid()
    }|
    uobjects.getSlotValue(objname).setSlotValue(fname, f)|
    void
  };

  function eventBounce(starting, evname, args)
  {
    Channel.new(MODULE_TAG) << [
       {if (starting) UEM_EMITEVENT else UEM_ENDEVENT},
       evname] + args
  };

  function event(nargs, objname, ename, fr)
  {
    // FIXME: No way to catch an event with payload without generating the 'at'
    // code.
    var obj = uobjects.getSlotValue(objname)|
    var fullname = objname+"."+ename+"__" + nargs.asString() |
    var key = lobby.uid() + fullname |
    if (key not in obj.remoteEventMap)
    {
      obj.remoteEventMap[key] = 1 |
      if (not uobjects.getSlotValue(objname).hasLocalSlot(ename))
        uobjects.getSlotValue(objname).setSlotValue(ename, Event.new()) |
      var args = nargs.map(function(x) { "p%s" %[x]}).join(", ") |
      var varargs = nargs.map(function(x) { "var p%s" %[x]}).join(", ")|
      var code =
        "at (uobjects.%s.%s?(%s)) 'external'.eventBounce(true, \"%s\",[%s])"
        "onleave 'external'.eventBounce(false, \"%s\",[%s])"
        % [objname, ename, varargs, fullname, args, fullname, args]|
      System.eval(code)
    }
  };

  at (Lobby.onDisconnect?(var l))
  {
    nonInterruptible;
    // Remove all the remote uobjects created by this lobby.
    for| (var o: uobjects.localSlotNames())
    {
      if (!uobjects.getSlotValue(o).isVoid()
          && uobjects.getSlotValue(o).hasSlot("lobby")
          && uobjects.getSlotValue(o).lobby === l)
      {
        // Destroy will remove the object from uobjects.
        // Someone else might be doing the same thing right now, ignore
        // errors.
        try
        {
          uobjects.getSlotValue(o).destroy()
        }
        catch
        {}
      }
    };

    if (uobjects.hasLocalSlot("URTP"))
      // Also kill local RTP uobjects linked to this lobby.
      for| (var o: l.localSlotNames())
        if (l.getSlotValue(o).isA(URTP))
          l.getSlotValue(o).destroy();

    // Unblock all pending remote function calls
    if (l.hasLocalSlot("barriers"))
      for|(var b: l.barriers)
        b.second.signal(Exception.new("Remote disconnected"))|
    // Dereference uvars
    if (l.hasLocalSlot("__bindingCount"))
    for|(var n: l.__bindingCount.keys())
    {
      var parts = n.split(".")|
      if (parts[0] == "VAR" && !l.__bindingCount.getWithDefault(n, nil).isNil)
        VAR.getSlot(parts[1]).dereference()
    }|
    // Kill hookPoint
    if (l.hasLocalSlot("hookPoint"))
    {
      l.hookPoint.destroy()|
      //l.removeSlot("hookPoint")
    }|
    if (l.hasLocalSlot("__bindingFunc"))
    {
      for|( var p: l.__bindingFunc)
      {
        if (p.second.isA(Subscription))
        { // loop: slot.changed.subscriptions[x].onEvent is a closure on slot.
          p.second.onEvent = nil
        }
      }|
      l.removeSlot("__bindingFunc")|
    }
  };
};

/// Display statistics for all found connections
function uobjects.connectionStats()
{
  for| (var c: UConnection.getAll())
    echo(c.asString()  + " " +  c.displayStats())
};

function uobjects.resetConnectionStats()
{
  for| (var c: UConnection.getAll())
    c.resetStats()
};

/** Inherit from UValueSerializable to make objects of your class available from
 * UObjects.
 * You can set 'uvalueSerializeSlots' to fix the names of the slots that must
 * be serialized.
 */
package lang.UValueSerializable
{
  var uvalueSerializeSlots = nil;
  function uvalueSerialize()
  {
    nonInterruptible;
    var res = Dictionary.new();
    res["$sn"] = type;
    // No need to recurse here.
    var names = uvalueSerializeSlots() || localSlotNames();
    for|(var s: names)
      if (!getSlotValue(s).isA(Executable))
        res[s] = getSlotValue(s).uvalueSerialize();
    res;
  };
};

function Object.uvalueSerialize()
{
  this
};

function List.uvalueSerialize()
{
  map(function(x) {x.uvalueSerialize()})
};

function Dictionary.uvalueSerialize()
{
  var res = Dictionary.new() |
  for| (var e: this)
  {
    var k = e.first |
    if (!k.isA(String))
      // Keep msg sync with src/kernel/uvalue-cast.cc (uvalue_cast).
      throw Exception.new("Dictionaries exchanged with UObjects can"
                          " only have String keys: %s (%s)"
                          % [k, k.type]) |
    res[k] = e.second.uvalueSerialize()|
  }|
  res
};

// Store serializable objects here.
package lang.Serializables {};
