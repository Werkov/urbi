class Global.Lazy : Global.Comparable
{
  var code;
  var val;

  function init(value)
  {
    var this.code = value |
    var this.val |
    this
  };

  function '=='(other)
  {
    // code is very likely to be a closure, so try not to fire it,
    // otherwise we might compare two values instead of two
    // expressions.
    getSlot("code") == other.getSlot("code")
    && getSlot("val").acceptVoid == other.getSlot("val").acceptVoid;
  };

  function eval()
  {
    val = code.acceptVoid|
    getSlot("val").unacceptVoid
  };

  function value()
  {
    if (getSlot("val").isVoid)
      eval|
    getSlot("val").unacceptVoid
  };

  function asString ()
  {
    getSlot("code").bodyString
  };
};

class Global.PseudoLazy: Lazy
{

  function eval()
  {
    val = getSlot("code").acceptVoid|
    getSlot("val").unacceptVoid
  };

};
