/*
 * Copyright (C) 2008-2012, Gostai S.A.S.
 *
 * This software is provided "as is" without warranty of any kind,
 * either expressed or implied, including but not limited to the
 * implied warranties of fitness for a particular purpose.
 *
 * See the LICENSE file for more information.
 */

requireFile("urbi/global.u");
requireFile("urbi/traceable.u");

package lang.Exception
{
  addProto(Traceable);

  // An error, or a warning?
  var isError = true;
  var message = "<no message>";

  // $location and backtrace are defined by the raise function of the
  // interpreter.  They point to where the Exception was thrown, not
  // created.
  var '$location';
  var slot;
  var routine;

  function init(msg)
  {
    message = msg
  };

  /// Make the instanciation of subobjects easier.
  function '$Exception'(msg)
  {
    'package'.lang.Exception.getSlotValue("init").apply([this, msg])
  };

  function location()
  {
    // Syntax errors are located where the syntax error is, not where
    // the exception was thrown from (e.g., the "eval" or "load"
    // call).  This location is stored in 'loc', while '$location' is
    // always set by the generic exception throwing mechanism
    // (Interpreter.&raise).
    if (hasLocalSlot("loc"))
      loc()
    else if (!hideSystemFiles())
      '$location'().acceptVoid()
    else if (!'$location'().isVoid()
             && '$location'().begin().file().asString() not in System.systemFiles())
      '$location'()
    else
    {
      var b = backtrace() |
      if (b.size() != 0
          && !b[-1].location().isNil())
      {
        // FIXME: Nasty hack: we need to avoid displaying
        // "assertCall:" when an assertion exception is displayed.
        // Actually, we need a means to "skip" a part of the
        // backtrace, see what's done in the runner for instance.
        if (b[-1].name() not in ["assert", "assert_", "assertCall"])
          routine = b[-1].name()|
        b[-1].location()
      }
    }
  };

  function '$show'()
  {
    var chan = { if (isError) cerr else Channel.warning } |
    chan << "!!! " + this |
    // Don't display the top-level stack frame if it's already
    // been used as location.
    var bt = backtrace() |
    if (bt.size() != 0 && bt[0].location() && location().acceptVoid() == bt[0].location())
      bt.removeFront()|
    for| (var sf: bt)
      // FIXME: Read the fixme above.
      if (sf.name not in ["assert", "assert_", "assertCall"])
        chan << "!!!    called from: " + sf
  };

  // <loc>: <slot or routine>: <message>
  function asString()
  {
    // FIXME: This is a hack: calling location might change 'routine'.
    // Clear this.
    var loc = location().acceptVoid() |
    var res = message() |
    if (!slot().isVoid())
      res = "%s: %s" % [slot(), res]
    else if (!routine().isVoid())
      res = "%s: %s" % [routine(), res] |
    if (!loc.isVoid())
      res = "%s: %s" % [loc, res] |
    res
  };

  function asPrintable()
  {
    "%s%s `%s'" %
      [{if (type == "Exception") "" else "Exception."},
       type, asString()]
  };
};


// These functions should not be visible outside of this file.  The
// exception indentation is not done to minize differences.
{
  function makeFmtException(name, inherit, locSlots, fmt, fmtSlots)
  {
    var locSize = locSlots.size();
    var fmtSize = fmtSlots.size();

    class Res : inherit
    {
      type = name;
      var fmt = fmt;

      function init(var args[])
      {
        if (args.size() != locSize + fmtSize)
          throw 'package'.lang.Exception.Arity.new("%s.%s" % [name, "init"],
                                    args.size(),
                                    locSize + fmtSize) |
        for| (var i: locSize)
          this.updateSlot(locSlots[i], args[i]) |
        for| (var i: fmtSize)
          this.setSlotValue(fmtSlots[i], args[i + locSize])
      };

      function message()
      {
        var l = []|
        for| (var f: fmtSlots)
          l << { if (hasSlot(f)) getSlotValue(f) else ""} |
        fmt % l
      };
    };

    'package'.lang.Exception.setSlotValue(name, Res);
  };

  function makeMsgException(name, inherit, locSlots, msg)
  {
    makeFmtException(name, inherit, locSlots, "", [])|
    'package'.lang.Exception.getSlotValue(name).removeSlot("fmt")|
    'package'.lang.Exception.getSlotValue(name).message = msg
  };

  function makeException(name, inherit, locSlots)
  {
    makeMsgException(name, inherit, locSlots, Exception.message());
  };

package lang.Exception.Arity: Exception
{
  var effective;
  var min;
  var max;

  function init(routine, effective, min, max = void)
  {
    this.routine = routine |
    this.effective = effective |
    this.min = min |
    if (!max.isVoid)
      this.max = max |
  };

  function message()
  {
    if (max.isVoid)
      "expected %s argument%s, given %s"
      % [min, {if (1 < min) "s" else ""}, effective]
    else if (max == Float.inf)
      "expected at least %s argument%s, given %s"
      % [min, {if (1 < min) "s" else ""}, effective]
    else
      "expected between %s and %s argument%s, given %s"
      % [min, max, {if (1 < max) "s" else ""}, effective]
  };
};

package lang.Exception.BadNumber: 'package'.lang.Exception
{
  var this.fmt = "<no message>";
  var this.effective = "<no message>";

  function init(routine, fmt, effective)
  {
    this.routine = routine|
    var this.fmt = fmt|
    var this.effective = effective
  };

  function message()
  {
    if (fmt !== Exception.BadNumber.fmt)
      fmt % effective
    else
      fmt;
  };
};

package lang.Exception.BadInteger: 'package'.lang.Exception.BadNumber
{
};

makeFmtException(
  "NegativeNumber", Exception.BadNumber, ["routine"],
  "unexpected %s, expected non-negative number", ["effective"]
);

makeFmtException(
  "NonPositiveNumber", Exception.BadNumber, ["routine"],
  "unexpected %s, expected positive number", ["effective"]
);

makeMsgException(
  "Constness", Exception.BadNumber, [],
  "cannot modify const slot"
);

makeFmtException(
  "FileNotFound", Exception, [],
  "file not found: %s", ["path"]
);

makeMsgException(
  "MatchFailure", Exception, [],
  "pattern did not match"
);

makeException(
  "Primitive", Exception, ["routine", "message"]
);

// Should move the slot in the location instead of adding it at the end of
// the message.
makeFmtException(
  "Redefinition", Exception, [],
  "slot redefinition: %s", ["slotName"]
);

makeFmtException(
  "Duplicate", Exception, [],
  "%s: \"%s\"", ["msg", "elt"]
);

package lang.Exception.Scheduling: 'package'.lang.Exception
{
  function throwNew(msg)
  {
    throw Exception.Scheduling.new(msg)
  };
};

package lang.Exception.Syntax: 'package'.lang.Exception
{
  // The location of the syntactical error.
  var loc = "<no location>";
  var input = "<no input>";

  function init(var loc, var message, var input, var isError = true)
  {
    this.loc = loc |
    this.input = input |
    this.isError = isError |
    '$Exception'(message)
  };

  function asString()
  {
    ({
      if (isError)
        "%s: syntax error: %s"
      else
        "%s: %s"
    }) % [loc, message]
  };
};

makeMsgException(
  "TimeOut", Exception, [],
  "timeout expired"
);



/*---------------------------------.
| Type, arguments and subobjects.  |
`---------------------------------*/

package lang.Exception.Type: 'package'.lang.Exception
{
  var expectedTypes = nil;
  var effective = nil;

  function init(effective, expected)
  {
    if (expected.isA(List) && expected !== List)
      this.expectedTypes = expected.map(function(v){ v.type })
    else
      this.expectedTypes = [expected.type] |

    this.effective = effective
  };

  function formatTypes()
  {
    if (expectedTypes.size > 1)
      expectedTypes.range(0, expectedTypes.size - 1)
                   .join(", a ", "a ", " or a %s")
                   % expectedTypes.back
    else
      "a %s" % expectedTypes[0]
  };

  get message()
  {
    "unexpected %s, expected %s"
      % [getSlotValue("effective").asPrintable(), formatTypes()]
  };
};

package lang.Exception.Argument: 'package'.lang.Exception
{
  var index = nil;
  var exception = nil;
  var routine = nil;

  function init(routine, index, exn)
  {
    this.routine = routine |
    this.index = index |
    this.exception = exn
  };

  function message()
  {
    "%s: %s"
     % [{if (index) "argument %s" % index else "this"},
        exception.message()]
  };
};

do ('package'.lang.Exception)
{
  function argumentTypeException(routine, index, effective,
                                 expected, alternatives = [])
  {
    Argument.new(routine, index, Type.new(effective, expected, alternatives))
  }
};

package lang.Exception.ArgumentType: 'package'.lang.Exception.Argument
{
  var index = nil;
  var routine = nil;

  function init(routine, index, effective, expected)
  {
    Kernel1.deprecated("Exception.ArgumentType") |
    var exn = Exception.Type.new(effective, expected) |
    Exception.Argument.getSlotValue("init").apply([this, routine, index, exn]) |
    this.routine = routine |
    this.index = index
  };
};

/*---------.
| Lookup.  |
`---------*/

package lang.Exception.Lookup: 'package'.lang.Exception
{
  var msg;
  var obj;
  var suggested = nil;

  var fixSpelling = true;

  // \param m     the invalid slot name
  // \param o     the object into which the lookup is performed
  // \param deep  whether to report inherited slot names too.
  function init(var m, var o, var deep = true)
  {
    msg = m |
    obj = o |
    if (fixSpelling)
      suggested = m.closest({ if (deep) o.slotNames() else o.localSlotNames() })|
  };

  function message()
  {
    var res = "lookup failed: %s" % msg |
    if (suggested)
      res += " (possible misspelling of %s)" % suggested |
    res
  };
};

package lang.Exception.PropertyLookup: 'package'.lang.Exception
{
  var obj;
  // Not named "slot" to avoid the features of Exception.slot.
  var slotName;
  var prop;

  // \param o     the object into which the lookup is performed
  // \param s     the slot name
  // \param p     the property name
  function init(var o, var s, var p)
  {
    obj = o |
    slotName = s |
    prop = p
  };

  function message()
  {
    "property lookup failed: %s->%s" % [slotName, prop]
  };
};

makeMsgException(
  "UnexpectedVoid", Exception, [],
  "unexpected void"
);


// Close the scope of make*Exception functions.
};
