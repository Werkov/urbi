/*
 * Copyright (C) 2011, Gostai S.A.S.
 *
 * This software is provided "as is" without warranty of any kind,
 * either expressed or implied, including but not limited to the
 * implied warranties of fitness for a particular purpose.
 *
 * See the LICENSE file for more information.
 */

requireFile("urbi/loadable.u");
requireFile("urbi/call-message.u");
requireFile("urbi/channel.u");
requireFile("urbi/global.u");
requireFile("urbi/exception.u");
requireFile("urbi/control.u");

/*-----------------------.
| Profiling operations.  |
`-----------------------*/

class Global.Profile
{
  class Function
  {
    function asString()
    {
      "%s('%s', %s, %.6f, %.6f)"
      % [type, name, calls, selfTime, selfTimePer]
    };
  };

  function asString()
  {
    var str = "Profile(\n"
              "  %-25s: %s\n"
              "  %-25s: %.6f\n"
              "  %-25s: %.6f\n"
              "  %-25s: %s\n"
              "  %-25s: %s\n\n"
              % ["Yields",                  yields,
                 "Total time (s)",          totalTime,
                 "Wall-clock time (s)",     wallClockTime,
                 "Function calls",          totalCalls,
                 "Max function call depth", maxFunctionCallDepth] |

    calls.each(function (var c) { c.selfTime *= 1000000 }) |
    var selfTimes = calls.map(function (var c) { c.selfTime }) |
    var selfTimePers = calls.map(function (var c) { c.selfTimePer }) |
    function computeUnit(values)
    {
      // Values are expected to be in 'us'.
      var min = values.filter(function (var v){ v != 0 }).min |
      var factor |
      var unit |
      for (var i : [6, 3, 0])
      {
        factor = 10 ** i |
        if (i != 0 && min / factor < 1)
          continue |

        switch (i)
        {
          case 6:
            unit = " (s)" |
          case 3:
            unit = "(ms)" |
          case 0:
            unit = "(us)" |
        } |

        break
      } |
      (factor, unit)
    } |
    var selfTimeUnit = computeUnit(selfTimes) |
    var selfTimePerUnit = computeUnit(selfTimePers) |

    str += "  .---------------------------------------------------------------.\n"
           "  |   Function   |  Calls  |    Self time    |  Self time / call  |\n"
           "  |              |         |       %s      |        %s        |\n"
           "  |--------------+---------+-----------------+--------------------|\n"
           % [selfTimeUnit[1], selfTimePerUnit[1]] |

    var totalSelfTimes = 0 |
    var totalSelfTimePers = 0 |
    for (var c: calls)
    {
      str += "  | %12s | %7s | %15.6f | %18.6f |\n"
             % [c.name, c.calls, c.selfTime / selfTimeUnit[0],
                c.selfTimePer / selfTimePerUnit[0]] |
      totalSelfTimes    += c.selfTime |
      totalSelfTimePers += c.selfTimePer |
    } |

    str += "  |--------------+---------+----------------+--------------------|\n"
           "  | %12s | %7s | %15.6f | %18.6f |\n"
           "  '--------------'---------'----------------'--------------------'\n)"
           % ["Total", totalCalls, totalSelfTimes / selfTimeUnit[0],
              totalSelfTimePers / selfTimePerUnit[0]]
  };
};
