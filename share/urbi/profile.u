/*
 * Copyright (C) 2011, Gostai S.A.S.
 *
 * This software is provided "as is" without warranty of any kind,
 * either expressed or implied, including but not limited to the
 * implied warranties of fitness for a particular purpose.
 *
 * See the LICENSE file for more information.
 */

requireFile("urbi/loadable.u");
requireFile("urbi/call-message.u");
requireFile("urbi/channel.u");
requireFile("urbi/global.u");
requireFile("urbi/exception.u");
requireFile("urbi/control.u");

/*-----------------------.
| Profiling operations.  |
`-----------------------*/

class Global.Profile
{
  class Function
  {
    function asString()
    {
      "%s('%s', %s, %.6f, %.6f)"
      % [type, name, calls, selfTime, selfTimePer]
    };
  };

  function asString()
  {
    function computeUnit(values)
    {
      // Keep original values and units in object:
      var calls = this.calls |
      // Compute the optimal unit for given values.
      // Values are expected to be in 'us'.
      var max = values.filter(function (var v){ v != 0 }).max |
      var factor |
      var unit |
      for (var i : [6, 3, 0])
      {
        factor = 10 ** i |
        if (max / factor < 1)
          continue |

        switch (i)
        {
          case 6:
            unit = " s" |
          case 3:
            unit = "ms" |
          case 0:
            unit = "us" |
        } |

        break
      } |
      (factor, unit)
    } |

    // Convert selfTimes to 'us':
    calls.each(function (var c)
    {
      c.selfTime    *= 1000000 |
      c.selfTimePer *= 1000000
    }) |
    // Compute unit for times:
    var timeUnit        = computeUnit(calls.map(function (var c) { c.selfTime    })) |
    // Compute unit for selfTimePers:
    var selfTimePerUnit = computeUnit(calls.map(function (var c) { c.selfTimePer })) |
    // Convert total times in 'us' and then in unit computed
    // previously (do not override object values):
    var totalTime     = totalTime * 1000000 / timeUnit[0] |
    var wallClockTime = wallClockTime * 1000000 / timeUnit[0] |
    // Convert selfTimes and selfTimePers to units computed previously:
    calls.each(function (var c)
    {
      c.selfTime    /= timeUnit[0] |
      c.selfTimePer /= selfTimePerUnit[0]
    }) |

    var str = "Profile(\n"
              "  %-21s %6s\n"
              "  %-21s %6.2f\n"
              "  %-21s %6.2f\n"
              "  %-21s %6s\n"
              "  %-21s %6s\n\n"
              % ["Yields:",                             yields,
                 "Total time (%s):"      % timeUnit[1], totalTime,
                 "Wall-clock time (%s):" % timeUnit[1], wallClockTime,
                 "Function calls:",                     totalCalls,
                 "Max depth:",                          maxFunctionCallDepth] |
    str +=
    "  .-------------------------------------------------------------------.\n"
    "  |   function   |   %%    | cumulative |  self  |  calls  |   self    |\n"
    "  |              |        |    (%s)    |  (%s)  |         | (%s/call) |\n"
    "  |--------------+--------+------------+--------+---------+-----------|\n"
    % [timeUnit[1], timeUnit[1], selfTimePerUnit[1]] |

    var cumulative = 0 |
    for (var c: calls)
    {
      str += "  | %12s | %6.2f | %10.2f | %6.2f | %7s | %9.3f |\n"
             % [{if (c.name.empty) "<anonymous>" else c.name},
                c.selfTime / totalTime * 100.0,
                cumulative += c.selfTime,
                c.selfTime,
                c.calls,
                c.selfTimePer] |
    } |
    str += "  '--------------'--------'------------'--------'---------'-----------'\n"
           ")"
  };
};
