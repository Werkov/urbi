class Global.Tutorial {};
do (Global.Tutorial)
{
  // Don't use the topLevel channel, since it quotes the \n and so on.
  class channel : Channel
  {
    init("tutorial");
    quote = false;

    function '<<'(s)
    {
      lobby.write(s);
    };

    function center(s)
    {
      this << (" " * ((76 - s.length) / 2));
      this << s;
      this << "\n";
    };

    function delim(c)
    {
      this << (c * 76 + "\n");
    };

    function lf()
    {
      this << "\n"
    };

    function section(s)
    {
      lf;
      delim("*");
      center(s);
      delim("*");
      lf;
    };

    function point(s)
    {
      lf;
      center(s);
      delim("-");
      lf;
    };

    function description(s)
    {
      this << s;
      lf;
      lf;
    };

    function end()
    {
      lf;
      delim("*");
      center("End of Urbi tutorial");
      delim("*");
      lf;
    };
  };

  // Toplevel entry
  var entry;
  // Next event
  var next;

  function doNext()
  {
    next.'emit';
  };

  function init(start)
  {
    entry = start;
    start.setTutorial(this);
    next = Event.new;
  };

  function start()
  {
    entry.start;
    Tutorial.channel.end;
  };

  class Entry
  {
    // The owner
    var tutorial;
    function start() {};
    function setTutorial(tuto)
    {
      tutorial = tuto;
    };
  };

  class Point : Entry
  {
    // name of the section,
    // explanation text,
    // code to run when entering,
    // code to run when leaving (either via "next" or automatically,
    // condition to fulfill to pass automatically to the next section).
    function init
    {
      var this.name = call.argAt(0);
      var this.text = call.argAt(1);
      var this.onEnter = call.args[2];
      var this.onLeave = call.args[3];
      var this.condition = call.args[4];
    };

    function start()
    {
      Tutorial.channel.point(name);
      Tutorial.channel.description(text);
      onEnter.eval;
      var cond = Tag.new;
      cond: at (condition.eval)
        tutorial.next.'emit';
      waituntil(tutorial.next?);
      cond.stop;
      onLeave.eval;
    };
  };

  class Section : Entry
  {
    var entries = [];
    var name = "";

    function init
    {
      var args = call.evalArgs;
      this.name = args[0];
      entries = args.removeFront;
    };

    function setTutorial(tuto)
    {
      tutorial = tuto;
      for (var entry : entries)
        entry.setTutorial(tuto);
    };

    function '<<' (entry)
    {
      entries << entry;
    };

    function start()
    {
      Tutorial.channel.section(name);

      for (var entry: entries)
        entry.start
    };
  };
};

load("urbi/tutorial-content.u");
var tutorial = Tutorial.new(tutorial_content);

function next()
{
  tutorial.doNext;
};
