m4_pattern_allow([^URBI_(PATH|SERVER)$])         -*- shell-script -*-
URBI_INIT

# Avoid zombies and preserve debugging information.
cleanup ()
{
  local exit_status=$?

  # We can be killed even before children are spawned.
  test -n "$children" ||
    exit $exit_status

  # In case we were caught by set -e, kill the children.
  children_kill
  children_harvest
  children_check_skip
  children_report

  local server_sta=$(children_status server)
  case $exit_status:$server_sta in
    (0:142)
	 verbose "Server killed after a timeout.";;
    (176:*) # Maybe the server exited for SKIP etc.
	 exit $server_sta;;
  esac

  # Don't check for before because the server may failed before any other
  # children get started.

  local children_sta=$(children_status)
  case $exit_status:$children_sta in
    (0:0) ;;
    (0:*) # Maybe a children exited for SKIP etc.
	 exit $children_sta;;
    (*:*) # If the checker failed, there is a big problem.
	 error SOFTWARE "$0 itself failed with $exit_status";;
  esac
  # Don't clean before calling children_status...
  # test x$VERBOSE != x || children_clean

  # rst_expect sets exit=false if it saw a failure.
  $exit
}
trap cleanup 0


# Overriden to include the test name.
stderr ()
{
  local i
  for i
  do
    echo >&2 "$(basename $0): $me: $i"
  done
  echo >&2
}


## -------------- ##
## Main program.  ##
## -------------- ##

exec 3>&2

check_dir abs_builddir bin/liburbi-check

# Make it absolute.
chk=$(absolute "$1")
if test ! -f "$chk.cc"; then
  fatal "no such file: $chk.cc"
fi

# ./../../../tests/2.x/andexp-pipeexp.chk -> 2.x
medir=$(basename $(dirname "$chk"))
# ./../../../tests/2.x/andexp-pipeexp.chk -> 2.x/andexp-pipeexp
me=$medir/$(basename "$chk" ".cc")
# ./../../../tests/2.x/andexp-pipeexp.chk -> andexp-pipeexp
meraw=$(basename $me)    # MERAW!

srcdir=$(absolute $srcdir)
export srcdir
# Move to a private dir.
mkcd $me.dir

# Be verbose.
export GD_LEVEL=DUMP

# Help debugging
set | rst_pre "$me variables"

# Leaves trailing files, so run it in subdir.
find_urbi_server

# Compute expected output.
sed -n -e 's,//= ,,p' $chk.cc >output.exp
touch error.exp
echo 0 >status.exp

# Start it.
spawn_urbi_server

# Start the test.
instrument -o "remote.val" -- \
  ../../liburbi/$meraw$EXEEXT --port-file server.port
echo "$instrument_result" >remote.cmd
$instrument_result >remote.out.raw 2>remote.err &
children_register remote

# Let some time to run the tests.
children_wait 10

# Ignore the "client errors" and ping maintenance.
#
# Ignore "__gostai_private__connection_timeout" because it duplicates
# "client errors" mesages.
#
# Ignore "warning: no debug symbols in executable (-arch i386)"
# because on OS X, when instrumenting, valgrind might call dsymutil
# which dumps this message on stdout (!)  if the executable does not
# have debug symbols.
sed -e '/^E End of file/d'                                              \
    -e '/^E client_error End of file/d'                                 \
    -e '/^E client_error Operation canceled/d'                          \
    -e '/^E __gostai_private__connection_timeout .*/d'                  \
    -e '/^warning: no debug symbols in executable (-arch i386)/d'       \
  remote.out.raw >remote.out.eff

# Compare expected output with actual output.
rst_expect output remote.out
rst_pre "Error output" remote.err

# Display Valgrind report.
rst_pre "Valgrind" remote.val

# Exit with success: liburbi-check made its job.  But now clean (on
# trap 0) will check $exit to see if there is a failure in the tests
# and adjust the exit status accordingly.
exit 0
