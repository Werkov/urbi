#! @SHELL@
# @configure_input@

: ${EXEEXT='@EXEEXT@'}
: ${LIBJPEG_NAME='@LIBJPEG_NAME@'}
: ${LIBSFX='@LIBSFX@'}
: ${kernel_builddir='@abs_top_builddir@/..'}
: ${kernel_srcdir='@abs_top_srcdir@/..'}
: ${sdk_remote_builddir='@abs_top_builddir@'}
: ${sdk_remote_srcdir='@abs_top_srcdir@'}

: ${program=$sdk_remote_builddir/src/bin/urbi-launch$EXEEXT}

###################### Common between urbi-launch.in and urbi.in: begin.

set -e

case $VERBOSE in
  (x) set -x;;
esac

stderr ()
{
  local i
  for i
  do
    echo >&2 "$0: $i"
  done
}

verbose ()
{
  test -z "$VERBOSE" ||
    stderr "$@"
}

# prependenv VAR VAL
# ------------------
# Set env verbosely $VAR=$VAL.
setenv ()
{
  eval "$1=\$2"
  export $1
  verbose "$1 = $2"
}

# prependenv VAR VAL
# ------------------
# Set env verbosely $VAR=$VAL${$VAR}.
prependenv ()
{
  local val
  eval "val=\$2\$$1"
  setenv "$1" "$val"
}

# ld_path_add DIR...
# ------------------
# Extend the appropriate envvar so that shared libraries in DIR... will
# be found.
ld_path_add ()
{
  local d
  local ds=
  for d
  do
    if test -d $d; then
      ds="$ds$d:"
    fi
  done
  case $(uname -s) in
    (CYGWIN*) prependenv PATH "$ds" ;;
    (Darwin)  prependenv DYLD_LIBRARY_PATH "$ds";;
    (*)       prependenv LD_LIBRARY_PATH "$ds";;
  esac
}

# repath PATH
# -----------
# Set $repath_res to the native path.
repath ()
{
  case $(uname -s) in
    (CYGWIN*)  repath_res=$(cygpath --windows "$1");;
    (*)        repath_res=$1;;
  esac
}

# urbi_lib ENVBASENAME PATH
# -------------------------
urbi_lib ()
{
  local env="URBI_ROOT_LIB$1"
  local path="$2$LIBSFX"
  repath "$path"
  setenv $env $repath_res
}

###################### Common between urbi-launch.in and urbi.in: end.

# If this SDK-Remote is inside an Urbi SDK, then use that very Urbi
# SDK, otherwise use the installed one.
if test -f $sdk_remote_builddir/../src/Makefile; then
  urbi_lib PLUGIN "$kernel_builddir/src/.libs/libuobject"
  # Use the shipped Urbi files.
  URBI_PATH="$kernel_srcdir/share:$kernel_builddir/share:$URBI_PATH"
  case $(uname -o 2>/dev/null) in
    (Cygwin)
      # We use colon as separators, not semicolon.
      URBI_PATH=$(cygpath -p -w "$URBI_PATH" | sed -e 's/;/:/g')
      ;;
  esac
  export URBI_PATH
fi

# Find the noninstalled libport libraries.
libport_builddir=$sdk_remote_builddir/libport
# Careful, do not add directory containing libuobject.
ld_path_add $libport_builddir/lib/*/.libs               \
            $sdk_remote_builddir/*/.libs                \
            $sdk_remote_builddir/src/liburbi/.libs

urbi_lib JPEG      "$sdk_remote_builddir/jpeg/.libs/lib$LIBJPEG_NAME"
urbi_lib PORT      "$libport_builddir/lib/libport/.libs/libport"
urbi_lib SCHED     "$libport_builddir/lib/sched/.libs/libsched"
urbi_lib SERIALIZE "$libport_builddir/lib/serialize/.libs/libserialize"
urbi_lib URBI      "$sdk_remote_builddir/src/liburbi/.libs/liburbi"
urbi_lib REMOTE    "$sdk_remote_builddir/src/libuobject/.libs/libuobject"

# Find the images.
export URBI_SHARE="$kernel_srcdir/share"

verbose "running $program $*"
exec "$program" "$@"

# Local Variables:
# mode: shell-script
# End:
