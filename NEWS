New in 2.0

* Extensive overhaul:

** Syntax changes:
// FIXME: LIST THE SYNTAX CHANGES COMPARED TO KERNEL1

** True OO support

// FIXME: More things must be missing here...

New in 1.0

* New keyword `taglist' displays the tags of currently running commands.

* UObject::send(string) is now available to send URBI code from any UObject
  (plugged or remote). The code is executed immediately in plugin mode, which
  makes it convenient to add specialized initialization in UObject
  constructors to setup some useful wrappers.

New in 1.0 RC2:

* USensor becomes UOwned (with backward compatibility)

* It is new OK to redefine a function that already exist, you will get a
  warning in scrict mode only.

* inherit changes to 'inherits' (same for disinherit)

* Important bug fix on UNotifyChange: was not working with motor variables
  like headPan.val from within a UObject. NotifyAccess and NotifyChange
  simultaneous usage has also been improved in plugin mode.


New in 1.0 RC1:

* New support for multi events. Example:

  at (e(x)) echo x;
  emit e(4) & emit e(11);
  [00018969:notag] *** 11.000000
  [00018969:notag] *** 4.000000

* 'events' keyword can be used to list existing declared events.

* Reminder: do not use 'return' inside functions defining background commands
  like 'at', return will terminate function and everything it contains.
  Simply end the function without calling return, and use a comma when you
  call it:

  function f()
  {
    at (test) ping;
  };
  f(),

* The inherit/disinherit keywords are now available to manage inheritance and
  multiple inheritance at runtime. Syntax:  

  class1 inherit class2;
  class1 disinherit class2;

* The 'events' command lists all defined events

* The :: construct allows you to call a parent method inside a redefined
  subclass method:

  function parent.f(x) { ... };
  sub = new parent;
  function sub.f(x)
  {
    parent::f(x);
    ...
  };

  This is a powerful feature needed in more advanced object-oriented
  programming.

