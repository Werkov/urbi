#! /bin/sh

set -e

# stderr LINE...
# --------------
# Issue the lines on stderr.
stderr ()
{
  local i
  for i
  do
    echo >&2 "$0: $i"
  done
}


# run LINE...
# --------------
# Do the "LINE" verbosely.
run ()
{
  local i
  for i
  do
    stderr "$i"
    eval "$i"
  done
}

# error STATUS LINE...
# ---------------------
# Issue the lines as error, and exit STATUS.
error ()
{
  local sta=$1
  shift
  stderr "$@"
  exit $sta
}

# fatal LINE...
# -------------
# Issue the lines as error, and exit 1.
fatal ()
{
  error 1 "$@"
}

# usage
# -----
# Report usage and exit successfully.
usage ()
{
  cat <<EOF
usage: $0 [OPTIONS...] [RELEASE...]

Call this script when a release is to be publish to the download
site.  Don't forget to tag it if it is a release.

RELEASE can be specified (e.g., \`2.0-rc-1'), otherwise it is computed
automatically from the latest time stamp.

The packages to publish are looked for in:
  from=$from
The packages will be publish in:
  to=$to

Options:
  -h, --help        display this message and exit successfully
  -u, --user NAME   use NAME to log on gate [$login]
EOF
  exit 0
}

# getargs
# -------
# Process the command line arguments.
getargs ()
{
  while test $# -ne 0;
  do
    case $1 in
      (-h|--help) usage;;
      (-u|--user) shift; login=$1;;
      (-*) fatal "invalid option: $1";;
      (*) latest=$1;;
    esac
    shift
  done
}

# scp_user LOC
# ------------
# From an scp-like location, return the user.
# foo@bar.baz.com:my/path -> foo
scp_user ()
{
  echo "$1" | sed -e 's/@.*//'
}

# scp_host LOC
# ------------
# From an scp-like location, return the host name.
# foo@bar.baz.com:my/path -> bar.baz.com
scp_host ()
{
  echo "$1" | sed -e 's/.*@//;s/:.*//'
}

# scp_dir LOC
# -----------
# From a scp-like location, return the path.
# foo@bar.baz.com:my/path -> my/path
scp_dir ()
{
  echo "$1" | sed -e 's/.*://'
}

# scp_base LOC
# ------------
# From a scp-like location, return the basename of the path.
# foo@bar.baz.com:my/path -> path
scp_base ()
{
  echo "$1" | sed -e 's/.*://;s,.*/,,'
}

# scp_point LOC
# --------------
# From a scp-like location, return the connection-point.
# foo@bar.baz.com:my/path -> foo@bar.baz.com
scp_point ()
{
  echo "$1" | sed -e 's/:.*//'
}

# indirect_scp SRC DST-DIR
# ------------------------
# Implement scp SRC DST-DIR, except that it does not work when SRC and
# DST-DIR are both remote.  So do it via localhost.  DST-DIR is a directory
# (created if needed), not the qualified name.
indirect_scp ()
{
  local src=$1
  local dst=$2
  local base=$(scp_base "$src")

  run                                                           \
    "scp \"$src\" /tmp/"                                        \
    "ssh $(scp_point "$dst") 'mkdir -p $(scp_dir $dst)'"        \
    "scp /tmp/$base $dst"                                       \
    "ssh $(scp_point "$to") 'chmod 640 $(scp_dir $dst)/$base'"
}

## ------ ##
## Main.  ##
## ------ ##

# The (scp-like) directory that contains the tarballs.
from=share.gostai.com:/home/share/built/urbi-sdk/releases

# The (scp-like) location into which the per-version directories are.
to=downloads@www.gostai.com:gostai.com-downloads/urbi

exts="-linux -macos -windows .tar.bz2"

getargs "$@"

# Get the content of the directory containing the latest successful builds:
# urbi-sdk-2.0-beta3-linux-x86.tar.bz2
# urbi-sdk-2.0-beta3-macos-x86.tar.bz2
# urbi-sdk-2.0-beta3-linux-x86-gcc4-debug_dynamic.tar.bz2
# urbi-sdk-2.0-beta2-498-g4f7f361-windows-x86.zip
# urbi-sdk-2.0-beta2-498-g4f7f361-linux-x86-gcc4-debug_dynamic.tar.bz2
# urbi-sdk-2.0-beta2-498-g4f7f361-linux-x86.tar.bz2
# urbi-sdk-2.0-beta2-498-g4f7f361-macos-x86.tar.bz2
version=$(ssh $(scp_point "$from") \
        "cd $(scp_dir "$from") && \
           ls -1t | sed 1q")
all=$(ssh $(scp_point "$from") \
        "cd $(scp_dir "$from")/$version && \
           ls -1t *.bz2 *.exe *.zip")

# Make sure that we have the same version for all the architectures.
test -n "$latest" ||
  latest=$(echo "$all" |
      perl -n -e 'if (m/(?:kernel|urbi-(?:runtime|sdk))
                        -
                        (
                          (?:\d+(?:\.\d+)+)
                          (?:-(?:beta|rc-\d+))?
                          (?:-g[\da-f]{7})?
                        )
                        # Possibly an architecture.
                        (?:
                          -(?:linux|macos|windows)
                          -(?:ARM|ppc|x86)
                          (?:-gcc4-debug_dynamic|vcxx200\d)?
                        )?/x)
                  { print "$1\n"; exit 0; }')

# The latest version number.
stderr "latest: $latest"

test -n "$latest" ||
  fatal "cannot find latest version from:" $all

for name in urbi-sdk urbi-runtime
do
  for ext in $exts
  do
    case $name$ext in
      # There is no source for the runtime.
      (urbi-runtime.tar.bz2) continue;;
    esac
    pack=$(echo "$all" | grep -F -e "$name-$latest$ext" || true)
    test -n "$pack" ||
      fatal "$name-$latest$ext does not exist"
  done
done

for ext in $exts
do
  for pack in $(echo "$all" | grep -e "$latest$ext")
  do
    echo " --------------- $pack ---------------- "
    indirect_scp "$from/$latest/$pack" "$to/$latest"
    indirect_scp "$from/$latest/$pack.md5" "$to/$latest"
  done
done
