#! /bin/sh
#

set -x
set -e

stderr ()
{
  local i
  for i
  do
    echo >&2 "$0: $i"
  done
}

errors=0
complain ()
{
  stderr "$@"
  errors=$((errors + 1))
}

error ()
{
  local status="$1"
  shift
  stderr "$@"
  exit $status
}

fatal ()
{
  error 1 "$@"
}

## ----------- ##
## Variables.  ##
## ----------- ##

# If some of those need to be chosen by configure, add an entry
# there and add the "@" form.
: ${CP=cp}
: ${FIND=find}
: ${GIT=git}
: ${MKDIR_P="mkdir -p"}
: ${MV=mv}
: ${RM="rm -f"}
: ${SED="sed"}
: ${TAR=tar}

: ${TMPDIR=/tmp}

case $# in
  (10);;
  (*) fatal "not enough arguments: $#, expecting 10";;
esac

# Those would best be set through configure (except "updir"
# which sets the destination).

# Baby does not want to change the $1 passed to this script.  Let him
# play with the poo poo in his diapers while we work :)
PROJECT='@PACKAGE_TARNAME@'
srcdir=$2
builddir=$3
DESTDIR=$4
updir=$5
ARCH=$6       # ARM|x86|ppc
OS=$7         # linux|windows|macos
COMP=$8       # ex. gcc4
MODE=$9       # [release|debug]_[static|dynamic]
prefix=${10}

# Set release_mode depending on whether we are building a release version
# or a development version.
case $MODE in
  (release*)    release_mode=true;;
  (*)           release_mode=false;;
esac

# Host and build machines.
make_var ()
{
  $SED -ne "/^$1 = /{s///;p;q;}" $builddir/Makefile
}
build=$(make_var build)
host=$(make_var  host)
buildprefix=$(make_var prefix)
stderr "build=$build" "host=$host" "prefix=$buildprefix"

if test "$prefix" != "$buildprefix"; then
  stderr '**********************************'   \
         '$prefix != $buildprefix'              \
         "($prefix != $buildprefix)"            \
         "proceeding with prefix=$buildprefix"
  prefix=$buildprefix
fi

## -------------- ##
## Post-install.  ##
## -------------- ##

# Shared lib dependencies.
#
# Check that we don't depend on boost.  Or rather, check that we don't
# have invalid locations.  And possibly make the libraries and
# executables relocatable.
case $OS in
  (linux|macos)
    $srcdir/scripts/check-lib-deps              \
      --verbose                                 \
      --destdir "$DESTDIR"                      \
      "$DESTDIR"
    ;;
esac

# Boost headers.
#
$srcdir/scripts/check-include-deps              \
  --include-dir "$DESTDIR$prefix/include"       \
  --verbose                                     \
  $builddir

# Documentation.
#
# Copy the instructions at the top-level.
here=$(pwd)
cd "$DESTDIR$prefix"
for i in share/doc/urbi-sdk/*.txt
do
  case $OS in
    (windows)
      unix2dos "$i"
      $CP "$i" .
      ;;
    (*)
      ln -s "$i"
      ;;
  esac
done
cd $here

# 1. Fix libtool usage of +=.
# 2. Remove -nostdlib and explicit stdlib from libtool.
#
# The resulting libtool may not work, but it is not working without
# patch anyway...
$FIND "$DESTDIR$prefix" -name libtool |
  xargs perl -pi                                                        \
       -e 's/^\s*eval "\$1\+=\\\$2"$/eval "\$1=\\\$\$1\\" \$2\\""/;'    \
       -e 's/^predep_objects=.*/#- $&/;'                                \
       -e 's/postdep_objects=.*/#- $&/;'                                \
       -e 's/-nostdlib//g;'

# Remove ccache and -Werror from the param.mk and libtool.
# Remove also hidden visibility as it prevents linking uobjects using
# boost symbols inside libport.
$FIND "$DESTDIR$prefix" '(' -name param.mk -or -name libtool ')' |
  xargs perl -pi \
        -e 's/ccache //;'                       \
        -e 's/g(cc|\+\+)(?:-[\d.]+)/g$1/;'      \
        -e 's/-Werror//;'                       \
        -e 's/-fvisibility=hidden//;'           \
        -e 's/-fvisibility-inlines-hidden//;'

# Restore +x on libtool.
$FIND "$DESTDIR$prefix" -name libtool -exec chmod u+x '{}' ';'

# Set more permissive access rights.
chmod -R a+rX "$DESTDIR$prefix"

case $OS in
  (windows)
    # On Windows, copy the .bat file.
    $CP "$builddir/scripts/urbi.bat" "$DESTDIR$prefix"
    unix2dos "$DESTDIR$prefix/urbi.bat"
    ;;
  (*)
    # When building a release for non-Windows platforms, strip the
    # binaries and the libraries.  Pay attention that on OS X strip
    # when given no option behaves as "strip -S -x -X":
    #
    # -S Remove the debugging symbol table entries (those created by
    # -the -g option to cc(1) and other compilers).
    #
    # -X Remove the local symbols whose names begin with `L'.
    #
    # -x Remove all local symbols (saving only global symbols).
    #
    # As a result, the build (on Leopard) works on Leopard, but not
    # on Snow Leopard (I don't know why exactly).  On Linux, too
    # "strip" does more than simply "strip -S", but since it seems to
    # work and it does save space, use the fully blown strip:
    #  58M libuobject.so     no strip
    # 7.8M libuobject.2.so   strip -S
    # 6.4M libuobject.3.so   strip
    if $release_mode; then
      case $OS in
        (macos) : ${STRIP='strip -S'};;
        (*)     : ${STRIP=strip};;
      esac
      # Do not show errors -- there are shell scripts there.
      $FIND "$DESTDIR$prefix/bin" -type f |
        xargs $STRIP 2>/dev/null || true
      $FIND "$DESTDIR$prefix" -type f '(' -name '*.so.*'        \
                       -o -name '*.so'          \
                       -o -name '*.dylib'       \
                       -o -name '*.a'           \
                       ')' |
        xargs $STRIP || true
    fi
    ;;
esac

# We have some problems with the *.la files.  For instance, although
# we use Boost as static libraries, they appear as runtime
# dependencies.  We could try to fix the *.la files, but it appears to
# work well without them.
$FIND "$DESTDIR$prefix" -name '*.la' -delete

# MANIFEST.
#
# Build a MANIFEST with the list of files to install into the final
# destination.
$FIND "$DESTDIR$prefix" -type f -print |
  $SED -e "s,^$DESTDIR$prefix/,,"      \
  >"$DESTDIR$prefix/MANIFEST"


## ----------- ##
## Packaging.  ##
## ----------- ##

# Determine the version from the latest component of the tag. This will
# ease ordering.
version=$(cd "$srcdir" && $GIT describe | $SED -e "s,^preview/,,;s,/,-,g")
# If we are in release mode, do not tell it, the final users won't care
if $release_mode; then
  name="$PROJECT-$version-$OS-$ARCH-$COMP"
else
  name="$PROJECT-$version-$OS-$ARCH-$COMP-$MODE"
fi

# Create a fresh directory in which we put the subdirectories of the
# $install directory.
packagedir="$updir/$name"
$RM -r "$packagedir"
$MKDIR_P "$packagedir"
(cd "$DESTDIR$prefix" && $TAR cf - .) | (cd "$packagedir" && $TAR xpBf -)

if test "$errors" -ne 0; then
  fatal "there were $errors errors."
fi
