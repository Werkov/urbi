#! /bin/sh
#

set -x
set -e

# Those would best be set through configure (except "updir"
# which sets the destination).
PROJECT="$1"
srcdir="$2"
builddir="$3"
DESTDIR="$4"
updir="$5"
ARCH="$6"       # ex. x86
OS="$7"         # ex. linux
COMP="$8"       # ex. gcc4
MODE="$9"       # [release|debug]_[static|dynamic]
prefix="${10}"

# If some of those need to be chosen by configure, add an entry
# there and add the "@" form.
CP=cp
FIND=find
GIT=git
MKDIR_P="@MKDIR_P@"
MV=mv
RM="rm -f"
SED="@SED@"
TAR=tar

TMPDIR=${TMPDIR-/tmp}

# Determine the version from the exact tag if there is any, or the
# sha-1 otherwise
version=$(cd "$srcdir" && $GIT describe --exact-match 2> /dev/null || $GIT rev-parse --short HEAD)
# If we are in release mode, do not tell it, the final users won't care
if [ $MODE = release_dynamic ]; then
  name="${PROJECT}-${ARCH}-${OS}-${COMP}-${version}"
else
  name="${PROJECT}-${ARCH}-${OS}-${COMP}-${MODE}-${version}"
fi
packagedir="${updir}/${name}"

# Create a fresh directory in which we put the subdirectories of the
# $install directory.
$RM -r "$packagedir"
$MKDIR_P "$packagedir"
(cd "$DESTDIR$prefix" && $TAR cf - .) | (cd "$packagedir" && $TAR xpBf -)

# Build a MANIFEST with the list of files to install into the final
# destination
MANIFEST="$TMPDIR/MANIFEST.tmp.$$"
(cd "$packagedir" && $FIND . -type f -print | $SED -e "s,^./,,") > "$MANIFEST"
$MV "$MANIFEST" "$packagedir/MANIFEST"

# Copy the instructions at the top-level
$CP "${srcdir}/doc/REPORTING-BUGS.txt" "$packagedir"
$CP "${srcdir}/doc/QUICK-START.txt" "$packagedir"

# On Windows, copy the .bat file
if [ $OS = windows ]; then
  $CP "${srcdir}/doc/urbi-console.bat" "$packagedir"
fi
