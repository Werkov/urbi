#! /bin/sh
#

set -x
set -e

stderr ()
{
  local i
  for i
  do
    echo >&2 "$0: $i"
  done
}

errors=0
complain ()
{
  stderr "$@"
  errors=$((errors + 1))
}

error ()
{
  local status="$1"
  shift
  stderr "$@"
  exit $status
}

fatal ()
{
  error 1 "$@"
}

## ----------- ##
## Variables.  ##
## ----------- ##

# If some of those need to be chosen by configure, add an entry
# there and add the "@" form.
: ${CP=cp}
: ${FIND=find}
: ${GIT=git}
: ${MKDIR_P="mkdir -p"}
: ${MV=mv}
: ${RM="rm -f"}
: ${SED="sed"}
: ${TAR=tar}

: ${TMPDIR=/tmp}

case $# in
  (10);;
  (*) fatal "not enough arguments: $#, expecting 10";;
esac

# Those would best be set through configure (except "updir"
# which sets the destination).

PROJECT='@PACKAGE_TARNAME@'
URBI_HOST_COMP='@URBI_HOST_COMP@'
URBI_HOST_CPU='@URBI_HOST_CPU@'
URBI_HOST_OS='@URBI_HOST_OS@'
abs_top_buildir='@abs_top_buildir@'
abs_top_srcdir='@abs_top_srcdir@'
buildprefix='@prefix@'
host='@host@'

srcdir=$2
builddir=$3
DESTDIR=$4
updir=$5
ARCH=$6       # ARM|x86|ppc
OS=$7         # linux|windows|macos
COMP=$8       # ex. gcc4
MODE=$9       # [release|debug]_[static|dynamic]
prefix=${10}

check_equal ()
{
  local lhs
  local rhs
  eval "lhs=\$$1"
  eval "rhs=\$$2"
  if test "$lhs" != "$rhs"; then
    stderr "*******************"                \
           "$1 != $2"                           \
           "($lhs != $rhs)"                     \
           "proceeding with $1 = $rhs"
    eval "$1=\$$2"
  fi
}
check_equal ARCH   URBI_HOST_CPU
check_equal COMP   URBI_HOST_COMP
check_equal OS     URBI_HOST_OS
check_equal build  abs_top_buildir
check_equal prefix buildprefix
check_equal srcdir abs_top_srcdir

# Set release_mode depending on whether we are building a release version
# or a development version.
case $MODE in
  (release*)    release_mode=true;;
  (*)           release_mode=false;;
esac

stderr "build=$build" "host=$host" "prefix=$buildprefix"

if test "$prefix" != "$buildprefix"; then
  stderr '**********************************'   \
         '$prefix != $buildprefix'              \
         "($prefix != $buildprefix)"            \
         "proceeding with prefix=$buildprefix"
  prefix=$buildprefix
fi


## ----------- ##
## Packaging.  ##
## ----------- ##

# Determine the version from the latest component of the tag. This will
# ease ordering.
version=$(cd "$srcdir" && $GIT describe | $SED -e "s,^preview/,,;s,/,-,g")
# If we are in release mode, do not tell it, the final users won't care
if $release_mode; then
  name="$PROJECT-$version-$URBI_HOST_OS-$URBI_HOST_CPU-$URBI_HOST_COMP"
else
  name="$PROJECT-$version-$URBI_HOST_OS-$URBI_HOST_CPU-$URBI_HOST_COMP-$MODE"
fi

# Create a fresh directory in which we put the subdirectories of the
# $install directory.
packagedir="$updir/$name"
$RM -r "$packagedir"
$MKDIR_P "$packagedir"
(cd "$DESTDIR$prefix" && $TAR cf - .) | (cd "$packagedir" && $TAR xpBf -)

if test "$errors" -ne 0; then
  fatal "there were $errors errors."
fi
