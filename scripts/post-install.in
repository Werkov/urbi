#! /bin/sh

set -x
set -e

BOOST_SYSTEM_LDFLAGS='@BOOST_SYSTEM_LDFLAGS@'
COMPILATION_MODE_DEBUG='@COMPILATION_MODE_DEBUG@'
PROJECT='@PACKAGE_TARNAME@'
URBI_HOST_COMP='@URBI_HOST_COMP@'
URBI_HOST_CPU='@URBI_HOST_CPU@'
URBI_HOST_OS='@URBI_HOST_OS@'
builddir='@abs_top_builddir@'
host='@host@'
prefix='@prefix@'
srcdir='@abs_top_srcdir@'

boost_libdir=$(perl -e "'$BOOST_SYSTEM_LDFLAGS'"' =~ m{-L\s*([\w/]+)}
                         && print "$1\n"')

# Do not sort by alphabetical order here.  exec_prefix typically use
# $prefix, and libdir uses $exec_prefix.  Hence the double quotes too.
exec_prefix="@exec_prefix@"
bindir="@bindir@"
libdir="@libdir@"


## -------------- ##
## Post-install.  ##
## -------------- ##

# Shared lib dependencies.
#
# Check that we don't depend on boost.  Or rather, check that we don't
# have invalid locations.  And possibly make the libraries and
# executables relocatable.
case $DESTDIR:$URBI_HOST_OS in
  ('':*)
    # This is most probably an install performed by the developper in
    # her own tree.  Don't try to make it relocatable.
    ;;
  (*:linux|*:macos)
    $srcdir/scripts/check-lib-deps              \
      --verbose --verbose --verbose --verbose   \
      --destdir "$DESTDIR"                      \
      --host-os "$URBI_HOST_OS"                 \
      --prefix "$prefix"                        \
      --libdir "$libdir"                        \
      "$DESTDIR"
    ;;
  (*:windows)
    $srcdir/scripts/check-lib-deps              \
      --verbose --verbose --verbose --verbose   \
      --destdir "$DESTDIR"                      \
      --host-os "$URBI_HOST_OS"                 \
      --prefix "$prefix"                        \
      --libdir "$libdir"                        \
      --libpath "$boost_libdir"			\
      "$DESTDIR"
    ;;
esac

# Boost headers.
#
$srcdir/scripts/check-include-deps              \
  --include-dir "$DESTDIR$prefix/include"       \
  --verbose                                     \
  $builddir

# 1. Fix libtool usage of +=.
# 2. Remove -nostdlib and explicit stdlib from libtool.
#
# The resulting libtool may not work, but it is not working without
# patch anyway...
find "$DESTDIR$prefix" -name libtool |
  xargs perl -pi                                                        \
       -e 's/^\s*eval "\$1\+=\\\$2"$/eval "\$1=\\\$\$1\\" \$2\\""/;'    \
       -e 's/^predep_objects=.*/#- $&/;'                                \
       -e 's/postdep_objects=.*/#- $&/;'                                \
       -e 's/-nostdlib//g;'

# Remove ccache and -Werror from the param.mk and libtool.
# Remove also hidden visibility as it prevents linking uobjects using
# boost symbols inside libport.
find "$DESTDIR$prefix" '(' -name param.mk -or -name libtool ')' |
  xargs perl -pi \
        -e 's/ccache //;'                       \
        -e 's/g(cc|\+\+)(?:-[\d.]+)/g$1/;'      \
        -e 's/-Werror//;'                       \
        -e 's/-fvisibility=hidden//;'           \
        -e 's/-fvisibility-inlines-hidden//;'

# Restore +x on libtool.
find "$DESTDIR$prefix" -name libtool -exec chmod u+x '{}' ';'

# Set more permissive access rights.
chmod -R a+rX "$DESTDIR$prefix"

# Strip.
#
# When building a release for non-Windows platforms, strip the
# binaries and the libraries.  Pay attention that on OS X strip
# when given no option behaves as "strip -S -x -X":
#
# -S Remove the debugging symbol table entries (those created by
# -the -g option to cc(1) and other compilers).
#
# -X Remove the local symbols whose names begin with `L'.
#
# -x Remove all local symbols (saving only global symbols).
#
# As a result, the build (on Leopard) works on Leopard, but not
# on Snow Leopard (I don't know why exactly).  On Linux, too
# "strip" does more than simply "strip -S", but since it seems to
# work and it does save space, use the fully blown strip:
#  58M libuobject.so     no strip
# 7.8M libuobject.2.so   strip -S
# 6.4M libuobject.3.so   strip
case $COMPILATION_MODE_DEBUG:$URBI_HOST_OS in
  (false:macos) : ${STRIP='strip -S'};;
  (false:linux) : ${STRIP=strip};;
esac
if test -n "$STRIP"; then
  # Do not show errors -- there are shell scripts there.
  find "$DESTDIR$prefix/bin" -type f |
    xargs $STRIP 2>/dev/null || true
  find "$DESTDIR$prefix"                    \
          -type f '(' -name '*.so.*'        \
                   -o -name '*.so'          \
                   -o -name '*.dylib'       \
                   -o -name '*.a'           \
                   ')' |
    xargs $STRIP || true
fi

# We have some problems with the *.la files.  For instance, although
# we use Boost as static libraries, they appear as runtime
# dependencies.  We could try to fix the *.la files, but it appears to
# work well without them.
find "$DESTDIR$prefix" -name '*.la' -delete

# MANIFEST.
#
# Build a MANIFEST with the list of files to install into the final
# destination.
find "$DESTDIR$prefix" -type f -print |
  sed -e "s,^$DESTDIR$prefix/,,"      \
  >"$DESTDIR$prefix/MANIFEST"
