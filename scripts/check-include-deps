#! /usr/bin/perl -w

=head1 NAME

  check-include-deps - copy includes we depend upon.

=head1 SYNOPSIS

  check-include-deps [OPTIONS...] -i DESTDIR/include DIR...

=head1 DESCRIPTION

Traverse all the DIR... looking for Make-dependency files.  Select
those we are interested in (currently only /boost/), and copy them in
the destination include-dir.

Exit with failure if invalid dependencies remain.

=head1 OPTIONS

General options:

=over 4

=item B<-h>, B<--help>

Display this message and exit.

=item B<-i>, B<--include-dir>=I<include-dir>

Copy the selected files into I<include-dir>.  Mandatory option.

=item B<-q>, B<--quiet>

Be less verbose.  Accumulates.

=item B<-v>, B<--verbose>

Be more verbose.  Accumulates.

=back

=head1 FUNCTIONS

=over 4

=cut

use IO::File;       # IO::File.
use File::Basename; # dirname.
use File::Copy;     # copy.
use File::Find;     # find.
use File::Path;     # mkpath.
use strict;

# The base directory where dependencies will be copied into.
my $includedir;

# A hash whose keys are paths of needed files.
my %needed;

# Verbosity level.
my $verbose = 1;

=item C<verbose($level, @message)>

Report the C<@message> is C<$level> E<lt>= C<$verbose>.

=cut

sub verbose($@)
{
  my ($level, @message) = @_;
  map { print STDERR "$0: $_\n" } @message
    if $level <= $verbose;
}

sub wanted
{
  if ($File::Find::name =~ m(\.deps\/[^/]*\.Plo\z)s)
    {
      my $in = new IO::File("$_")
        or die "cannot open $File::Find::name: $!";
      while (my $line = $in->getline)
        {
          $needed{$1} = 1
            if ($line =~ m((.*/boost/.*):$));
        }
    }
}

######################################################################

=item C<help>

Generate the B<--help> message.  Generates the full man page when
C<$verbose>.

=cut

sub help ($)
{
  my ($verbose) = @_;
  use Pod::Usage;
  # See <URL:http://perldoc.perl.org/pod2man.html#NOTES>.
  pod2usage( { -message => "Copy include files we depend upon",
               -exitval => 0,
               -verbose => $verbose,
               -output  => \*STDOUT });
}

sub getopt ()
{
  use Getopt::Long;
  my %option = (
    "i|include-dir=s"   => \$includedir,
    "h|help"        => sub { help ($verbose) },
    "q|quiet"       => sub { --$verbose },
    "v|verbose"     => sub { ++$verbose },
    );
  Getopt::Long::Configure ("bundling", "pass_through");
  GetOptions (%option)
    or exit 1;

  die "passing --include-dir is mandatory\n"
    unless defined $includedir;

  warn "--include-dir does not end with `/include': $includedir\n"
    unless $includedir =~ /\/include$/;
}

## ------ ##
## Main.  ##
## ------ ##

getopt;
File::Find::find({wanted => \&wanted}, @ARGV);
map
{
  (my $base = $_) =~ s(^.*/include/)();
  my $to = dirname "$includedir/$base";
  verbose 2, "$_ => $to";
  if (! -d $to)
    {
      verbose 2, "mkdir -p $to";
      mkpath $to
        or die "cannot mkpath $to: $!";
    }

  copy "$_", "$to"
    or die "cannot copy `$_' to `$to': $!";
}
sort keys %needed;


## Local Variables:
## perl-indent-level: 2
## perl-continued-statement-offset: 2
## perl-continued-brace-offset: 0
## perl-brace-offset: 0
## perl-brace-imaginary-offset: 0
## perl-label-offset: -2
## cperl-indent-level: 2
## cperl-brace-offset: 0
## cperl-continued-brace-offset: 0
## cperl-label-offset: -2
## cperl-extra-newline-before-brace: t
## cperl-merge-trailing-else: nil
## cperl-continued-statement-offset: 2
## End:
