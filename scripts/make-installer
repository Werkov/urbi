#! /bin/sh

set -e
set -x

me=$(basename "$0")

## ----------- ##
## Functions.  ##
## ----------- ##

stderr ()
{
  local i
  for i
  do
    echo "$i"
  done | sed -e "s/^/$me: /" >&2
}

error ()
{
  local status="$1"
  shift
  local first="error: $1"
  shift
  stderr "$first" "$@"
  exit $status
}

fatal ()
{
  error 1 "$@"
}

# find_prog EXE...
# ----------------
# Set find_prog_exe to the first EXE found in the path, or set it to
# empty.
find_prog ()
{
  find_prog_res=
  local i
  for i in "$@"
  do
    if $i --version >/dev/null 2>&1; then
      find_prog_res=$i
      break
    fi
  done
}

# find_dual ZIP
# -------------
# If ZIP is release, return the debug one, and vice versa.  Does not
# check for the existence of the files.
find_dual ()
{
  echo "$1" | perl -pe 's/-debug// || s/((-no-doc)?\.zip)/-debug$1/'
}

# Check the previous function.
find_dual_unit_test ()
{
  local i
  local o
  local res
  for i in \
  urbi-runtime-2.7.3-windows-x86-vcxx2008-debug-no-doc.zip:urbi-runtime-2.7.3-windows-x86-vcxx2008-no-doc.zip\
  /home/build/share/built/urbi-sdk/archives/2.7.3-000-g0fb1c3f/urbi-runtime-2.7.3-windows-x86-vcxx2008-debug.zip:/home/build/share/built/urbi-sdk/archives/2.7.3-000-g0fb1c3f/urbi-runtime-2.7.3-windows-x86-vcxx2008.zip\
  urbi-runtime-2.7.3-windows-x86-vcxx2008-no-doc.zip:urbi-runtime-2.7.3-windows-x86-vcxx2008-debug-no-doc.zip
  do
    o=$(echo "$i" | sed -e 's/^.*://')
    i=$(echo "$i" | sed -e 's/:.*$//')
    res=$(find_dual $i)
    test "$o" = "$res" ||
      fatal "find_dual fails on $i: $res instead of $o"
  done
}

find_dual_unit_test

get_installer_name ()
{
  local f="$1"
  local nod="no-doc"

  f=${f/-$BUILDFARM_MODE/}
  f=${f/-$nod/}
  f=${f/.zip/.exe}
  echo "$f"
}


# extract the version out of the upname.
get_version()
{
  echo $upname | \
      sed 's,.*/[^0-9]*\([-0-9.]\+\)\(-g[0-9a-f]\+\)\?-.*,\1\2,'
}


## ----------- ##
## Variables.  ##
## ----------- ##

# Check that we have all the envvars we expect.
for v in BUILDFARM_OS BUILDFARM_MODE BUILDFARM_COMPILER \
         DIR_SOURCE
do
  eval "test -n \$$v" ||
    fatal "\$$v is not set"
done

: ${TMPDIR=/tmp}

test $# = 1 ||
  fatal "invalid argument number: $#, expecting 1"
upname=$1


# Do not produce anything if we are not working on windows builds.
case $BUILDFARM_OS in
  (windows) ;;
  (*) exit 0;;
esac

tools=$HOME/share/tools
# vcredist has name with vcxx-2005, not vcxx2005.
vcredist=$(echo "$tools/vcredist/vcredist_x86-$BUILDFARM_COMPILER.exe" |
            perl -pe 's/(vcxx)(\d+)/$1-$2/')
gostai_console="$tools/gostai-console/gostai-console-2.6-win32.exe"
gostai_editor="$tools/gostai-editor/gostai-editor-2.5-win32.exe"
for i in vcredist gostai_console gostai_editor
do
  eval "file=\$$i"
  test -r "$file" ||
    fatal "cannot read $i: $val"
  test -f "$file" ||
    fatal "not a file $i: $val"
  test -s "$file" ||
    fatal "empty file $i: $val"
done

version=$(get_version)

find_prog $MD5SUM gmd5sum md5sum
MD5SUM=$find_prog_res
test -n "$MD5SUM" ||
  fatal "cannot find md5sum"

cleanup ()
{
  status=$?
  cd /
  ls -l $tmp
  rm -rf $tmp
  exit $?
}
tmp=$(mktemp -d "$TMPDIR/kernel-make-installer.XXXXXX")
trap cleanup 0 1 2 13 15

updir=$(dirname "$upname")



## ------ ##
## Main.  ##
## ------ ##

# The archive built by this slave.
my_zip="$upname.zip"
# The archive built by the other one.
other_zip=$(find_dual "$my_zip")
installer=$(get_installer_name "$(basename $my_zip)")

if test -r "$my_zip"                            \
   && test -r "$other_zip"                      \
   && test "$my_zip" -nt "$other_zip"; then
  # My zip is the newest, do the merge-install.

  # Merge zips.
  $DIR_SOURCE/scripts/merge-install.sh -v               \
      --vcredist "$vcredist"                            \
      --comp "$BUILDFARM_COMPILER"                      \
      --version "$version"                              \
      --templateloc "$DIR_SOURCE/share/templates"       \
      --installscriptloc "$DIR_SOURCE/share/installer/" \
      --gostai-console "$gostai_console"                \
      --gostai-editor "$gostai_editor"                  \
      --output "$tmp/$installer"                        \
      "$my_zip" "$other_zip"

  # Upload the installer and its MD5.  Be sure to generate an MD5sum
  # file that does not include a path: cd into it.
  here=$(pwd)
  cd $tmp
  $MD5SUM "$installer" >"$installer.md5"
  cp "$installer" "$installer.md5" "$updir"
  cd $here
fi
