#! /bin/sh

set -e
set -x

## ----------- ##
## Functions.  ##
## ----------- ##

find_prog ()
{
  find_prog_res=
  local i
  for i in "$@"
  do
    if $i --version >/dev/null 2>&1; then
      find_prog_res=$i
      break
    fi
  done
}

stderr ()
{
  local i
  for i
  do
    echo >&2 "$0: $i"
  done
}

error ()
{
  local status="$1"
  shift
  stderr "$@"
  finalize
  exit $status
}

finalize ()
{
  rm -rf "$tmp"
}

find_dual ()
{
  local f="$1"
  local dbg="debug_dynamic"
  local nod="no-doc"

  test -r "$f" || exit 1

  # FIXME: this is too hard to read.  Use case/esac.
  if test "$f" = "${f%%-$dbg*}"; then # MODE= release
    if test "$f" = "${f%%-$nod*}"; then # HASDOC= yes
      f=${f/.zip/-$dbg.zip}
      test -r "$f" && echo "$f" && return 0
    else # HASDOC= no
      f=${f/-$nod/-$dbg}
      test -r "$f" && echo "$f" && return 0
    fi
    f=${f/.zip/-$nod.zip}
    test -r "$f" && echo "$f" && return 0
  else # MODE = debug
    f=${f/-$dbg/}
    test -r "$f" && echo "$f" && return 0
    if test "$f" = "${f%%-$nod*}"; then # HASDOC= yes
      f=${f/.zip/-$nod.zip}
      test -r "$f" && echo "$f" && return 0
    else # HASDOC= no
      f=${f/-$nod/}
      test -r "$f" && echo "$f" && return 0
    fi
  fi
  return 1
}

get_installer_name ()
{
  local f="$1"
  local nod="no-doc"

  f=${f/-$MODE/}
  f=${f/-$nod/}
  f=${f/.zip/.exe}
  echo "$f"
}


# extract the version out of the upname.
get_version()
{
  echo $upname | \
      sed 's,.*/[^0-9]*\([-0-9.]\+\)\(-g[0-9a-f]\+\)\?-.*,\1\2,'
}


## ----------- ##
## Variables.  ##
## ----------- ##

: ${TMPDIR=/tmp}

case $# in
  (8);;
  (*) fatal "not enough arguments: $#, expecting 8";;
esac

# Those would best be set through configure (except "updir"
# which sets the destination).

ARCH=$1       # ARM|x86|ppc
OS=$2         # linux|windows|macos
COMP=$3       # ex. gcc4
MODE=$4       # [release|debug]_[static|dynamic]
srcdir=$5
builddir=$6
DESTDIR=$7
upname=$8

# Do not produce anything if we are not working on windows builds.
case $OS in
  (windows) ;;
  (*) exit 0;;
esac

tools=$HOME/share/tools
vcredist="vcredist_x86-$COMP.exe"
gostai_console="gostai-console-2.6-win32.exe"
gostai_editor="gostai-editor-2.5-win32.exe"
version=$(get_version)

find_prog $MD5SUM gmd5sum md5sum
MD5SUM=$find_prog_res
test -n "$MD5SUM" ||
  fatal "cannot find md5sum"

cleanup ()
{
  status=$?
  cd /
  ls -l $tmp
  rm -rf $tmp
  exit $?
}
tmp=$(mktemp -d "$TMPDIR/kernel-make-installer.XXXXXX")
trap cleanup 0 1 2 13 15

updir=$(dirname "$upname")



## ------ ##
## Main.  ##
## ------ ##

# The archive built by this slave.
my_zip="$upname.zip"
# The archive built by the other one.
other_zip=$(find_dual "$my_zip")
installer=$(get_installer_name "$(basename $my_zip)")

if test -r "$my_zip"                             \
    -a -r "$other_zip"                           \
    -a "$my_zip" -nt "$other_zip"; then
  # My zip is the newest, do the merge-install.

  # Merge zips.
  $srcdir/scripts/merge-install.sh -v                           \
      --vcredist "$tools/vcredist/$vcredist"                    \
      --comp "$COMP"                                            \
      --version "$version"                                      \
      --templateloc "$srcdir/share/templates"                   \
      --installscriptloc "$srcdir/share/installer/"             \
      --gostai-console "$tools/gostai-console/$gostai_console"  \
      --gostai-editor "$tools/gostai-editor/$gostai_editor"     \
      --output "$tmp/$installer"                                \
      "$my_zip" "$other_zip"

  # Upload the installer and its MD5.  Be sure to generate an MD5sum
  # file that does not include a path: cd into it.
  here=$(pwd)
  cd $tmp
  $MD5SUM "$installer" >"$installer.md5"
  cp "$installer" "$installer.md5" "$updir"
  cd $here
fi
