#!/usr/bin/env python

import re
import sys, os, os.path, filecmp, shutil, stat
import ast, tools

if len(sys.argv) != 2:
  print "Usage: .. SRCDIR"
  sys.exit(1)
srcdir = sys.argv[1]

## Abstract syntax tree C++ visitor - header ----------------------------------
loader = ast.Loader ()
nodes = loader.load (sys.stdin)

header = """\
//<<-
// Generated, do not edit by hand.
//->>
"""

## --------------- ##
## The *.hh file.  ##
## --------------- ##

visitor_hh = file("pretty-printer.hh.tmp", "w")
sys.stdout = visitor_hh

print header

print """\
/**
 ** \\file ast/pretty-printer.hh
 ** \\brief Definition of ast::PrettyPrinter.
 */

#ifndef AST_PRETTY_PRINTER_HH
# define AST_PRETTY_PRINTER_HH

# include <functional>
# include <ostream>
# include "ast/default-visitor.hh"
# include "ast/fwd.hh"
# include "libport/select-const.hh"

namespace ast
{

  /// Ast pretty-printer.
  class PrettyPrinter : public DefaultConstVisitor
  {
    /** \\name Ctor & dtor.
     ** \\{ */
  public:
    /// Super class type.
    typedef DefaultConstVisitor super_type;

    /// Construct a PrettyPrinter.
    PrettyPrinter (std::ostream& s);

    /// Destroy a PrettyPrinter.
    virtual ~PrettyPrinter ();
    /** \\} */

    using super_type::operator();
"""
arr = nodes.values ()
arr.sort (lambda x, y: cmp(x.name, y.name))
for node in arr:
  if 'printer' in node.__dict__:
    print "    virtual void operator() (const %s&);" % (node.name)

print """
  private:
    // The stream we output to.
    std::ostream& ostr_;
  };

  inline
  std::ostream&
  operator<< (std::ostream& o, const Ast& a)
  {
    PrettyPrinter p (o);
    p(a);
    return o;
  }

} // namespace ast

// # include "ast/pretty-printer.hxx"

#endif // !AST_PRETTY_PRINTER_HH
"""


## --------------- ##
## The *.cc file.  ##
## --------------- ##


visitor_cc = file("pretty-printer.cc.tmp", "w")
sys.stdout = visitor_cc

print header

print """\
# include "pretty-printer.hh"
# include "all.hh"

namespace ast
{

  PrettyPrinter::PrettyPrinter (std::ostream& ostr)
    : ostr_ (ostr)
  {
  }

  PrettyPrinter::~PrettyPrinter ()
  {
  }

"""

for node in arr:
  name = ''
  action = ''
  if 'printer' in node.__dict__: # if a printer is defined
    for a in node.printer: # for each action in the printer
      a = a.lstrip(' ').rstrip(' ')
      if a[0] == '~':
	# Handle '~foo' variables
	action += '    node.%s_get().accept(*this);\n' % (a[1:])
      else:
	# Handle '$foo' variables
	p = re.compile('\\$(\\w*)')
	a = p.sub('node.\\1_get()', a)
	action += '    ostr_ << %s;\n' % (a)
    name = 'node'
    print """\
  void PrettyPrinter::operator() (const %s& %s)
  {
%s  }
""" % (node.name, name, action)

print """} // namespace ast
"""


# Restore stdout and close files
sys.stdout = sys.__stdout__
visitor_hh.close ()
visitor_cc.close ()

file_fullpath = os.path.join (srcdir, "pretty-printer.hh");
# Check differences and update if any
tools.lazy_overwrite (file_fullpath, "pretty-printer.hh.tmp")

file_fullpath = os.path.join (srcdir, "pretty-printer.cc");
tools.lazy_overwrite (file_fullpath, "pretty-printer.cc.tmp")
