#!/usr/bin/env python

import re
import sys, os, os.path, filecmp, shutil, stat
import ast, tools
from string import lower

from stat import ST_MODE

if len(sys.argv) != 2:
  tools.error("Usage: .. SRCDIR")
srcdir = sys.argv[1]

## Abstract syntax tree C++ visitor - header ----------------------------------
loader = ast.Loader ()
nodes = loader.load (sys.stdin)

visitor_hh = file("visitor.hh.tmp", "w")
sys.stdout = visitor_hh

print tools.banner("ast/visitor.hh",
		   "Definition of ast::Visitor.") + """
#ifndef AST_VISITOR_HH
# define AST_VISITOR_HH

# include <functional>

# include <boost/preprocessor/array.hpp>
# include <boost/preprocessor/repeat.hpp>

# include "libport/select-const.hh"

# include "ast/fwd.hh"

namespace ast
{

  /** \\brief Root class of all Ast visitors.
   **
   ** GenVisitor<CONSTIFY> is the root class of all Ast visitors. */
  template < template <typename> class Const >
  class GenVisitor : public std::unary_function<Ast, void>
  {
    /** \\name Ctor & dtor.
     ** \\{ */
  public:
    /// Destroy a GenVisitor.
    virtual ~GenVisitor ();
    /** \\} */

    /** This \\c typedef and the following ones are only here to workaround a
     * bug in MSVC 2005 SP1, see:
     * http://forums.microsoft.com/msdn/showpost.aspx?postid=987536
     * http://support.microsoft.com/kb/930198 */
    typedef typename Const<ast::Ast>::type ast_type;
    /// The entry point: visit \\a e.
    virtual void operator() (typename Const<ast::Ast>::type& e);
"""
arr = nodes.values ()
arr.sort (lambda x, y: cmp(x.name, y.name))
for node in arr:
  if node.concrete:
    print """
    /// MSVC 2005 SP1 workaround.
    typedef typename Const<ast::%s>::type %s_type;
    virtual void operator() (typename Const<ast::%s>::type&) = 0;
""" % (node.name, lower(node.name), node.name)

print """  };

# define VISITOR_VISIT_NODE_(Z, N, Array)			\\
    virtual void operator() (ast::BOOST_PP_ARRAY_ELEM(N, Array)& e);

# define VISITOR_VISIT_NODES(Nodes)			\\
  BOOST_PP_REPEAT(BOOST_PP_ARRAY_SIZE(Nodes),		\\
		  VISITOR_VISIT_NODE_,			\\
		  Nodes)

  /// Shorthand for a const visitor.
  typedef GenVisitor<libport::constify_traits> ConstVisitor;
  /// Shorthand for a non const visitor.
  typedef GenVisitor<libport::id_traits> Visitor;

} // namespace ast

# include "ast/visitor.hxx"

#endif // !AST_VISITOR_HH"""

# Restore stdout and close files
sys.stdout = sys.__stdout__
visitor_hh.close ()
tools.lazy_install (srcdir, "visitor.hh")
