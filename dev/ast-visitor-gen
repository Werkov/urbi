#!/usr/bin/env python

import re
import sys, os, os.path, filecmp, shutil, stat
import ast, tools

from stat import ST_MODE

if len(sys.argv) != 2:
  print "Usage: .. SRCDIR"
  sys.exit(1)
srcdir = sys.argv[1]

## Abstract syntax tree C++ visitor - header ----------------------------------
loader = ast.Loader ()
nodes = loader.load (sys.stdin)

visitor_hh = file("visitor.hh.tmp", "w")
sys.stdout = visitor_hh

print """\
//<<-
// Generated, do not edit by hand.
//->>
/**
 ** \\file ast/visitor.hh
 ** \\brief Definition of ast::Visitor.
 */

"""

print """#ifndef AST_VISITOR_HH
# define AST_VISITOR_HH

# include <functional>
# include "ast/fwd.hh"
# include "misc/select-const.hh"

namespace ast
{

  /** \\brief Root class of all Ast visitors.
   **
   ** GenVisitor<CONSTIFY> is the root class of all Ast visitors. */
  template < template <typename> class Const >
  class GenVisitor : public std::unary_function<Ast, void>
  {
    /** \\name Ctor & dtor.
     ** \\{ */
  public:
    /// Destroy a GenVisitor.
    virtual ~GenVisitor ();
    /** \\} */

    /// The entry point: visit \\a e.
    virtual void operator() (typename Const<ast::Ast>::type& e);
"""
arr = nodes.values ()
arr.sort (lambda x, y: cmp(x.name, y.name))
for node in arr:
  if node.final:
    print "    virtual void operator() (typename Const<" \
	  + node.name + ">::type&) = 0;"
print """
    virtual void operator() (typename Const<FunctionDecs>::type&) = 0;
    virtual void operator() (typename Const<VarDecs>::type&) = 0;
    virtual void operator() (typename Const<TypeDecs>::type&) = 0;
  };

  /// Shorthand for a const visitor.
  typedef GenVisitor<misc::constify_traits> ConstVisitor;
  /// Shorthand for a non const visitor.
  typedef GenVisitor<misc::id_traits> Visitor;

} // namespace ast

# include "ast/visitor.hxx"

#endif // !AST_VISITOR_HH"""

# Restore stdout and close files
sys.stdout = sys.__stdout__
visitor_hh.close ()

file_fullpath = os.path.join (srcdir, "visitor.hh");
file_modes = os.stat (file_fullpath) [ST_MODE]

# Change the file modes to write the file
os.chmod (file_fullpath, file_modes | 0666);

# Check differences and update if any
tools.lazzy_overwrite (file_fullpath, "visitor.hh.tmp")
os.remove ("visitor.hh.tmp")

# Prevent generated file modifications
os.chmod(file_fullpath, file_modes & 0555);
