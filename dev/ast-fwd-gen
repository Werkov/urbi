#!/usr/bin/env python

import re
import sys, os
import ast, tools

if len (sys.argv) != 2:
  print "Usage: .. SRCDIR"
  sys.exit (1)
srcdir = sys.argv[1]

## Abstract syntax tree C++ forward declarations ------------------------------
loader = ast.Loader ()
nodes = loader.load (sys.stdin)

fwd_hh = file ("fwd.hh.tmp", "w")
sys.stdout = fwd_hh

print """\
//<<-
// Generated, do not edit by hand.
//->>
/**
 ** \\file ast/fwd.hh
 ** \\brief Forward declarations of all node-classes of AST
 ** (needed by the visitors)
 */
#ifndef AST_FWD_HH
# define AST_FWD_HH

# include <list>
# include "misc/fwd.hh"

namespace ast
{
"""
arr = nodes.values ()
arr.sort (lambda x, y: cmp (x.name, y.name))
for node in arr:
  print "  class " + node.name + ";"
print """

/*
  // From decs.hh.
  class Decs;

  // From decs-list.hh.
  class DecsList;

  // From anydecs.hh.
  template <typename T>
  class AnyDecs;
  typedef AnyDecs<VarDec> VarDecs;
  typedef AnyDecs<TypeDec> TypeDecs;
  typedef AnyDecs<FunctionDec> FunctionDecs;
*/
  // From anydecs.hh.
  typedef std::list<Exp*> exps_type;
  typedef std::pair<Exp*, Exp*> exp_pair_type;
  typedef std::list<exp_pair_type> exp_pairs_type;
  typedef std::list<VarDec*> vardecs_type;
  typedef std::list<Dec*> decs_type;

/*
  typedef std::list<FieldInit*> fieldinits_type;
  typedef std::list<Field*> fields_type;
*/

  template <template <typename> class Const>
  class GenVisitor;
  typedef GenVisitor<misc::constify_traits> ConstVisitor;
  typedef GenVisitor<misc::id_traits> Visitor;

} // namespace ast

#endif // !AST_FWD_HH"""

# Restore stdout and close files
sys.stdout = sys.__stdout__
fwd_hh.close ()

file_fullpath = os.path.join (srcdir, "fwd.hh");
tools.lazy_overwrite (file_fullpath, "fwd.hh.tmp")

# Local Variables:
# mode: python
# End:
