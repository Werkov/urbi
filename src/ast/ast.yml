#                                                      -*- Yaml -*-
#
---

# ---------------- #
# AST parameters.  #
# ---------------- #

# The base directory to prepend to all the file names generated in the
# generated Makefile snippet.  If this ast-nodes.mk is to be included
# by ast/Makefile.am, then define to empty.  If it is included by its
# parent Makefile.am, define to "ast/".
ast_basedir: "ast/"

# The name of the directory/namespace that contains our auxiliary C++
# library.
auxlib: "libport"

# The name of the directory/namespace that contains the cloner.
clonerlib: "ast"

# The generator will accept these types as is, without looking for a
# particular header.  Also, they are handled by copy.
atomic_types:
  - "bool"
  - "int"
  - "ufloat"
  - "unsigned"

# Likewise, but these types are handled by references, because of
# their size.
# compound_types:
# - "DecsList::decs_type"

# In most cases, the name of the header to include can be computed
# from the name of the type.  Below are the exceptions.
includes_map:
  "exps_type":           '"ast/fwd.hh"'
  "flavor_type":         '"ast/flavor.hh"'
  "flow_exception_kind": '"ast/flow-exception.hh"'
  "libport::Symbol":     '<libport/symbol.hh>'
  "slots_type":          '"ast/fwd.hh"'
  "std::string":         '<string>'
  "symbols_type":        '"ast/fwd.hh"'
  "ufloat":              '<libport/ufloat.h>'

# FIXME: Can't we compute this list from atomic_types?  Or simply, one
# cannot visit something which is not a defined ast node?
# Used by the cloner.
non_visitable_types:
  - "bool"
  - "flavor_type"
  - "flow_exception_kind"
  - "libport::Symbol"
  - "loc"
  - "std::string"
  - "ufloat"
  - "unsigned"

# In the cloner, these require "recurse_collection".
collections:
  - "exps_type"
  - "slots_type"
  - "symbols_type"

# The function to clear a list of pointers.
deep_clear: "libport::deep_clear"

# A regexp mathing the types that need to be deep-cleared.
deep_clear_p: '^exps_type$'

# The beginning of visitor.hh, for includes.
visitor_hh_prologue: |2

  # include <functional>

  # include <boost/preprocessor/array.hpp>
  # include <boost/preprocessor/repeat.hpp>

  # include <libport/select-const.hh>

  # include "ast/fwd.hh"

# The beginning of default-visitor.hh, for includes.
default_visitor_hh_prologue: |2

  # include <functional>
  # include <ostream>

  # include <libport/select-const.hh>

  # include "ast/visitor.hh"

# The beginning of fwd.hh, for includes.
fwd_hh_prologue: |2
  # include <list>

  # include <boost/ptr_container/ptr_vector.hpp>

  # include <libport/fwd.hh>
  # include <libport/separator.hh>

  # include "ast/symbols-type.hh"

# The end of the fwd.hh file, in the namespace.
fwd_hh_epilogue: |2

    /// List of expressions, for List, Nary, Call etc.
    typedef std::list<Exp*> exps_type;

    /// List of slots, for Object.
    typedef boost::ptr_vector<Slot> slots_type;

printer_cc_prologue: |2

  #include <libport/foreach.hh>
  #include <libport/escape.hh>
  #include <libport/indent.hh>
  #include <libport/pair.hh>

  #include <kernel/userver.hh>
---

# ----------- #
# AST Nodes.  #
# ----------- #

# Possible values:
#  * class
#    Description of classes.
#    + name
#      a C++ class name.
#
#    + desc
#      a (Doxygen) comment describing the class.
#
#    + super
#      a possibly empty space separated list of superclass names.
#
#    + inline
#      code to include verbatim at some selected places:
#      [header, inline, impl] x [prologue, inside, epilogue].
#       *.hh     *.hxx  *.cc
#       prologue: in the #include section.
#       inside:   in the class definition/namespace
#       epilogue: after the class definition, in the namespace.   
#
#  * attributes:
#    + name
#      a C++ attribute name
#
#    + type
#      a C++ type name
#
#    + abstract
#      If True, don't output.
#
#    + mandatory
#      + True
#        *_get methods return a const ref.
#      + False
#        *_get methods return a const pointer.
#
#    + init
#      If set, the value used to initialize the member.
#      This attribute will not have an argument in the constructors.
#
#    + owned
#      - True: Pointer members are "delete"'d.
#      - False: They are not.
#
#    + access composed by [ 'r', 'w', 'W' ]
#      - r: provide a *_get const accessor.
#      - w: provide a *_get accessor that returns a reference
#        for possible modifications.
#      - W: provide a *_set accessor.
#
#    + desc, a short description of the attribute
#
#    + default
#      The code to output in the default visitor.  The current node
#      is in the variable "n".
#
#    + printer
#      The way the node is pretty-printed, using so ad-hoc syntactic
#      sugar. A pretty-printer is specified by actions in a yaml list.
#      The available actions are:
#      - $foo: Pretty-print the foo_ attribute of the node.
#      - ~bar: Pretty-print recursively the bar_ child of the node.
#      - '{ /* code */ }': Insert a block of code
#      - Any valid rhs for operator <<.
#
# Defaults:
#  * class:
#    + desc: the name of the class
#
#  * attributes:
#    + mandatory: True
#    + access: rw
#    + owned: True
#

## -------------- ##
## Root classes.  ##
## -------------- ##

Ast:
  inline:
    header prologue: '# include "ast/fwd.hh"'
  attributes:
    - location:
        type: loc
        access: rW
        desc: Scanner position information
  default: super_type::operator() (n);

Exp:
  super: Ast

MetaExp:
  desc: /// A node which is a placeholder for an Exp.
  super: Exp
  attributes:
    - id:
        type: unsigned
        desc: The index of the meta-variable.
  printer:
    - '"%exp:"'
    - $id

## ------ ##
## Tags.  ##
## ------ ##

Tag:
  super: Exp
  attributes:
    - exp: { type: 'Exp*', desc: The tagging expression }
  printer:
    - ~exp

TaggedStmt:
  super: Exp
  attributes:
    - tag: { type: 'Tag*', desc: The tagging expression }
    - exp: { type: 'Exp*', desc: The tagged expression }
  printer:
    - ~tag
    - '": "'
    - ~exp


## ------- ##
## Scope.  ##
## ------- ##

Scope:
  super: Exp
  attributes:
    - target: { type: 'Exp*', mandatory: false, desc: The default target }
    - body:   { type: 'Exp*', desc: The scoped expression }
  default: |2
    if (n.target_get())
      operator()(*n.target_get());
    operator()(n.body_get());
  printer:
    - '{
         if (n.target_get())
           ostr_ << "do " << *n.target_get() << " ";
       }'
    - '"{"'
    - 'libport::incendl'
    - ~body
    - 'libport::decendl'
    - '"}"'

## -------------------- ##
## Composing commands.  ##
## -------------------- ##

Flavorable:
  attributes:
    - flavor: { type: flavor_type, desc: Execution model }

Message:
  super: Exp
  desc: /// Display a message when visited.
  attributes:
    - text:
        type: 'std::string'
        desc: The message to display when visited
    - tag:
        type: 'std::string'
        desc: The tag for the message.
  printer:
    - $tag
    - '" "'
    - $text

Stmt:
  super:
    - Exp
    - Flavorable
  desc: /// An expression with its flavor
  attributes:
    - expression:
        type: 'Exp*'
        desc: Unqualified expression
        access: rw
  printer:
    - ~expression
    - '{
         if (n.flavor_get() != flavor_none)
           ostr_ << n.flavor_get();
       }'

Nary:
  super: Exp
  desc: /// A list of \c Exp, mainly Stmt and Message.
  attributes:
    - children:
        type: 'exps_type'
        desc: Subtrees possibly qualified to be background.
        access: rw
    - toplevel:
        type: 'bool'
        desc: Whether is a top-level node.
        access: rW
  printer:
    - $children
  inline:
    header prologue: |
        # include "ast/flavor.hh"
        namespace ast
        {
          /// Report \a e on \a o.
          std::ostream& operator<<(std::ostream& o, const exps_type& e);
        }

    header inside: |2
        public:
          /// A completely empty Nary node.
          Nary();

          /// Drop the children.
          void clear ();

          /// Are there any children?
          bool empty() const;

          /// Push a new expression, creating a Statement node.
          void push_back(Exp* e);

          /// Push a message.
          void message_push(const std::string& text, const std::string& tag);

          /// Sets the flavor of the last child.
          void back_flavor_set (flavor_type k, const loc& l);

          /// Sets the flavor of the last child without modifying location.
          void back_flavor_set (flavor_type k);

          /// Get the flavor of the last child.
          flavor_type back_flavor_get() const;

          /// Drop the last children.
          void pop_back ();

          /// Splice the content of \a rhs at the back this list.
          void splice_back (Nary& rhs);

       private:
          /// Return the last child if there is one of the right type.
          template <typename T>
          T* back ();

          /// Return the last child if there is one of the right type.
          template <typename T>
          const T* back () const;

          /// Adjust the whole location.
          void location_adjust ();

    impl prologue: |2
      #include <libport/indent.hh>
      #include <libport/separator.hh>

      #include "ast/pretty-printer.hh"

    impl inside: |2
        Nary::Nary ()
          : Exp (loc()),
            children_ (),
            toplevel_ (false)
        { }

        void
        Nary::clear ()
        {
          children_.clear ();
          location_ = loc();
        }

        bool
        Nary::empty () const
        {
          return children_.empty();
        }

        void
        Nary::location_adjust ()
        {
          if (empty())
            location_.initialize(0);
          else
          {
            location_.begin = children_.front()->location_get().begin;
            location_.end   = children_.back() ->location_get().end;
          }
        }

        void
        Nary::push_back(Exp* e)
        {
          children_.push_back(new Stmt(e->location_get(), flavor_none, e));
          location_adjust();
        }

        void
        Nary::message_push(const std::string& text, const std::string& tag)
        {
          children_.push_back(new Message(loc(), text, tag));
        }

        template <typename T>
        T*
        Nary::back ()
        {
          return empty() ? 0 : dynamic_cast<T*>(children_.back());
        }

        template <typename T>
        const T*
        Nary::back () const
        {
          return empty() ? 0 : dynamic_cast<T*>(children_.back());
        }

        void
        Nary::back_flavor_set (flavor_type k, const loc& l)
        {
          if (Stmt* b = back<Stmt>())
          {
            b->flavor_get () = k;
            b->location_set(b->location_get () + l);
          }
          location_adjust();
        }

        void
        Nary::back_flavor_set (flavor_type k)
        {
          if (Stmt* b = back<Stmt>())
             b->flavor_get () = k;
        }

        flavor_type
        Nary::back_flavor_get() const
        {
          if (const Stmt* b = back<Stmt>())
            return b->flavor_get ();
          return flavor_none;
        }

        void
        Nary::pop_back ()
        {
          children_.pop_back();
          location_adjust();
        }

        void
        Nary::splice_back (Nary& rhs)
        {
          children_.splice (children_.end (), rhs.children_get ());
          location_adjust();
        }

        std::ostream&
        operator<<(std::ostream& o, const exps_type& es)
        {
          // Specifying template parameters is needed for gcc-3
          return o << libport::separate<const exps_type,
                                        std::ostream&(*)(std::ostream&)>
                                       (es, libport::iendl);
        }

Binary:
  super: Exp
  desc: /// Expressions with two sub expressions
  attributes:
    - lhs:
        type: 'Exp*'
        desc: Left-hand side expression
        access: rwW
    - rhs:
        type: 'Exp*'
        desc: Right-hand side expression
        access: rwW

And:
  super: Binary
  printer:
    - ~lhs
    - '" &"'
    - libport::iendl
    - ~rhs

Pipe:
  super: Binary
  printer:
    - ~lhs
    - '" |"'
    - libport::iendl
    - ~rhs


If:
  super: Exp
  attributes:
    - test:
        type: Exp*
        desc: Condition to select thenclause or elseclause
    - thenclause:
        type: Exp*
        desc: Executed if test is true
    - elseclause:
        type: Exp*
        desc: Executed if test is false
  printer:
    - '"if ("'
    - ~test
    - '")"'
    - libport::incendl
    - ~thenclause
    - libport::decendl
    - '"else"'
    - libport::incendl
    - ~elseclause
    - libport::decindent

While:
  super:
    - Exp
    - Flavorable
  attributes:
    - test:
        type: Exp*
        desc: Condition to continue
    - body:
        type: Exp*
        desc: Executed if test is true
  printer:
    - '"while"'
    - '{
         if (n.flavor_get() != flavor_semicolon)
           ostr_ << n.flavor_get();
       }'
    - '"("'
    - ~test
    - '")"'
    - libport::incendl
    - ~body
    - libport::decindent

Foreach:
  super:
    - Exp
    - Flavorable
  attributes:
    - index:
        type: 'libport::Symbol'
        desc: The variable storing de values on which iterate.
    - list:
        type: Exp*
        desc: The list containing the values on which iterate.
    - body:
        type: Exp*
        desc: Executed for each value in the list
  printer:
    - '"for "'
    - '{ n.index_get().print_escaped(ostr_); }'
    - '" in "'
    - ~list
    - '" {"'
    - libport::incendl
    - ~body
    - libport::decendl
    - '"}"'

Throw:
  desc: /// Throw an exception when visited, used to implement break, return, etc.
  super: Exp
  attributes:
    - kind:
        type: 'flow_exception_kind'
        desc: The kind of the exception to throw.
    - value:
        type: 'Exp*'
        desc: The value to throw when visited. May be empty.
        mandatory: False
  printer:
    - $kind
    - "{
         if (n.value_get())
           ostr_ << ' ' << *n.value_get();
       }"

Noop:
  super: Exp
  desc: /// Also known as nop, noop etc.
  printer:
    - '"{}"'


## --------------------- ##
## Native Urbi objects.  ##
## --------------------- ##

Implicit:
  super: Exp
  desc: /// Implicit target for messages.
  printer:
    - '"<IMPLICIT>"'

Object:
  super: Exp
  inline:
    header prologue: '# include "ast/slot.hh"'
    header inside: |2
        public:
          /// An empty Object.
          Object(const loc& location);
    impl inside: |2
        Object::Object (const loc& location)
          : Exp (location),
            slots_ (new slots_type)
        { }
  attributes:
    - slots:
        type: slots_type*
        desc: List of slots
  printer:
    - '"(|"'
    - '{
        bool tail = false;
        foreach (const Slot& s, n.slots_get())
        {
          if (tail++)
            ostr_ << "," << libport::iendl;
          ostr_ << s;
        }
       }'
    - '"|)"'

Float:
  super: Exp
  attributes:
    - value:
        type: ufloat
        access: r
        desc: Float value
  printer:
    - $value

Slot:
  super: Ast
  attributes:
    - name:
        type: 'libport::Symbol'
    - value:
        type: 'Exp*'
  printer:
    - $name
    - '": "'
    - ~value

String:
  super: Exp
  attributes:
    - value:
        type: 'std::string'
        access: r
        desc: String value
  printer:
    - "'\"'"
# FIXME: It really stinks not to be able to use $value here.
    - libport::escape(n.value_get())
    - "'\"'"

List:
  super: Exp
  attributes:
    - value:
        type: 'exps_type*'
        access: r
        desc: Stored list value
  printer:
    - '"["'
    - '{
        ostr_ << libport::separate (n.value_get(), ", ");
       }'
    - '"]"'

Call:
  desc: /// Function calls, and attribute look-ups.
  super: Exp
  attributes:
    - name:
        type: 'libport::Symbol'
        desc: Name of the called function
    - args:
        type: 'exps_type*'
        desc: Arguments passed to the function
  printer:
    - '{
         if (!dynamic_cast<const Implicit*>(n.args_get().front ()))
           {
             n.args_get().front ()->accept(*this);
             ostr_ << " . ";
           }
       }'
    - '{
         n.name_get().print_escaped(ostr_);
       }'
    - '{
          if (n.args_get ().size() >= 2)
            ostr_
             << "("
             << libport::incindent
             << libport::separate(boost::make_iterator_range(n.args_get(), 1, 0),
                                   ", ")
             << libport::decindent
             << ")";
       }'

Function:
  super: Exp
  attributes:
    - formals:
        type: 'symbols_type*'
        mandatory: False
        desc: Formal arguments.  If null, a lazy function.
    - body:
        type: 'Scope*'
        access: rwW
        mandatory: False
        desc: Body
  inline:
    header inside: |2
        public:
          /// Whether the arguments must be evaluated.
          bool strict () const
          {
            return formals_;
          }
  printer:
    - '"function "'
    - '{
         if (n.formals_get ())
           ostr_ << "(" << *n.formals_get() << ") ";
       }'
    - ~body

# Local Variables:
# mode: yaml
# End:
