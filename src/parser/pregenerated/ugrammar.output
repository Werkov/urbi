Terminals unused in grammar

   UNARY


Grammar

    0 $accept: start "end of command"

    1 start: root

    2 root: error
    3     | MODE_EXP root_exp
    4     | MODE_EXPS root_exps

    5 root_exp: cstmt.opt ";"
    6         | cstmt.opt ","
    7         | cstmt.opt "end of command"
    8         | error ";"
    9         | error ","
   10         | error "end of command"

   11 root_exps: stmts

   12 stmts: cstmt.opt
   13      | stmts ";" cstmt.opt
   14      | stmts "," cstmt.opt

   15 cstmt.opt: /* empty */
   16          | cstmt
   17          | cstmt "|"

   18 cstmt: stmt
   19      | cstmt "|" cstmt
   20      | cstmt "&" cstmt

   21 stmt.opt: /* empty */
   22         | stmt

   23 stmt: primary-exp ":" stmt
   24     | exp

   25 block: "{" stmts "}"
   26      | "{" error "}"
   27      | "{" id "~" id "}"

   28 visibility: /* empty */
   29           | "private"
   30           | "protected"
   31           | "public"

   32 proto: visibility exp

   33 protos.1: proto
   34         | protos.1 "," proto

   35 protos: /* empty */
   36       | ":" protos.1

   37 exp: "class" lvalue protos block
   38    | "package" lvalue protos block

   39 id.0: /* empty */
   40     | id.1 comma.opt

   41 id.1: id
   42     | id.1 "," id

   43 stmt: "enum" id "{" id.0 "}"

   44 from: "identifier"

   45 event_or_function: "function"
   46                  | "identifier"

   47 stmt: "external" "identifier" "identifier"
   48     | "external" "var" "identifier" "." "identifier" from "identifier"
   49     | "external" event_or_function "(" unsigned ")" "identifier" "." "identifier" from "identifier"
   50     | "import" lvalue
   51     | exp "!" args.opt tilda.opt

   52 routine: "closure"
   53        | "function"

   54 stmt: routine k1_id formals block
   55     | id id formals block

   56 k1_id: "identifier"
   57      | "this" "." "identifier"
   58      | k1_id "." "identifier"

   59 modifier: "identifier" ":" exp

   60 modifiers: modifier
   61          | modifiers modifier

   62 exp: exp "=" exp
   63    | exp "=" exp modifiers
   64    | lvalue "+=" exp
   65    | lvalue "-=" exp
   66    | lvalue "*=" exp
   67    | lvalue "/=" exp
   68    | lvalue "^=" exp
   69    | lvalue "%=" exp

   70 primary-exp: lvalue "--"
   71            | lvalue "++"
   72            | lvalue "->" id

   73 stmt: "at" identifiers "(" exp tilda.opt ")" stmt onleave.opt
   74     | "at" identifiers "(" event_match ")" stmt onleave.opt
   75     | "every" "(" exp ")" stmt
   76     | "if" "(" stmts ")" stmt else.opt
   77     | "freezeif" "(" exp ")" stmt
   78     | "stopif" "(" exp ")" stmt
   79     | "switch" "(" exp ")" "{" cases default.opt "}"
   80     | "timeout" "(" exp ")" stmt catch.opt else.opt finally.opt
   81     | "return" exp.opt
   82     | "break"
   83     | "continue"
   84     | "waituntil" "(" exp tilda.opt ")"
   85     | "waituntil" "(" event_match ")"
   86     | "whenever" "(" exp tilda.opt ")" stmt else.opt
   87     | "whenever" "(" event_match ")" stmt else.opt

   88 default.opt: /* empty */
   89            | "default" ":" stmts

   90 else.opt: /* empty */
   91         | "else" stmt

   92 onleave.opt: /* empty */
   93            | "onleave" stmt

   94 cases: /* empty */
   95      | cases case

   96 case: "case" match ":" stmts

   97 catches.1: catch
   98          | catches.1 catch

   99 match: exp
  100      | exp "if" exp

  101 match.opt: /* empty */
  102          | "(" match ")"

  103 catch: "catch" match.opt block

  104 catch.opt: /* empty */
  105          | "catch" block

  106 finally.opt: /* empty */
  107            | "finally" block

  108 stmt: "try" block catches.1 else.opt finally.opt
  109     | "try" block "finally" block
  110     | "throw" exp.opt
  111     | "loop" stmt
  112     | "for" "(" exp ")" stmt
  113     | "for" "(" stmt.opt ";" exp ";" stmt.opt ")" stmt
  114     | "for" "(" "var" "identifier" in_or_colon exp ")" stmt
  115     | "while" "(" exp ")" stmt

  116 in_or_colon: "in"
  117            | ":"

  118 primary-exp: block
  119            | "do" "(" exp ")" block

  120 detach: "detach"
  121       | "disown"

  122 primary-exp: "assert" "(" exp ")"
  123            | "assert" "{" claims "}"
  124            | detach "(" exp ")"
  125            | detach block
  126            | "isdef" "(" k1_id ")"
  127            | "watch" "(" exp ")"

  128 lvalue: id
  129       | primary-exp "." id
  130       | primary-exp "." "*"

  131 primary-exp: "&" id
  132            | primary-exp "." "&" id

  133 id: "identifier"

  134 bitor-exp: "var" bitor-exp
  135          | "const" "var" bitor-exp

  136 primary-exp: lvalue
  137            | lvalue args

  138 new: "new" "identifier" args.opt

  139 bitor-exp: new

  140 id: "new"

  141 primary-exp: routine formals block

  142 float-exp: "float"

  143 duration: "duration"
  144         | duration "duration"

  145 assoc: exp "=>" exp

  146 assocs.1: assoc
  147         | assocs.1 "," assoc

  148 assocs: "=>"
  149       | assocs.1 comma.opt

  150 dictionary: "[" assocs "]"

  151 tuple.exps: /* empty */
  152           | exps.1 ","
  153           | exps.2

  154 tuple: "(" tuple.exps ")"

  155 bitor-exps: /* empty */
  156           | bitor-exps.1 comma.opt

  157 bitor-exps.1: bitor-exp
  158             | bitor-exps.1 "," bitor-exp

  159 literal-exp: float-exp
  160            | "angle"
  161            | duration
  162            | string
  163            | "[" exps "]"
  164            | "[<" tuple.exps ">]"
  165            | "<" bitor-exps ">"
  166            | dictionary
  167            | tuple

  168 string: "string"
  169       | string "string"

  170 literal-exp: "__HERE__"

  171 event_match: exp "?" args.opt tilda.opt guard.opt

  172 guard.opt: /* empty */
  173          | "if" exp

  174 tilda.opt: /* empty */
  175          | "~" exp

  176 lvalue: primary-exp "[" exps "]"

  177 literal-exp: "this"
  178            | "call"

  179 primary-exp: literal-exp
  180            | "(" exp ")"
  181            | "(" error ")"
  182            | primary-exp "**" primary-exp

  183 unary-exp: primary-exp
  184          | "--" lvalue
  185          | "++" lvalue
  186          | "+" unary-exp
  187          | "-" unary-exp
  188          | "!" unary-exp
  189          | "compl" unary-exp

  190 bitor-exp: unary-exp
  191          | bitor-exp "+" bitor-exp
  192          | bitor-exp "-" bitor-exp
  193          | bitor-exp "*" bitor-exp
  194          | bitor-exp "/" bitor-exp
  195          | bitor-exp "%" bitor-exp
  196          | bitor-exp "^" bitor-exp
  197          | bitor-exp "<<" bitor-exp
  198          | bitor-exp "bitand" bitor-exp
  199          | bitor-exp "bitor" bitor-exp
  200          | bitor-exp ">>" bitor-exp

  201 rel-op: "!="
  202       | "!=="
  203       | "<"
  204       | "<="
  205       | "=="
  206       | "==="
  207       | "=~="
  208       | ">"
  209       | ">="
  210       | "~="

  211 rel-exp: bitor-exp rel-ops

  212 rel-ops: /* empty */
  213        | rel-ops rel-op bitor-exp

  214 exp: rel-exp
  215    | exp "&&" exp
  216    | exp "||" exp
  217    | exp "in" exp
  218    | exp "!" "in" exp

  219 exp.opt: /* empty */
  220        | exp

  221 unsigned: "float"

  222 exp: "%unscope:" unsigned

  223 primary-exp: "%exp:" unsigned

  224 lvalue: "%lvalue:" unsigned
  225       | "%id:" unsigned
  226       | primary-exp "." "%id:" unsigned

  227 primary-exp: lvalue "(" "%exps:" unsigned ")"

  228 claims: /* empty */
  229       | claims.1 semi.opt

  230 claims.1: exp
  231         | claims.1 ";" exp

  232 exps: /* empty */
  233     | exps.1 comma.opt

  234 exps.1: exp
  235       | exps.1 "," exp

  236 exps.2: exps.1 "," exp

  237 args: "(" exps ")"

  238 args.opt: /* empty */
  239         | args

  240 identifiers: /* empty */
  241            | identifiers "identifier"

  242 typespec: ":" exp

  243 typespec.opt: /* empty */
  244             | typespec

  245 formal: var.opt "identifier" typespec.opt
  246       | var.opt "identifier" "=" exp typespec.opt
  247       | var.opt "identifier" "[" "]"

  248 formals.1: formal
  249          | formals.1 "," formal

  250 formals.0: /* empty */
  251          | formals.1 comma.opt

  252 formals: /* empty */
  253        | "(" formals.0 ")"

  254 comma.opt: /* empty */
  255          | ","

  256 semi.opt: /* empty */
  257         | ";"

  258 var.opt: /* empty */
  259        | "var"


Terminals, with rules where they appear

"end of command" (0) 0 7 10
error (256) 2 8 9 10 26 181
MODE_EXP (258) 3
MODE_EXPS (259) 4
"__HERE__" (260) 170
"=" (261) 62 63 246
"break" (262) 82
"case" (263) 96
"catch" (264) 103 105
"closure" (265) 52
"const" (266) 135
"continue" (267) 83
":" (268) 23 36 59 89 96 117 242
"default" (269) 89
"else" (270) 91
"finally" (271) 107 109
"freezeif" (272) 77
"function" (273) 45 53
"if" (274) 76 100 173
"in" (275) 116 217 218
"isdef" (276) 126
"{" (277) 25 26 27 43 79 123
"[" (278) 150 163 176 247
"(" (279) 49 73 74 75 76 77 78 79 80 84 85 86 87 102 112 113 114 115
    119 122 124 126 127 154 180 181 227 237 253
"[<" (280) 164
">]" (281) 164
"onleave" (282) 93
"." (283) 48 49 57 58 129 130 132 226
"}" (284) 25 26 27 43 79 123
"]" (285) 150 163 176 247
"return" (286) 81
")" (287) 49 73 74 75 76 77 78 79 80 84 85 86 87 102 112 113 114 115
    119 122 124 126 127 154 180 181 227 237 253
"stopif" (288) 78
"switch" (289) 79
"throw" (290) 110
"~" (291) 27 175
"timeout" (292) 80
"try" (293) 108 109
"var" (294) 48 114 134 135 259
"waituntil" (295) 84 85
"watch" (296) 127
"whenever" (297) 86 87
"," (298) 6 9 14 34 42 147 152 158 235 236 249 255
";" (299) 5 8 13 113 231 257
"&" (300) 20 131 132
"|" (301) 17 19
"every" (302) 75
"for" (303) 112 113 114
"loop" (304) 111
"while" (305) 115
"at" (306) 73 74
"identifier" (307) 44 46 47 48 49 56 57 58 59 114 133 138 241 245 246
    247
ASSIGN (308)
EMPTY (309)
UNARY (310)
"private" (311) 29
"protected" (312) 30
"public" (313) 31
"class" (314) 37
"package" (315) 38
"enum" (316) 43
"external" (317) 47 48 49
"import" (318) 50
"^=" (319) 68
"-=" (320) 65
"%=" (321) 69
"+=" (322) 64
"/=" (323) 67
"*=" (324) 66
"--" (325) 70 184
"++" (326) 71 185
"->" (327) 72
"do" (328) 119
"assert" (329) 122 123
"detach" (330) 120
"disown" (331) 121
"new" (332) 138 140
"angle" (333) 160
"duration" (334) 143 144
"float" (335) 142 221
"=>" (336) 145 148
"string" (337) 168 169
"?" (338) 171
"call" (339) 178
"this" (340) 57 177
"!" (341) 51 188 218
"bitand" (342) 198
"bitor" (343) 199
"^" (344) 196
"compl" (345) 189
">>" (346) 200
"<<" (347) 197
"-" (348) 187 192
"%" (349) 195
"+" (350) 186 191
"/" (351) 194
"*" (352) 130 193
"**" (353) 182
"=~=" (354) 207
"==" (355) 205
"===" (356) 206
">=" (357) 209
">" (358) 165 208
"<=" (359) 204
"<" (360) 165 203
"!=" (361) 201
"!==" (362) 202
"~=" (363) 210
"&&" (364) 215
"||" (365) 216
"%unscope:" (366) 222
"%exp:" (367) 223
"%lvalue:" (368) 224
"%id:" (369) 225 226
"%exps:" (370) 227


Nonterminals, with rules where they appear

$accept (116)
    on left: 0
start (117)
    on left: 1, on right: 0
root (118)
    on left: 2 3 4, on right: 1
root_exp (119)
    on left: 5 6 7 8 9 10, on right: 3
root_exps (120)
    on left: 11, on right: 4
stmts (121)
    on left: 12 13 14, on right: 11 13 14 25 76 89 96
cstmt.opt (122)
    on left: 15 16 17, on right: 5 6 7 12 13 14
cstmt (123)
    on left: 18 19 20, on right: 16 17 19 20
stmt.opt (124)
    on left: 21 22, on right: 113
stmt (125)
    on left: 23 24 43 47 48 49 50 51 54 55 73 74 75 76 77 78 79 80
    81 82 83 84 85 86 87 108 109 110 111 112 113 114 115, on right:
    18 22 23 73 74 75 76 77 78 80 86 87 91 93 111 112 113 114 115
block (126)
    on left: 25 26 27, on right: 37 38 54 55 103 105 107 108 109 118
    119 125 141
visibility (127)
    on left: 28 29 30 31, on right: 32
proto (128)
    on left: 32, on right: 33 34
protos.1 (129)
    on left: 33 34, on right: 34 36
protos (130)
    on left: 35 36, on right: 37 38
exp (131)
    on left: 37 38 62 63 64 65 66 67 68 69 214 215 216 217 218 222,
    on right: 24 32 51 59 62 63 64 65 66 67 68 69 73 75 77 78 79 80
    84 86 99 100 112 113 114 115 119 122 124 127 145 171 173 175 180
    215 216 217 218 220 230 231 234 235 236 242 246
id.0 (132)
    on left: 39 40, on right: 43
id.1 (133)
    on left: 41 42, on right: 40 42
from (134)
    on left: 44, on right: 48 49
event_or_function (135)
    on left: 45 46, on right: 49
routine (136)
    on left: 52 53, on right: 54 141
k1_id (137)
    on left: 56 57 58, on right: 54 58 126
modifier (138)
    on left: 59, on right: 60 61
modifiers (139)
    on left: 60 61, on right: 61 63
primary-exp (140)
    on left: 70 71 72 118 119 122 123 124 125 126 127 131 132 136 137
    141 179 180 181 182 223 227, on right: 23 129 130 132 176 182 183
    226
default.opt (141)
    on left: 88 89, on right: 79
else.opt (142)
    on left: 90 91, on right: 76 80 86 87 108
onleave.opt (143)
    on left: 92 93, on right: 73 74
cases (144)
    on left: 94 95, on right: 79 95
case (145)
    on left: 96, on right: 95
catches.1 (146)
    on left: 97 98, on right: 98 108
match (147)
    on left: 99 100, on right: 96 102
match.opt (148)
    on left: 101 102, on right: 103
catch (149)
    on left: 103, on right: 97 98
catch.opt (150)
    on left: 104 105, on right: 80
finally.opt (151)
    on left: 106 107, on right: 80 108
in_or_colon (152)
    on left: 116 117, on right: 114
detach (153)
    on left: 120 121, on right: 124 125
lvalue (154)
    on left: 128 129 130 176 224 225 226, on right: 37 38 50 64 65
    66 67 68 69 70 71 72 136 137 184 185 227
id (155)
    on left: 133 140, on right: 27 41 42 43 55 72 128 129 131 132
bitor-exp (156)
    on left: 134 135 139 190 191 192 193 194 195 196 197 198 199 200,
    on right: 134 135 157 158 191 192 193 194 195 196 197 198 199 200
    211 213
new (157)
    on left: 138, on right: 139
float-exp (158)
    on left: 142, on right: 159
duration (159)
    on left: 143 144, on right: 144 161
assoc (160)
    on left: 145, on right: 146 147
assocs.1 (161)
    on left: 146 147, on right: 147 149
assocs (162)
    on left: 148 149, on right: 150
dictionary (163)
    on left: 150, on right: 166
tuple.exps (164)
    on left: 151 152 153, on right: 154 164
tuple (165)
    on left: 154, on right: 167
bitor-exps (166)
    on left: 155 156, on right: 165
bitor-exps.1 (167)
    on left: 157 158, on right: 156 158
literal-exp (168)
    on left: 159 160 161 162 163 164 165 166 167 170 177 178, on right:
    179
string (169)
    on left: 168 169, on right: 162 169
event_match (170)
    on left: 171, on right: 74 85 87
guard.opt (171)
    on left: 172 173, on right: 171
tilda.opt (172)
    on left: 174 175, on right: 51 73 84 86 171
unary-exp (173)
    on left: 183 184 185 186 187 188 189, on right: 186 187 188 189
    190
rel-op (174)
    on left: 201 202 203 204 205 206 207 208 209 210, on right: 213
rel-exp (175)
    on left: 211, on right: 214
rel-ops (176)
    on left: 212 213, on right: 211 213
exp.opt (177)
    on left: 219 220, on right: 81 110
unsigned (178)
    on left: 221, on right: 49 222 223 224 225 226 227
claims (179)
    on left: 228 229, on right: 123
claims.1 (180)
    on left: 230 231, on right: 229 231
exps (181)
    on left: 232 233, on right: 163 176 237
exps.1 (182)
    on left: 234 235, on right: 152 233 235 236
exps.2 (183)
    on left: 236, on right: 153
args (184)
    on left: 237, on right: 137 239
args.opt (185)
    on left: 238 239, on right: 51 138 171
identifiers (186)
    on left: 240 241, on right: 73 74 241
typespec (187)
    on left: 242, on right: 244
typespec.opt (188)
    on left: 243 244, on right: 245 246
formal (189)
    on left: 245 246 247, on right: 248 249
formals.1 (190)
    on left: 248 249, on right: 249 251
formals.0 (191)
    on left: 250 251, on right: 253
formals (192)
    on left: 252 253, on right: 54 55 141
comma.opt (193)
    on left: 254 255, on right: 40 149 156 233 251
semi.opt (194)
    on left: 256 257, on right: 229
var.opt (195)
    on left: 258 259, on right: 245 246 247


state 0

    0 $accept: . start "end of command"
    1 start: . root
    2 root: . error
    3     | . MODE_EXP root_exp
    4     | . MODE_EXPS root_exps

    error      shift, and go to state 1
    MODE_EXP   shift, and go to state 2
    MODE_EXPS  shift, and go to state 3

    start  go to state 4
    root   go to state 5


state 1

    2 root: error .

    $default  reduce using rule 2 (root)


state 2

    3 root: MODE_EXP . root_exp
    5 root_exp: . cstmt.opt ";"
    6         | . cstmt.opt ","
    7         | . cstmt.opt "end of command"
    8         | . error ";"
    9         | . error ","
   10         | . error "end of command"
   15 cstmt.opt: .  ["end of command", ",", ";"]
   16          | . cstmt
   17          | . cstmt "|"
   18 cstmt: . stmt
   19      | . cstmt "|" cstmt
   20      | . cstmt "&" cstmt
   23 stmt: . primary-exp ":" stmt
   24     | . exp
   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   37 exp: . "class" lvalue protos block
   38    | . "package" lvalue protos block
   43 stmt: . "enum" id "{" id.0 "}"
   47     | . "external" "identifier" "identifier"
   48     | . "external" "var" "identifier" "." "identifier" from "identifier"
   49     | . "external" event_or_function "(" unsigned ")" "identifier" "." "identifier" from "identifier"
   50     | . "import" lvalue
   51     | . exp "!" args.opt tilda.opt
   52 routine: . "closure"
   53        | . "function"
   54 stmt: . routine k1_id formals block
   55     | . id id formals block
   62 exp: . exp "=" exp
   63    | . exp "=" exp modifiers
   64    | . lvalue "+=" exp
   65    | . lvalue "-=" exp
   66    | . lvalue "*=" exp
   67    | . lvalue "/=" exp
   68    | . lvalue "^=" exp
   69    | . lvalue "%=" exp
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
   73 stmt: . "at" identifiers "(" exp tilda.opt ")" stmt onleave.opt
   74     | . "at" identifiers "(" event_match ")" stmt onleave.opt
   75     | . "every" "(" exp ")" stmt
   76     | . "if" "(" stmts ")" stmt else.opt
   77     | . "freezeif" "(" exp ")" stmt
   78     | . "stopif" "(" exp ")" stmt
   79     | . "switch" "(" exp ")" "{" cases default.opt "}"
   80     | . "timeout" "(" exp ")" stmt catch.opt else.opt finally.opt
   81     | . "return" exp.opt
   82     | . "break"
   83     | . "continue"
   84     | . "waituntil" "(" exp tilda.opt ")"
   85     | . "waituntil" "(" event_match ")"
   86     | . "whenever" "(" exp tilda.opt ")" stmt else.opt
   87     | . "whenever" "(" event_match ")" stmt else.opt
  108     | . "try" block catches.1 else.opt finally.opt
  109     | . "try" block "finally" block
  110     | . "throw" exp.opt
  111     | . "loop" stmt
  112     | . "for" "(" exp ")" stmt
  113     | . "for" "(" stmt.opt ";" exp ";" stmt.opt ")" stmt
  114     | . "for" "(" "var" "identifier" in_or_colon exp ")" stmt
  115     | . "while" "(" exp ")" stmt
  118 primary-exp: . block
  119            | . "do" "(" exp ")" block
  120 detach: . "detach"
  121       | . "disown"
  122 primary-exp: . "assert" "(" exp ")"
  123            | . "assert" "{" claims "}"
  124            | . detach "(" exp ")"
  125            | . detach block
  126            | . "isdef" "(" k1_id ")"
  127            | . "watch" "(" exp ")"
  128 lvalue: . id
  129       | . primary-exp "." id
  130       | . primary-exp "." "*"
  131 primary-exp: . "&" id
  132            | . primary-exp "." "&" id
  133 id: . "identifier"
  134 bitor-exp: . "var" bitor-exp
  135          | . "const" "var" bitor-exp
  136 primary-exp: . lvalue
  137            | . lvalue args
  138 new: . "new" "identifier" args.opt
  139 bitor-exp: . new
  140 id: . "new"
  141 primary-exp: . routine formals block
  142 float-exp: . "float"
  143 duration: . "duration"
  144         | . duration "duration"
  150 dictionary: . "[" assocs "]"
  154 tuple: . "(" tuple.exps ")"
  159 literal-exp: . float-exp
  160            | . "angle"
  161            | . duration
  162            | . string
  163            | . "[" exps "]"
  164            | . "[<" tuple.exps ">]"
  165            | . "<" bitor-exps ">"
  166            | . dictionary
  167            | . tuple
  168 string: . "string"
  169       | . string "string"
  170 literal-exp: . "__HERE__"
  176 lvalue: . primary-exp "[" exps "]"
  177 literal-exp: . "this"
  178            | . "call"
  179 primary-exp: . literal-exp
  180            | . "(" exp ")"
  181            | . "(" error ")"
  182            | . primary-exp "**" primary-exp
  183 unary-exp: . primary-exp
  184          | . "--" lvalue
  185          | . "++" lvalue
  186          | . "+" unary-exp
  187          | . "-" unary-exp
  188          | . "!" unary-exp
  189          | . "compl" unary-exp
  190 bitor-exp: . unary-exp
  191          | . bitor-exp "+" bitor-exp
  192          | . bitor-exp "-" bitor-exp
  193          | . bitor-exp "*" bitor-exp
  194          | . bitor-exp "/" bitor-exp
  195          | . bitor-exp "%" bitor-exp
  196          | . bitor-exp "^" bitor-exp
  197          | . bitor-exp "<<" bitor-exp
  198          | . bitor-exp "bitand" bitor-exp
  199          | . bitor-exp "bitor" bitor-exp
  200          | . bitor-exp ">>" bitor-exp
  211 rel-exp: . bitor-exp rel-ops
  214 exp: . rel-exp
  215    | . exp "&&" exp
  216    | . exp "||" exp
  217    | . exp "in" exp
  218    | . exp "!" "in" exp
  222    | . "%unscope:" unsigned
  223 primary-exp: . "%exp:" unsigned
  224 lvalue: . "%lvalue:" unsigned
  225       | . "%id:" unsigned
  226       | . primary-exp "." "%id:" unsigned
  227 primary-exp: . lvalue "(" "%exps:" unsigned ")"

    error         shift, and go to state 6
    "__HERE__"    shift, and go to state 7
    "break"       shift, and go to state 8
    "closure"     shift, and go to state 9
    "const"       shift, and go to state 10
    "continue"    shift, and go to state 11
    "freezeif"    shift, and go to state 12
    "function"    shift, and go to state 13
    "if"          shift, and go to state 14
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "[<"          shift, and go to state 19
    "return"      shift, and go to state 20
    "stopif"      shift, and go to state 21
    "switch"      shift, and go to state 22
    "throw"       shift, and go to state 23
    "timeout"     shift, and go to state 24
    "try"         shift, and go to state 25
    "var"         shift, and go to state 26
    "waituntil"   shift, and go to state 27
    "watch"       shift, and go to state 28
    "whenever"    shift, and go to state 29
    "&"           shift, and go to state 30
    "every"       shift, and go to state 31
    "for"         shift, and go to state 32
    "loop"        shift, and go to state 33
    "while"       shift, and go to state 34
    "at"          shift, and go to state 35
    "identifier"  shift, and go to state 36
    "class"       shift, and go to state 37
    "package"     shift, and go to state 38
    "enum"        shift, and go to state 39
    "external"    shift, and go to state 40
    "import"      shift, and go to state 41
    "--"          shift, and go to state 42
    "++"          shift, and go to state 43
    "do"          shift, and go to state 44
    "assert"      shift, and go to state 45
    "detach"      shift, and go to state 46
    "disown"      shift, and go to state 47
    "new"         shift, and go to state 48
    "angle"       shift, and go to state 49
    "duration"    shift, and go to state 50
    "float"       shift, and go to state 51
    "string"      shift, and go to state 52
    "call"        shift, and go to state 53
    "this"        shift, and go to state 54
    "!"           shift, and go to state 55
    "compl"       shift, and go to state 56
    "-"           shift, and go to state 57
    "+"           shift, and go to state 58
    "<"           shift, and go to state 59
    "%unscope:"   shift, and go to state 60
    "%exp:"       shift, and go to state 61
    "%lvalue:"    shift, and go to state 62
    "%id:"        shift, and go to state 63

    "end of command"  reduce using rule 15 (cstmt.opt)
    ","               reduce using rule 15 (cstmt.opt)
    ";"               reduce using rule 15 (cstmt.opt)

    root_exp     go to state 64
    cstmt.opt    go to state 65
    cstmt        go to state 66
    stmt         go to state 67
    block        go to state 68
    exp          go to state 69
    routine      go to state 70
    primary-exp  go to state 71
    detach       go to state 72
    lvalue       go to state 73
    id           go to state 74
    bitor-exp    go to state 75
    new          go to state 76
    float-exp    go to state 77
    duration     go to state 78
    dictionary   go to state 79
    tuple        go to state 80
    literal-exp  go to state 81
    string       go to state 82
    unary-exp    go to state 83
    rel-exp      go to state 84


state 3

    4 root: MODE_EXPS . root_exps
   11 root_exps: . stmts
   12 stmts: . cstmt.opt
   13      | . stmts ";" cstmt.opt
   14      | . stmts "," cstmt.opt
   15 cstmt.opt: .  ["end of command", ",", ";"]
   16          | . cstmt
   17          | . cstmt "|"
   18 cstmt: . stmt
   19      | . cstmt "|" cstmt
   20      | . cstmt "&" cstmt
   23 stmt: . primary-exp ":" stmt
   24     | . exp
   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   37 exp: . "class" lvalue protos block
   38    | . "package" lvalue protos block
   43 stmt: . "enum" id "{" id.0 "}"
   47     | . "external" "identifier" "identifier"
   48     | . "external" "var" "identifier" "." "identifier" from "identifier"
   49     | . "external" event_or_function "(" unsigned ")" "identifier" "." "identifier" from "identifier"
   50     | . "import" lvalue
   51     | . exp "!" args.opt tilda.opt
   52 routine: . "closure"
   53        | . "function"
   54 stmt: . routine k1_id formals block
   55     | . id id formals block
   62 exp: . exp "=" exp
   63    | . exp "=" exp modifiers
   64    | . lvalue "+=" exp
   65    | . lvalue "-=" exp
   66    | . lvalue "*=" exp
   67    | . lvalue "/=" exp
   68    | . lvalue "^=" exp
   69    | . lvalue "%=" exp
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
   73 stmt: . "at" identifiers "(" exp tilda.opt ")" stmt onleave.opt
   74     | . "at" identifiers "(" event_match ")" stmt onleave.opt
   75     | . "every" "(" exp ")" stmt
   76     | . "if" "(" stmts ")" stmt else.opt
   77     | . "freezeif" "(" exp ")" stmt
   78     | . "stopif" "(" exp ")" stmt
   79     | . "switch" "(" exp ")" "{" cases default.opt "}"
   80     | . "timeout" "(" exp ")" stmt catch.opt else.opt finally.opt
   81     | . "return" exp.opt
   82     | . "break"
   83     | . "continue"
   84     | . "waituntil" "(" exp tilda.opt ")"
   85     | . "waituntil" "(" event_match ")"
   86     | . "whenever" "(" exp tilda.opt ")" stmt else.opt
   87     | . "whenever" "(" event_match ")" stmt else.opt
  108     | . "try" block catches.1 else.opt finally.opt
  109     | . "try" block "finally" block
  110     | . "throw" exp.opt
  111     | . "loop" stmt
  112     | . "for" "(" exp ")" stmt
  113     | . "for" "(" stmt.opt ";" exp ";" stmt.opt ")" stmt
  114     | . "for" "(" "var" "identifier" in_or_colon exp ")" stmt
  115     | . "while" "(" exp ")" stmt
  118 primary-exp: . block
  119            | . "do" "(" exp ")" block
  120 detach: . "detach"
  121       | . "disown"
  122 primary-exp: . "assert" "(" exp ")"
  123            | . "assert" "{" claims "}"
  124            | . detach "(" exp ")"
  125            | . detach block
  126            | . "isdef" "(" k1_id ")"
  127            | . "watch" "(" exp ")"
  128 lvalue: . id
  129       | . primary-exp "." id
  130       | . primary-exp "." "*"
  131 primary-exp: . "&" id
  132            | . primary-exp "." "&" id
  133 id: . "identifier"
  134 bitor-exp: . "var" bitor-exp
  135          | . "const" "var" bitor-exp
  136 primary-exp: . lvalue
  137            | . lvalue args
  138 new: . "new" "identifier" args.opt
  139 bitor-exp: . new
  140 id: . "new"
  141 primary-exp: . routine formals block
  142 float-exp: . "float"
  143 duration: . "duration"
  144         | . duration "duration"
  150 dictionary: . "[" assocs "]"
  154 tuple: . "(" tuple.exps ")"
  159 literal-exp: . float-exp
  160            | . "angle"
  161            | . duration
  162            | . string
  163            | . "[" exps "]"
  164            | . "[<" tuple.exps ">]"
  165            | . "<" bitor-exps ">"
  166            | . dictionary
  167            | . tuple
  168 string: . "string"
  169       | . string "string"
  170 literal-exp: . "__HERE__"
  176 lvalue: . primary-exp "[" exps "]"
  177 literal-exp: . "this"
  178            | . "call"
  179 primary-exp: . literal-exp
  180            | . "(" exp ")"
  181            | . "(" error ")"
  182            | . primary-exp "**" primary-exp
  183 unary-exp: . primary-exp
  184          | . "--" lvalue
  185          | . "++" lvalue
  186          | . "+" unary-exp
  187          | . "-" unary-exp
  188          | . "!" unary-exp
  189          | . "compl" unary-exp
  190 bitor-exp: . unary-exp
  191          | . bitor-exp "+" bitor-exp
  192          | . bitor-exp "-" bitor-exp
  193          | . bitor-exp "*" bitor-exp
  194          | . bitor-exp "/" bitor-exp
  195          | . bitor-exp "%" bitor-exp
  196          | . bitor-exp "^" bitor-exp
  197          | . bitor-exp "<<" bitor-exp
  198          | . bitor-exp "bitand" bitor-exp
  199          | . bitor-exp "bitor" bitor-exp
  200          | . bitor-exp ">>" bitor-exp
  211 rel-exp: . bitor-exp rel-ops
  214 exp: . rel-exp
  215    | . exp "&&" exp
  216    | . exp "||" exp
  217    | . exp "in" exp
  218    | . exp "!" "in" exp
  222    | . "%unscope:" unsigned
  223 primary-exp: . "%exp:" unsigned
  224 lvalue: . "%lvalue:" unsigned
  225       | . "%id:" unsigned
  226       | . primary-exp "." "%id:" unsigned
  227 primary-exp: . lvalue "(" "%exps:" unsigned ")"

    "__HERE__"    shift, and go to state 7
    "break"       shift, and go to state 8
    "closure"     shift, and go to state 9
    "const"       shift, and go to state 10
    "continue"    shift, and go to state 11
    "freezeif"    shift, and go to state 12
    "function"    shift, and go to state 13
    "if"          shift, and go to state 14
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "[<"          shift, and go to state 19
    "return"      shift, and go to state 20
    "stopif"      shift, and go to state 21
    "switch"      shift, and go to state 22
    "throw"       shift, and go to state 23
    "timeout"     shift, and go to state 24
    "try"         shift, and go to state 25
    "var"         shift, and go to state 26
    "waituntil"   shift, and go to state 27
    "watch"       shift, and go to state 28
    "whenever"    shift, and go to state 29
    "&"           shift, and go to state 30
    "every"       shift, and go to state 31
    "for"         shift, and go to state 32
    "loop"        shift, and go to state 33
    "while"       shift, and go to state 34
    "at"          shift, and go to state 35
    "identifier"  shift, and go to state 36
    "class"       shift, and go to state 37
    "package"     shift, and go to state 38
    "enum"        shift, and go to state 39
    "external"    shift, and go to state 40
    "import"      shift, and go to state 41
    "--"          shift, and go to state 42
    "++"          shift, and go to state 43
    "do"          shift, and go to state 44
    "assert"      shift, and go to state 45
    "detach"      shift, and go to state 46
    "disown"      shift, and go to state 47
    "new"         shift, and go to state 48
    "angle"       shift, and go to state 49
    "duration"    shift, and go to state 50
    "float"       shift, and go to state 51
    "string"      shift, and go to state 52
    "call"        shift, and go to state 53
    "this"        shift, and go to state 54
    "!"           shift, and go to state 55
    "compl"       shift, and go to state 56
    "-"           shift, and go to state 57
    "+"           shift, and go to state 58
    "<"           shift, and go to state 59
    "%unscope:"   shift, and go to state 60
    "%exp:"       shift, and go to state 61
    "%lvalue:"    shift, and go to state 62
    "%id:"        shift, and go to state 63

    $default  reduce using rule 15 (cstmt.opt)

    root_exps    go to state 85
    stmts        go to state 86
    cstmt.opt    go to state 87
    cstmt        go to state 66
    stmt         go to state 67
    block        go to state 68
    exp          go to state 69
    routine      go to state 70
    primary-exp  go to state 71
    detach       go to state 72
    lvalue       go to state 73
    id           go to state 74
    bitor-exp    go to state 75
    new          go to state 76
    float-exp    go to state 77
    duration     go to state 78
    dictionary   go to state 79
    tuple        go to state 80
    literal-exp  go to state 81
    string       go to state 82
    unary-exp    go to state 83
    rel-exp      go to state 84


state 4

    0 $accept: start . "end of command"

    "end of command"  shift, and go to state 88


state 5

    1 start: root .

    $default  reduce using rule 1 (start)


state 6

    8 root_exp: error . ";"
    9         | error . ","
   10         | error . "end of command"

    "end of command"  shift, and go to state 89
    ","               shift, and go to state 90
    ";"               shift, and go to state 91


state 7

  170 literal-exp: "__HERE__" .

    $default  reduce using rule 170 (literal-exp)


state 8

   82 stmt: "break" .

    $default  reduce using rule 82 (stmt)


state 9

   52 routine: "closure" .

    $default  reduce using rule 52 (routine)


state 10

  135 bitor-exp: "const" . "var" bitor-exp

    "var"  shift, and go to state 92


state 11

   83 stmt: "continue" .

    $default  reduce using rule 83 (stmt)


state 12

   77 stmt: "freezeif" . "(" exp ")" stmt

    "("  shift, and go to state 93


state 13

   53 routine: "function" .

    $default  reduce using rule 53 (routine)


state 14

   76 stmt: "if" . "(" stmts ")" stmt else.opt

    "("  shift, and go to state 94


state 15

  126 primary-exp: "isdef" . "(" k1_id ")"

    "("  shift, and go to state 95


state 16

   12 stmts: . cstmt.opt
   13      | . stmts ";" cstmt.opt
   14      | . stmts "," cstmt.opt
   15 cstmt.opt: .  ["}", ",", ";"]
   16          | . cstmt
   17          | . cstmt "|"
   18 cstmt: . stmt
   19      | . cstmt "|" cstmt
   20      | . cstmt "&" cstmt
   23 stmt: . primary-exp ":" stmt
   24     | . exp
   25 block: . "{" stmts "}"
   25      | "{" . stmts "}"
   26      | . "{" error "}"
   26      | "{" . error "}"
   27      | . "{" id "~" id "}"
   27      | "{" . id "~" id "}"
   37 exp: . "class" lvalue protos block
   38    | . "package" lvalue protos block
   43 stmt: . "enum" id "{" id.0 "}"
   47     | . "external" "identifier" "identifier"
   48     | . "external" "var" "identifier" "." "identifier" from "identifier"
   49     | . "external" event_or_function "(" unsigned ")" "identifier" "." "identifier" from "identifier"
   50     | . "import" lvalue
   51     | . exp "!" args.opt tilda.opt
   52 routine: . "closure"
   53        | . "function"
   54 stmt: . routine k1_id formals block
   55     | . id id formals block
   62 exp: . exp "=" exp
   63    | . exp "=" exp modifiers
   64    | . lvalue "+=" exp
   65    | . lvalue "-=" exp
   66    | . lvalue "*=" exp
   67    | . lvalue "/=" exp
   68    | . lvalue "^=" exp
   69    | . lvalue "%=" exp
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
   73 stmt: . "at" identifiers "(" exp tilda.opt ")" stmt onleave.opt
   74     | . "at" identifiers "(" event_match ")" stmt onleave.opt
   75     | . "every" "(" exp ")" stmt
   76     | . "if" "(" stmts ")" stmt else.opt
   77     | . "freezeif" "(" exp ")" stmt
   78     | . "stopif" "(" exp ")" stmt
   79     | . "switch" "(" exp ")" "{" cases default.opt "}"
   80     | . "timeout" "(" exp ")" stmt catch.opt else.opt finally.opt
   81     | . "return" exp.opt
   82     | . "break"
   83     | . "continue"
   84     | . "waituntil" "(" exp tilda.opt ")"
   85     | . "waituntil" "(" event_match ")"
   86     | . "whenever" "(" exp tilda.opt ")" stmt else.opt
   87     | . "whenever" "(" event_match ")" stmt else.opt
  108     | . "try" block catches.1 else.opt finally.opt
  109     | . "try" block "finally" block
  110     | . "throw" exp.opt
  111     | . "loop" stmt
  112     | . "for" "(" exp ")" stmt
  113     | . "for" "(" stmt.opt ";" exp ";" stmt.opt ")" stmt
  114     | . "for" "(" "var" "identifier" in_or_colon exp ")" stmt
  115     | . "while" "(" exp ")" stmt
  118 primary-exp: . block
  119            | . "do" "(" exp ")" block
  120 detach: . "detach"
  121       | . "disown"
  122 primary-exp: . "assert" "(" exp ")"
  123            | . "assert" "{" claims "}"
  124            | . detach "(" exp ")"
  125            | . detach block
  126            | . "isdef" "(" k1_id ")"
  127            | . "watch" "(" exp ")"
  128 lvalue: . id
  129       | . primary-exp "." id
  130       | . primary-exp "." "*"
  131 primary-exp: . "&" id
  132            | . primary-exp "." "&" id
  133 id: . "identifier"
  134 bitor-exp: . "var" bitor-exp
  135          | . "const" "var" bitor-exp
  136 primary-exp: . lvalue
  137            | . lvalue args
  138 new: . "new" "identifier" args.opt
  139 bitor-exp: . new
  140 id: . "new"
  141 primary-exp: . routine formals block
  142 float-exp: . "float"
  143 duration: . "duration"
  144         | . duration "duration"
  150 dictionary: . "[" assocs "]"
  154 tuple: . "(" tuple.exps ")"
  159 literal-exp: . float-exp
  160            | . "angle"
  161            | . duration
  162            | . string
  163            | . "[" exps "]"
  164            | . "[<" tuple.exps ">]"
  165            | . "<" bitor-exps ">"
  166            | . dictionary
  167            | . tuple
  168 string: . "string"
  169       | . string "string"
  170 literal-exp: . "__HERE__"
  176 lvalue: . primary-exp "[" exps "]"
  177 literal-exp: . "this"
  178            | . "call"
  179 primary-exp: . literal-exp
  180            | . "(" exp ")"
  181            | . "(" error ")"
  182            | . primary-exp "**" primary-exp
  183 unary-exp: . primary-exp
  184          | . "--" lvalue
  185          | . "++" lvalue
  186          | . "+" unary-exp
  187          | . "-" unary-exp
  188          | . "!" unary-exp
  189          | . "compl" unary-exp
  190 bitor-exp: . unary-exp
  191          | . bitor-exp "+" bitor-exp
  192          | . bitor-exp "-" bitor-exp
  193          | . bitor-exp "*" bitor-exp
  194          | . bitor-exp "/" bitor-exp
  195          | . bitor-exp "%" bitor-exp
  196          | . bitor-exp "^" bitor-exp
  197          | . bitor-exp "<<" bitor-exp
  198          | . bitor-exp "bitand" bitor-exp
  199          | . bitor-exp "bitor" bitor-exp
  200          | . bitor-exp ">>" bitor-exp
  211 rel-exp: . bitor-exp rel-ops
  214 exp: . rel-exp
  215    | . exp "&&" exp
  216    | . exp "||" exp
  217    | . exp "in" exp
  218    | . exp "!" "in" exp
  222    | . "%unscope:" unsigned
  223 primary-exp: . "%exp:" unsigned
  224 lvalue: . "%lvalue:" unsigned
  225       | . "%id:" unsigned
  226       | . primary-exp "." "%id:" unsigned
  227 primary-exp: . lvalue "(" "%exps:" unsigned ")"

    error         shift, and go to state 96
    "__HERE__"    shift, and go to state 7
    "break"       shift, and go to state 8
    "closure"     shift, and go to state 9
    "const"       shift, and go to state 10
    "continue"    shift, and go to state 11
    "freezeif"    shift, and go to state 12
    "function"    shift, and go to state 13
    "if"          shift, and go to state 14
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "[<"          shift, and go to state 19
    "return"      shift, and go to state 20
    "stopif"      shift, and go to state 21
    "switch"      shift, and go to state 22
    "throw"       shift, and go to state 23
    "timeout"     shift, and go to state 24
    "try"         shift, and go to state 25
    "var"         shift, and go to state 26
    "waituntil"   shift, and go to state 27
    "watch"       shift, and go to state 28
    "whenever"    shift, and go to state 29
    "&"           shift, and go to state 30
    "every"       shift, and go to state 31
    "for"         shift, and go to state 32
    "loop"        shift, and go to state 33
    "while"       shift, and go to state 34
    "at"          shift, and go to state 35
    "identifier"  shift, and go to state 36
    "class"       shift, and go to state 37
    "package"     shift, and go to state 38
    "enum"        shift, and go to state 39
    "external"    shift, and go to state 40
    "import"      shift, and go to state 41
    "--"          shift, and go to state 42
    "++"          shift, and go to state 43
    "do"          shift, and go to state 44
    "assert"      shift, and go to state 45
    "detach"      shift, and go to state 46
    "disown"      shift, and go to state 47
    "new"         shift, and go to state 48
    "angle"       shift, and go to state 49
    "duration"    shift, and go to state 50
    "float"       shift, and go to state 51
    "string"      shift, and go to state 52
    "call"        shift, and go to state 53
    "this"        shift, and go to state 54
    "!"           shift, and go to state 55
    "compl"       shift, and go to state 56
    "-"           shift, and go to state 57
    "+"           shift, and go to state 58
    "<"           shift, and go to state 59
    "%unscope:"   shift, and go to state 60
    "%exp:"       shift, and go to state 61
    "%lvalue:"    shift, and go to state 62
    "%id:"        shift, and go to state 63

    "}"  reduce using rule 15 (cstmt.opt)
    ","  reduce using rule 15 (cstmt.opt)
    ";"  reduce using rule 15 (cstmt.opt)

    stmts        go to state 97
    cstmt.opt    go to state 87
    cstmt        go to state 66
    stmt         go to state 67
    block        go to state 68
    exp          go to state 69
    routine      go to state 70
    primary-exp  go to state 71
    detach       go to state 72
    lvalue       go to state 73
    id           go to state 98
    bitor-exp    go to state 75
    new          go to state 76
    float-exp    go to state 77
    duration     go to state 78
    dictionary   go to state 79
    tuple        go to state 80
    literal-exp  go to state 81
    string       go to state 82
    unary-exp    go to state 83
    rel-exp      go to state 84


state 17

   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   37 exp: . "class" lvalue protos block
   38    | . "package" lvalue protos block
   52 routine: . "closure"
   53        | . "function"
   62 exp: . exp "=" exp
   63    | . exp "=" exp modifiers
   64    | . lvalue "+=" exp
   65    | . lvalue "-=" exp
   66    | . lvalue "*=" exp
   67    | . lvalue "/=" exp
   68    | . lvalue "^=" exp
   69    | . lvalue "%=" exp
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
  118            | . block
  119            | . "do" "(" exp ")" block
  120 detach: . "detach"
  121       | . "disown"
  122 primary-exp: . "assert" "(" exp ")"
  123            | . "assert" "{" claims "}"
  124            | . detach "(" exp ")"
  125            | . detach block
  126            | . "isdef" "(" k1_id ")"
  127            | . "watch" "(" exp ")"
  128 lvalue: . id
  129       | . primary-exp "." id
  130       | . primary-exp "." "*"
  131 primary-exp: . "&" id
  132            | . primary-exp "." "&" id
  133 id: . "identifier"
  134 bitor-exp: . "var" bitor-exp
  135          | . "const" "var" bitor-exp
  136 primary-exp: . lvalue
  137            | . lvalue args
  138 new: . "new" "identifier" args.opt
  139 bitor-exp: . new
  140 id: . "new"
  141 primary-exp: . routine formals block
  142 float-exp: . "float"
  143 duration: . "duration"
  144         | . duration "duration"
  145 assoc: . exp "=>" exp
  146 assocs.1: . assoc
  147         | . assocs.1 "," assoc
  148 assocs: . "=>"
  149       | . assocs.1 comma.opt
  150 dictionary: . "[" assocs "]"
  150           | "[" . assocs "]"
  154 tuple: . "(" tuple.exps ")"
  159 literal-exp: . float-exp
  160            | . "angle"
  161            | . duration
  162            | . string
  163            | . "[" exps "]"
  163            | "[" . exps "]"
  164            | . "[<" tuple.exps ">]"
  165            | . "<" bitor-exps ">"
  166            | . dictionary
  167            | . tuple
  168 string: . "string"
  169       | . string "string"
  170 literal-exp: . "__HERE__"
  176 lvalue: . primary-exp "[" exps "]"
  177 literal-exp: . "this"
  178            | . "call"
  179 primary-exp: . literal-exp
  180            | . "(" exp ")"
  181            | . "(" error ")"
  182            | . primary-exp "**" primary-exp
  183 unary-exp: . primary-exp
  184          | . "--" lvalue
  185          | . "++" lvalue
  186          | . "+" unary-exp
  187          | . "-" unary-exp
  188          | . "!" unary-exp
  189          | . "compl" unary-exp
  190 bitor-exp: . unary-exp
  191          | . bitor-exp "+" bitor-exp
  192          | . bitor-exp "-" bitor-exp
  193          | . bitor-exp "*" bitor-exp
  194          | . bitor-exp "/" bitor-exp
  195          | . bitor-exp "%" bitor-exp
  196          | . bitor-exp "^" bitor-exp
  197          | . bitor-exp "<<" bitor-exp
  198          | . bitor-exp "bitand" bitor-exp
  199          | . bitor-exp "bitor" bitor-exp
  200          | . bitor-exp ">>" bitor-exp
  211 rel-exp: . bitor-exp rel-ops
  214 exp: . rel-exp
  215    | . exp "&&" exp
  216    | . exp "||" exp
  217    | . exp "in" exp
  218    | . exp "!" "in" exp
  222    | . "%unscope:" unsigned
  223 primary-exp: . "%exp:" unsigned
  224 lvalue: . "%lvalue:" unsigned
  225       | . "%id:" unsigned
  226       | . primary-exp "." "%id:" unsigned
  227 primary-exp: . lvalue "(" "%exps:" unsigned ")"
  232 exps: .  ["]"]
  233     | . exps.1 comma.opt
  234 exps.1: . exp
  235       | . exps.1 "," exp

    "__HERE__"    shift, and go to state 7
    "closure"     shift, and go to state 9
    "const"       shift, and go to state 10
    "function"    shift, and go to state 13
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "[<"          shift, and go to state 19
    "var"         shift, and go to state 26
    "watch"       shift, and go to state 28
    "&"           shift, and go to state 30
    "identifier"  shift, and go to state 36
    "class"       shift, and go to state 37
    "package"     shift, and go to state 38
    "--"          shift, and go to state 42
    "++"          shift, and go to state 43
    "do"          shift, and go to state 44
    "assert"      shift, and go to state 45
    "detach"      shift, and go to state 46
    "disown"      shift, and go to state 47
    "new"         shift, and go to state 48
    "angle"       shift, and go to state 49
    "duration"    shift, and go to state 50
    "float"       shift, and go to state 51
    "=>"          shift, and go to state 99
    "string"      shift, and go to state 52
    "call"        shift, and go to state 53
    "this"        shift, and go to state 54
    "!"           shift, and go to state 55
    "compl"       shift, and go to state 56
    "-"           shift, and go to state 57
    "+"           shift, and go to state 58
    "<"           shift, and go to state 59
    "%unscope:"   shift, and go to state 60
    "%exp:"       shift, and go to state 61
    "%lvalue:"    shift, and go to state 62
    "%id:"        shift, and go to state 63

    $default  reduce using rule 232 (exps)

    block        go to state 68
    exp          go to state 100
    routine      go to state 101
    primary-exp  go to state 102
    detach       go to state 72
    lvalue       go to state 73
    id           go to state 103
    bitor-exp    go to state 75
    new          go to state 76
    float-exp    go to state 77
    duration     go to state 78
    assoc        go to state 104
    assocs.1     go to state 105
    assocs       go to state 106
    dictionary   go to state 79
    tuple        go to state 80
    literal-exp  go to state 81
    string       go to state 82
    unary-exp    go to state 83
    rel-exp      go to state 84
    exps         go to state 107
    exps.1       go to state 108


state 18

   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   37 exp: . "class" lvalue protos block
   38    | . "package" lvalue protos block
   52 routine: . "closure"
   53        | . "function"
   62 exp: . exp "=" exp
   63    | . exp "=" exp modifiers
   64    | . lvalue "+=" exp
   65    | . lvalue "-=" exp
   66    | . lvalue "*=" exp
   67    | . lvalue "/=" exp
   68    | . lvalue "^=" exp
   69    | . lvalue "%=" exp
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
  118            | . block
  119            | . "do" "(" exp ")" block
  120 detach: . "detach"
  121       | . "disown"
  122 primary-exp: . "assert" "(" exp ")"
  123            | . "assert" "{" claims "}"
  124            | . detach "(" exp ")"
  125            | . detach block
  126            | . "isdef" "(" k1_id ")"
  127            | . "watch" "(" exp ")"
  128 lvalue: . id
  129       | . primary-exp "." id
  130       | . primary-exp "." "*"
  131 primary-exp: . "&" id
  132            | . primary-exp "." "&" id
  133 id: . "identifier"
  134 bitor-exp: . "var" bitor-exp
  135          | . "const" "var" bitor-exp
  136 primary-exp: . lvalue
  137            | . lvalue args
  138 new: . "new" "identifier" args.opt
  139 bitor-exp: . new
  140 id: . "new"
  141 primary-exp: . routine formals block
  142 float-exp: . "float"
  143 duration: . "duration"
  144         | . duration "duration"
  150 dictionary: . "[" assocs "]"
  151 tuple.exps: .  [")"]
  152           | . exps.1 ","
  153           | . exps.2
  154 tuple: . "(" tuple.exps ")"
  154      | "(" . tuple.exps ")"
  159 literal-exp: . float-exp
  160            | . "angle"
  161            | . duration
  162            | . string
  163            | . "[" exps "]"
  164            | . "[<" tuple.exps ">]"
  165            | . "<" bitor-exps ">"
  166            | . dictionary
  167            | . tuple
  168 string: . "string"
  169       | . string "string"
  170 literal-exp: . "__HERE__"
  176 lvalue: . primary-exp "[" exps "]"
  177 literal-exp: . "this"
  178            | . "call"
  179 primary-exp: . literal-exp
  180            | . "(" exp ")"
  180            | "(" . exp ")"
  181            | . "(" error ")"
  181            | "(" . error ")"
  182            | . primary-exp "**" primary-exp
  183 unary-exp: . primary-exp
  184          | . "--" lvalue
  185          | . "++" lvalue
  186          | . "+" unary-exp
  187          | . "-" unary-exp
  188          | . "!" unary-exp
  189          | . "compl" unary-exp
  190 bitor-exp: . unary-exp
  191          | . bitor-exp "+" bitor-exp
  192          | . bitor-exp "-" bitor-exp
  193          | . bitor-exp "*" bitor-exp
  194          | . bitor-exp "/" bitor-exp
  195          | . bitor-exp "%" bitor-exp
  196          | . bitor-exp "^" bitor-exp
  197          | . bitor-exp "<<" bitor-exp
  198          | . bitor-exp "bitand" bitor-exp
  199          | . bitor-exp "bitor" bitor-exp
  200          | . bitor-exp ">>" bitor-exp
  211 rel-exp: . bitor-exp rel-ops
  214 exp: . rel-exp
  215    | . exp "&&" exp
  216    | . exp "||" exp
  217    | . exp "in" exp
  218    | . exp "!" "in" exp
  222    | . "%unscope:" unsigned
  223 primary-exp: . "%exp:" unsigned
  224 lvalue: . "%lvalue:" unsigned
  225       | . "%id:" unsigned
  226       | . primary-exp "." "%id:" unsigned
  227 primary-exp: . lvalue "(" "%exps:" unsigned ")"
  234 exps.1: . exp
  235       | . exps.1 "," exp
  236 exps.2: . exps.1 "," exp

    error         shift, and go to state 109
    "__HERE__"    shift, and go to state 7
    "closure"     shift, and go to state 9
    "const"       shift, and go to state 10
    "function"    shift, and go to state 13
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "[<"          shift, and go to state 19
    "var"         shift, and go to state 26
    "watch"       shift, and go to state 28
    "&"           shift, and go to state 30
    "identifier"  shift, and go to state 36
    "class"       shift, and go to state 37
    "package"     shift, and go to state 38
    "--"          shift, and go to state 42
    "++"          shift, and go to state 43
    "do"          shift, and go to state 44
    "assert"      shift, and go to state 45
    "detach"      shift, and go to state 46
    "disown"      shift, and go to state 47
    "new"         shift, and go to state 48
    "angle"       shift, and go to state 49
    "duration"    shift, and go to state 50
    "float"       shift, and go to state 51
    "string"      shift, and go to state 52
    "call"        shift, and go to state 53
    "this"        shift, and go to state 54
    "!"           shift, and go to state 55
    "compl"       shift, and go to state 56
    "-"           shift, and go to state 57
    "+"           shift, and go to state 58
    "<"           shift, and go to state 59
    "%unscope:"   shift, and go to state 60
    "%exp:"       shift, and go to state 61
    "%lvalue:"    shift, and go to state 62
    "%id:"        shift, and go to state 63

    ")"  reduce using rule 151 (tuple.exps)

    block        go to state 68
    exp          go to state 110
    routine      go to state 101
    primary-exp  go to state 102
    detach       go to state 72
    lvalue       go to state 73
    id           go to state 103
    bitor-exp    go to state 75
    new          go to state 76
    float-exp    go to state 77
    duration     go to state 78
    dictionary   go to state 79
    tuple.exps   go to state 111
    tuple        go to state 80
    literal-exp  go to state 81
    string       go to state 82
    unary-exp    go to state 83
    rel-exp      go to state 84
    exps.1       go to state 112
    exps.2       go to state 113


state 19

   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   37 exp: . "class" lvalue protos block
   38    | . "package" lvalue protos block
   52 routine: . "closure"
   53        | . "function"
   62 exp: . exp "=" exp
   63    | . exp "=" exp modifiers
   64    | . lvalue "+=" exp
   65    | . lvalue "-=" exp
   66    | . lvalue "*=" exp
   67    | . lvalue "/=" exp
   68    | . lvalue "^=" exp
   69    | . lvalue "%=" exp
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
  118            | . block
  119            | . "do" "(" exp ")" block
  120 detach: . "detach"
  121       | . "disown"
  122 primary-exp: . "assert" "(" exp ")"
  123            | . "assert" "{" claims "}"
  124            | . detach "(" exp ")"
  125            | . detach block
  126            | . "isdef" "(" k1_id ")"
  127            | . "watch" "(" exp ")"
  128 lvalue: . id
  129       | . primary-exp "." id
  130       | . primary-exp "." "*"
  131 primary-exp: . "&" id
  132            | . primary-exp "." "&" id
  133 id: . "identifier"
  134 bitor-exp: . "var" bitor-exp
  135          | . "const" "var" bitor-exp
  136 primary-exp: . lvalue
  137            | . lvalue args
  138 new: . "new" "identifier" args.opt
  139 bitor-exp: . new
  140 id: . "new"
  141 primary-exp: . routine formals block
  142 float-exp: . "float"
  143 duration: . "duration"
  144         | . duration "duration"
  150 dictionary: . "[" assocs "]"
  151 tuple.exps: .  [">]"]
  152           | . exps.1 ","
  153           | . exps.2
  154 tuple: . "(" tuple.exps ")"
  159 literal-exp: . float-exp
  160            | . "angle"
  161            | . duration
  162            | . string
  163            | . "[" exps "]"
  164            | . "[<" tuple.exps ">]"
  164            | "[<" . tuple.exps ">]"
  165            | . "<" bitor-exps ">"
  166            | . dictionary
  167            | . tuple
  168 string: . "string"
  169       | . string "string"
  170 literal-exp: . "__HERE__"
  176 lvalue: . primary-exp "[" exps "]"
  177 literal-exp: . "this"
  178            | . "call"
  179 primary-exp: . literal-exp
  180            | . "(" exp ")"
  181            | . "(" error ")"
  182            | . primary-exp "**" primary-exp
  183 unary-exp: . primary-exp
  184          | . "--" lvalue
  185          | . "++" lvalue
  186          | . "+" unary-exp
  187          | . "-" unary-exp
  188          | . "!" unary-exp
  189          | . "compl" unary-exp
  190 bitor-exp: . unary-exp
  191          | . bitor-exp "+" bitor-exp
  192          | . bitor-exp "-" bitor-exp
  193          | . bitor-exp "*" bitor-exp
  194          | . bitor-exp "/" bitor-exp
  195          | . bitor-exp "%" bitor-exp
  196          | . bitor-exp "^" bitor-exp
  197          | . bitor-exp "<<" bitor-exp
  198          | . bitor-exp "bitand" bitor-exp
  199          | . bitor-exp "bitor" bitor-exp
  200          | . bitor-exp ">>" bitor-exp
  211 rel-exp: . bitor-exp rel-ops
  214 exp: . rel-exp
  215    | . exp "&&" exp
  216    | . exp "||" exp
  217    | . exp "in" exp
  218    | . exp "!" "in" exp
  222    | . "%unscope:" unsigned
  223 primary-exp: . "%exp:" unsigned
  224 lvalue: . "%lvalue:" unsigned
  225       | . "%id:" unsigned
  226       | . primary-exp "." "%id:" unsigned
  227 primary-exp: . lvalue "(" "%exps:" unsigned ")"
  234 exps.1: . exp
  235       | . exps.1 "," exp
  236 exps.2: . exps.1 "," exp

    "__HERE__"    shift, and go to state 7
    "closure"     shift, and go to state 9
    "const"       shift, and go to state 10
    "function"    shift, and go to state 13
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "[<"          shift, and go to state 19
    "var"         shift, and go to state 26
    "watch"       shift, and go to state 28
    "&"           shift, and go to state 30
    "identifier"  shift, and go to state 36
    "class"       shift, and go to state 37
    "package"     shift, and go to state 38
    "--"          shift, and go to state 42
    "++"          shift, and go to state 43
    "do"          shift, and go to state 44
    "assert"      shift, and go to state 45
    "detach"      shift, and go to state 46
    "disown"      shift, and go to state 47
    "new"         shift, and go to state 48
    "angle"       shift, and go to state 49
    "duration"    shift, and go to state 50
    "float"       shift, and go to state 51
    "string"      shift, and go to state 52
    "call"        shift, and go to state 53
    "this"        shift, and go to state 54
    "!"           shift, and go to state 55
    "compl"       shift, and go to state 56
    "-"           shift, and go to state 57
    "+"           shift, and go to state 58
    "<"           shift, and go to state 59
    "%unscope:"   shift, and go to state 60
    "%exp:"       shift, and go to state 61
    "%lvalue:"    shift, and go to state 62
    "%id:"        shift, and go to state 63

    $default  reduce using rule 151 (tuple.exps)

    block        go to state 68
    exp          go to state 114
    routine      go to state 101
    primary-exp  go to state 102
    detach       go to state 72
    lvalue       go to state 73
    id           go to state 103
    bitor-exp    go to state 75
    new          go to state 76
    float-exp    go to state 77
    duration     go to state 78
    dictionary   go to state 79
    tuple.exps   go to state 115
    tuple        go to state 80
    literal-exp  go to state 81
    string       go to state 82
    unary-exp    go to state 83
    rel-exp      go to state 84
    exps.1       go to state 112
    exps.2       go to state 113


state 20

   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   37 exp: . "class" lvalue protos block
   38    | . "package" lvalue protos block
   52 routine: . "closure"
   53        | . "function"
   62 exp: . exp "=" exp
   63    | . exp "=" exp modifiers
   64    | . lvalue "+=" exp
   65    | . lvalue "-=" exp
   66    | . lvalue "*=" exp
   67    | . lvalue "/=" exp
   68    | . lvalue "^=" exp
   69    | . lvalue "%=" exp
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
   81 stmt: "return" . exp.opt
  118 primary-exp: . block
  119            | . "do" "(" exp ")" block
  120 detach: . "detach"
  121       | . "disown"
  122 primary-exp: . "assert" "(" exp ")"
  123            | . "assert" "{" claims "}"
  124            | . detach "(" exp ")"
  125            | . detach block
  126            | . "isdef" "(" k1_id ")"
  127            | . "watch" "(" exp ")"
  128 lvalue: . id
  129       | . primary-exp "." id
  130       | . primary-exp "." "*"
  131 primary-exp: . "&" id
  132            | . primary-exp "." "&" id
  133 id: . "identifier"
  134 bitor-exp: . "var" bitor-exp
  135          | . "const" "var" bitor-exp
  136 primary-exp: . lvalue
  137            | . lvalue args
  138 new: . "new" "identifier" args.opt
  139 bitor-exp: . new
  140 id: . "new"
  141 primary-exp: . routine formals block
  142 float-exp: . "float"
  143 duration: . "duration"
  144         | . duration "duration"
  150 dictionary: . "[" assocs "]"
  154 tuple: . "(" tuple.exps ")"
  159 literal-exp: . float-exp
  160            | . "angle"
  161            | . duration
  162            | . string
  163            | . "[" exps "]"
  164            | . "[<" tuple.exps ">]"
  165            | . "<" bitor-exps ">"
  166            | . dictionary
  167            | . tuple
  168 string: . "string"
  169       | . string "string"
  170 literal-exp: . "__HERE__"
  176 lvalue: . primary-exp "[" exps "]"
  177 literal-exp: . "this"
  178            | . "call"
  179 primary-exp: . literal-exp
  180            | . "(" exp ")"
  181            | . "(" error ")"
  182            | . primary-exp "**" primary-exp
  183 unary-exp: . primary-exp
  184          | . "--" lvalue
  185          | . "++" lvalue
  186          | . "+" unary-exp
  187          | . "-" unary-exp
  188          | . "!" unary-exp
  189          | . "compl" unary-exp
  190 bitor-exp: . unary-exp
  191          | . bitor-exp "+" bitor-exp
  192          | . bitor-exp "-" bitor-exp
  193          | . bitor-exp "*" bitor-exp
  194          | . bitor-exp "/" bitor-exp
  195          | . bitor-exp "%" bitor-exp
  196          | . bitor-exp "^" bitor-exp
  197          | . bitor-exp "<<" bitor-exp
  198          | . bitor-exp "bitand" bitor-exp
  199          | . bitor-exp "bitor" bitor-exp
  200          | . bitor-exp ">>" bitor-exp
  211 rel-exp: . bitor-exp rel-ops
  214 exp: . rel-exp
  215    | . exp "&&" exp
  216    | . exp "||" exp
  217    | . exp "in" exp
  218    | . exp "!" "in" exp
  219 exp.opt: .  ["end of command", "case", "catch", "default", "else", "finally", "onleave", "}", ")", ",", ";", "&", "|"]
  220        | . exp
  222 exp: . "%unscope:" unsigned
  223 primary-exp: . "%exp:" unsigned
  224 lvalue: . "%lvalue:" unsigned
  225       | . "%id:" unsigned
  226       | . primary-exp "." "%id:" unsigned
  227 primary-exp: . lvalue "(" "%exps:" unsigned ")"

    "__HERE__"    shift, and go to state 7
    "closure"     shift, and go to state 9
    "const"       shift, and go to state 10
    "function"    shift, and go to state 13
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "[<"          shift, and go to state 19
    "var"         shift, and go to state 26
    "watch"       shift, and go to state 28
    "identifier"  shift, and go to state 36
    "class"       shift, and go to state 37
    "package"     shift, and go to state 38
    "--"          shift, and go to state 42
    "++"          shift, and go to state 43
    "do"          shift, and go to state 44
    "assert"      shift, and go to state 45
    "detach"      shift, and go to state 46
    "disown"      shift, and go to state 47
    "new"         shift, and go to state 48
    "angle"       shift, and go to state 49
    "duration"    shift, and go to state 50
    "float"       shift, and go to state 51
    "string"      shift, and go to state 52
    "call"        shift, and go to state 53
    "this"        shift, and go to state 54
    "!"           shift, and go to state 55
    "compl"       shift, and go to state 56
    "-"           shift, and go to state 57
    "+"           shift, and go to state 58
    "<"           shift, and go to state 59
    "%unscope:"   shift, and go to state 60
    "%exp:"       shift, and go to state 61
    "%lvalue:"    shift, and go to state 62
    "%id:"        shift, and go to state 63

    $default  reduce using rule 219 (exp.opt)

    block        go to state 68
    exp          go to state 116
    routine      go to state 101
    primary-exp  go to state 102
    detach       go to state 72
    lvalue       go to state 73
    id           go to state 103
    bitor-exp    go to state 75
    new          go to state 76
    float-exp    go to state 77
    duration     go to state 78
    dictionary   go to state 79
    tuple        go to state 80
    literal-exp  go to state 81
    string       go to state 82
    unary-exp    go to state 83
    rel-exp      go to state 84
    exp.opt      go to state 117

    Conflict between rule 219 and token "&" resolved as reduce ("&" < EMPTY).


state 21

   78 stmt: "stopif" . "(" exp ")" stmt

    "("  shift, and go to state 118


state 22

   79 stmt: "switch" . "(" exp ")" "{" cases default.opt "}"

    "("  shift, and go to state 119


state 23

   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   37 exp: . "class" lvalue protos block
   38    | . "package" lvalue protos block
   52 routine: . "closure"
   53        | . "function"
   62 exp: . exp "=" exp
   63    | . exp "=" exp modifiers
   64    | . lvalue "+=" exp
   65    | . lvalue "-=" exp
   66    | . lvalue "*=" exp
   67    | . lvalue "/=" exp
   68    | . lvalue "^=" exp
   69    | . lvalue "%=" exp
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
  110 stmt: "throw" . exp.opt
  118 primary-exp: . block
  119            | . "do" "(" exp ")" block
  120 detach: . "detach"
  121       | . "disown"
  122 primary-exp: . "assert" "(" exp ")"
  123            | . "assert" "{" claims "}"
  124            | . detach "(" exp ")"
  125            | . detach block
  126            | . "isdef" "(" k1_id ")"
  127            | . "watch" "(" exp ")"
  128 lvalue: . id
  129       | . primary-exp "." id
  130       | . primary-exp "." "*"
  131 primary-exp: . "&" id
  132            | . primary-exp "." "&" id
  133 id: . "identifier"
  134 bitor-exp: . "var" bitor-exp
  135          | . "const" "var" bitor-exp
  136 primary-exp: . lvalue
  137            | . lvalue args
  138 new: . "new" "identifier" args.opt
  139 bitor-exp: . new
  140 id: . "new"
  141 primary-exp: . routine formals block
  142 float-exp: . "float"
  143 duration: . "duration"
  144         | . duration "duration"
  150 dictionary: . "[" assocs "]"
  154 tuple: . "(" tuple.exps ")"
  159 literal-exp: . float-exp
  160            | . "angle"
  161            | . duration
  162            | . string
  163            | . "[" exps "]"
  164            | . "[<" tuple.exps ">]"
  165            | . "<" bitor-exps ">"
  166            | . dictionary
  167            | . tuple
  168 string: . "string"
  169       | . string "string"
  170 literal-exp: . "__HERE__"
  176 lvalue: . primary-exp "[" exps "]"
  177 literal-exp: . "this"
  178            | . "call"
  179 primary-exp: . literal-exp
  180            | . "(" exp ")"
  181            | . "(" error ")"
  182            | . primary-exp "**" primary-exp
  183 unary-exp: . primary-exp
  184          | . "--" lvalue
  185          | . "++" lvalue
  186          | . "+" unary-exp
  187          | . "-" unary-exp
  188          | . "!" unary-exp
  189          | . "compl" unary-exp
  190 bitor-exp: . unary-exp
  191          | . bitor-exp "+" bitor-exp
  192          | . bitor-exp "-" bitor-exp
  193          | . bitor-exp "*" bitor-exp
  194          | . bitor-exp "/" bitor-exp
  195          | . bitor-exp "%" bitor-exp
  196          | . bitor-exp "^" bitor-exp
  197          | . bitor-exp "<<" bitor-exp
  198          | . bitor-exp "bitand" bitor-exp
  199          | . bitor-exp "bitor" bitor-exp
  200          | . bitor-exp ">>" bitor-exp
  211 rel-exp: . bitor-exp rel-ops
  214 exp: . rel-exp
  215    | . exp "&&" exp
  216    | . exp "||" exp
  217    | . exp "in" exp
  218    | . exp "!" "in" exp
  219 exp.opt: .  ["end of command", "case", "catch", "default", "else", "finally", "onleave", "}", ")", ",", ";", "&", "|"]
  220        | . exp
  222 exp: . "%unscope:" unsigned
  223 primary-exp: . "%exp:" unsigned
  224 lvalue: . "%lvalue:" unsigned
  225       | . "%id:" unsigned
  226       | . primary-exp "." "%id:" unsigned
  227 primary-exp: . lvalue "(" "%exps:" unsigned ")"

    "__HERE__"    shift, and go to state 7
    "closure"     shift, and go to state 9
    "const"       shift, and go to state 10
    "function"    shift, and go to state 13
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "[<"          shift, and go to state 19
    "var"         shift, and go to state 26
    "watch"       shift, and go to state 28
    "identifier"  shift, and go to state 36
    "class"       shift, and go to state 37
    "package"     shift, and go to state 38
    "--"          shift, and go to state 42
    "++"          shift, and go to state 43
    "do"          shift, and go to state 44
    "assert"      shift, and go to state 45
    "detach"      shift, and go to state 46
    "disown"      shift, and go to state 47
    "new"         shift, and go to state 48
    "angle"       shift, and go to state 49
    "duration"    shift, and go to state 50
    "float"       shift, and go to state 51
    "string"      shift, and go to state 52
    "call"        shift, and go to state 53
    "this"        shift, and go to state 54
    "!"           shift, and go to state 55
    "compl"       shift, and go to state 56
    "-"           shift, and go to state 57
    "+"           shift, and go to state 58
    "<"           shift, and go to state 59
    "%unscope:"   shift, and go to state 60
    "%exp:"       shift, and go to state 61
    "%lvalue:"    shift, and go to state 62
    "%id:"        shift, and go to state 63

    $default  reduce using rule 219 (exp.opt)

    block        go to state 68
    exp          go to state 116
    routine      go to state 101
    primary-exp  go to state 102
    detach       go to state 72
    lvalue       go to state 73
    id           go to state 103
    bitor-exp    go to state 75
    new          go to state 76
    float-exp    go to state 77
    duration     go to state 78
    dictionary   go to state 79
    tuple        go to state 80
    literal-exp  go to state 81
    string       go to state 82
    unary-exp    go to state 83
    rel-exp      go to state 84
    exp.opt      go to state 120

    Conflict between rule 219 and token "&" resolved as reduce ("&" < EMPTY).


state 24

   80 stmt: "timeout" . "(" exp ")" stmt catch.opt else.opt finally.opt

    "("  shift, and go to state 121


state 25

   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
  108 stmt: "try" . block catches.1 else.opt finally.opt
  109     | "try" . block "finally" block

    "{"  shift, and go to state 16

    block  go to state 122


state 26

   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   52 routine: . "closure"
   53        | . "function"
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
  118            | . block
  119            | . "do" "(" exp ")" block
  120 detach: . "detach"
  121       | . "disown"
  122 primary-exp: . "assert" "(" exp ")"
  123            | . "assert" "{" claims "}"
  124            | . detach "(" exp ")"
  125            | . detach block
  126            | . "isdef" "(" k1_id ")"
  127            | . "watch" "(" exp ")"
  128 lvalue: . id
  129       | . primary-exp "." id
  130       | . primary-exp "." "*"
  131 primary-exp: . "&" id
  132            | . primary-exp "." "&" id
  133 id: . "identifier"
  134 bitor-exp: . "var" bitor-exp
  134          | "var" . bitor-exp
  135          | . "const" "var" bitor-exp
  136 primary-exp: . lvalue
  137            | . lvalue args
  138 new: . "new" "identifier" args.opt
  139 bitor-exp: . new
  140 id: . "new"
  141 primary-exp: . routine formals block
  142 float-exp: . "float"
  143 duration: . "duration"
  144         | . duration "duration"
  150 dictionary: . "[" assocs "]"
  154 tuple: . "(" tuple.exps ")"
  159 literal-exp: . float-exp
  160            | . "angle"
  161            | . duration
  162            | . string
  163            | . "[" exps "]"
  164            | . "[<" tuple.exps ">]"
  165            | . "<" bitor-exps ">"
  166            | . dictionary
  167            | . tuple
  168 string: . "string"
  169       | . string "string"
  170 literal-exp: . "__HERE__"
  176 lvalue: . primary-exp "[" exps "]"
  177 literal-exp: . "this"
  178            | . "call"
  179 primary-exp: . literal-exp
  180            | . "(" exp ")"
  181            | . "(" error ")"
  182            | . primary-exp "**" primary-exp
  183 unary-exp: . primary-exp
  184          | . "--" lvalue
  185          | . "++" lvalue
  186          | . "+" unary-exp
  187          | . "-" unary-exp
  188          | . "!" unary-exp
  189          | . "compl" unary-exp
  190 bitor-exp: . unary-exp
  191          | . bitor-exp "+" bitor-exp
  192          | . bitor-exp "-" bitor-exp
  193          | . bitor-exp "*" bitor-exp
  194          | . bitor-exp "/" bitor-exp
  195          | . bitor-exp "%" bitor-exp
  196          | . bitor-exp "^" bitor-exp
  197          | . bitor-exp "<<" bitor-exp
  198          | . bitor-exp "bitand" bitor-exp
  199          | . bitor-exp "bitor" bitor-exp
  200          | . bitor-exp ">>" bitor-exp
  223 primary-exp: . "%exp:" unsigned
  224 lvalue: . "%lvalue:" unsigned
  225       | . "%id:" unsigned
  226       | . primary-exp "." "%id:" unsigned
  227 primary-exp: . lvalue "(" "%exps:" unsigned ")"

    "__HERE__"    shift, and go to state 7
    "closure"     shift, and go to state 9
    "const"       shift, and go to state 10
    "function"    shift, and go to state 13
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "[<"          shift, and go to state 19
    "var"         shift, and go to state 26
    "watch"       shift, and go to state 28
    "&"           shift, and go to state 30
    "identifier"  shift, and go to state 36
    "--"          shift, and go to state 42
    "++"          shift, and go to state 43
    "do"          shift, and go to state 44
    "assert"      shift, and go to state 45
    "detach"      shift, and go to state 46
    "disown"      shift, and go to state 47
    "new"         shift, and go to state 48
    "angle"       shift, and go to state 49
    "duration"    shift, and go to state 50
    "float"       shift, and go to state 51
    "string"      shift, and go to state 52
    "call"        shift, and go to state 53
    "this"        shift, and go to state 54
    "!"           shift, and go to state 55
    "compl"       shift, and go to state 56
    "-"           shift, and go to state 57
    "+"           shift, and go to state 58
    "<"           shift, and go to state 59
    "%exp:"       shift, and go to state 61
    "%lvalue:"    shift, and go to state 62
    "%id:"        shift, and go to state 63

    block        go to state 68
    routine      go to state 101
    primary-exp  go to state 102
    detach       go to state 72
    lvalue       go to state 123
    id           go to state 103
    bitor-exp    go to state 124
    new          go to state 76
    float-exp    go to state 77
    duration     go to state 78
    dictionary   go to state 79
    tuple        go to state 80
    literal-exp  go to state 81
    string       go to state 82
    unary-exp    go to state 83


state 27

   84 stmt: "waituntil" . "(" exp tilda.opt ")"
   85     | "waituntil" . "(" event_match ")"

    "("  shift, and go to state 125


state 28

  127 primary-exp: "watch" . "(" exp ")"

    "("  shift, and go to state 126


state 29

   86 stmt: "whenever" . "(" exp tilda.opt ")" stmt else.opt
   87     | "whenever" . "(" event_match ")" stmt else.opt

    "("  shift, and go to state 127


state 30

  131 primary-exp: "&" . id
  133 id: . "identifier"
  140   | . "new"

    "identifier"  shift, and go to state 36
    "new"         shift, and go to state 128

    id  go to state 129


state 31

   75 stmt: "every" . "(" exp ")" stmt

    "("  shift, and go to state 130


state 32

  112 stmt: "for" . "(" exp ")" stmt
  113     | "for" . "(" stmt.opt ";" exp ";" stmt.opt ")" stmt
  114     | "for" . "(" "var" "identifier" in_or_colon exp ")" stmt

    "("  shift, and go to state 131


state 33

   23 stmt: . primary-exp ":" stmt
   24     | . exp
   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   37 exp: . "class" lvalue protos block
   38    | . "package" lvalue protos block
   43 stmt: . "enum" id "{" id.0 "}"
   47     | . "external" "identifier" "identifier"
   48     | . "external" "var" "identifier" "." "identifier" from "identifier"
   49     | . "external" event_or_function "(" unsigned ")" "identifier" "." "identifier" from "identifier"
   50     | . "import" lvalue
   51     | . exp "!" args.opt tilda.opt
   52 routine: . "closure"
   53        | . "function"
   54 stmt: . routine k1_id formals block
   55     | . id id formals block
   62 exp: . exp "=" exp
   63    | . exp "=" exp modifiers
   64    | . lvalue "+=" exp
   65    | . lvalue "-=" exp
   66    | . lvalue "*=" exp
   67    | . lvalue "/=" exp
   68    | . lvalue "^=" exp
   69    | . lvalue "%=" exp
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
   73 stmt: . "at" identifiers "(" exp tilda.opt ")" stmt onleave.opt
   74     | . "at" identifiers "(" event_match ")" stmt onleave.opt
   75     | . "every" "(" exp ")" stmt
   76     | . "if" "(" stmts ")" stmt else.opt
   77     | . "freezeif" "(" exp ")" stmt
   78     | . "stopif" "(" exp ")" stmt
   79     | . "switch" "(" exp ")" "{" cases default.opt "}"
   80     | . "timeout" "(" exp ")" stmt catch.opt else.opt finally.opt
   81     | . "return" exp.opt
   82     | . "break"
   83     | . "continue"
   84     | . "waituntil" "(" exp tilda.opt ")"
   85     | . "waituntil" "(" event_match ")"
   86     | . "whenever" "(" exp tilda.opt ")" stmt else.opt
   87     | . "whenever" "(" event_match ")" stmt else.opt
  108     | . "try" block catches.1 else.opt finally.opt
  109     | . "try" block "finally" block
  110     | . "throw" exp.opt
  111     | . "loop" stmt
  111     | "loop" . stmt
  112     | . "for" "(" exp ")" stmt
  113     | . "for" "(" stmt.opt ";" exp ";" stmt.opt ")" stmt
  114     | . "for" "(" "var" "identifier" in_or_colon exp ")" stmt
  115     | . "while" "(" exp ")" stmt
  118 primary-exp: . block
  119            | . "do" "(" exp ")" block
  120 detach: . "detach"
  121       | . "disown"
  122 primary-exp: . "assert" "(" exp ")"
  123            | . "assert" "{" claims "}"
  124            | . detach "(" exp ")"
  125            | . detach block
  126            | . "isdef" "(" k1_id ")"
  127            | . "watch" "(" exp ")"
  128 lvalue: . id
  129       | . primary-exp "." id
  130       | . primary-exp "." "*"
  131 primary-exp: . "&" id
  132            | . primary-exp "." "&" id
  133 id: . "identifier"
  134 bitor-exp: . "var" bitor-exp
  135          | . "const" "var" bitor-exp
  136 primary-exp: . lvalue
  137            | . lvalue args
  138 new: . "new" "identifier" args.opt
  139 bitor-exp: . new
  140 id: . "new"
  141 primary-exp: . routine formals block
  142 float-exp: . "float"
  143 duration: . "duration"
  144         | . duration "duration"
  150 dictionary: . "[" assocs "]"
  154 tuple: . "(" tuple.exps ")"
  159 literal-exp: . float-exp
  160            | . "angle"
  161            | . duration
  162            | . string
  163            | . "[" exps "]"
  164            | . "[<" tuple.exps ">]"
  165            | . "<" bitor-exps ">"
  166            | . dictionary
  167            | . tuple
  168 string: . "string"
  169       | . string "string"
  170 literal-exp: . "__HERE__"
  176 lvalue: . primary-exp "[" exps "]"
  177 literal-exp: . "this"
  178            | . "call"
  179 primary-exp: . literal-exp
  180            | . "(" exp ")"
  181            | . "(" error ")"
  182            | . primary-exp "**" primary-exp
  183 unary-exp: . primary-exp
  184          | . "--" lvalue
  185          | . "++" lvalue
  186          | . "+" unary-exp
  187          | . "-" unary-exp
  188          | . "!" unary-exp
  189          | . "compl" unary-exp
  190 bitor-exp: . unary-exp
  191          | . bitor-exp "+" bitor-exp
  192          | . bitor-exp "-" bitor-exp
  193          | . bitor-exp "*" bitor-exp
  194          | . bitor-exp "/" bitor-exp
  195          | . bitor-exp "%" bitor-exp
  196          | . bitor-exp "^" bitor-exp
  197          | . bitor-exp "<<" bitor-exp
  198          | . bitor-exp "bitand" bitor-exp
  199          | . bitor-exp "bitor" bitor-exp
  200          | . bitor-exp ">>" bitor-exp
  211 rel-exp: . bitor-exp rel-ops
  214 exp: . rel-exp
  215    | . exp "&&" exp
  216    | . exp "||" exp
  217    | . exp "in" exp
  218    | . exp "!" "in" exp
  222    | . "%unscope:" unsigned
  223 primary-exp: . "%exp:" unsigned
  224 lvalue: . "%lvalue:" unsigned
  225       | . "%id:" unsigned
  226       | . primary-exp "." "%id:" unsigned
  227 primary-exp: . lvalue "(" "%exps:" unsigned ")"

    "__HERE__"    shift, and go to state 7
    "break"       shift, and go to state 8
    "closure"     shift, and go to state 9
    "const"       shift, and go to state 10
    "continue"    shift, and go to state 11
    "freezeif"    shift, and go to state 12
    "function"    shift, and go to state 13
    "if"          shift, and go to state 14
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "[<"          shift, and go to state 19
    "return"      shift, and go to state 20
    "stopif"      shift, and go to state 21
    "switch"      shift, and go to state 22
    "throw"       shift, and go to state 23
    "timeout"     shift, and go to state 24
    "try"         shift, and go to state 25
    "var"         shift, and go to state 26
    "waituntil"   shift, and go to state 27
    "watch"       shift, and go to state 28
    "whenever"    shift, and go to state 29
    "&"           shift, and go to state 30
    "every"       shift, and go to state 31
    "for"         shift, and go to state 32
    "loop"        shift, and go to state 33
    "while"       shift, and go to state 34
    "at"          shift, and go to state 35
    "identifier"  shift, and go to state 36
    "class"       shift, and go to state 37
    "package"     shift, and go to state 38
    "enum"        shift, and go to state 39
    "external"    shift, and go to state 40
    "import"      shift, and go to state 41
    "--"          shift, and go to state 42
    "++"          shift, and go to state 43
    "do"          shift, and go to state 44
    "assert"      shift, and go to state 45
    "detach"      shift, and go to state 46
    "disown"      shift, and go to state 47
    "new"         shift, and go to state 48
    "angle"       shift, and go to state 49
    "duration"    shift, and go to state 50
    "float"       shift, and go to state 51
    "string"      shift, and go to state 52
    "call"        shift, and go to state 53
    "this"        shift, and go to state 54
    "!"           shift, and go to state 55
    "compl"       shift, and go to state 56
    "-"           shift, and go to state 57
    "+"           shift, and go to state 58
    "<"           shift, and go to state 59
    "%unscope:"   shift, and go to state 60
    "%exp:"       shift, and go to state 61
    "%lvalue:"    shift, and go to state 62
    "%id:"        shift, and go to state 63

    stmt         go to state 132
    block        go to state 68
    exp          go to state 69
    routine      go to state 70
    primary-exp  go to state 71
    detach       go to state 72
    lvalue       go to state 73
    id           go to state 74
    bitor-exp    go to state 75
    new          go to state 76
    float-exp    go to state 77
    duration     go to state 78
    dictionary   go to state 79
    tuple        go to state 80
    literal-exp  go to state 81
    string       go to state 82
    unary-exp    go to state 83
    rel-exp      go to state 84


state 34

  115 stmt: "while" . "(" exp ")" stmt

    "("  shift, and go to state 133


state 35

   73 stmt: "at" . identifiers "(" exp tilda.opt ")" stmt onleave.opt
   74     | "at" . identifiers "(" event_match ")" stmt onleave.opt
  240 identifiers: .
  241            | . identifiers "identifier"

    $default  reduce using rule 240 (identifiers)

    identifiers  go to state 134


state 36

  133 id: "identifier" .

    $default  reduce using rule 133 (id)


state 37

   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   37 exp: "class" . lvalue protos block
   52 routine: . "closure"
   53        | . "function"
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
  118            | . block
  119            | . "do" "(" exp ")" block
  120 detach: . "detach"
  121       | . "disown"
  122 primary-exp: . "assert" "(" exp ")"
  123            | . "assert" "{" claims "}"
  124            | . detach "(" exp ")"
  125            | . detach block
  126            | . "isdef" "(" k1_id ")"
  127            | . "watch" "(" exp ")"
  128 lvalue: . id
  129       | . primary-exp "." id
  130       | . primary-exp "." "*"
  131 primary-exp: . "&" id
  132            | . primary-exp "." "&" id
  133 id: . "identifier"
  136 primary-exp: . lvalue
  137            | . lvalue args
  140 id: . "new"
  141 primary-exp: . routine formals block
  142 float-exp: . "float"
  143 duration: . "duration"
  144         | . duration "duration"
  150 dictionary: . "[" assocs "]"
  154 tuple: . "(" tuple.exps ")"
  159 literal-exp: . float-exp
  160            | . "angle"
  161            | . duration
  162            | . string
  163            | . "[" exps "]"
  164            | . "[<" tuple.exps ">]"
  165            | . "<" bitor-exps ">"
  166            | . dictionary
  167            | . tuple
  168 string: . "string"
  169       | . string "string"
  170 literal-exp: . "__HERE__"
  176 lvalue: . primary-exp "[" exps "]"
  177 literal-exp: . "this"
  178            | . "call"
  179 primary-exp: . literal-exp
  180            | . "(" exp ")"
  181            | . "(" error ")"
  182            | . primary-exp "**" primary-exp
  223            | . "%exp:" unsigned
  224 lvalue: . "%lvalue:" unsigned
  225       | . "%id:" unsigned
  226       | . primary-exp "." "%id:" unsigned
  227 primary-exp: . lvalue "(" "%exps:" unsigned ")"

    "__HERE__"    shift, and go to state 7
    "closure"     shift, and go to state 9
    "function"    shift, and go to state 13
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "[<"          shift, and go to state 19
    "watch"       shift, and go to state 28
    "&"           shift, and go to state 30
    "identifier"  shift, and go to state 36
    "do"          shift, and go to state 44
    "assert"      shift, and go to state 45
    "detach"      shift, and go to state 46
    "disown"      shift, and go to state 47
    "new"         shift, and go to state 128
    "angle"       shift, and go to state 49
    "duration"    shift, and go to state 50
    "float"       shift, and go to state 51
    "string"      shift, and go to state 52
    "call"        shift, and go to state 53
    "this"        shift, and go to state 54
    "<"           shift, and go to state 59
    "%exp:"       shift, and go to state 61
    "%lvalue:"    shift, and go to state 62
    "%id:"        shift, and go to state 63

    block        go to state 68
    routine      go to state 101
    primary-exp  go to state 135
    detach       go to state 72
    lvalue       go to state 136
    id           go to state 103
    float-exp    go to state 77
    duration     go to state 78
    dictionary   go to state 79
    tuple        go to state 80
    literal-exp  go to state 81
    string       go to state 82


state 38

   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   38 exp: "package" . lvalue protos block
   52 routine: . "closure"
   53        | . "function"
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
  118            | . block
  119            | . "do" "(" exp ")" block
  120 detach: . "detach"
  121       | . "disown"
  122 primary-exp: . "assert" "(" exp ")"
  123            | . "assert" "{" claims "}"
  124            | . detach "(" exp ")"
  125            | . detach block
  126            | . "isdef" "(" k1_id ")"
  127            | . "watch" "(" exp ")"
  128 lvalue: . id
  129       | . primary-exp "." id
  130       | . primary-exp "." "*"
  131 primary-exp: . "&" id
  132            | . primary-exp "." "&" id
  133 id: . "identifier"
  136 primary-exp: . lvalue
  137            | . lvalue args
  140 id: . "new"
  141 primary-exp: . routine formals block
  142 float-exp: . "float"
  143 duration: . "duration"
  144         | . duration "duration"
  150 dictionary: . "[" assocs "]"
  154 tuple: . "(" tuple.exps ")"
  159 literal-exp: . float-exp
  160            | . "angle"
  161            | . duration
  162            | . string
  163            | . "[" exps "]"
  164            | . "[<" tuple.exps ">]"
  165            | . "<" bitor-exps ">"
  166            | . dictionary
  167            | . tuple
  168 string: . "string"
  169       | . string "string"
  170 literal-exp: . "__HERE__"
  176 lvalue: . primary-exp "[" exps "]"
  177 literal-exp: . "this"
  178            | . "call"
  179 primary-exp: . literal-exp
  180            | . "(" exp ")"
  181            | . "(" error ")"
  182            | . primary-exp "**" primary-exp
  223            | . "%exp:" unsigned
  224 lvalue: . "%lvalue:" unsigned
  225       | . "%id:" unsigned
  226       | . primary-exp "." "%id:" unsigned
  227 primary-exp: . lvalue "(" "%exps:" unsigned ")"

    "__HERE__"    shift, and go to state 7
    "closure"     shift, and go to state 9
    "function"    shift, and go to state 13
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "[<"          shift, and go to state 19
    "watch"       shift, and go to state 28
    "&"           shift, and go to state 30
    "identifier"  shift, and go to state 36
    "do"          shift, and go to state 44
    "assert"      shift, and go to state 45
    "detach"      shift, and go to state 46
    "disown"      shift, and go to state 47
    "new"         shift, and go to state 128
    "angle"       shift, and go to state 49
    "duration"    shift, and go to state 50
    "float"       shift, and go to state 51
    "string"      shift, and go to state 52
    "call"        shift, and go to state 53
    "this"        shift, and go to state 54
    "<"           shift, and go to state 59
    "%exp:"       shift, and go to state 61
    "%lvalue:"    shift, and go to state 62
    "%id:"        shift, and go to state 63

    block        go to state 68
    routine      go to state 101
    primary-exp  go to state 135
    detach       go to state 72
    lvalue       go to state 137
    id           go to state 103
    float-exp    go to state 77
    duration     go to state 78
    dictionary   go to state 79
    tuple        go to state 80
    literal-exp  go to state 81
    string       go to state 82


state 39

   43 stmt: "enum" . id "{" id.0 "}"
  133 id: . "identifier"
  140   | . "new"

    "identifier"  shift, and go to state 36
    "new"         shift, and go to state 128

    id  go to state 138


state 40

   45 event_or_function: . "function"
   46                  | . "identifier"
   47 stmt: "external" . "identifier" "identifier"
   48     | "external" . "var" "identifier" "." "identifier" from "identifier"
   49     | "external" . event_or_function "(" unsigned ")" "identifier" "." "identifier" from "identifier"

    "function"    shift, and go to state 139
    "var"         shift, and go to state 140
    "identifier"  shift, and go to state 141

    event_or_function  go to state 142


state 41

   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   50 stmt: "import" . lvalue
   52 routine: . "closure"
   53        | . "function"
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
  118            | . block
  119            | . "do" "(" exp ")" block
  120 detach: . "detach"
  121       | . "disown"
  122 primary-exp: . "assert" "(" exp ")"
  123            | . "assert" "{" claims "}"
  124            | . detach "(" exp ")"
  125            | . detach block
  126            | . "isdef" "(" k1_id ")"
  127            | . "watch" "(" exp ")"
  128 lvalue: . id
  129       | . primary-exp "." id
  130       | . primary-exp "." "*"
  131 primary-exp: . "&" id
  132            | . primary-exp "." "&" id
  133 id: . "identifier"
  136 primary-exp: . lvalue
  137            | . lvalue args
  140 id: . "new"
  141 primary-exp: . routine formals block
  142 float-exp: . "float"
  143 duration: . "duration"
  144         | . duration "duration"
  150 dictionary: . "[" assocs "]"
  154 tuple: . "(" tuple.exps ")"
  159 literal-exp: . float-exp
  160            | . "angle"
  161            | . duration
  162            | . string
  163            | . "[" exps "]"
  164            | . "[<" tuple.exps ">]"
  165            | . "<" bitor-exps ">"
  166            | . dictionary
  167            | . tuple
  168 string: . "string"
  169       | . string "string"
  170 literal-exp: . "__HERE__"
  176 lvalue: . primary-exp "[" exps "]"
  177 literal-exp: . "this"
  178            | . "call"
  179 primary-exp: . literal-exp
  180            | . "(" exp ")"
  181            | . "(" error ")"
  182            | . primary-exp "**" primary-exp
  223            | . "%exp:" unsigned
  224 lvalue: . "%lvalue:" unsigned
  225       | . "%id:" unsigned
  226       | . primary-exp "." "%id:" unsigned
  227 primary-exp: . lvalue "(" "%exps:" unsigned ")"

    "__HERE__"    shift, and go to state 7
    "closure"     shift, and go to state 9
    "function"    shift, and go to state 13
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "[<"          shift, and go to state 19
    "watch"       shift, and go to state 28
    "&"           shift, and go to state 30
    "identifier"  shift, and go to state 36
    "do"          shift, and go to state 44
    "assert"      shift, and go to state 45
    "detach"      shift, and go to state 46
    "disown"      shift, and go to state 47
    "new"         shift, and go to state 128
    "angle"       shift, and go to state 49
    "duration"    shift, and go to state 50
    "float"       shift, and go to state 51
    "string"      shift, and go to state 52
    "call"        shift, and go to state 53
    "this"        shift, and go to state 54
    "<"           shift, and go to state 59
    "%exp:"       shift, and go to state 61
    "%lvalue:"    shift, and go to state 62
    "%id:"        shift, and go to state 63

    block        go to state 68
    routine      go to state 101
    primary-exp  go to state 135
    detach       go to state 72
    lvalue       go to state 143
    id           go to state 103
    float-exp    go to state 77
    duration     go to state 78
    dictionary   go to state 79
    tuple        go to state 80
    literal-exp  go to state 81
    string       go to state 82


state 42

   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   52 routine: . "closure"
   53        | . "function"
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
  118            | . block
  119            | . "do" "(" exp ")" block
  120 detach: . "detach"
  121       | . "disown"
  122 primary-exp: . "assert" "(" exp ")"
  123            | . "assert" "{" claims "}"
  124            | . detach "(" exp ")"
  125            | . detach block
  126            | . "isdef" "(" k1_id ")"
  127            | . "watch" "(" exp ")"
  128 lvalue: . id
  129       | . primary-exp "." id
  130       | . primary-exp "." "*"
  131 primary-exp: . "&" id
  132            | . primary-exp "." "&" id
  133 id: . "identifier"
  136 primary-exp: . lvalue
  137            | . lvalue args
  140 id: . "new"
  141 primary-exp: . routine formals block
  142 float-exp: . "float"
  143 duration: . "duration"
  144         | . duration "duration"
  150 dictionary: . "[" assocs "]"
  154 tuple: . "(" tuple.exps ")"
  159 literal-exp: . float-exp
  160            | . "angle"
  161            | . duration
  162            | . string
  163            | . "[" exps "]"
  164            | . "[<" tuple.exps ">]"
  165            | . "<" bitor-exps ">"
  166            | . dictionary
  167            | . tuple
  168 string: . "string"
  169       | . string "string"
  170 literal-exp: . "__HERE__"
  176 lvalue: . primary-exp "[" exps "]"
  177 literal-exp: . "this"
  178            | . "call"
  179 primary-exp: . literal-exp
  180            | . "(" exp ")"
  181            | . "(" error ")"
  182            | . primary-exp "**" primary-exp
  184 unary-exp: "--" . lvalue
  223 primary-exp: . "%exp:" unsigned
  224 lvalue: . "%lvalue:" unsigned
  225       | . "%id:" unsigned
  226       | . primary-exp "." "%id:" unsigned
  227 primary-exp: . lvalue "(" "%exps:" unsigned ")"

    "__HERE__"    shift, and go to state 7
    "closure"     shift, and go to state 9
    "function"    shift, and go to state 13
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "[<"          shift, and go to state 19
    "watch"       shift, and go to state 28
    "&"           shift, and go to state 30
    "identifier"  shift, and go to state 36
    "do"          shift, and go to state 44
    "assert"      shift, and go to state 45
    "detach"      shift, and go to state 46
    "disown"      shift, and go to state 47
    "new"         shift, and go to state 128
    "angle"       shift, and go to state 49
    "duration"    shift, and go to state 50
    "float"       shift, and go to state 51
    "string"      shift, and go to state 52
    "call"        shift, and go to state 53
    "this"        shift, and go to state 54
    "<"           shift, and go to state 59
    "%exp:"       shift, and go to state 61
    "%lvalue:"    shift, and go to state 62
    "%id:"        shift, and go to state 63

    block        go to state 68
    routine      go to state 101
    primary-exp  go to state 135
    detach       go to state 72
    lvalue       go to state 144
    id           go to state 103
    float-exp    go to state 77
    duration     go to state 78
    dictionary   go to state 79
    tuple        go to state 80
    literal-exp  go to state 81
    string       go to state 82


state 43

   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   52 routine: . "closure"
   53        | . "function"
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
  118            | . block
  119            | . "do" "(" exp ")" block
  120 detach: . "detach"
  121       | . "disown"
  122 primary-exp: . "assert" "(" exp ")"
  123            | . "assert" "{" claims "}"
  124            | . detach "(" exp ")"
  125            | . detach block
  126            | . "isdef" "(" k1_id ")"
  127            | . "watch" "(" exp ")"
  128 lvalue: . id
  129       | . primary-exp "." id
  130       | . primary-exp "." "*"
  131 primary-exp: . "&" id
  132            | . primary-exp "." "&" id
  133 id: . "identifier"
  136 primary-exp: . lvalue
  137            | . lvalue args
  140 id: . "new"
  141 primary-exp: . routine formals block
  142 float-exp: . "float"
  143 duration: . "duration"
  144         | . duration "duration"
  150 dictionary: . "[" assocs "]"
  154 tuple: . "(" tuple.exps ")"
  159 literal-exp: . float-exp
  160            | . "angle"
  161            | . duration
  162            | . string
  163            | . "[" exps "]"
  164            | . "[<" tuple.exps ">]"
  165            | . "<" bitor-exps ">"
  166            | . dictionary
  167            | . tuple
  168 string: . "string"
  169       | . string "string"
  170 literal-exp: . "__HERE__"
  176 lvalue: . primary-exp "[" exps "]"
  177 literal-exp: . "this"
  178            | . "call"
  179 primary-exp: . literal-exp
  180            | . "(" exp ")"
  181            | . "(" error ")"
  182            | . primary-exp "**" primary-exp
  185 unary-exp: "++" . lvalue
  223 primary-exp: . "%exp:" unsigned
  224 lvalue: . "%lvalue:" unsigned
  225       | . "%id:" unsigned
  226       | . primary-exp "." "%id:" unsigned
  227 primary-exp: . lvalue "(" "%exps:" unsigned ")"

    "__HERE__"    shift, and go to state 7
    "closure"     shift, and go to state 9
    "function"    shift, and go to state 13
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "[<"          shift, and go to state 19
    "watch"       shift, and go to state 28
    "&"           shift, and go to state 30
    "identifier"  shift, and go to state 36
    "do"          shift, and go to state 44
    "assert"      shift, and go to state 45
    "detach"      shift, and go to state 46
    "disown"      shift, and go to state 47
    "new"         shift, and go to state 128
    "angle"       shift, and go to state 49
    "duration"    shift, and go to state 50
    "float"       shift, and go to state 51
    "string"      shift, and go to state 52
    "call"        shift, and go to state 53
    "this"        shift, and go to state 54
    "<"           shift, and go to state 59
    "%exp:"       shift, and go to state 61
    "%lvalue:"    shift, and go to state 62
    "%id:"        shift, and go to state 63

    block        go to state 68
    routine      go to state 101
    primary-exp  go to state 135
    detach       go to state 72
    lvalue       go to state 145
    id           go to state 103
    float-exp    go to state 77
    duration     go to state 78
    dictionary   go to state 79
    tuple        go to state 80
    literal-exp  go to state 81
    string       go to state 82


state 44

  119 primary-exp: "do" . "(" exp ")" block

    "("  shift, and go to state 146


state 45

  122 primary-exp: "assert" . "(" exp ")"
  123            | "assert" . "{" claims "}"

    "{"  shift, and go to state 147
    "("  shift, and go to state 148


state 46

  120 detach: "detach" .

    $default  reduce using rule 120 (detach)


state 47

  121 detach: "disown" .

    $default  reduce using rule 121 (detach)


state 48

  138 new: "new" . "identifier" args.opt
  140 id: "new" .  ["end of command", "=", "case", "catch", ":", "default", "else", "finally", "if", "in", "{", "[", "(", ">]", "onleave", ".", "}", "]", ")", "~", ",", ";", "&", "|", "^=", "-=", "%=", "+=", "/=", "*=", "--", "++", "->", "new", "=>", "?", "!", "bitand", "bitor", "^", ">>", "<<", "-", "%", "+", "/", "*", "**", "=~=", "==", "===", ">=", ">", "<=", "<", "!=", "!==", "~=", "&&", "||"]

    "identifier"  shift, and go to state 149

    $default  reduce using rule 140 (id)

    Conflict between rule 140 and token "identifier" resolved as shift ("new" < "identifier").


state 49

  160 literal-exp: "angle" .

    $default  reduce using rule 160 (literal-exp)


state 50

  143 duration: "duration" .

    $default  reduce using rule 143 (duration)


state 51

  142 float-exp: "float" .

    $default  reduce using rule 142 (float-exp)


state 52

  168 string: "string" .

    $default  reduce using rule 168 (string)


state 53

  178 literal-exp: "call" .

    $default  reduce using rule 178 (literal-exp)


state 54

  177 literal-exp: "this" .

    $default  reduce using rule 177 (literal-exp)


state 55

   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   52 routine: . "closure"
   53        | . "function"
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
  118            | . block
  119            | . "do" "(" exp ")" block
  120 detach: . "detach"
  121       | . "disown"
  122 primary-exp: . "assert" "(" exp ")"
  123            | . "assert" "{" claims "}"
  124            | . detach "(" exp ")"
  125            | . detach block
  126            | . "isdef" "(" k1_id ")"
  127            | . "watch" "(" exp ")"
  128 lvalue: . id
  129       | . primary-exp "." id
  130       | . primary-exp "." "*"
  131 primary-exp: . "&" id
  132            | . primary-exp "." "&" id
  133 id: . "identifier"
  136 primary-exp: . lvalue
  137            | . lvalue args
  140 id: . "new"
  141 primary-exp: . routine formals block
  142 float-exp: . "float"
  143 duration: . "duration"
  144         | . duration "duration"
  150 dictionary: . "[" assocs "]"
  154 tuple: . "(" tuple.exps ")"
  159 literal-exp: . float-exp
  160            | . "angle"
  161            | . duration
  162            | . string
  163            | . "[" exps "]"
  164            | . "[<" tuple.exps ">]"
  165            | . "<" bitor-exps ">"
  166            | . dictionary
  167            | . tuple
  168 string: . "string"
  169       | . string "string"
  170 literal-exp: . "__HERE__"
  176 lvalue: . primary-exp "[" exps "]"
  177 literal-exp: . "this"
  178            | . "call"
  179 primary-exp: . literal-exp
  180            | . "(" exp ")"
  181            | . "(" error ")"
  182            | . primary-exp "**" primary-exp
  183 unary-exp: . primary-exp
  184          | . "--" lvalue
  185          | . "++" lvalue
  186          | . "+" unary-exp
  187          | . "-" unary-exp
  188          | . "!" unary-exp
  188          | "!" . unary-exp
  189          | . "compl" unary-exp
  223 primary-exp: . "%exp:" unsigned
  224 lvalue: . "%lvalue:" unsigned
  225       | . "%id:" unsigned
  226       | . primary-exp "." "%id:" unsigned
  227 primary-exp: . lvalue "(" "%exps:" unsigned ")"

    "__HERE__"    shift, and go to state 7
    "closure"     shift, and go to state 9
    "function"    shift, and go to state 13
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "[<"          shift, and go to state 19
    "watch"       shift, and go to state 28
    "&"           shift, and go to state 30
    "identifier"  shift, and go to state 36
    "--"          shift, and go to state 42
    "++"          shift, and go to state 43
    "do"          shift, and go to state 44
    "assert"      shift, and go to state 45
    "detach"      shift, and go to state 46
    "disown"      shift, and go to state 47
    "new"         shift, and go to state 128
    "angle"       shift, and go to state 49
    "duration"    shift, and go to state 50
    "float"       shift, and go to state 51
    "string"      shift, and go to state 52
    "call"        shift, and go to state 53
    "this"        shift, and go to state 54
    "!"           shift, and go to state 55
    "compl"       shift, and go to state 56
    "-"           shift, and go to state 57
    "+"           shift, and go to state 58
    "<"           shift, and go to state 59
    "%exp:"       shift, and go to state 61
    "%lvalue:"    shift, and go to state 62
    "%id:"        shift, and go to state 63

    block        go to state 68
    routine      go to state 101
    primary-exp  go to state 102
    detach       go to state 72
    lvalue       go to state 123
    id           go to state 103
    float-exp    go to state 77
    duration     go to state 78
    dictionary   go to state 79
    tuple        go to state 80
    literal-exp  go to state 81
    string       go to state 82
    unary-exp    go to state 150


state 56

   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   52 routine: . "closure"
   53        | . "function"
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
  118            | . block
  119            | . "do" "(" exp ")" block
  120 detach: . "detach"
  121       | . "disown"
  122 primary-exp: . "assert" "(" exp ")"
  123            | . "assert" "{" claims "}"
  124            | . detach "(" exp ")"
  125            | . detach block
  126            | . "isdef" "(" k1_id ")"
  127            | . "watch" "(" exp ")"
  128 lvalue: . id
  129       | . primary-exp "." id
  130       | . primary-exp "." "*"
  131 primary-exp: . "&" id
  132            | . primary-exp "." "&" id
  133 id: . "identifier"
  136 primary-exp: . lvalue
  137            | . lvalue args
  140 id: . "new"
  141 primary-exp: . routine formals block
  142 float-exp: . "float"
  143 duration: . "duration"
  144         | . duration "duration"
  150 dictionary: . "[" assocs "]"
  154 tuple: . "(" tuple.exps ")"
  159 literal-exp: . float-exp
  160            | . "angle"
  161            | . duration
  162            | . string
  163            | . "[" exps "]"
  164            | . "[<" tuple.exps ">]"
  165            | . "<" bitor-exps ">"
  166            | . dictionary
  167            | . tuple
  168 string: . "string"
  169       | . string "string"
  170 literal-exp: . "__HERE__"
  176 lvalue: . primary-exp "[" exps "]"
  177 literal-exp: . "this"
  178            | . "call"
  179 primary-exp: . literal-exp
  180            | . "(" exp ")"
  181            | . "(" error ")"
  182            | . primary-exp "**" primary-exp
  183 unary-exp: . primary-exp
  184          | . "--" lvalue
  185          | . "++" lvalue
  186          | . "+" unary-exp
  187          | . "-" unary-exp
  188          | . "!" unary-exp
  189          | . "compl" unary-exp
  189          | "compl" . unary-exp
  223 primary-exp: . "%exp:" unsigned
  224 lvalue: . "%lvalue:" unsigned
  225       | . "%id:" unsigned
  226       | . primary-exp "." "%id:" unsigned
  227 primary-exp: . lvalue "(" "%exps:" unsigned ")"

    "__HERE__"    shift, and go to state 7
    "closure"     shift, and go to state 9
    "function"    shift, and go to state 13
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "[<"          shift, and go to state 19
    "watch"       shift, and go to state 28
    "&"           shift, and go to state 30
    "identifier"  shift, and go to state 36
    "--"          shift, and go to state 42
    "++"          shift, and go to state 43
    "do"          shift, and go to state 44
    "assert"      shift, and go to state 45
    "detach"      shift, and go to state 46
    "disown"      shift, and go to state 47
    "new"         shift, and go to state 128
    "angle"       shift, and go to state 49
    "duration"    shift, and go to state 50
    "float"       shift, and go to state 51
    "string"      shift, and go to state 52
    "call"        shift, and go to state 53
    "this"        shift, and go to state 54
    "!"           shift, and go to state 55
    "compl"       shift, and go to state 56
    "-"           shift, and go to state 57
    "+"           shift, and go to state 58
    "<"           shift, and go to state 59
    "%exp:"       shift, and go to state 61
    "%lvalue:"    shift, and go to state 62
    "%id:"        shift, and go to state 63

    block        go to state 68
    routine      go to state 101
    primary-exp  go to state 102
    detach       go to state 72
    lvalue       go to state 123
    id           go to state 103
    float-exp    go to state 77
    duration     go to state 78
    dictionary   go to state 79
    tuple        go to state 80
    literal-exp  go to state 81
    string       go to state 82
    unary-exp    go to state 151


state 57

   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   52 routine: . "closure"
   53        | . "function"
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
  118            | . block
  119            | . "do" "(" exp ")" block
  120 detach: . "detach"
  121       | . "disown"
  122 primary-exp: . "assert" "(" exp ")"
  123            | . "assert" "{" claims "}"
  124            | . detach "(" exp ")"
  125            | . detach block
  126            | . "isdef" "(" k1_id ")"
  127            | . "watch" "(" exp ")"
  128 lvalue: . id
  129       | . primary-exp "." id
  130       | . primary-exp "." "*"
  131 primary-exp: . "&" id
  132            | . primary-exp "." "&" id
  133 id: . "identifier"
  136 primary-exp: . lvalue
  137            | . lvalue args
  140 id: . "new"
  141 primary-exp: . routine formals block
  142 float-exp: . "float"
  143 duration: . "duration"
  144         | . duration "duration"
  150 dictionary: . "[" assocs "]"
  154 tuple: . "(" tuple.exps ")"
  159 literal-exp: . float-exp
  160            | . "angle"
  161            | . duration
  162            | . string
  163            | . "[" exps "]"
  164            | . "[<" tuple.exps ">]"
  165            | . "<" bitor-exps ">"
  166            | . dictionary
  167            | . tuple
  168 string: . "string"
  169       | . string "string"
  170 literal-exp: . "__HERE__"
  176 lvalue: . primary-exp "[" exps "]"
  177 literal-exp: . "this"
  178            | . "call"
  179 primary-exp: . literal-exp
  180            | . "(" exp ")"
  181            | . "(" error ")"
  182            | . primary-exp "**" primary-exp
  183 unary-exp: . primary-exp
  184          | . "--" lvalue
  185          | . "++" lvalue
  186          | . "+" unary-exp
  187          | . "-" unary-exp
  187          | "-" . unary-exp
  188          | . "!" unary-exp
  189          | . "compl" unary-exp
  223 primary-exp: . "%exp:" unsigned
  224 lvalue: . "%lvalue:" unsigned
  225       | . "%id:" unsigned
  226       | . primary-exp "." "%id:" unsigned
  227 primary-exp: . lvalue "(" "%exps:" unsigned ")"

    "__HERE__"    shift, and go to state 7
    "closure"     shift, and go to state 9
    "function"    shift, and go to state 13
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "[<"          shift, and go to state 19
    "watch"       shift, and go to state 28
    "&"           shift, and go to state 30
    "identifier"  shift, and go to state 36
    "--"          shift, and go to state 42
    "++"          shift, and go to state 43
    "do"          shift, and go to state 44
    "assert"      shift, and go to state 45
    "detach"      shift, and go to state 46
    "disown"      shift, and go to state 47
    "new"         shift, and go to state 128
    "angle"       shift, and go to state 49
    "duration"    shift, and go to state 50
    "float"       shift, and go to state 51
    "string"      shift, and go to state 52
    "call"        shift, and go to state 53
    "this"        shift, and go to state 54
    "!"           shift, and go to state 55
    "compl"       shift, and go to state 56
    "-"           shift, and go to state 57
    "+"           shift, and go to state 58
    "<"           shift, and go to state 59
    "%exp:"       shift, and go to state 61
    "%lvalue:"    shift, and go to state 62
    "%id:"        shift, and go to state 63

    block        go to state 68
    routine      go to state 101
    primary-exp  go to state 102
    detach       go to state 72
    lvalue       go to state 123
    id           go to state 103
    float-exp    go to state 77
    duration     go to state 78
    dictionary   go to state 79
    tuple        go to state 80
    literal-exp  go to state 81
    string       go to state 82
    unary-exp    go to state 152


state 58

   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   52 routine: . "closure"
   53        | . "function"
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
  118            | . block
  119            | . "do" "(" exp ")" block
  120 detach: . "detach"
  121       | . "disown"
  122 primary-exp: . "assert" "(" exp ")"
  123            | . "assert" "{" claims "}"
  124            | . detach "(" exp ")"
  125            | . detach block
  126            | . "isdef" "(" k1_id ")"
  127            | . "watch" "(" exp ")"
  128 lvalue: . id
  129       | . primary-exp "." id
  130       | . primary-exp "." "*"
  131 primary-exp: . "&" id
  132            | . primary-exp "." "&" id
  133 id: . "identifier"
  136 primary-exp: . lvalue
  137            | . lvalue args
  140 id: . "new"
  141 primary-exp: . routine formals block
  142 float-exp: . "float"
  143 duration: . "duration"
  144         | . duration "duration"
  150 dictionary: . "[" assocs "]"
  154 tuple: . "(" tuple.exps ")"
  159 literal-exp: . float-exp
  160            | . "angle"
  161            | . duration
  162            | . string
  163            | . "[" exps "]"
  164            | . "[<" tuple.exps ">]"
  165            | . "<" bitor-exps ">"
  166            | . dictionary
  167            | . tuple
  168 string: . "string"
  169       | . string "string"
  170 literal-exp: . "__HERE__"
  176 lvalue: . primary-exp "[" exps "]"
  177 literal-exp: . "this"
  178            | . "call"
  179 primary-exp: . literal-exp
  180            | . "(" exp ")"
  181            | . "(" error ")"
  182            | . primary-exp "**" primary-exp
  183 unary-exp: . primary-exp
  184          | . "--" lvalue
  185          | . "++" lvalue
  186          | . "+" unary-exp
  186          | "+" . unary-exp
  187          | . "-" unary-exp
  188          | . "!" unary-exp
  189          | . "compl" unary-exp
  223 primary-exp: . "%exp:" unsigned
  224 lvalue: . "%lvalue:" unsigned
  225       | . "%id:" unsigned
  226       | . primary-exp "." "%id:" unsigned
  227 primary-exp: . lvalue "(" "%exps:" unsigned ")"

    "__HERE__"    shift, and go to state 7
    "closure"     shift, and go to state 9
    "function"    shift, and go to state 13
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "[<"          shift, and go to state 19
    "watch"       shift, and go to state 28
    "&"           shift, and go to state 30
    "identifier"  shift, and go to state 36
    "--"          shift, and go to state 42
    "++"          shift, and go to state 43
    "do"          shift, and go to state 44
    "assert"      shift, and go to state 45
    "detach"      shift, and go to state 46
    "disown"      shift, and go to state 47
    "new"         shift, and go to state 128
    "angle"       shift, and go to state 49
    "duration"    shift, and go to state 50
    "float"       shift, and go to state 51
    "string"      shift, and go to state 52
    "call"        shift, and go to state 53
    "this"        shift, and go to state 54
    "!"           shift, and go to state 55
    "compl"       shift, and go to state 56
    "-"           shift, and go to state 57
    "+"           shift, and go to state 58
    "<"           shift, and go to state 59
    "%exp:"       shift, and go to state 61
    "%lvalue:"    shift, and go to state 62
    "%id:"        shift, and go to state 63

    block        go to state 68
    routine      go to state 101
    primary-exp  go to state 102
    detach       go to state 72
    lvalue       go to state 123
    id           go to state 103
    float-exp    go to state 77
    duration     go to state 78
    dictionary   go to state 79
    tuple        go to state 80
    literal-exp  go to state 81
    string       go to state 82
    unary-exp    go to state 153


state 59

   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   52 routine: . "closure"
   53        | . "function"
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
  118            | . block
  119            | . "do" "(" exp ")" block
  120 detach: . "detach"
  121       | . "disown"
  122 primary-exp: . "assert" "(" exp ")"
  123            | . "assert" "{" claims "}"
  124            | . detach "(" exp ")"
  125            | . detach block
  126            | . "isdef" "(" k1_id ")"
  127            | . "watch" "(" exp ")"
  128 lvalue: . id
  129       | . primary-exp "." id
  130       | . primary-exp "." "*"
  131 primary-exp: . "&" id
  132            | . primary-exp "." "&" id
  133 id: . "identifier"
  134 bitor-exp: . "var" bitor-exp
  135          | . "const" "var" bitor-exp
  136 primary-exp: . lvalue
  137            | . lvalue args
  138 new: . "new" "identifier" args.opt
  139 bitor-exp: . new
  140 id: . "new"
  141 primary-exp: . routine formals block
  142 float-exp: . "float"
  143 duration: . "duration"
  144         | . duration "duration"
  150 dictionary: . "[" assocs "]"
  154 tuple: . "(" tuple.exps ")"
  155 bitor-exps: .  [">"]
  156           | . bitor-exps.1 comma.opt
  157 bitor-exps.1: . bitor-exp
  158             | . bitor-exps.1 "," bitor-exp
  159 literal-exp: . float-exp
  160            | . "angle"
  161            | . duration
  162            | . string
  163            | . "[" exps "]"
  164            | . "[<" tuple.exps ">]"
  165            | . "<" bitor-exps ">"
  165            | "<" . bitor-exps ">"
  166            | . dictionary
  167            | . tuple
  168 string: . "string"
  169       | . string "string"
  170 literal-exp: . "__HERE__"
  176 lvalue: . primary-exp "[" exps "]"
  177 literal-exp: . "this"
  178            | . "call"
  179 primary-exp: . literal-exp
  180            | . "(" exp ")"
  181            | . "(" error ")"
  182            | . primary-exp "**" primary-exp
  183 unary-exp: . primary-exp
  184          | . "--" lvalue
  185          | . "++" lvalue
  186          | . "+" unary-exp
  187          | . "-" unary-exp
  188          | . "!" unary-exp
  189          | . "compl" unary-exp
  190 bitor-exp: . unary-exp
  191          | . bitor-exp "+" bitor-exp
  192          | . bitor-exp "-" bitor-exp
  193          | . bitor-exp "*" bitor-exp
  194          | . bitor-exp "/" bitor-exp
  195          | . bitor-exp "%" bitor-exp
  196          | . bitor-exp "^" bitor-exp
  197          | . bitor-exp "<<" bitor-exp
  198          | . bitor-exp "bitand" bitor-exp
  199          | . bitor-exp "bitor" bitor-exp
  200          | . bitor-exp ">>" bitor-exp
  223 primary-exp: . "%exp:" unsigned
  224 lvalue: . "%lvalue:" unsigned
  225       | . "%id:" unsigned
  226       | . primary-exp "." "%id:" unsigned
  227 primary-exp: . lvalue "(" "%exps:" unsigned ")"

    "__HERE__"    shift, and go to state 7
    "closure"     shift, and go to state 9
    "const"       shift, and go to state 10
    "function"    shift, and go to state 13
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "[<"          shift, and go to state 19
    "var"         shift, and go to state 26
    "watch"       shift, and go to state 28
    "&"           shift, and go to state 30
    "identifier"  shift, and go to state 36
    "--"          shift, and go to state 42
    "++"          shift, and go to state 43
    "do"          shift, and go to state 44
    "assert"      shift, and go to state 45
    "detach"      shift, and go to state 46
    "disown"      shift, and go to state 47
    "new"         shift, and go to state 48
    "angle"       shift, and go to state 49
    "duration"    shift, and go to state 50
    "float"       shift, and go to state 51
    "string"      shift, and go to state 52
    "call"        shift, and go to state 53
    "this"        shift, and go to state 54
    "!"           shift, and go to state 55
    "compl"       shift, and go to state 56
    "-"           shift, and go to state 57
    "+"           shift, and go to state 58
    "<"           shift, and go to state 59
    "%exp:"       shift, and go to state 61
    "%lvalue:"    shift, and go to state 62
    "%id:"        shift, and go to state 63

    $default  reduce using rule 155 (bitor-exps)

    block         go to state 68
    routine       go to state 101
    primary-exp   go to state 102
    detach        go to state 72
    lvalue        go to state 123
    id            go to state 103
    bitor-exp     go to state 154
    new           go to state 76
    float-exp     go to state 77
    duration      go to state 78
    dictionary    go to state 79
    tuple         go to state 80
    bitor-exps    go to state 155
    bitor-exps.1  go to state 156
    literal-exp   go to state 81
    string        go to state 82
    unary-exp     go to state 83


state 60

  221 unsigned: . "float"
  222 exp: "%unscope:" . unsigned

    "float"  shift, and go to state 157

    unsigned  go to state 158


state 61

  221 unsigned: . "float"
  223 primary-exp: "%exp:" . unsigned

    "float"  shift, and go to state 157

    unsigned  go to state 159


state 62

  221 unsigned: . "float"
  224 lvalue: "%lvalue:" . unsigned

    "float"  shift, and go to state 157

    unsigned  go to state 160


state 63

  221 unsigned: . "float"
  225 lvalue: "%id:" . unsigned

    "float"  shift, and go to state 157

    unsigned  go to state 161


state 64

    3 root: MODE_EXP root_exp .

    $default  reduce using rule 3 (root)


state 65

    5 root_exp: cstmt.opt . ";"
    6         | cstmt.opt . ","
    7         | cstmt.opt . "end of command"

    "end of command"  shift, and go to state 162
    ","               shift, and go to state 163
    ";"               shift, and go to state 164


state 66

   16 cstmt.opt: cstmt .  ["end of command", "case", "default", "}", ")", ",", ";"]
   17          | cstmt . "|"
   19 cstmt: cstmt . "|" cstmt
   20      | cstmt . "&" cstmt

    "&"  shift, and go to state 165
    "|"  shift, and go to state 166

    $default  reduce using rule 16 (cstmt.opt)


state 67

   18 cstmt: stmt .

    $default  reduce using rule 18 (cstmt)


state 68

  118 primary-exp: block .

    $default  reduce using rule 118 (primary-exp)


state 69

   24 stmt: exp .  ["end of command", "case", "catch", "default", "else", "finally", "onleave", "}", ")", ",", ";", "&", "|"]
   51     | exp . "!" args.opt tilda.opt
   62 exp: exp . "=" exp
   63    | exp . "=" exp modifiers
  215    | exp . "&&" exp
  216    | exp . "||" exp
  217    | exp . "in" exp
  218    | exp . "!" "in" exp

    "="   shift, and go to state 167
    "in"  shift, and go to state 168
    "!"   shift, and go to state 169
    "&&"  shift, and go to state 170
    "||"  shift, and go to state 171

    $default  reduce using rule 24 (stmt)


state 70

   54 stmt: routine . k1_id formals block
   56 k1_id: . "identifier"
   57      | . "this" "." "identifier"
   58      | . k1_id "." "identifier"
  141 primary-exp: routine . formals block
  252 formals: .  ["{"]
  253        | . "(" formals.0 ")"

    "("           shift, and go to state 172
    "identifier"  shift, and go to state 173
    "this"        shift, and go to state 174

    $default  reduce using rule 252 (formals)

    k1_id    go to state 175
    formals  go to state 176


state 71

   23 stmt: primary-exp . ":" stmt
  129 lvalue: primary-exp . "." id
  130       | primary-exp . "." "*"
  132 primary-exp: primary-exp . "." "&" id
  176 lvalue: primary-exp . "[" exps "]"
  182 primary-exp: primary-exp . "**" primary-exp
  183 unary-exp: primary-exp .  ["end of command", "=", "case", "catch", "default", "else", "finally", "in", "onleave", "}", ")", ",", ";", "&", "|", "!", "bitand", "bitor", "^", ">>", "<<", "-", "%", "+", "/", "*", "=~=", "==", "===", ">=", ">", "<=", "<", "!=", "!==", "~=", "&&", "||"]
  226 lvalue: primary-exp . "." "%id:" unsigned

    ":"   shift, and go to state 177
    "["   shift, and go to state 178
    "."   shift, and go to state 179
    "**"  shift, and go to state 180

    $default  reduce using rule 183 (unary-exp)


state 72

   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
  124 primary-exp: detach . "(" exp ")"
  125            | detach . block

    "{"  shift, and go to state 16
    "("  shift, and go to state 181

    block  go to state 182


state 73

   64 exp: lvalue . "+=" exp
   65    | lvalue . "-=" exp
   66    | lvalue . "*=" exp
   67    | lvalue . "/=" exp
   68    | lvalue . "^=" exp
   69    | lvalue . "%=" exp
   70 primary-exp: lvalue . "--"
   71            | lvalue . "++"
   72            | lvalue . "->" id
  136            | lvalue .  ["end of command", "=", "case", "catch", ":", "default", "else", "finally", "if", "in", "{", "[", ">]", "onleave", ".", "}", "]", ")", "~", ",", ";", "&", "|", "identifier", "=>", "?", "!", "bitand", "bitor", "^", ">>", "<<", "-", "%", "+", "/", "*", "**", "=~=", "==", "===", ">=", ">", "<=", "<", "!=", "!==", "~=", "&&", "||"]
  137            | lvalue . args
  227            | lvalue . "(" "%exps:" unsigned ")"
  237 args: . "(" exps ")"

    "("   shift, and go to state 183
    "^="  shift, and go to state 184
    "-="  shift, and go to state 185
    "%="  shift, and go to state 186
    "+="  shift, and go to state 187
    "/="  shift, and go to state 188
    "*="  shift, and go to state 189
    "--"  shift, and go to state 190
    "++"  shift, and go to state 191
    "->"  shift, and go to state 192

    $default  reduce using rule 136 (primary-exp)

    args  go to state 193


state 74

   55 stmt: id . id formals block
  128 lvalue: id .  ["end of command", "=", "case", "catch", ":", "default", "else", "finally", "in", "[", "(", "onleave", ".", "}", ")", ",", ";", "&", "|", "^=", "-=", "%=", "+=", "/=", "*=", "--", "++", "->", "!", "bitand", "bitor", "^", ">>", "<<", "-", "%", "+", "/", "*", "**", "=~=", "==", "===", ">=", ">", "<=", "<", "!=", "!==", "~=", "&&", "||"]
  133 id: . "identifier"
  140   | . "new"

    "identifier"  shift, and go to state 36
    "new"         shift, and go to state 128

    $default  reduce using rule 128 (lvalue)

    id  go to state 194


state 75

  191 bitor-exp: bitor-exp . "+" bitor-exp
  192          | bitor-exp . "-" bitor-exp
  193          | bitor-exp . "*" bitor-exp
  194          | bitor-exp . "/" bitor-exp
  195          | bitor-exp . "%" bitor-exp
  196          | bitor-exp . "^" bitor-exp
  197          | bitor-exp . "<<" bitor-exp
  198          | bitor-exp . "bitand" bitor-exp
  199          | bitor-exp . "bitor" bitor-exp
  200          | bitor-exp . ">>" bitor-exp
  211 rel-exp: bitor-exp . rel-ops
  212 rel-ops: .  ["end of command", "=", "case", "catch", ":", "default", "else", "finally", "if", "in", "{", ">]", "onleave", "}", "]", ")", "~", ",", ";", "&", "|", "identifier", "=>", "?", "!", "=~=", "==", "===", ">=", ">", "<=", "<", "!=", "!==", "~=", "&&", "||"]
  213        | . rel-ops rel-op bitor-exp

    "bitand"  shift, and go to state 195
    "bitor"   shift, and go to state 196
    "^"       shift, and go to state 197
    ">>"      shift, and go to state 198
    "<<"      shift, and go to state 199
    "-"       shift, and go to state 200
    "%"       shift, and go to state 201
    "+"       shift, and go to state 202
    "/"       shift, and go to state 203
    "*"       shift, and go to state 204

    $default  reduce using rule 212 (rel-ops)

    rel-ops  go to state 205


state 76

  139 bitor-exp: new .

    $default  reduce using rule 139 (bitor-exp)


state 77

  159 literal-exp: float-exp .

    $default  reduce using rule 159 (literal-exp)


state 78

  144 duration: duration . "duration"
  161 literal-exp: duration .  ["end of command", "=", "case", "catch", ":", "default", "else", "finally", "if", "in", "{", "[", ">]", "onleave", ".", "}", "]", ")", "~", ",", ";", "&", "|", "identifier", "=>", "?", "!", "bitand", "bitor", "^", ">>", "<<", "-", "%", "+", "/", "*", "**", "=~=", "==", "===", ">=", ">", "<=", "<", "!=", "!==", "~=", "&&", "||"]

    "duration"  shift, and go to state 206

    $default  reduce using rule 161 (literal-exp)


state 79

  166 literal-exp: dictionary .

    $default  reduce using rule 166 (literal-exp)


state 80

  167 literal-exp: tuple .

    $default  reduce using rule 167 (literal-exp)


state 81

  179 primary-exp: literal-exp .

    $default  reduce using rule 179 (primary-exp)


state 82

  162 literal-exp: string .  ["end of command", "=", "case", "catch", ":", "default", "else", "finally", "if", "in", "{", "[", ">]", "onleave", ".", "}", "]", ")", "~", ",", ";", "&", "|", "identifier", "=>", "?", "!", "bitand", "bitor", "^", ">>", "<<", "-", "%", "+", "/", "*", "**", "=~=", "==", "===", ">=", ">", "<=", "<", "!=", "!==", "~=", "&&", "||"]
  169 string: string . "string"

    "string"  shift, and go to state 207

    $default  reduce using rule 162 (literal-exp)


state 83

  190 bitor-exp: unary-exp .

    $default  reduce using rule 190 (bitor-exp)


state 84

  214 exp: rel-exp .

    $default  reduce using rule 214 (exp)


state 85

    4 root: MODE_EXPS root_exps .

    $default  reduce using rule 4 (root)


state 86

   11 root_exps: stmts .  ["end of command"]
   13 stmts: stmts . ";" cstmt.opt
   14      | stmts . "," cstmt.opt

    ","  shift, and go to state 208
    ";"  shift, and go to state 209

    $default  reduce using rule 11 (root_exps)


state 87

   12 stmts: cstmt.opt .

    $default  reduce using rule 12 (stmts)


state 88

    0 $accept: start "end of command" .

    $default  accept


state 89

   10 root_exp: error "end of command" .

    $default  reduce using rule 10 (root_exp)


state 90

    9 root_exp: error "," .

    $default  reduce using rule 9 (root_exp)


state 91

    8 root_exp: error ";" .

    $default  reduce using rule 8 (root_exp)


state 92

   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   52 routine: . "closure"
   53        | . "function"
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
  118            | . block
  119            | . "do" "(" exp ")" block
  120 detach: . "detach"
  121       | . "disown"
  122 primary-exp: . "assert" "(" exp ")"
  123            | . "assert" "{" claims "}"
  124            | . detach "(" exp ")"
  125            | . detach block
  126            | . "isdef" "(" k1_id ")"
  127            | . "watch" "(" exp ")"
  128 lvalue: . id
  129       | . primary-exp "." id
  130       | . primary-exp "." "*"
  131 primary-exp: . "&" id
  132            | . primary-exp "." "&" id
  133 id: . "identifier"
  134 bitor-exp: . "var" bitor-exp
  135          | . "const" "var" bitor-exp
  135          | "const" "var" . bitor-exp
  136 primary-exp: . lvalue
  137            | . lvalue args
  138 new: . "new" "identifier" args.opt
  139 bitor-exp: . new
  140 id: . "new"
  141 primary-exp: . routine formals block
  142 float-exp: . "float"
  143 duration: . "duration"
  144         | . duration "duration"
  150 dictionary: . "[" assocs "]"
  154 tuple: . "(" tuple.exps ")"
  159 literal-exp: . float-exp
  160            | . "angle"
  161            | . duration
  162            | . string
  163            | . "[" exps "]"
  164            | . "[<" tuple.exps ">]"
  165            | . "<" bitor-exps ">"
  166            | . dictionary
  167            | . tuple
  168 string: . "string"
  169       | . string "string"
  170 literal-exp: . "__HERE__"
  176 lvalue: . primary-exp "[" exps "]"
  177 literal-exp: . "this"
  178            | . "call"
  179 primary-exp: . literal-exp
  180            | . "(" exp ")"
  181            | . "(" error ")"
  182            | . primary-exp "**" primary-exp
  183 unary-exp: . primary-exp
  184          | . "--" lvalue
  185          | . "++" lvalue
  186          | . "+" unary-exp
  187          | . "-" unary-exp
  188          | . "!" unary-exp
  189          | . "compl" unary-exp
  190 bitor-exp: . unary-exp
  191          | . bitor-exp "+" bitor-exp
  192          | . bitor-exp "-" bitor-exp
  193          | . bitor-exp "*" bitor-exp
  194          | . bitor-exp "/" bitor-exp
  195          | . bitor-exp "%" bitor-exp
  196          | . bitor-exp "^" bitor-exp
  197          | . bitor-exp "<<" bitor-exp
  198          | . bitor-exp "bitand" bitor-exp
  199          | . bitor-exp "bitor" bitor-exp
  200          | . bitor-exp ">>" bitor-exp
  223 primary-exp: . "%exp:" unsigned
  224 lvalue: . "%lvalue:" unsigned
  225       | . "%id:" unsigned
  226       | . primary-exp "." "%id:" unsigned
  227 primary-exp: . lvalue "(" "%exps:" unsigned ")"

    "__HERE__"    shift, and go to state 7
    "closure"     shift, and go to state 9
    "const"       shift, and go to state 10
    "function"    shift, and go to state 13
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "[<"          shift, and go to state 19
    "var"         shift, and go to state 26
    "watch"       shift, and go to state 28
    "&"           shift, and go to state 30
    "identifier"  shift, and go to state 36
    "--"          shift, and go to state 42
    "++"          shift, and go to state 43
    "do"          shift, and go to state 44
    "assert"      shift, and go to state 45
    "detach"      shift, and go to state 46
    "disown"      shift, and go to state 47
    "new"         shift, and go to state 48
    "angle"       shift, and go to state 49
    "duration"    shift, and go to state 50
    "float"       shift, and go to state 51
    "string"      shift, and go to state 52
    "call"        shift, and go to state 53
    "this"        shift, and go to state 54
    "!"           shift, and go to state 55
    "compl"       shift, and go to state 56
    "-"           shift, and go to state 57
    "+"           shift, and go to state 58
    "<"           shift, and go to state 59
    "%exp:"       shift, and go to state 61
    "%lvalue:"    shift, and go to state 62
    "%id:"        shift, and go to state 63

    block        go to state 68
    routine      go to state 101
    primary-exp  go to state 102
    detach       go to state 72
    lvalue       go to state 123
    id           go to state 103
    bitor-exp    go to state 210
    new          go to state 76
    float-exp    go to state 77
    duration     go to state 78
    dictionary   go to state 79
    tuple        go to state 80
    literal-exp  go to state 81
    string       go to state 82
    unary-exp    go to state 83


state 93

   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   37 exp: . "class" lvalue protos block
   38    | . "package" lvalue protos block
   52 routine: . "closure"
   53        | . "function"
   62 exp: . exp "=" exp
   63    | . exp "=" exp modifiers
   64    | . lvalue "+=" exp
   65    | . lvalue "-=" exp
   66    | . lvalue "*=" exp
   67    | . lvalue "/=" exp
   68    | . lvalue "^=" exp
   69    | . lvalue "%=" exp
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
   77 stmt: "freezeif" "(" . exp ")" stmt
  118 primary-exp: . block
  119            | . "do" "(" exp ")" block
  120 detach: . "detach"
  121       | . "disown"
  122 primary-exp: . "assert" "(" exp ")"
  123            | . "assert" "{" claims "}"
  124            | . detach "(" exp ")"
  125            | . detach block
  126            | . "isdef" "(" k1_id ")"
  127            | . "watch" "(" exp ")"
  128 lvalue: . id
  129       | . primary-exp "." id
  130       | . primary-exp "." "*"
  131 primary-exp: . "&" id
  132            | . primary-exp "." "&" id
  133 id: . "identifier"
  134 bitor-exp: . "var" bitor-exp
  135          | . "const" "var" bitor-exp
  136 primary-exp: . lvalue
  137            | . lvalue args
  138 new: . "new" "identifier" args.opt
  139 bitor-exp: . new
  140 id: . "new"
  141 primary-exp: . routine formals block
  142 float-exp: . "float"
  143 duration: . "duration"
  144         | . duration "duration"
  150 dictionary: . "[" assocs "]"
  154 tuple: . "(" tuple.exps ")"
  159 literal-exp: . float-exp
  160            | . "angle"
  161            | . duration
  162            | . string
  163            | . "[" exps "]"
  164            | . "[<" tuple.exps ">]"
  165            | . "<" bitor-exps ">"
  166            | . dictionary
  167            | . tuple
  168 string: . "string"
  169       | . string "string"
  170 literal-exp: . "__HERE__"
  176 lvalue: . primary-exp "[" exps "]"
  177 literal-exp: . "this"
  178            | . "call"
  179 primary-exp: . literal-exp
  180            | . "(" exp ")"
  181            | . "(" error ")"
  182            | . primary-exp "**" primary-exp
  183 unary-exp: . primary-exp
  184          | . "--" lvalue
  185          | . "++" lvalue
  186          | . "+" unary-exp
  187          | . "-" unary-exp
  188          | . "!" unary-exp
  189          | . "compl" unary-exp
  190 bitor-exp: . unary-exp
  191          | . bitor-exp "+" bitor-exp
  192          | . bitor-exp "-" bitor-exp
  193          | . bitor-exp "*" bitor-exp
  194          | . bitor-exp "/" bitor-exp
  195          | . bitor-exp "%" bitor-exp
  196          | . bitor-exp "^" bitor-exp
  197          | . bitor-exp "<<" bitor-exp
  198          | . bitor-exp "bitand" bitor-exp
  199          | . bitor-exp "bitor" bitor-exp
  200          | . bitor-exp ">>" bitor-exp
  211 rel-exp: . bitor-exp rel-ops
  214 exp: . rel-exp
  215    | . exp "&&" exp
  216    | . exp "||" exp
  217    | . exp "in" exp
  218    | . exp "!" "in" exp
  222    | . "%unscope:" unsigned
  223 primary-exp: . "%exp:" unsigned
  224 lvalue: . "%lvalue:" unsigned
  225       | . "%id:" unsigned
  226       | . primary-exp "." "%id:" unsigned
  227 primary-exp: . lvalue "(" "%exps:" unsigned ")"

    "__HERE__"    shift, and go to state 7
    "closure"     shift, and go to state 9
    "const"       shift, and go to state 10
    "function"    shift, and go to state 13
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "[<"          shift, and go to state 19
    "var"         shift, and go to state 26
    "watch"       shift, and go to state 28
    "&"           shift, and go to state 30
    "identifier"  shift, and go to state 36
    "class"       shift, and go to state 37
    "package"     shift, and go to state 38
    "--"          shift, and go to state 42
    "++"          shift, and go to state 43
    "do"          shift, and go to state 44
    "assert"      shift, and go to state 45
    "detach"      shift, and go to state 46
    "disown"      shift, and go to state 47
    "new"         shift, and go to state 48
    "angle"       shift, and go to state 49
    "duration"    shift, and go to state 50
    "float"       shift, and go to state 51
    "string"      shift, and go to state 52
    "call"        shift, and go to state 53
    "this"        shift, and go to state 54
    "!"           shift, and go to state 55
    "compl"       shift, and go to state 56
    "-"           shift, and go to state 57
    "+"           shift, and go to state 58
    "<"           shift, and go to state 59
    "%unscope:"   shift, and go to state 60
    "%exp:"       shift, and go to state 61
    "%lvalue:"    shift, and go to state 62
    "%id:"        shift, and go to state 63

    block        go to state 68
    exp          go to state 211
    routine      go to state 101
    primary-exp  go to state 102
    detach       go to state 72
    lvalue       go to state 73
    id           go to state 103
    bitor-exp    go to state 75
    new          go to state 76
    float-exp    go to state 77
    duration     go to state 78
    dictionary   go to state 79
    tuple        go to state 80
    literal-exp  go to state 81
    string       go to state 82
    unary-exp    go to state 83
    rel-exp      go to state 84


state 94

   12 stmts: . cstmt.opt
   13      | . stmts ";" cstmt.opt
   14      | . stmts "," cstmt.opt
   15 cstmt.opt: .  [")", ",", ";"]
   16          | . cstmt
   17          | . cstmt "|"
   18 cstmt: . stmt
   19      | . cstmt "|" cstmt
   20      | . cstmt "&" cstmt
   23 stmt: . primary-exp ":" stmt
   24     | . exp
   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   37 exp: . "class" lvalue protos block
   38    | . "package" lvalue protos block
   43 stmt: . "enum" id "{" id.0 "}"
   47     | . "external" "identifier" "identifier"
   48     | . "external" "var" "identifier" "." "identifier" from "identifier"
   49     | . "external" event_or_function "(" unsigned ")" "identifier" "." "identifier" from "identifier"
   50     | . "import" lvalue
   51     | . exp "!" args.opt tilda.opt
   52 routine: . "closure"
   53        | . "function"
   54 stmt: . routine k1_id formals block
   55     | . id id formals block
   62 exp: . exp "=" exp
   63    | . exp "=" exp modifiers
   64    | . lvalue "+=" exp
   65    | . lvalue "-=" exp
   66    | . lvalue "*=" exp
   67    | . lvalue "/=" exp
   68    | . lvalue "^=" exp
   69    | . lvalue "%=" exp
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
   73 stmt: . "at" identifiers "(" exp tilda.opt ")" stmt onleave.opt
   74     | . "at" identifiers "(" event_match ")" stmt onleave.opt
   75     | . "every" "(" exp ")" stmt
   76     | . "if" "(" stmts ")" stmt else.opt
   76     | "if" "(" . stmts ")" stmt else.opt
   77     | . "freezeif" "(" exp ")" stmt
   78     | . "stopif" "(" exp ")" stmt
   79     | . "switch" "(" exp ")" "{" cases default.opt "}"
   80     | . "timeout" "(" exp ")" stmt catch.opt else.opt finally.opt
   81     | . "return" exp.opt
   82     | . "break"
   83     | . "continue"
   84     | . "waituntil" "(" exp tilda.opt ")"
   85     | . "waituntil" "(" event_match ")"
   86     | . "whenever" "(" exp tilda.opt ")" stmt else.opt
   87     | . "whenever" "(" event_match ")" stmt else.opt
  108     | . "try" block catches.1 else.opt finally.opt
  109     | . "try" block "finally" block
  110     | . "throw" exp.opt
  111     | . "loop" stmt
  112     | . "for" "(" exp ")" stmt
  113     | . "for" "(" stmt.opt ";" exp ";" stmt.opt ")" stmt
  114     | . "for" "(" "var" "identifier" in_or_colon exp ")" stmt
  115     | . "while" "(" exp ")" stmt
  118 primary-exp: . block
  119            | . "do" "(" exp ")" block
  120 detach: . "detach"
  121       | . "disown"
  122 primary-exp: . "assert" "(" exp ")"
  123            | . "assert" "{" claims "}"
  124            | . detach "(" exp ")"
  125            | . detach block
  126            | . "isdef" "(" k1_id ")"
  127            | . "watch" "(" exp ")"
  128 lvalue: . id
  129       | . primary-exp "." id
  130       | . primary-exp "." "*"
  131 primary-exp: . "&" id
  132            | . primary-exp "." "&" id
  133 id: . "identifier"
  134 bitor-exp: . "var" bitor-exp
  135          | . "const" "var" bitor-exp
  136 primary-exp: . lvalue
  137            | . lvalue args
  138 new: . "new" "identifier" args.opt
  139 bitor-exp: . new
  140 id: . "new"
  141 primary-exp: . routine formals block
  142 float-exp: . "float"
  143 duration: . "duration"
  144         | . duration "duration"
  150 dictionary: . "[" assocs "]"
  154 tuple: . "(" tuple.exps ")"
  159 literal-exp: . float-exp
  160            | . "angle"
  161            | . duration
  162            | . string
  163            | . "[" exps "]"
  164            | . "[<" tuple.exps ">]"
  165            | . "<" bitor-exps ">"
  166            | . dictionary
  167            | . tuple
  168 string: . "string"
  169       | . string "string"
  170 literal-exp: . "__HERE__"
  176 lvalue: . primary-exp "[" exps "]"
  177 literal-exp: . "this"
  178            | . "call"
  179 primary-exp: . literal-exp
  180            | . "(" exp ")"
  181            | . "(" error ")"
  182            | . primary-exp "**" primary-exp
  183 unary-exp: . primary-exp
  184          | . "--" lvalue
  185          | . "++" lvalue
  186          | . "+" unary-exp
  187          | . "-" unary-exp
  188          | . "!" unary-exp
  189          | . "compl" unary-exp
  190 bitor-exp: . unary-exp
  191          | . bitor-exp "+" bitor-exp
  192          | . bitor-exp "-" bitor-exp
  193          | . bitor-exp "*" bitor-exp
  194          | . bitor-exp "/" bitor-exp
  195          | . bitor-exp "%" bitor-exp
  196          | . bitor-exp "^" bitor-exp
  197          | . bitor-exp "<<" bitor-exp
  198          | . bitor-exp "bitand" bitor-exp
  199          | . bitor-exp "bitor" bitor-exp
  200          | . bitor-exp ">>" bitor-exp
  211 rel-exp: . bitor-exp rel-ops
  214 exp: . rel-exp
  215    | . exp "&&" exp
  216    | . exp "||" exp
  217    | . exp "in" exp
  218    | . exp "!" "in" exp
  222    | . "%unscope:" unsigned
  223 primary-exp: . "%exp:" unsigned
  224 lvalue: . "%lvalue:" unsigned
  225       | . "%id:" unsigned
  226       | . primary-exp "." "%id:" unsigned
  227 primary-exp: . lvalue "(" "%exps:" unsigned ")"

    "__HERE__"    shift, and go to state 7
    "break"       shift, and go to state 8
    "closure"     shift, and go to state 9
    "const"       shift, and go to state 10
    "continue"    shift, and go to state 11
    "freezeif"    shift, and go to state 12
    "function"    shift, and go to state 13
    "if"          shift, and go to state 14
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "[<"          shift, and go to state 19
    "return"      shift, and go to state 20
    "stopif"      shift, and go to state 21
    "switch"      shift, and go to state 22
    "throw"       shift, and go to state 23
    "timeout"     shift, and go to state 24
    "try"         shift, and go to state 25
    "var"         shift, and go to state 26
    "waituntil"   shift, and go to state 27
    "watch"       shift, and go to state 28
    "whenever"    shift, and go to state 29
    "&"           shift, and go to state 30
    "every"       shift, and go to state 31
    "for"         shift, and go to state 32
    "loop"        shift, and go to state 33
    "while"       shift, and go to state 34
    "at"          shift, and go to state 35
    "identifier"  shift, and go to state 36
    "class"       shift, and go to state 37
    "package"     shift, and go to state 38
    "enum"        shift, and go to state 39
    "external"    shift, and go to state 40
    "import"      shift, and go to state 41
    "--"          shift, and go to state 42
    "++"          shift, and go to state 43
    "do"          shift, and go to state 44
    "assert"      shift, and go to state 45
    "detach"      shift, and go to state 46
    "disown"      shift, and go to state 47
    "new"         shift, and go to state 48
    "angle"       shift, and go to state 49
    "duration"    shift, and go to state 50
    "float"       shift, and go to state 51
    "string"      shift, and go to state 52
    "call"        shift, and go to state 53
    "this"        shift, and go to state 54
    "!"           shift, and go to state 55
    "compl"       shift, and go to state 56
    "-"           shift, and go to state 57
    "+"           shift, and go to state 58
    "<"           shift, and go to state 59
    "%unscope:"   shift, and go to state 60
    "%exp:"       shift, and go to state 61
    "%lvalue:"    shift, and go to state 62
    "%id:"        shift, and go to state 63

    $default  reduce using rule 15 (cstmt.opt)

    stmts        go to state 212
    cstmt.opt    go to state 87
    cstmt        go to state 66
    stmt         go to state 67
    block        go to state 68
    exp          go to state 69
    routine      go to state 70
    primary-exp  go to state 71
    detach       go to state 72
    lvalue       go to state 73
    id           go to state 74
    bitor-exp    go to state 75
    new          go to state 76
    float-exp    go to state 77
    duration     go to state 78
    dictionary   go to state 79
    tuple        go to state 80
    literal-exp  go to state 81
    string       go to state 82
    unary-exp    go to state 83
    rel-exp      go to state 84


state 95

   56 k1_id: . "identifier"
   57      | . "this" "." "identifier"
   58      | . k1_id "." "identifier"
  126 primary-exp: "isdef" "(" . k1_id ")"

    "identifier"  shift, and go to state 173
    "this"        shift, and go to state 174

    k1_id  go to state 213


state 96

   26 block: "{" error . "}"

    "}"  shift, and go to state 214


state 97

   13 stmts: stmts . ";" cstmt.opt
   14      | stmts . "," cstmt.opt
   25 block: "{" stmts . "}"

    "}"  shift, and go to state 215
    ","  shift, and go to state 208
    ";"  shift, and go to state 209


state 98

   27 block: "{" id . "~" id "}"
   55 stmt: id . id formals block
  128 lvalue: id .  ["=", ":", "in", "[", "(", ".", "}", ",", ";", "&", "|", "^=", "-=", "%=", "+=", "/=", "*=", "--", "++", "->", "!", "bitand", "bitor", "^", ">>", "<<", "-", "%", "+", "/", "*", "**", "=~=", "==", "===", ">=", ">", "<=", "<", "!=", "!==", "~=", "&&", "||"]
  133 id: . "identifier"
  140   | . "new"

    "~"           shift, and go to state 216
    "identifier"  shift, and go to state 36
    "new"         shift, and go to state 128

    $default  reduce using rule 128 (lvalue)

    id  go to state 194


state 99

  148 assocs: "=>" .

    $default  reduce using rule 148 (assocs)


state 100

   62 exp: exp . "=" exp
   63    | exp . "=" exp modifiers
  145 assoc: exp . "=>" exp
  215 exp: exp . "&&" exp
  216    | exp . "||" exp
  217    | exp . "in" exp
  218    | exp . "!" "in" exp
  234 exps.1: exp .  ["]", ","]

    "="   shift, and go to state 167
    "in"  shift, and go to state 168
    "=>"  shift, and go to state 217
    "!"   shift, and go to state 218
    "&&"  shift, and go to state 170
    "||"  shift, and go to state 171

    $default  reduce using rule 234 (exps.1)


state 101

  141 primary-exp: routine . formals block
  252 formals: .  ["{"]
  253        | . "(" formals.0 ")"

    "("  shift, and go to state 172

    $default  reduce using rule 252 (formals)

    formals  go to state 176


state 102

  129 lvalue: primary-exp . "." id
  130       | primary-exp . "." "*"
  132 primary-exp: primary-exp . "." "&" id
  176 lvalue: primary-exp . "[" exps "]"
  182 primary-exp: primary-exp . "**" primary-exp
  183 unary-exp: primary-exp .  ["end of command", "=", "case", "catch", ":", "default", "else", "finally", "if", "in", "{", ">]", "onleave", "}", "]", ")", "~", ",", ";", "&", "|", "identifier", "=>", "?", "!", "bitand", "bitor", "^", ">>", "<<", "-", "%", "+", "/", "*", "=~=", "==", "===", ">=", ">", "<=", "<", "!=", "!==", "~=", "&&", "||"]
  226 lvalue: primary-exp . "." "%id:" unsigned

    "["   shift, and go to state 178
    "."   shift, and go to state 179
    "**"  shift, and go to state 180

    $default  reduce using rule 183 (unary-exp)


state 103

  128 lvalue: id .

    $default  reduce using rule 128 (lvalue)


state 104

  146 assocs.1: assoc .

    $default  reduce using rule 146 (assocs.1)


state 105

  147 assocs.1: assocs.1 . "," assoc
  149 assocs: assocs.1 . comma.opt
  254 comma.opt: .  ["]"]
  255          | . ","

    ","  shift, and go to state 219

    $default  reduce using rule 254 (comma.opt)

    comma.opt  go to state 220


state 106

  150 dictionary: "[" assocs . "]"

    "]"  shift, and go to state 221


state 107

  163 literal-exp: "[" exps . "]"

    "]"  shift, and go to state 222


state 108

  233 exps: exps.1 . comma.opt
  235 exps.1: exps.1 . "," exp
  254 comma.opt: .  ["]", ")"]
  255          | . ","

    ","  shift, and go to state 223

    $default  reduce using rule 254 (comma.opt)

    comma.opt  go to state 224


state 109

  181 primary-exp: "(" error . ")"

    ")"  shift, and go to state 225


state 110

   62 exp: exp . "=" exp
   63    | exp . "=" exp modifiers
  180 primary-exp: "(" exp . ")"
  215 exp: exp . "&&" exp
  216    | exp . "||" exp
  217    | exp . "in" exp
  218    | exp . "!" "in" exp
  234 exps.1: exp .  [","]

    "="   shift, and go to state 167
    "in"  shift, and go to state 168
    ")"   shift, and go to state 226
    "!"   shift, and go to state 218
    "&&"  shift, and go to state 170
    "||"  shift, and go to state 171

    $default  reduce using rule 234 (exps.1)


state 111

  154 tuple: "(" tuple.exps . ")"

    ")"  shift, and go to state 227


state 112

  152 tuple.exps: exps.1 . ","
  235 exps.1: exps.1 . "," exp
  236 exps.2: exps.1 . "," exp

    ","  shift, and go to state 228


state 113

  153 tuple.exps: exps.2 .

    $default  reduce using rule 153 (tuple.exps)


state 114

   62 exp: exp . "=" exp
   63    | exp . "=" exp modifiers
  215    | exp . "&&" exp
  216    | exp . "||" exp
  217    | exp . "in" exp
  218    | exp . "!" "in" exp
  234 exps.1: exp .  ["]", ")", ","]

    "="   shift, and go to state 167
    "in"  shift, and go to state 168
    "!"   shift, and go to state 218
    "&&"  shift, and go to state 170
    "||"  shift, and go to state 171

    $default  reduce using rule 234 (exps.1)


state 115

  164 literal-exp: "[<" tuple.exps . ">]"

    ">]"  shift, and go to state 229


state 116

   62 exp: exp . "=" exp
   63    | exp . "=" exp modifiers
  215    | exp . "&&" exp
  216    | exp . "||" exp
  217    | exp . "in" exp
  218    | exp . "!" "in" exp
  220 exp.opt: exp .  ["end of command", "case", "catch", "default", "else", "finally", "onleave", "}", ")", ",", ";", "&", "|"]

    "="   shift, and go to state 167
    "in"  shift, and go to state 168
    "!"   shift, and go to state 218
    "&&"  shift, and go to state 170
    "||"  shift, and go to state 171

    $default  reduce using rule 220 (exp.opt)


state 117

   81 stmt: "return" exp.opt .

    $default  reduce using rule 81 (stmt)


state 118

   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   37 exp: . "class" lvalue protos block
   38    | . "package" lvalue protos block
   52 routine: . "closure"
   53        | . "function"
   62 exp: . exp "=" exp
   63    | . exp "=" exp modifiers
   64    | . lvalue "+=" exp
   65    | . lvalue "-=" exp
   66    | . lvalue "*=" exp
   67    | . lvalue "/=" exp
   68    | . lvalue "^=" exp
   69    | . lvalue "%=" exp
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
   78 stmt: "stopif" "(" . exp ")" stmt
  118 primary-exp: . block
  119            | . "do" "(" exp ")" block
  120 detach: . "detach"
  121       | . "disown"
  122 primary-exp: . "assert" "(" exp ")"
  123            | . "assert" "{" claims "}"
  124            | . detach "(" exp ")"
  125            | . detach block
  126            | . "isdef" "(" k1_id ")"
  127            | . "watch" "(" exp ")"
  128 lvalue: . id
  129       | . primary-exp "." id
  130       | . primary-exp "." "*"
  131 primary-exp: . "&" id
  132            | . primary-exp "." "&" id
  133 id: . "identifier"
  134 bitor-exp: . "var" bitor-exp
  135          | . "const" "var" bitor-exp
  136 primary-exp: . lvalue
  137            | . lvalue args
  138 new: . "new" "identifier" args.opt
  139 bitor-exp: . new
  140 id: . "new"
  141 primary-exp: . routine formals block
  142 float-exp: . "float"
  143 duration: . "duration"
  144         | . duration "duration"
  150 dictionary: . "[" assocs "]"
  154 tuple: . "(" tuple.exps ")"
  159 literal-exp: . float-exp
  160            | . "angle"
  161            | . duration
  162            | . string
  163            | . "[" exps "]"
  164            | . "[<" tuple.exps ">]"
  165            | . "<" bitor-exps ">"
  166            | . dictionary
  167            | . tuple
  168 string: . "string"
  169       | . string "string"
  170 literal-exp: . "__HERE__"
  176 lvalue: . primary-exp "[" exps "]"
  177 literal-exp: . "this"
  178            | . "call"
  179 primary-exp: . literal-exp
  180            | . "(" exp ")"
  181            | . "(" error ")"
  182            | . primary-exp "**" primary-exp
  183 unary-exp: . primary-exp
  184          | . "--" lvalue
  185          | . "++" lvalue
  186          | . "+" unary-exp
  187          | . "-" unary-exp
  188          | . "!" unary-exp
  189          | . "compl" unary-exp
  190 bitor-exp: . unary-exp
  191          | . bitor-exp "+" bitor-exp
  192          | . bitor-exp "-" bitor-exp
  193          | . bitor-exp "*" bitor-exp
  194          | . bitor-exp "/" bitor-exp
  195          | . bitor-exp "%" bitor-exp
  196          | . bitor-exp "^" bitor-exp
  197          | . bitor-exp "<<" bitor-exp
  198          | . bitor-exp "bitand" bitor-exp
  199          | . bitor-exp "bitor" bitor-exp
  200          | . bitor-exp ">>" bitor-exp
  211 rel-exp: . bitor-exp rel-ops
  214 exp: . rel-exp
  215    | . exp "&&" exp
  216    | . exp "||" exp
  217    | . exp "in" exp
  218    | . exp "!" "in" exp
  222    | . "%unscope:" unsigned
  223 primary-exp: . "%exp:" unsigned
  224 lvalue: . "%lvalue:" unsigned
  225       | . "%id:" unsigned
  226       | . primary-exp "." "%id:" unsigned
  227 primary-exp: . lvalue "(" "%exps:" unsigned ")"

    "__HERE__"    shift, and go to state 7
    "closure"     shift, and go to state 9
    "const"       shift, and go to state 10
    "function"    shift, and go to state 13
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "[<"          shift, and go to state 19
    "var"         shift, and go to state 26
    "watch"       shift, and go to state 28
    "&"           shift, and go to state 30
    "identifier"  shift, and go to state 36
    "class"       shift, and go to state 37
    "package"     shift, and go to state 38
    "--"          shift, and go to state 42
    "++"          shift, and go to state 43
    "do"          shift, and go to state 44
    "assert"      shift, and go to state 45
    "detach"      shift, and go to state 46
    "disown"      shift, and go to state 47
    "new"         shift, and go to state 48
    "angle"       shift, and go to state 49
    "duration"    shift, and go to state 50
    "float"       shift, and go to state 51
    "string"      shift, and go to state 52
    "call"        shift, and go to state 53
    "this"        shift, and go to state 54
    "!"           shift, and go to state 55
    "compl"       shift, and go to state 56
    "-"           shift, and go to state 57
    "+"           shift, and go to state 58
    "<"           shift, and go to state 59
    "%unscope:"   shift, and go to state 60
    "%exp:"       shift, and go to state 61
    "%lvalue:"    shift, and go to state 62
    "%id:"        shift, and go to state 63

    block        go to state 68
    exp          go to state 230
    routine      go to state 101
    primary-exp  go to state 102
    detach       go to state 72
    lvalue       go to state 73
    id           go to state 103
    bitor-exp    go to state 75
    new          go to state 76
    float-exp    go to state 77
    duration     go to state 78
    dictionary   go to state 79
    tuple        go to state 80
    literal-exp  go to state 81
    string       go to state 82
    unary-exp    go to state 83
    rel-exp      go to state 84


state 119

   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   37 exp: . "class" lvalue protos block
   38    | . "package" lvalue protos block
   52 routine: . "closure"
   53        | . "function"
   62 exp: . exp "=" exp
   63    | . exp "=" exp modifiers
   64    | . lvalue "+=" exp
   65    | . lvalue "-=" exp
   66    | . lvalue "*=" exp
   67    | . lvalue "/=" exp
   68    | . lvalue "^=" exp
   69    | . lvalue "%=" exp
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
   79 stmt: "switch" "(" . exp ")" "{" cases default.opt "}"
  118 primary-exp: . block
  119            | . "do" "(" exp ")" block
  120 detach: . "detach"
  121       | . "disown"
  122 primary-exp: . "assert" "(" exp ")"
  123            | . "assert" "{" claims "}"
  124            | . detach "(" exp ")"
  125            | . detach block
  126            | . "isdef" "(" k1_id ")"
  127            | . "watch" "(" exp ")"
  128 lvalue: . id
  129       | . primary-exp "." id
  130       | . primary-exp "." "*"
  131 primary-exp: . "&" id
  132            | . primary-exp "." "&" id
  133 id: . "identifier"
  134 bitor-exp: . "var" bitor-exp
  135          | . "const" "var" bitor-exp
  136 primary-exp: . lvalue
  137            | . lvalue args
  138 new: . "new" "identifier" args.opt
  139 bitor-exp: . new
  140 id: . "new"
  141 primary-exp: . routine formals block
  142 float-exp: . "float"
  143 duration: . "duration"
  144         | . duration "duration"
  150 dictionary: . "[" assocs "]"
  154 tuple: . "(" tuple.exps ")"
  159 literal-exp: . float-exp
  160            | . "angle"
  161            | . duration
  162            | . string
  163            | . "[" exps "]"
  164            | . "[<" tuple.exps ">]"
  165            | . "<" bitor-exps ">"
  166            | . dictionary
  167            | . tuple
  168 string: . "string"
  169       | . string "string"
  170 literal-exp: . "__HERE__"
  176 lvalue: . primary-exp "[" exps "]"
  177 literal-exp: . "this"
  178            | . "call"
  179 primary-exp: . literal-exp
  180            | . "(" exp ")"
  181            | . "(" error ")"
  182            | . primary-exp "**" primary-exp
  183 unary-exp: . primary-exp
  184          | . "--" lvalue
  185          | . "++" lvalue
  186          | . "+" unary-exp
  187          | . "-" unary-exp
  188          | . "!" unary-exp
  189          | . "compl" unary-exp
  190 bitor-exp: . unary-exp
  191          | . bitor-exp "+" bitor-exp
  192          | . bitor-exp "-" bitor-exp
  193          | . bitor-exp "*" bitor-exp
  194          | . bitor-exp "/" bitor-exp
  195          | . bitor-exp "%" bitor-exp
  196          | . bitor-exp "^" bitor-exp
  197          | . bitor-exp "<<" bitor-exp
  198          | . bitor-exp "bitand" bitor-exp
  199          | . bitor-exp "bitor" bitor-exp
  200          | . bitor-exp ">>" bitor-exp
  211 rel-exp: . bitor-exp rel-ops
  214 exp: . rel-exp
  215    | . exp "&&" exp
  216    | . exp "||" exp
  217    | . exp "in" exp
  218    | . exp "!" "in" exp
  222    | . "%unscope:" unsigned
  223 primary-exp: . "%exp:" unsigned
  224 lvalue: . "%lvalue:" unsigned
  225       | . "%id:" unsigned
  226       | . primary-exp "." "%id:" unsigned
  227 primary-exp: . lvalue "(" "%exps:" unsigned ")"

    "__HERE__"    shift, and go to state 7
    "closure"     shift, and go to state 9
    "const"       shift, and go to state 10
    "function"    shift, and go to state 13
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "[<"          shift, and go to state 19
    "var"         shift, and go to state 26
    "watch"       shift, and go to state 28
    "&"           shift, and go to state 30
    "identifier"  shift, and go to state 36
    "class"       shift, and go to state 37
    "package"     shift, and go to state 38
    "--"          shift, and go to state 42
    "++"          shift, and go to state 43
    "do"          shift, and go to state 44
    "assert"      shift, and go to state 45
    "detach"      shift, and go to state 46
    "disown"      shift, and go to state 47
    "new"         shift, and go to state 48
    "angle"       shift, and go to state 49
    "duration"    shift, and go to state 50
    "float"       shift, and go to state 51
    "string"      shift, and go to state 52
    "call"        shift, and go to state 53
    "this"        shift, and go to state 54
    "!"           shift, and go to state 55
    "compl"       shift, and go to state 56
    "-"           shift, and go to state 57
    "+"           shift, and go to state 58
    "<"           shift, and go to state 59
    "%unscope:"   shift, and go to state 60
    "%exp:"       shift, and go to state 61
    "%lvalue:"    shift, and go to state 62
    "%id:"        shift, and go to state 63

    block        go to state 68
    exp          go to state 231
    routine      go to state 101
    primary-exp  go to state 102
    detach       go to state 72
    lvalue       go to state 73
    id           go to state 103
    bitor-exp    go to state 75
    new          go to state 76
    float-exp    go to state 77
    duration     go to state 78
    dictionary   go to state 79
    tuple        go to state 80
    literal-exp  go to state 81
    string       go to state 82
    unary-exp    go to state 83
    rel-exp      go to state 84


state 120

  110 stmt: "throw" exp.opt .

    $default  reduce using rule 110 (stmt)


state 121

   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   37 exp: . "class" lvalue protos block
   38    | . "package" lvalue protos block
   52 routine: . "closure"
   53        | . "function"
   62 exp: . exp "=" exp
   63    | . exp "=" exp modifiers
   64    | . lvalue "+=" exp
   65    | . lvalue "-=" exp
   66    | . lvalue "*=" exp
   67    | . lvalue "/=" exp
   68    | . lvalue "^=" exp
   69    | . lvalue "%=" exp
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
   80 stmt: "timeout" "(" . exp ")" stmt catch.opt else.opt finally.opt
  118 primary-exp: . block
  119            | . "do" "(" exp ")" block
  120 detach: . "detach"
  121       | . "disown"
  122 primary-exp: . "assert" "(" exp ")"
  123            | . "assert" "{" claims "}"
  124            | . detach "(" exp ")"
  125            | . detach block
  126            | . "isdef" "(" k1_id ")"
  127            | . "watch" "(" exp ")"
  128 lvalue: . id
  129       | . primary-exp "." id
  130       | . primary-exp "." "*"
  131 primary-exp: . "&" id
  132            | . primary-exp "." "&" id
  133 id: . "identifier"
  134 bitor-exp: . "var" bitor-exp
  135          | . "const" "var" bitor-exp
  136 primary-exp: . lvalue
  137            | . lvalue args
  138 new: . "new" "identifier" args.opt
  139 bitor-exp: . new
  140 id: . "new"
  141 primary-exp: . routine formals block
  142 float-exp: . "float"
  143 duration: . "duration"
  144         | . duration "duration"
  150 dictionary: . "[" assocs "]"
  154 tuple: . "(" tuple.exps ")"
  159 literal-exp: . float-exp
  160            | . "angle"
  161            | . duration
  162            | . string
  163            | . "[" exps "]"
  164            | . "[<" tuple.exps ">]"
  165            | . "<" bitor-exps ">"
  166            | . dictionary
  167            | . tuple
  168 string: . "string"
  169       | . string "string"
  170 literal-exp: . "__HERE__"
  176 lvalue: . primary-exp "[" exps "]"
  177 literal-exp: . "this"
  178            | . "call"
  179 primary-exp: . literal-exp
  180            | . "(" exp ")"
  181            | . "(" error ")"
  182            | . primary-exp "**" primary-exp
  183 unary-exp: . primary-exp
  184          | . "--" lvalue
  185          | . "++" lvalue
  186          | . "+" unary-exp
  187          | . "-" unary-exp
  188          | . "!" unary-exp
  189          | . "compl" unary-exp
  190 bitor-exp: . unary-exp
  191          | . bitor-exp "+" bitor-exp
  192          | . bitor-exp "-" bitor-exp
  193          | . bitor-exp "*" bitor-exp
  194          | . bitor-exp "/" bitor-exp
  195          | . bitor-exp "%" bitor-exp
  196          | . bitor-exp "^" bitor-exp
  197          | . bitor-exp "<<" bitor-exp
  198          | . bitor-exp "bitand" bitor-exp
  199          | . bitor-exp "bitor" bitor-exp
  200          | . bitor-exp ">>" bitor-exp
  211 rel-exp: . bitor-exp rel-ops
  214 exp: . rel-exp
  215    | . exp "&&" exp
  216    | . exp "||" exp
  217    | . exp "in" exp
  218    | . exp "!" "in" exp
  222    | . "%unscope:" unsigned
  223 primary-exp: . "%exp:" unsigned
  224 lvalue: . "%lvalue:" unsigned
  225       | . "%id:" unsigned
  226       | . primary-exp "." "%id:" unsigned
  227 primary-exp: . lvalue "(" "%exps:" unsigned ")"

    "__HERE__"    shift, and go to state 7
    "closure"     shift, and go to state 9
    "const"       shift, and go to state 10
    "function"    shift, and go to state 13
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "[<"          shift, and go to state 19
    "var"         shift, and go to state 26
    "watch"       shift, and go to state 28
    "&"           shift, and go to state 30
    "identifier"  shift, and go to state 36
    "class"       shift, and go to state 37
    "package"     shift, and go to state 38
    "--"          shift, and go to state 42
    "++"          shift, and go to state 43
    "do"          shift, and go to state 44
    "assert"      shift, and go to state 45
    "detach"      shift, and go to state 46
    "disown"      shift, and go to state 47
    "new"         shift, and go to state 48
    "angle"       shift, and go to state 49
    "duration"    shift, and go to state 50
    "float"       shift, and go to state 51
    "string"      shift, and go to state 52
    "call"        shift, and go to state 53
    "this"        shift, and go to state 54
    "!"           shift, and go to state 55
    "compl"       shift, and go to state 56
    "-"           shift, and go to state 57
    "+"           shift, and go to state 58
    "<"           shift, and go to state 59
    "%unscope:"   shift, and go to state 60
    "%exp:"       shift, and go to state 61
    "%lvalue:"    shift, and go to state 62
    "%id:"        shift, and go to state 63

    block        go to state 68
    exp          go to state 232
    routine      go to state 101
    primary-exp  go to state 102
    detach       go to state 72
    lvalue       go to state 73
    id           go to state 103
    bitor-exp    go to state 75
    new          go to state 76
    float-exp    go to state 77
    duration     go to state 78
    dictionary   go to state 79
    tuple        go to state 80
    literal-exp  go to state 81
    string       go to state 82
    unary-exp    go to state 83
    rel-exp      go to state 84


state 122

   97 catches.1: . catch
   98          | . catches.1 catch
  103 catch: . "catch" match.opt block
  108 stmt: "try" block . catches.1 else.opt finally.opt
  109     | "try" block . "finally" block

    "catch"    shift, and go to state 233
    "finally"  shift, and go to state 234

    catches.1  go to state 235
    catch      go to state 236


state 123

   70 primary-exp: lvalue . "--"
   71            | lvalue . "++"
   72            | lvalue . "->" id
  136            | lvalue .  ["end of command", "=", "case", "catch", ":", "default", "else", "finally", "if", "in", "{", "[", ">]", "onleave", ".", "}", "]", ")", "~", ",", ";", "&", "|", "identifier", "=>", "?", "!", "bitand", "bitor", "^", ">>", "<<", "-", "%", "+", "/", "*", "**", "=~=", "==", "===", ">=", ">", "<=", "<", "!=", "!==", "~=", "&&", "||"]
  137            | lvalue . args
  227            | lvalue . "(" "%exps:" unsigned ")"
  237 args: . "(" exps ")"

    "("   shift, and go to state 183
    "--"  shift, and go to state 190
    "++"  shift, and go to state 191
    "->"  shift, and go to state 192

    $default  reduce using rule 136 (primary-exp)

    args  go to state 193


state 124

  134 bitor-exp: "var" bitor-exp .  ["end of command", "=", "case", "catch", ":", "default", "else", "finally", "if", "in", "{", ">]", "onleave", "}", "]", ")", "~", ",", ";", "&", "|", "identifier", "=>", "?", "!", "=~=", "==", "===", ">=", ">", "<=", "<", "!=", "!==", "~=", "&&", "||"]
  191          | bitor-exp . "+" bitor-exp
  192          | bitor-exp . "-" bitor-exp
  193          | bitor-exp . "*" bitor-exp
  194          | bitor-exp . "/" bitor-exp
  195          | bitor-exp . "%" bitor-exp
  196          | bitor-exp . "^" bitor-exp
  197          | bitor-exp . "<<" bitor-exp
  198          | bitor-exp . "bitand" bitor-exp
  199          | bitor-exp . "bitor" bitor-exp
  200          | bitor-exp . ">>" bitor-exp

    "bitand"  shift, and go to state 195
    "bitor"   shift, and go to state 196
    "^"       shift, and go to state 197
    ">>"      shift, and go to state 198
    "<<"      shift, and go to state 199
    "-"       shift, and go to state 200
    "%"       shift, and go to state 201
    "+"       shift, and go to state 202
    "/"       shift, and go to state 203
    "*"       shift, and go to state 204

    $default  reduce using rule 134 (bitor-exp)

    Conflict between rule 134 and token "bitand" resolved as shift ("var" < "bitand").
    Conflict between rule 134 and token "bitor" resolved as shift ("var" < "bitor").
    Conflict between rule 134 and token "^" resolved as shift ("var" < "^").
    Conflict between rule 134 and token ">>" resolved as shift ("var" < ">>").
    Conflict between rule 134 and token "<<" resolved as shift ("var" < "<<").
    Conflict between rule 134 and token "-" resolved as shift ("var" < "-").
    Conflict between rule 134 and token "%" resolved as shift ("var" < "%").
    Conflict between rule 134 and token "+" resolved as shift ("var" < "+").
    Conflict between rule 134 and token "/" resolved as shift ("var" < "/").
    Conflict between rule 134 and token "*" resolved as shift ("var" < "*").


state 125

   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   37 exp: . "class" lvalue protos block
   38    | . "package" lvalue protos block
   52 routine: . "closure"
   53        | . "function"
   62 exp: . exp "=" exp
   63    | . exp "=" exp modifiers
   64    | . lvalue "+=" exp
   65    | . lvalue "-=" exp
   66    | . lvalue "*=" exp
   67    | . lvalue "/=" exp
   68    | . lvalue "^=" exp
   69    | . lvalue "%=" exp
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
   84 stmt: "waituntil" "(" . exp tilda.opt ")"
   85     | "waituntil" "(" . event_match ")"
  118 primary-exp: . block
  119            | . "do" "(" exp ")" block
  120 detach: . "detach"
  121       | . "disown"
  122 primary-exp: . "assert" "(" exp ")"
  123            | . "assert" "{" claims "}"
  124            | . detach "(" exp ")"
  125            | . detach block
  126            | . "isdef" "(" k1_id ")"
  127            | . "watch" "(" exp ")"
  128 lvalue: . id
  129       | . primary-exp "." id
  130       | . primary-exp "." "*"
  131 primary-exp: . "&" id
  132            | . primary-exp "." "&" id
  133 id: . "identifier"
  134 bitor-exp: . "var" bitor-exp
  135          | . "const" "var" bitor-exp
  136 primary-exp: . lvalue
  137            | . lvalue args
  138 new: . "new" "identifier" args.opt
  139 bitor-exp: . new
  140 id: . "new"
  141 primary-exp: . routine formals block
  142 float-exp: . "float"
  143 duration: . "duration"
  144         | . duration "duration"
  150 dictionary: . "[" assocs "]"
  154 tuple: . "(" tuple.exps ")"
  159 literal-exp: . float-exp
  160            | . "angle"
  161            | . duration
  162            | . string
  163            | . "[" exps "]"
  164            | . "[<" tuple.exps ">]"
  165            | . "<" bitor-exps ">"
  166            | . dictionary
  167            | . tuple
  168 string: . "string"
  169       | . string "string"
  170 literal-exp: . "__HERE__"
  171 event_match: . exp "?" args.opt tilda.opt guard.opt
  176 lvalue: . primary-exp "[" exps "]"
  177 literal-exp: . "this"
  178            | . "call"
  179 primary-exp: . literal-exp
  180            | . "(" exp ")"
  181            | . "(" error ")"
  182            | . primary-exp "**" primary-exp
  183 unary-exp: . primary-exp
  184          | . "--" lvalue
  185          | . "++" lvalue
  186          | . "+" unary-exp
  187          | . "-" unary-exp
  188          | . "!" unary-exp
  189          | . "compl" unary-exp
  190 bitor-exp: . unary-exp
  191          | . bitor-exp "+" bitor-exp
  192          | . bitor-exp "-" bitor-exp
  193          | . bitor-exp "*" bitor-exp
  194          | . bitor-exp "/" bitor-exp
  195          | . bitor-exp "%" bitor-exp
  196          | . bitor-exp "^" bitor-exp
  197          | . bitor-exp "<<" bitor-exp
  198          | . bitor-exp "bitand" bitor-exp
  199          | . bitor-exp "bitor" bitor-exp
  200          | . bitor-exp ">>" bitor-exp
  211 rel-exp: . bitor-exp rel-ops
  214 exp: . rel-exp
  215    | . exp "&&" exp
  216    | . exp "||" exp
  217    | . exp "in" exp
  218    | . exp "!" "in" exp
  222    | . "%unscope:" unsigned
  223 primary-exp: . "%exp:" unsigned
  224 lvalue: . "%lvalue:" unsigned
  225       | . "%id:" unsigned
  226       | . primary-exp "." "%id:" unsigned
  227 primary-exp: . lvalue "(" "%exps:" unsigned ")"

    "__HERE__"    shift, and go to state 7
    "closure"     shift, and go to state 9
    "const"       shift, and go to state 10
    "function"    shift, and go to state 13
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "[<"          shift, and go to state 19
    "var"         shift, and go to state 26
    "watch"       shift, and go to state 28
    "&"           shift, and go to state 30
    "identifier"  shift, and go to state 36
    "class"       shift, and go to state 37
    "package"     shift, and go to state 38
    "--"          shift, and go to state 42
    "++"          shift, and go to state 43
    "do"          shift, and go to state 44
    "assert"      shift, and go to state 45
    "detach"      shift, and go to state 46
    "disown"      shift, and go to state 47
    "new"         shift, and go to state 48
    "angle"       shift, and go to state 49
    "duration"    shift, and go to state 50
    "float"       shift, and go to state 51
    "string"      shift, and go to state 52
    "call"        shift, and go to state 53
    "this"        shift, and go to state 54
    "!"           shift, and go to state 55
    "compl"       shift, and go to state 56
    "-"           shift, and go to state 57
    "+"           shift, and go to state 58
    "<"           shift, and go to state 59
    "%unscope:"   shift, and go to state 60
    "%exp:"       shift, and go to state 61
    "%lvalue:"    shift, and go to state 62
    "%id:"        shift, and go to state 63

    block        go to state 68
    exp          go to state 237
    routine      go to state 101
    primary-exp  go to state 102
    detach       go to state 72
    lvalue       go to state 73
    id           go to state 103
    bitor-exp    go to state 75
    new          go to state 76
    float-exp    go to state 77
    duration     go to state 78
    dictionary   go to state 79
    tuple        go to state 80
    literal-exp  go to state 81
    string       go to state 82
    event_match  go to state 238
    unary-exp    go to state 83
    rel-exp      go to state 84


state 126

   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   37 exp: . "class" lvalue protos block
   38    | . "package" lvalue protos block
   52 routine: . "closure"
   53        | . "function"
   62 exp: . exp "=" exp
   63    | . exp "=" exp modifiers
   64    | . lvalue "+=" exp
   65    | . lvalue "-=" exp
   66    | . lvalue "*=" exp
   67    | . lvalue "/=" exp
   68    | . lvalue "^=" exp
   69    | . lvalue "%=" exp
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
  118            | . block
  119            | . "do" "(" exp ")" block
  120 detach: . "detach"
  121       | . "disown"
  122 primary-exp: . "assert" "(" exp ")"
  123            | . "assert" "{" claims "}"
  124            | . detach "(" exp ")"
  125            | . detach block
  126            | . "isdef" "(" k1_id ")"
  127            | . "watch" "(" exp ")"
  127            | "watch" "(" . exp ")"
  128 lvalue: . id
  129       | . primary-exp "." id
  130       | . primary-exp "." "*"
  131 primary-exp: . "&" id
  132            | . primary-exp "." "&" id
  133 id: . "identifier"
  134 bitor-exp: . "var" bitor-exp
  135          | . "const" "var" bitor-exp
  136 primary-exp: . lvalue
  137            | . lvalue args
  138 new: . "new" "identifier" args.opt
  139 bitor-exp: . new
  140 id: . "new"
  141 primary-exp: . routine formals block
  142 float-exp: . "float"
  143 duration: . "duration"
  144         | . duration "duration"
  150 dictionary: . "[" assocs "]"
  154 tuple: . "(" tuple.exps ")"
  159 literal-exp: . float-exp
  160            | . "angle"
  161            | . duration
  162            | . string
  163            | . "[" exps "]"
  164            | . "[<" tuple.exps ">]"
  165            | . "<" bitor-exps ">"
  166            | . dictionary
  167            | . tuple
  168 string: . "string"
  169       | . string "string"
  170 literal-exp: . "__HERE__"
  176 lvalue: . primary-exp "[" exps "]"
  177 literal-exp: . "this"
  178            | . "call"
  179 primary-exp: . literal-exp
  180            | . "(" exp ")"
  181            | . "(" error ")"
  182            | . primary-exp "**" primary-exp
  183 unary-exp: . primary-exp
  184          | . "--" lvalue
  185          | . "++" lvalue
  186          | . "+" unary-exp
  187          | . "-" unary-exp
  188          | . "!" unary-exp
  189          | . "compl" unary-exp
  190 bitor-exp: . unary-exp
  191          | . bitor-exp "+" bitor-exp
  192          | . bitor-exp "-" bitor-exp
  193          | . bitor-exp "*" bitor-exp
  194          | . bitor-exp "/" bitor-exp
  195          | . bitor-exp "%" bitor-exp
  196          | . bitor-exp "^" bitor-exp
  197          | . bitor-exp "<<" bitor-exp
  198          | . bitor-exp "bitand" bitor-exp
  199          | . bitor-exp "bitor" bitor-exp
  200          | . bitor-exp ">>" bitor-exp
  211 rel-exp: . bitor-exp rel-ops
  214 exp: . rel-exp
  215    | . exp "&&" exp
  216    | . exp "||" exp
  217    | . exp "in" exp
  218    | . exp "!" "in" exp
  222    | . "%unscope:" unsigned
  223 primary-exp: . "%exp:" unsigned
  224 lvalue: . "%lvalue:" unsigned
  225       | . "%id:" unsigned
  226       | . primary-exp "." "%id:" unsigned
  227 primary-exp: . lvalue "(" "%exps:" unsigned ")"

    "__HERE__"    shift, and go to state 7
    "closure"     shift, and go to state 9
    "const"       shift, and go to state 10
    "function"    shift, and go to state 13
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "[<"          shift, and go to state 19
    "var"         shift, and go to state 26
    "watch"       shift, and go to state 28
    "&"           shift, and go to state 30
    "identifier"  shift, and go to state 36
    "class"       shift, and go to state 37
    "package"     shift, and go to state 38
    "--"          shift, and go to state 42
    "++"          shift, and go to state 43
    "do"          shift, and go to state 44
    "assert"      shift, and go to state 45
    "detach"      shift, and go to state 46
    "disown"      shift, and go to state 47
    "new"         shift, and go to state 48
    "angle"       shift, and go to state 49
    "duration"    shift, and go to state 50
    "float"       shift, and go to state 51
    "string"      shift, and go to state 52
    "call"        shift, and go to state 53
    "this"        shift, and go to state 54
    "!"           shift, and go to state 55
    "compl"       shift, and go to state 56
    "-"           shift, and go to state 57
    "+"           shift, and go to state 58
    "<"           shift, and go to state 59
    "%unscope:"   shift, and go to state 60
    "%exp:"       shift, and go to state 61
    "%lvalue:"    shift, and go to state 62
    "%id:"        shift, and go to state 63

    block        go to state 68
    exp          go to state 239
    routine      go to state 101
    primary-exp  go to state 102
    detach       go to state 72
    lvalue       go to state 73
    id           go to state 103
    bitor-exp    go to state 75
    new          go to state 76
    float-exp    go to state 77
    duration     go to state 78
    dictionary   go to state 79
    tuple        go to state 80
    literal-exp  go to state 81
    string       go to state 82
    unary-exp    go to state 83
    rel-exp      go to state 84


state 127

   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   37 exp: . "class" lvalue protos block
   38    | . "package" lvalue protos block
   52 routine: . "closure"
   53        | . "function"
   62 exp: . exp "=" exp
   63    | . exp "=" exp modifiers
   64    | . lvalue "+=" exp
   65    | . lvalue "-=" exp
   66    | . lvalue "*=" exp
   67    | . lvalue "/=" exp
   68    | . lvalue "^=" exp
   69    | . lvalue "%=" exp
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
   86 stmt: "whenever" "(" . exp tilda.opt ")" stmt else.opt
   87     | "whenever" "(" . event_match ")" stmt else.opt
  118 primary-exp: . block
  119            | . "do" "(" exp ")" block
  120 detach: . "detach"
  121       | . "disown"
  122 primary-exp: . "assert" "(" exp ")"
  123            | . "assert" "{" claims "}"
  124            | . detach "(" exp ")"
  125            | . detach block
  126            | . "isdef" "(" k1_id ")"
  127            | . "watch" "(" exp ")"
  128 lvalue: . id
  129       | . primary-exp "." id
  130       | . primary-exp "." "*"
  131 primary-exp: . "&" id
  132            | . primary-exp "." "&" id
  133 id: . "identifier"
  134 bitor-exp: . "var" bitor-exp
  135          | . "const" "var" bitor-exp
  136 primary-exp: . lvalue
  137            | . lvalue args
  138 new: . "new" "identifier" args.opt
  139 bitor-exp: . new
  140 id: . "new"
  141 primary-exp: . routine formals block
  142 float-exp: . "float"
  143 duration: . "duration"
  144         | . duration "duration"
  150 dictionary: . "[" assocs "]"
  154 tuple: . "(" tuple.exps ")"
  159 literal-exp: . float-exp
  160            | . "angle"
  161            | . duration
  162            | . string
  163            | . "[" exps "]"
  164            | . "[<" tuple.exps ">]"
  165            | . "<" bitor-exps ">"
  166            | . dictionary
  167            | . tuple
  168 string: . "string"
  169       | . string "string"
  170 literal-exp: . "__HERE__"
  171 event_match: . exp "?" args.opt tilda.opt guard.opt
  176 lvalue: . primary-exp "[" exps "]"
  177 literal-exp: . "this"
  178            | . "call"
  179 primary-exp: . literal-exp
  180            | . "(" exp ")"
  181            | . "(" error ")"
  182            | . primary-exp "**" primary-exp
  183 unary-exp: . primary-exp
  184          | . "--" lvalue
  185          | . "++" lvalue
  186          | . "+" unary-exp
  187          | . "-" unary-exp
  188          | . "!" unary-exp
  189          | . "compl" unary-exp
  190 bitor-exp: . unary-exp
  191          | . bitor-exp "+" bitor-exp
  192          | . bitor-exp "-" bitor-exp
  193          | . bitor-exp "*" bitor-exp
  194          | . bitor-exp "/" bitor-exp
  195          | . bitor-exp "%" bitor-exp
  196          | . bitor-exp "^" bitor-exp
  197          | . bitor-exp "<<" bitor-exp
  198          | . bitor-exp "bitand" bitor-exp
  199          | . bitor-exp "bitor" bitor-exp
  200          | . bitor-exp ">>" bitor-exp
  211 rel-exp: . bitor-exp rel-ops
  214 exp: . rel-exp
  215    | . exp "&&" exp
  216    | . exp "||" exp
  217    | . exp "in" exp
  218    | . exp "!" "in" exp
  222    | . "%unscope:" unsigned
  223 primary-exp: . "%exp:" unsigned
  224 lvalue: . "%lvalue:" unsigned
  225       | . "%id:" unsigned
  226       | . primary-exp "." "%id:" unsigned
  227 primary-exp: . lvalue "(" "%exps:" unsigned ")"

    "__HERE__"    shift, and go to state 7
    "closure"     shift, and go to state 9
    "const"       shift, and go to state 10
    "function"    shift, and go to state 13
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "[<"          shift, and go to state 19
    "var"         shift, and go to state 26
    "watch"       shift, and go to state 28
    "&"           shift, and go to state 30
    "identifier"  shift, and go to state 36
    "class"       shift, and go to state 37
    "package"     shift, and go to state 38
    "--"          shift, and go to state 42
    "++"          shift, and go to state 43
    "do"          shift, and go to state 44
    "assert"      shift, and go to state 45
    "detach"      shift, and go to state 46
    "disown"      shift, and go to state 47
    "new"         shift, and go to state 48
    "angle"       shift, and go to state 49
    "duration"    shift, and go to state 50
    "float"       shift, and go to state 51
    "string"      shift, and go to state 52
    "call"        shift, and go to state 53
    "this"        shift, and go to state 54
    "!"           shift, and go to state 55
    "compl"       shift, and go to state 56
    "-"           shift, and go to state 57
    "+"           shift, and go to state 58
    "<"           shift, and go to state 59
    "%unscope:"   shift, and go to state 60
    "%exp:"       shift, and go to state 61
    "%lvalue:"    shift, and go to state 62
    "%id:"        shift, and go to state 63

    block        go to state 68
    exp          go to state 240
    routine      go to state 101
    primary-exp  go to state 102
    detach       go to state 72
    lvalue       go to state 73
    id           go to state 103
    bitor-exp    go to state 75
    new          go to state 76
    float-exp    go to state 77
    duration     go to state 78
    dictionary   go to state 79
    tuple        go to state 80
    literal-exp  go to state 81
    string       go to state 82
    event_match  go to state 241
    unary-exp    go to state 83
    rel-exp      go to state 84


state 128

  140 id: "new" .

    $default  reduce using rule 140 (id)


state 129

  131 primary-exp: "&" id .

    $default  reduce using rule 131 (primary-exp)


state 130

   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   37 exp: . "class" lvalue protos block
   38    | . "package" lvalue protos block
   52 routine: . "closure"
   53        | . "function"
   62 exp: . exp "=" exp
   63    | . exp "=" exp modifiers
   64    | . lvalue "+=" exp
   65    | . lvalue "-=" exp
   66    | . lvalue "*=" exp
   67    | . lvalue "/=" exp
   68    | . lvalue "^=" exp
   69    | . lvalue "%=" exp
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
   75 stmt: "every" "(" . exp ")" stmt
  118 primary-exp: . block
  119            | . "do" "(" exp ")" block
  120 detach: . "detach"
  121       | . "disown"
  122 primary-exp: . "assert" "(" exp ")"
  123            | . "assert" "{" claims "}"
  124            | . detach "(" exp ")"
  125            | . detach block
  126            | . "isdef" "(" k1_id ")"
  127            | . "watch" "(" exp ")"
  128 lvalue: . id
  129       | . primary-exp "." id
  130       | . primary-exp "." "*"
  131 primary-exp: . "&" id
  132            | . primary-exp "." "&" id
  133 id: . "identifier"
  134 bitor-exp: . "var" bitor-exp
  135          | . "const" "var" bitor-exp
  136 primary-exp: . lvalue
  137            | . lvalue args
  138 new: . "new" "identifier" args.opt
  139 bitor-exp: . new
  140 id: . "new"
  141 primary-exp: . routine formals block
  142 float-exp: . "float"
  143 duration: . "duration"
  144         | . duration "duration"
  150 dictionary: . "[" assocs "]"
  154 tuple: . "(" tuple.exps ")"
  159 literal-exp: . float-exp
  160            | . "angle"
  161            | . duration
  162            | . string
  163            | . "[" exps "]"
  164            | . "[<" tuple.exps ">]"
  165            | . "<" bitor-exps ">"
  166            | . dictionary
  167            | . tuple
  168 string: . "string"
  169       | . string "string"
  170 literal-exp: . "__HERE__"
  176 lvalue: . primary-exp "[" exps "]"
  177 literal-exp: . "this"
  178            | . "call"
  179 primary-exp: . literal-exp
  180            | . "(" exp ")"
  181            | . "(" error ")"
  182            | . primary-exp "**" primary-exp
  183 unary-exp: . primary-exp
  184          | . "--" lvalue
  185          | . "++" lvalue
  186          | . "+" unary-exp
  187          | . "-" unary-exp
  188          | . "!" unary-exp
  189          | . "compl" unary-exp
  190 bitor-exp: . unary-exp
  191          | . bitor-exp "+" bitor-exp
  192          | . bitor-exp "-" bitor-exp
  193          | . bitor-exp "*" bitor-exp
  194          | . bitor-exp "/" bitor-exp
  195          | . bitor-exp "%" bitor-exp
  196          | . bitor-exp "^" bitor-exp
  197          | . bitor-exp "<<" bitor-exp
  198          | . bitor-exp "bitand" bitor-exp
  199          | . bitor-exp "bitor" bitor-exp
  200          | . bitor-exp ">>" bitor-exp
  211 rel-exp: . bitor-exp rel-ops
  214 exp: . rel-exp
  215    | . exp "&&" exp
  216    | . exp "||" exp
  217    | . exp "in" exp
  218    | . exp "!" "in" exp
  222    | . "%unscope:" unsigned
  223 primary-exp: . "%exp:" unsigned
  224 lvalue: . "%lvalue:" unsigned
  225       | . "%id:" unsigned
  226       | . primary-exp "." "%id:" unsigned
  227 primary-exp: . lvalue "(" "%exps:" unsigned ")"

    "__HERE__"    shift, and go to state 7
    "closure"     shift, and go to state 9
    "const"       shift, and go to state 10
    "function"    shift, and go to state 13
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "[<"          shift, and go to state 19
    "var"         shift, and go to state 26
    "watch"       shift, and go to state 28
    "&"           shift, and go to state 30
    "identifier"  shift, and go to state 36
    "class"       shift, and go to state 37
    "package"     shift, and go to state 38
    "--"          shift, and go to state 42
    "++"          shift, and go to state 43
    "do"          shift, and go to state 44
    "assert"      shift, and go to state 45
    "detach"      shift, and go to state 46
    "disown"      shift, and go to state 47
    "new"         shift, and go to state 48
    "angle"       shift, and go to state 49
    "duration"    shift, and go to state 50
    "float"       shift, and go to state 51
    "string"      shift, and go to state 52
    "call"        shift, and go to state 53
    "this"        shift, and go to state 54
    "!"           shift, and go to state 55
    "compl"       shift, and go to state 56
    "-"           shift, and go to state 57
    "+"           shift, and go to state 58
    "<"           shift, and go to state 59
    "%unscope:"   shift, and go to state 60
    "%exp:"       shift, and go to state 61
    "%lvalue:"    shift, and go to state 62
    "%id:"        shift, and go to state 63

    block        go to state 68
    exp          go to state 242
    routine      go to state 101
    primary-exp  go to state 102
    detach       go to state 72
    lvalue       go to state 73
    id           go to state 103
    bitor-exp    go to state 75
    new          go to state 76
    float-exp    go to state 77
    duration     go to state 78
    dictionary   go to state 79
    tuple        go to state 80
    literal-exp  go to state 81
    string       go to state 82
    unary-exp    go to state 83
    rel-exp      go to state 84


state 131

   21 stmt.opt: .  [";"]
   22         | . stmt
   23 stmt: . primary-exp ":" stmt
   24     | . exp
   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   37 exp: . "class" lvalue protos block
   38    | . "package" lvalue protos block
   43 stmt: . "enum" id "{" id.0 "}"
   47     | . "external" "identifier" "identifier"
   48     | . "external" "var" "identifier" "." "identifier" from "identifier"
   49     | . "external" event_or_function "(" unsigned ")" "identifier" "." "identifier" from "identifier"
   50     | . "import" lvalue
   51     | . exp "!" args.opt tilda.opt
   52 routine: . "closure"
   53        | . "function"
   54 stmt: . routine k1_id formals block
   55     | . id id formals block
   62 exp: . exp "=" exp
   63    | . exp "=" exp modifiers
   64    | . lvalue "+=" exp
   65    | . lvalue "-=" exp
   66    | . lvalue "*=" exp
   67    | . lvalue "/=" exp
   68    | . lvalue "^=" exp
   69    | . lvalue "%=" exp
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
   73 stmt: . "at" identifiers "(" exp tilda.opt ")" stmt onleave.opt
   74     | . "at" identifiers "(" event_match ")" stmt onleave.opt
   75     | . "every" "(" exp ")" stmt
   76     | . "if" "(" stmts ")" stmt else.opt
   77     | . "freezeif" "(" exp ")" stmt
   78     | . "stopif" "(" exp ")" stmt
   79     | . "switch" "(" exp ")" "{" cases default.opt "}"
   80     | . "timeout" "(" exp ")" stmt catch.opt else.opt finally.opt
   81     | . "return" exp.opt
   82     | . "break"
   83     | . "continue"
   84     | . "waituntil" "(" exp tilda.opt ")"
   85     | . "waituntil" "(" event_match ")"
   86     | . "whenever" "(" exp tilda.opt ")" stmt else.opt
   87     | . "whenever" "(" event_match ")" stmt else.opt
  108     | . "try" block catches.1 else.opt finally.opt
  109     | . "try" block "finally" block
  110     | . "throw" exp.opt
  111     | . "loop" stmt
  112     | . "for" "(" exp ")" stmt
  112     | "for" "(" . exp ")" stmt
  113     | . "for" "(" stmt.opt ";" exp ";" stmt.opt ")" stmt
  113     | "for" "(" . stmt.opt ";" exp ";" stmt.opt ")" stmt
  114     | . "for" "(" "var" "identifier" in_or_colon exp ")" stmt
  114     | "for" "(" . "var" "identifier" in_or_colon exp ")" stmt
  115     | . "while" "(" exp ")" stmt
  118 primary-exp: . block
  119            | . "do" "(" exp ")" block
  120 detach: . "detach"
  121       | . "disown"
  122 primary-exp: . "assert" "(" exp ")"
  123            | . "assert" "{" claims "}"
  124            | . detach "(" exp ")"
  125            | . detach block
  126            | . "isdef" "(" k1_id ")"
  127            | . "watch" "(" exp ")"
  128 lvalue: . id
  129       | . primary-exp "." id
  130       | . primary-exp "." "*"
  131 primary-exp: . "&" id
  132            | . primary-exp "." "&" id
  133 id: . "identifier"
  134 bitor-exp: . "var" bitor-exp
  135          | . "const" "var" bitor-exp
  136 primary-exp: . lvalue
  137            | . lvalue args
  138 new: . "new" "identifier" args.opt
  139 bitor-exp: . new
  140 id: . "new"
  141 primary-exp: . routine formals block
  142 float-exp: . "float"
  143 duration: . "duration"
  144         | . duration "duration"
  150 dictionary: . "[" assocs "]"
  154 tuple: . "(" tuple.exps ")"
  159 literal-exp: . float-exp
  160            | . "angle"
  161            | . duration
  162            | . string
  163            | . "[" exps "]"
  164            | . "[<" tuple.exps ">]"
  165            | . "<" bitor-exps ">"
  166            | . dictionary
  167            | . tuple
  168 string: . "string"
  169       | . string "string"
  170 literal-exp: . "__HERE__"
  176 lvalue: . primary-exp "[" exps "]"
  177 literal-exp: . "this"
  178            | . "call"
  179 primary-exp: . literal-exp
  180            | . "(" exp ")"
  181            | . "(" error ")"
  182            | . primary-exp "**" primary-exp
  183 unary-exp: . primary-exp
  184          | . "--" lvalue
  185          | . "++" lvalue
  186          | . "+" unary-exp
  187          | . "-" unary-exp
  188          | . "!" unary-exp
  189          | . "compl" unary-exp
  190 bitor-exp: . unary-exp
  191          | . bitor-exp "+" bitor-exp
  192          | . bitor-exp "-" bitor-exp
  193          | . bitor-exp "*" bitor-exp
  194          | . bitor-exp "/" bitor-exp
  195          | . bitor-exp "%" bitor-exp
  196          | . bitor-exp "^" bitor-exp
  197          | . bitor-exp "<<" bitor-exp
  198          | . bitor-exp "bitand" bitor-exp
  199          | . bitor-exp "bitor" bitor-exp
  200          | . bitor-exp ">>" bitor-exp
  211 rel-exp: . bitor-exp rel-ops
  214 exp: . rel-exp
  215    | . exp "&&" exp
  216    | . exp "||" exp
  217    | . exp "in" exp
  218    | . exp "!" "in" exp
  222    | . "%unscope:" unsigned
  223 primary-exp: . "%exp:" unsigned
  224 lvalue: . "%lvalue:" unsigned
  225       | . "%id:" unsigned
  226       | . primary-exp "." "%id:" unsigned
  227 primary-exp: . lvalue "(" "%exps:" unsigned ")"

    "__HERE__"    shift, and go to state 7
    "break"       shift, and go to state 8
    "closure"     shift, and go to state 9
    "const"       shift, and go to state 10
    "continue"    shift, and go to state 11
    "freezeif"    shift, and go to state 12
    "function"    shift, and go to state 13
    "if"          shift, and go to state 14
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "[<"          shift, and go to state 19
    "return"      shift, and go to state 20
    "stopif"      shift, and go to state 21
    "switch"      shift, and go to state 22
    "throw"       shift, and go to state 23
    "timeout"     shift, and go to state 24
    "try"         shift, and go to state 25
    "var"         shift, and go to state 243
    "waituntil"   shift, and go to state 27
    "watch"       shift, and go to state 28
    "whenever"    shift, and go to state 29
    "&"           shift, and go to state 30
    "every"       shift, and go to state 31
    "for"         shift, and go to state 32
    "loop"        shift, and go to state 33
    "while"       shift, and go to state 34
    "at"          shift, and go to state 35
    "identifier"  shift, and go to state 36
    "class"       shift, and go to state 37
    "package"     shift, and go to state 38
    "enum"        shift, and go to state 39
    "external"    shift, and go to state 40
    "import"      shift, and go to state 41
    "--"          shift, and go to state 42
    "++"          shift, and go to state 43
    "do"          shift, and go to state 44
    "assert"      shift, and go to state 45
    "detach"      shift, and go to state 46
    "disown"      shift, and go to state 47
    "new"         shift, and go to state 48
    "angle"       shift, and go to state 49
    "duration"    shift, and go to state 50
    "float"       shift, and go to state 51
    "string"      shift, and go to state 52
    "call"        shift, and go to state 53
    "this"        shift, and go to state 54
    "!"           shift, and go to state 55
    "compl"       shift, and go to state 56
    "-"           shift, and go to state 57
    "+"           shift, and go to state 58
    "<"           shift, and go to state 59
    "%unscope:"   shift, and go to state 60
    "%exp:"       shift, and go to state 61
    "%lvalue:"    shift, and go to state 62
    "%id:"        shift, and go to state 63

    $default  reduce using rule 21 (stmt.opt)

    stmt.opt     go to state 244
    stmt         go to state 245
    block        go to state 68
    exp          go to state 246
    routine      go to state 70
    primary-exp  go to state 71
    detach       go to state 72
    lvalue       go to state 73
    id           go to state 74
    bitor-exp    go to state 75
    new          go to state 76
    float-exp    go to state 77
    duration     go to state 78
    dictionary   go to state 79
    tuple        go to state 80
    literal-exp  go to state 81
    string       go to state 82
    unary-exp    go to state 83
    rel-exp      go to state 84


state 132

  111 stmt: "loop" stmt .

    $default  reduce using rule 111 (stmt)


state 133

   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   37 exp: . "class" lvalue protos block
   38    | . "package" lvalue protos block
   52 routine: . "closure"
   53        | . "function"
   62 exp: . exp "=" exp
   63    | . exp "=" exp modifiers
   64    | . lvalue "+=" exp
   65    | . lvalue "-=" exp
   66    | . lvalue "*=" exp
   67    | . lvalue "/=" exp
   68    | . lvalue "^=" exp
   69    | . lvalue "%=" exp
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
  115 stmt: "while" "(" . exp ")" stmt
  118 primary-exp: . block
  119            | . "do" "(" exp ")" block
  120 detach: . "detach"
  121       | . "disown"
  122 primary-exp: . "assert" "(" exp ")"
  123            | . "assert" "{" claims "}"
  124            | . detach "(" exp ")"
  125            | . detach block
  126            | . "isdef" "(" k1_id ")"
  127            | . "watch" "(" exp ")"
  128 lvalue: . id
  129       | . primary-exp "." id
  130       | . primary-exp "." "*"
  131 primary-exp: . "&" id
  132            | . primary-exp "." "&" id
  133 id: . "identifier"
  134 bitor-exp: . "var" bitor-exp
  135          | . "const" "var" bitor-exp
  136 primary-exp: . lvalue
  137            | . lvalue args
  138 new: . "new" "identifier" args.opt
  139 bitor-exp: . new
  140 id: . "new"
  141 primary-exp: . routine formals block
  142 float-exp: . "float"
  143 duration: . "duration"
  144         | . duration "duration"
  150 dictionary: . "[" assocs "]"
  154 tuple: . "(" tuple.exps ")"
  159 literal-exp: . float-exp
  160            | . "angle"
  161            | . duration
  162            | . string
  163            | . "[" exps "]"
  164            | . "[<" tuple.exps ">]"
  165            | . "<" bitor-exps ">"
  166            | . dictionary
  167            | . tuple
  168 string: . "string"
  169       | . string "string"
  170 literal-exp: . "__HERE__"
  176 lvalue: . primary-exp "[" exps "]"
  177 literal-exp: . "this"
  178            | . "call"
  179 primary-exp: . literal-exp
  180            | . "(" exp ")"
  181            | . "(" error ")"
  182            | . primary-exp "**" primary-exp
  183 unary-exp: . primary-exp
  184          | . "--" lvalue
  185          | . "++" lvalue
  186          | . "+" unary-exp
  187          | . "-" unary-exp
  188          | . "!" unary-exp
  189          | . "compl" unary-exp
  190 bitor-exp: . unary-exp
  191          | . bitor-exp "+" bitor-exp
  192          | . bitor-exp "-" bitor-exp
  193          | . bitor-exp "*" bitor-exp
  194          | . bitor-exp "/" bitor-exp
  195          | . bitor-exp "%" bitor-exp
  196          | . bitor-exp "^" bitor-exp
  197          | . bitor-exp "<<" bitor-exp
  198          | . bitor-exp "bitand" bitor-exp
  199          | . bitor-exp "bitor" bitor-exp
  200          | . bitor-exp ">>" bitor-exp
  211 rel-exp: . bitor-exp rel-ops
  214 exp: . rel-exp
  215    | . exp "&&" exp
  216    | . exp "||" exp
  217    | . exp "in" exp
  218    | . exp "!" "in" exp
  222    | . "%unscope:" unsigned
  223 primary-exp: . "%exp:" unsigned
  224 lvalue: . "%lvalue:" unsigned
  225       | . "%id:" unsigned
  226       | . primary-exp "." "%id:" unsigned
  227 primary-exp: . lvalue "(" "%exps:" unsigned ")"

    "__HERE__"    shift, and go to state 7
    "closure"     shift, and go to state 9
    "const"       shift, and go to state 10
    "function"    shift, and go to state 13
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "[<"          shift, and go to state 19
    "var"         shift, and go to state 26
    "watch"       shift, and go to state 28
    "&"           shift, and go to state 30
    "identifier"  shift, and go to state 36
    "class"       shift, and go to state 37
    "package"     shift, and go to state 38
    "--"          shift, and go to state 42
    "++"          shift, and go to state 43
    "do"          shift, and go to state 44
    "assert"      shift, and go to state 45
    "detach"      shift, and go to state 46
    "disown"      shift, and go to state 47
    "new"         shift, and go to state 48
    "angle"       shift, and go to state 49
    "duration"    shift, and go to state 50
    "float"       shift, and go to state 51
    "string"      shift, and go to state 52
    "call"        shift, and go to state 53
    "this"        shift, and go to state 54
    "!"           shift, and go to state 55
    "compl"       shift, and go to state 56
    "-"           shift, and go to state 57
    "+"           shift, and go to state 58
    "<"           shift, and go to state 59
    "%unscope:"   shift, and go to state 60
    "%exp:"       shift, and go to state 61
    "%lvalue:"    shift, and go to state 62
    "%id:"        shift, and go to state 63

    block        go to state 68
    exp          go to state 247
    routine      go to state 101
    primary-exp  go to state 102
    detach       go to state 72
    lvalue       go to state 73
    id           go to state 103
    bitor-exp    go to state 75
    new          go to state 76
    float-exp    go to state 77
    duration     go to state 78
    dictionary   go to state 79
    tuple        go to state 80
    literal-exp  go to state 81
    string       go to state 82
    unary-exp    go to state 83
    rel-exp      go to state 84


state 134

   73 stmt: "at" identifiers . "(" exp tilda.opt ")" stmt onleave.opt
   74     | "at" identifiers . "(" event_match ")" stmt onleave.opt
  241 identifiers: identifiers . "identifier"

    "("           shift, and go to state 248
    "identifier"  shift, and go to state 249


state 135

  129 lvalue: primary-exp . "." id
  130       | primary-exp . "." "*"
  132 primary-exp: primary-exp . "." "&" id
  176 lvalue: primary-exp . "[" exps "]"
  182 primary-exp: primary-exp . "**" primary-exp
  226 lvalue: primary-exp . "." "%id:" unsigned

    "["   shift, and go to state 178
    "."   shift, and go to state 179
    "**"  shift, and go to state 180


state 136

   35 protos: .  ["{"]
   36       | . ":" protos.1
   37 exp: "class" lvalue . protos block
   70 primary-exp: lvalue . "--"
   71            | lvalue . "++"
   72            | lvalue . "->" id
  136            | lvalue .  ["[", ".", "**"]
  137            | lvalue . args
  227            | lvalue . "(" "%exps:" unsigned ")"
  237 args: . "(" exps ")"

    ":"   shift, and go to state 250
    "("   shift, and go to state 183
    "--"  shift, and go to state 190
    "++"  shift, and go to state 191
    "->"  shift, and go to state 192

    "{"       reduce using rule 35 (protos)
    $default  reduce using rule 136 (primary-exp)

    protos  go to state 251
    args    go to state 193


state 137

   35 protos: .  ["{"]
   36       | . ":" protos.1
   38 exp: "package" lvalue . protos block
   70 primary-exp: lvalue . "--"
   71            | lvalue . "++"
   72            | lvalue . "->" id
  136            | lvalue .  ["[", ".", "**"]
  137            | lvalue . args
  227            | lvalue . "(" "%exps:" unsigned ")"
  237 args: . "(" exps ")"

    ":"   shift, and go to state 250
    "("   shift, and go to state 183
    "--"  shift, and go to state 190
    "++"  shift, and go to state 191
    "->"  shift, and go to state 192

    "{"       reduce using rule 35 (protos)
    $default  reduce using rule 136 (primary-exp)

    protos  go to state 252
    args    go to state 193


state 138

   43 stmt: "enum" id . "{" id.0 "}"

    "{"  shift, and go to state 253


state 139

   45 event_or_function: "function" .

    $default  reduce using rule 45 (event_or_function)


state 140

   48 stmt: "external" "var" . "identifier" "." "identifier" from "identifier"

    "identifier"  shift, and go to state 254


state 141

   46 event_or_function: "identifier" .  ["("]
   47 stmt: "external" "identifier" . "identifier"

    "identifier"  shift, and go to state 255

    $default  reduce using rule 46 (event_or_function)


state 142

   49 stmt: "external" event_or_function . "(" unsigned ")" "identifier" "." "identifier" from "identifier"

    "("  shift, and go to state 256


state 143

   50 stmt: "import" lvalue .  ["end of command", "case", "catch", "default", "else", "finally", "onleave", "}", ")", ",", ";", "&", "|"]
   70 primary-exp: lvalue . "--"
   71            | lvalue . "++"
   72            | lvalue . "->" id
  136            | lvalue .  ["[", ".", "**"]
  137            | lvalue . args
  227            | lvalue . "(" "%exps:" unsigned ")"
  237 args: . "(" exps ")"

    "("   shift, and go to state 183
    "--"  shift, and go to state 190
    "++"  shift, and go to state 191
    "->"  shift, and go to state 192

    "["       reduce using rule 136 (primary-exp)
    "."       reduce using rule 136 (primary-exp)
    "**"      reduce using rule 136 (primary-exp)
    $default  reduce using rule 50 (stmt)

    args  go to state 193


state 144

   70 primary-exp: lvalue . "--"
   71            | lvalue . "++"
   72            | lvalue . "->" id
  136            | lvalue .  ["[", ".", "**"]
  137            | lvalue . args
  184 unary-exp: "--" lvalue .  ["end of command", "=", "case", "catch", ":", "default", "else", "finally", "if", "in", "{", ">]", "onleave", "}", "]", ")", "~", ",", ";", "&", "|", "identifier", "=>", "?", "!", "bitand", "bitor", "^", ">>", "<<", "-", "%", "+", "/", "*", "=~=", "==", "===", ">=", ">", "<=", "<", "!=", "!==", "~=", "&&", "||"]
  227 primary-exp: lvalue . "(" "%exps:" unsigned ")"
  237 args: . "(" exps ")"

    "("   shift, and go to state 183
    "--"  shift, and go to state 190
    "++"  shift, and go to state 191
    "->"  shift, and go to state 192

    "["       reduce using rule 136 (primary-exp)
    "."       reduce using rule 136 (primary-exp)
    "**"      reduce using rule 136 (primary-exp)
    $default  reduce using rule 184 (unary-exp)

    args  go to state 193


state 145

   70 primary-exp: lvalue . "--"
   71            | lvalue . "++"
   72            | lvalue . "->" id
  136            | lvalue .  ["[", ".", "**"]
  137            | lvalue . args
  185 unary-exp: "++" lvalue .  ["end of command", "=", "case", "catch", ":", "default", "else", "finally", "if", "in", "{", ">]", "onleave", "}", "]", ")", "~", ",", ";", "&", "|", "identifier", "=>", "?", "!", "bitand", "bitor", "^", ">>", "<<", "-", "%", "+", "/", "*", "=~=", "==", "===", ">=", ">", "<=", "<", "!=", "!==", "~=", "&&", "||"]
  227 primary-exp: lvalue . "(" "%exps:" unsigned ")"
  237 args: . "(" exps ")"

    "("   shift, and go to state 183
    "--"  shift, and go to state 190
    "++"  shift, and go to state 191
    "->"  shift, and go to state 192

    "["       reduce using rule 136 (primary-exp)
    "."       reduce using rule 136 (primary-exp)
    "**"      reduce using rule 136 (primary-exp)
    $default  reduce using rule 185 (unary-exp)

    args  go to state 193


state 146

   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   37 exp: . "class" lvalue protos block
   38    | . "package" lvalue protos block
   52 routine: . "closure"
   53        | . "function"
   62 exp: . exp "=" exp
   63    | . exp "=" exp modifiers
   64    | . lvalue "+=" exp
   65    | . lvalue "-=" exp
   66    | . lvalue "*=" exp
   67    | . lvalue "/=" exp
   68    | . lvalue "^=" exp
   69    | . lvalue "%=" exp
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
  118            | . block
  119            | . "do" "(" exp ")" block
  119            | "do" "(" . exp ")" block
  120 detach: . "detach"
  121       | . "disown"
  122 primary-exp: . "assert" "(" exp ")"
  123            | . "assert" "{" claims "}"
  124            | . detach "(" exp ")"
  125            | . detach block
  126            | . "isdef" "(" k1_id ")"
  127            | . "watch" "(" exp ")"
  128 lvalue: . id
  129       | . primary-exp "." id
  130       | . primary-exp "." "*"
  131 primary-exp: . "&" id
  132            | . primary-exp "." "&" id
  133 id: . "identifier"
  134 bitor-exp: . "var" bitor-exp
  135          | . "const" "var" bitor-exp
  136 primary-exp: . lvalue
  137            | . lvalue args
  138 new: . "new" "identifier" args.opt
  139 bitor-exp: . new
  140 id: . "new"
  141 primary-exp: . routine formals block
  142 float-exp: . "float"
  143 duration: . "duration"
  144         | . duration "duration"
  150 dictionary: . "[" assocs "]"
  154 tuple: . "(" tuple.exps ")"
  159 literal-exp: . float-exp
  160            | . "angle"
  161            | . duration
  162            | . string
  163            | . "[" exps "]"
  164            | . "[<" tuple.exps ">]"
  165            | . "<" bitor-exps ">"
  166            | . dictionary
  167            | . tuple
  168 string: . "string"
  169       | . string "string"
  170 literal-exp: . "__HERE__"
  176 lvalue: . primary-exp "[" exps "]"
  177 literal-exp: . "this"
  178            | . "call"
  179 primary-exp: . literal-exp
  180            | . "(" exp ")"
  181            | . "(" error ")"
  182            | . primary-exp "**" primary-exp
  183 unary-exp: . primary-exp
  184          | . "--" lvalue
  185          | . "++" lvalue
  186          | . "+" unary-exp
  187          | . "-" unary-exp
  188          | . "!" unary-exp
  189          | . "compl" unary-exp
  190 bitor-exp: . unary-exp
  191          | . bitor-exp "+" bitor-exp
  192          | . bitor-exp "-" bitor-exp
  193          | . bitor-exp "*" bitor-exp
  194          | . bitor-exp "/" bitor-exp
  195          | . bitor-exp "%" bitor-exp
  196          | . bitor-exp "^" bitor-exp
  197          | . bitor-exp "<<" bitor-exp
  198          | . bitor-exp "bitand" bitor-exp
  199          | . bitor-exp "bitor" bitor-exp
  200          | . bitor-exp ">>" bitor-exp
  211 rel-exp: . bitor-exp rel-ops
  214 exp: . rel-exp
  215    | . exp "&&" exp
  216    | . exp "||" exp
  217    | . exp "in" exp
  218    | . exp "!" "in" exp
  222    | . "%unscope:" unsigned
  223 primary-exp: . "%exp:" unsigned
  224 lvalue: . "%lvalue:" unsigned
  225       | . "%id:" unsigned
  226       | . primary-exp "." "%id:" unsigned
  227 primary-exp: . lvalue "(" "%exps:" unsigned ")"

    "__HERE__"    shift, and go to state 7
    "closure"     shift, and go to state 9
    "const"       shift, and go to state 10
    "function"    shift, and go to state 13
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "[<"          shift, and go to state 19
    "var"         shift, and go to state 26
    "watch"       shift, and go to state 28
    "&"           shift, and go to state 30
    "identifier"  shift, and go to state 36
    "class"       shift, and go to state 37
    "package"     shift, and go to state 38
    "--"          shift, and go to state 42
    "++"          shift, and go to state 43
    "do"          shift, and go to state 44
    "assert"      shift, and go to state 45
    "detach"      shift, and go to state 46
    "disown"      shift, and go to state 47
    "new"         shift, and go to state 48
    "angle"       shift, and go to state 49
    "duration"    shift, and go to state 50
    "float"       shift, and go to state 51
    "string"      shift, and go to state 52
    "call"        shift, and go to state 53
    "this"        shift, and go to state 54
    "!"           shift, and go to state 55
    "compl"       shift, and go to state 56
    "-"           shift, and go to state 57
    "+"           shift, and go to state 58
    "<"           shift, and go to state 59
    "%unscope:"   shift, and go to state 60
    "%exp:"       shift, and go to state 61
    "%lvalue:"    shift, and go to state 62
    "%id:"        shift, and go to state 63

    block        go to state 68
    exp          go to state 257
    routine      go to state 101
    primary-exp  go to state 102
    detach       go to state 72
    lvalue       go to state 73
    id           go to state 103
    bitor-exp    go to state 75
    new          go to state 76
    float-exp    go to state 77
    duration     go to state 78
    dictionary   go to state 79
    tuple        go to state 80
    literal-exp  go to state 81
    string       go to state 82
    unary-exp    go to state 83
    rel-exp      go to state 84


state 147

   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   37 exp: . "class" lvalue protos block
   38    | . "package" lvalue protos block
   52 routine: . "closure"
   53        | . "function"
   62 exp: . exp "=" exp
   63    | . exp "=" exp modifiers
   64    | . lvalue "+=" exp
   65    | . lvalue "-=" exp
   66    | . lvalue "*=" exp
   67    | . lvalue "/=" exp
   68    | . lvalue "^=" exp
   69    | . lvalue "%=" exp
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
  118            | . block
  119            | . "do" "(" exp ")" block
  120 detach: . "detach"
  121       | . "disown"
  122 primary-exp: . "assert" "(" exp ")"
  123            | . "assert" "{" claims "}"
  123            | "assert" "{" . claims "}"
  124            | . detach "(" exp ")"
  125            | . detach block
  126            | . "isdef" "(" k1_id ")"
  127            | . "watch" "(" exp ")"
  128 lvalue: . id
  129       | . primary-exp "." id
  130       | . primary-exp "." "*"
  131 primary-exp: . "&" id
  132            | . primary-exp "." "&" id
  133 id: . "identifier"
  134 bitor-exp: . "var" bitor-exp
  135          | . "const" "var" bitor-exp
  136 primary-exp: . lvalue
  137            | . lvalue args
  138 new: . "new" "identifier" args.opt
  139 bitor-exp: . new
  140 id: . "new"
  141 primary-exp: . routine formals block
  142 float-exp: . "float"
  143 duration: . "duration"
  144         | . duration "duration"
  150 dictionary: . "[" assocs "]"
  154 tuple: . "(" tuple.exps ")"
  159 literal-exp: . float-exp
  160            | . "angle"
  161            | . duration
  162            | . string
  163            | . "[" exps "]"
  164            | . "[<" tuple.exps ">]"
  165            | . "<" bitor-exps ">"
  166            | . dictionary
  167            | . tuple
  168 string: . "string"
  169       | . string "string"
  170 literal-exp: . "__HERE__"
  176 lvalue: . primary-exp "[" exps "]"
  177 literal-exp: . "this"
  178            | . "call"
  179 primary-exp: . literal-exp
  180            | . "(" exp ")"
  181            | . "(" error ")"
  182            | . primary-exp "**" primary-exp
  183 unary-exp: . primary-exp
  184          | . "--" lvalue
  185          | . "++" lvalue
  186          | . "+" unary-exp
  187          | . "-" unary-exp
  188          | . "!" unary-exp
  189          | . "compl" unary-exp
  190 bitor-exp: . unary-exp
  191          | . bitor-exp "+" bitor-exp
  192          | . bitor-exp "-" bitor-exp
  193          | . bitor-exp "*" bitor-exp
  194          | . bitor-exp "/" bitor-exp
  195          | . bitor-exp "%" bitor-exp
  196          | . bitor-exp "^" bitor-exp
  197          | . bitor-exp "<<" bitor-exp
  198          | . bitor-exp "bitand" bitor-exp
  199          | . bitor-exp "bitor" bitor-exp
  200          | . bitor-exp ">>" bitor-exp
  211 rel-exp: . bitor-exp rel-ops
  214 exp: . rel-exp
  215    | . exp "&&" exp
  216    | . exp "||" exp
  217    | . exp "in" exp
  218    | . exp "!" "in" exp
  222    | . "%unscope:" unsigned
  223 primary-exp: . "%exp:" unsigned
  224 lvalue: . "%lvalue:" unsigned
  225       | . "%id:" unsigned
  226       | . primary-exp "." "%id:" unsigned
  227 primary-exp: . lvalue "(" "%exps:" unsigned ")"
  228 claims: .  ["}"]
  229       | . claims.1 semi.opt
  230 claims.1: . exp
  231         | . claims.1 ";" exp

    "__HERE__"    shift, and go to state 7
    "closure"     shift, and go to state 9
    "const"       shift, and go to state 10
    "function"    shift, and go to state 13
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "[<"          shift, and go to state 19
    "var"         shift, and go to state 26
    "watch"       shift, and go to state 28
    "&"           shift, and go to state 30
    "identifier"  shift, and go to state 36
    "class"       shift, and go to state 37
    "package"     shift, and go to state 38
    "--"          shift, and go to state 42
    "++"          shift, and go to state 43
    "do"          shift, and go to state 44
    "assert"      shift, and go to state 45
    "detach"      shift, and go to state 46
    "disown"      shift, and go to state 47
    "new"         shift, and go to state 48
    "angle"       shift, and go to state 49
    "duration"    shift, and go to state 50
    "float"       shift, and go to state 51
    "string"      shift, and go to state 52
    "call"        shift, and go to state 53
    "this"        shift, and go to state 54
    "!"           shift, and go to state 55
    "compl"       shift, and go to state 56
    "-"           shift, and go to state 57
    "+"           shift, and go to state 58
    "<"           shift, and go to state 59
    "%unscope:"   shift, and go to state 60
    "%exp:"       shift, and go to state 61
    "%lvalue:"    shift, and go to state 62
    "%id:"        shift, and go to state 63

    $default  reduce using rule 228 (claims)

    block        go to state 68
    exp          go to state 258
    routine      go to state 101
    primary-exp  go to state 102
    detach       go to state 72
    lvalue       go to state 73
    id           go to state 103
    bitor-exp    go to state 75
    new          go to state 76
    float-exp    go to state 77
    duration     go to state 78
    dictionary   go to state 79
    tuple        go to state 80
    literal-exp  go to state 81
    string       go to state 82
    unary-exp    go to state 83
    rel-exp      go to state 84
    claims       go to state 259
    claims.1     go to state 260


state 148

   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   37 exp: . "class" lvalue protos block
   38    | . "package" lvalue protos block
   52 routine: . "closure"
   53        | . "function"
   62 exp: . exp "=" exp
   63    | . exp "=" exp modifiers
   64    | . lvalue "+=" exp
   65    | . lvalue "-=" exp
   66    | . lvalue "*=" exp
   67    | . lvalue "/=" exp
   68    | . lvalue "^=" exp
   69    | . lvalue "%=" exp
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
  118            | . block
  119            | . "do" "(" exp ")" block
  120 detach: . "detach"
  121       | . "disown"
  122 primary-exp: . "assert" "(" exp ")"
  122            | "assert" "(" . exp ")"
  123            | . "assert" "{" claims "}"
  124            | . detach "(" exp ")"
  125            | . detach block
  126            | . "isdef" "(" k1_id ")"
  127            | . "watch" "(" exp ")"
  128 lvalue: . id
  129       | . primary-exp "." id
  130       | . primary-exp "." "*"
  131 primary-exp: . "&" id
  132            | . primary-exp "." "&" id
  133 id: . "identifier"
  134 bitor-exp: . "var" bitor-exp
  135          | . "const" "var" bitor-exp
  136 primary-exp: . lvalue
  137            | . lvalue args
  138 new: . "new" "identifier" args.opt
  139 bitor-exp: . new
  140 id: . "new"
  141 primary-exp: . routine formals block
  142 float-exp: . "float"
  143 duration: . "duration"
  144         | . duration "duration"
  150 dictionary: . "[" assocs "]"
  154 tuple: . "(" tuple.exps ")"
  159 literal-exp: . float-exp
  160            | . "angle"
  161            | . duration
  162            | . string
  163            | . "[" exps "]"
  164            | . "[<" tuple.exps ">]"
  165            | . "<" bitor-exps ">"
  166            | . dictionary
  167            | . tuple
  168 string: . "string"
  169       | . string "string"
  170 literal-exp: . "__HERE__"
  176 lvalue: . primary-exp "[" exps "]"
  177 literal-exp: . "this"
  178            | . "call"
  179 primary-exp: . literal-exp
  180            | . "(" exp ")"
  181            | . "(" error ")"
  182            | . primary-exp "**" primary-exp
  183 unary-exp: . primary-exp
  184          | . "--" lvalue
  185          | . "++" lvalue
  186          | . "+" unary-exp
  187          | . "-" unary-exp
  188          | . "!" unary-exp
  189          | . "compl" unary-exp
  190 bitor-exp: . unary-exp
  191          | . bitor-exp "+" bitor-exp
  192          | . bitor-exp "-" bitor-exp
  193          | . bitor-exp "*" bitor-exp
  194          | . bitor-exp "/" bitor-exp
  195          | . bitor-exp "%" bitor-exp
  196          | . bitor-exp "^" bitor-exp
  197          | . bitor-exp "<<" bitor-exp
  198          | . bitor-exp "bitand" bitor-exp
  199          | . bitor-exp "bitor" bitor-exp
  200          | . bitor-exp ">>" bitor-exp
  211 rel-exp: . bitor-exp rel-ops
  214 exp: . rel-exp
  215    | . exp "&&" exp
  216    | . exp "||" exp
  217    | . exp "in" exp
  218    | . exp "!" "in" exp
  222    | . "%unscope:" unsigned
  223 primary-exp: . "%exp:" unsigned
  224 lvalue: . "%lvalue:" unsigned
  225       | . "%id:" unsigned
  226       | . primary-exp "." "%id:" unsigned
  227 primary-exp: . lvalue "(" "%exps:" unsigned ")"

    "__HERE__"    shift, and go to state 7
    "closure"     shift, and go to state 9
    "const"       shift, and go to state 10
    "function"    shift, and go to state 13
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "[<"          shift, and go to state 19
    "var"         shift, and go to state 26
    "watch"       shift, and go to state 28
    "&"           shift, and go to state 30
    "identifier"  shift, and go to state 36
    "class"       shift, and go to state 37
    "package"     shift, and go to state 38
    "--"          shift, and go to state 42
    "++"          shift, and go to state 43
    "do"          shift, and go to state 44
    "assert"      shift, and go to state 45
    "detach"      shift, and go to state 46
    "disown"      shift, and go to state 47
    "new"         shift, and go to state 48
    "angle"       shift, and go to state 49
    "duration"    shift, and go to state 50
    "float"       shift, and go to state 51
    "string"      shift, and go to state 52
    "call"        shift, and go to state 53
    "this"        shift, and go to state 54
    "!"           shift, and go to state 55
    "compl"       shift, and go to state 56
    "-"           shift, and go to state 57
    "+"           shift, and go to state 58
    "<"           shift, and go to state 59
    "%unscope:"   shift, and go to state 60
    "%exp:"       shift, and go to state 61
    "%lvalue:"    shift, and go to state 62
    "%id:"        shift, and go to state 63

    block        go to state 68
    exp          go to state 261
    routine      go to state 101
    primary-exp  go to state 102
    detach       go to state 72
    lvalue       go to state 73
    id           go to state 103
    bitor-exp    go to state 75
    new          go to state 76
    float-exp    go to state 77
    duration     go to state 78
    dictionary   go to state 79
    tuple        go to state 80
    literal-exp  go to state 81
    string       go to state 82
    unary-exp    go to state 83
    rel-exp      go to state 84


state 149

  138 new: "new" "identifier" . args.opt
  237 args: . "(" exps ")"
  238 args.opt: .  ["end of command", "=", "case", "catch", ":", "default", "else", "finally", "if", "in", "{", ">]", "onleave", "}", "]", ")", "~", ",", ";", "&", "|", "identifier", "=>", "?", "!", "bitand", "bitor", "^", ">>", "<<", "-", "%", "+", "/", "*", "=~=", "==", "===", ">=", ">", "<=", "<", "!=", "!==", "~=", "&&", "||"]
  239         | . args

    "("  shift, and go to state 262

    $default  reduce using rule 238 (args.opt)

    args      go to state 263
    args.opt  go to state 264


state 150

  188 unary-exp: "!" unary-exp .

    $default  reduce using rule 188 (unary-exp)


state 151

  189 unary-exp: "compl" unary-exp .

    $default  reduce using rule 189 (unary-exp)


state 152

  187 unary-exp: "-" unary-exp .

    $default  reduce using rule 187 (unary-exp)


state 153

  186 unary-exp: "+" unary-exp .

    $default  reduce using rule 186 (unary-exp)


state 154

  157 bitor-exps.1: bitor-exp .  [",", ">"]
  191 bitor-exp: bitor-exp . "+" bitor-exp
  192          | bitor-exp . "-" bitor-exp
  193          | bitor-exp . "*" bitor-exp
  194          | bitor-exp . "/" bitor-exp
  195          | bitor-exp . "%" bitor-exp
  196          | bitor-exp . "^" bitor-exp
  197          | bitor-exp . "<<" bitor-exp
  198          | bitor-exp . "bitand" bitor-exp
  199          | bitor-exp . "bitor" bitor-exp
  200          | bitor-exp . ">>" bitor-exp

    "bitand"  shift, and go to state 195
    "bitor"   shift, and go to state 196
    "^"       shift, and go to state 197
    ">>"      shift, and go to state 198
    "<<"      shift, and go to state 199
    "-"       shift, and go to state 200
    "%"       shift, and go to state 201
    "+"       shift, and go to state 202
    "/"       shift, and go to state 203
    "*"       shift, and go to state 204

    $default  reduce using rule 157 (bitor-exps.1)


state 155

  165 literal-exp: "<" bitor-exps . ">"

    ">"  shift, and go to state 265


state 156

  156 bitor-exps: bitor-exps.1 . comma.opt
  158 bitor-exps.1: bitor-exps.1 . "," bitor-exp
  254 comma.opt: .  [">"]
  255          | . ","

    ","  shift, and go to state 266

    $default  reduce using rule 254 (comma.opt)

    comma.opt  go to state 267


state 157

  221 unsigned: "float" .

    $default  reduce using rule 221 (unsigned)


state 158

  222 exp: "%unscope:" unsigned .

    $default  reduce using rule 222 (exp)


state 159

  223 primary-exp: "%exp:" unsigned .

    $default  reduce using rule 223 (primary-exp)


state 160

  224 lvalue: "%lvalue:" unsigned .

    $default  reduce using rule 224 (lvalue)


state 161

  225 lvalue: "%id:" unsigned .

    $default  reduce using rule 225 (lvalue)


state 162

    7 root_exp: cstmt.opt "end of command" .

    $default  reduce using rule 7 (root_exp)


state 163

    6 root_exp: cstmt.opt "," .

    $default  reduce using rule 6 (root_exp)


state 164

    5 root_exp: cstmt.opt ";" .

    $default  reduce using rule 5 (root_exp)


state 165

   18 cstmt: . stmt
   19      | . cstmt "|" cstmt
   20      | . cstmt "&" cstmt
   20      | cstmt "&" . cstmt
   23 stmt: . primary-exp ":" stmt
   24     | . exp
   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   37 exp: . "class" lvalue protos block
   38    | . "package" lvalue protos block
   43 stmt: . "enum" id "{" id.0 "}"
   47     | . "external" "identifier" "identifier"
   48     | . "external" "var" "identifier" "." "identifier" from "identifier"
   49     | . "external" event_or_function "(" unsigned ")" "identifier" "." "identifier" from "identifier"
   50     | . "import" lvalue
   51     | . exp "!" args.opt tilda.opt
   52 routine: . "closure"
   53        | . "function"
   54 stmt: . routine k1_id formals block
   55     | . id id formals block
   62 exp: . exp "=" exp
   63    | . exp "=" exp modifiers
   64    | . lvalue "+=" exp
   65    | . lvalue "-=" exp
   66    | . lvalue "*=" exp
   67    | . lvalue "/=" exp
   68    | . lvalue "^=" exp
   69    | . lvalue "%=" exp
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
   73 stmt: . "at" identifiers "(" exp tilda.opt ")" stmt onleave.opt
   74     | . "at" identifiers "(" event_match ")" stmt onleave.opt
   75     | . "every" "(" exp ")" stmt
   76     | . "if" "(" stmts ")" stmt else.opt
   77     | . "freezeif" "(" exp ")" stmt
   78     | . "stopif" "(" exp ")" stmt
   79     | . "switch" "(" exp ")" "{" cases default.opt "}"
   80     | . "timeout" "(" exp ")" stmt catch.opt else.opt finally.opt
   81     | . "return" exp.opt
   82     | . "break"
   83     | . "continue"
   84     | . "waituntil" "(" exp tilda.opt ")"
   85     | . "waituntil" "(" event_match ")"
   86     | . "whenever" "(" exp tilda.opt ")" stmt else.opt
   87     | . "whenever" "(" event_match ")" stmt else.opt
  108     | . "try" block catches.1 else.opt finally.opt
  109     | . "try" block "finally" block
  110     | . "throw" exp.opt
  111     | . "loop" stmt
  112     | . "for" "(" exp ")" stmt
  113     | . "for" "(" stmt.opt ";" exp ";" stmt.opt ")" stmt
  114     | . "for" "(" "var" "identifier" in_or_colon exp ")" stmt
  115     | . "while" "(" exp ")" stmt
  118 primary-exp: . block
  119            | . "do" "(" exp ")" block
  120 detach: . "detach"
  121       | . "disown"
  122 primary-exp: . "assert" "(" exp ")"
  123            | . "assert" "{" claims "}"
  124            | . detach "(" exp ")"
  125            | . detach block
  126            | . "isdef" "(" k1_id ")"
  127            | . "watch" "(" exp ")"
  128 lvalue: . id
  129       | . primary-exp "." id
  130       | . primary-exp "." "*"
  131 primary-exp: . "&" id
  132            | . primary-exp "." "&" id
  133 id: . "identifier"
  134 bitor-exp: . "var" bitor-exp
  135          | . "const" "var" bitor-exp
  136 primary-exp: . lvalue
  137            | . lvalue args
  138 new: . "new" "identifier" args.opt
  139 bitor-exp: . new
  140 id: . "new"
  141 primary-exp: . routine formals block
  142 float-exp: . "float"
  143 duration: . "duration"
  144         | . duration "duration"
  150 dictionary: . "[" assocs "]"
  154 tuple: . "(" tuple.exps ")"
  159 literal-exp: . float-exp
  160            | . "angle"
  161            | . duration
  162            | . string
  163            | . "[" exps "]"
  164            | . "[<" tuple.exps ">]"
  165            | . "<" bitor-exps ">"
  166            | . dictionary
  167            | . tuple
  168 string: . "string"
  169       | . string "string"
  170 literal-exp: . "__HERE__"
  176 lvalue: . primary-exp "[" exps "]"
  177 literal-exp: . "this"
  178            | . "call"
  179 primary-exp: . literal-exp
  180            | . "(" exp ")"
  181            | . "(" error ")"
  182            | . primary-exp "**" primary-exp
  183 unary-exp: . primary-exp
  184          | . "--" lvalue
  185          | . "++" lvalue
  186          | . "+" unary-exp
  187          | . "-" unary-exp
  188          | . "!" unary-exp
  189          | . "compl" unary-exp
  190 bitor-exp: . unary-exp
  191          | . bitor-exp "+" bitor-exp
  192          | . bitor-exp "-" bitor-exp
  193          | . bitor-exp "*" bitor-exp
  194          | . bitor-exp "/" bitor-exp
  195          | . bitor-exp "%" bitor-exp
  196          | . bitor-exp "^" bitor-exp
  197          | . bitor-exp "<<" bitor-exp
  198          | . bitor-exp "bitand" bitor-exp
  199          | . bitor-exp "bitor" bitor-exp
  200          | . bitor-exp ">>" bitor-exp
  211 rel-exp: . bitor-exp rel-ops
  214 exp: . rel-exp
  215    | . exp "&&" exp
  216    | . exp "||" exp
  217    | . exp "in" exp
  218    | . exp "!" "in" exp
  222    | . "%unscope:" unsigned
  223 primary-exp: . "%exp:" unsigned
  224 lvalue: . "%lvalue:" unsigned
  225       | . "%id:" unsigned
  226       | . primary-exp "." "%id:" unsigned
  227 primary-exp: . lvalue "(" "%exps:" unsigned ")"

    "__HERE__"    shift, and go to state 7
    "break"       shift, and go to state 8
    "closure"     shift, and go to state 9
    "const"       shift, and go to state 10
    "continue"    shift, and go to state 11
    "freezeif"    shift, and go to state 12
    "function"    shift, and go to state 13
    "if"          shift, and go to state 14
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "[<"          shift, and go to state 19
    "return"      shift, and go to state 20
    "stopif"      shift, and go to state 21
    "switch"      shift, and go to state 22
    "throw"       shift, and go to state 23
    "timeout"     shift, and go to state 24
    "try"         shift, and go to state 25
    "var"         shift, and go to state 26
    "waituntil"   shift, and go to state 27
    "watch"       shift, and go to state 28
    "whenever"    shift, and go to state 29
    "&"           shift, and go to state 30
    "every"       shift, and go to state 31
    "for"         shift, and go to state 32
    "loop"        shift, and go to state 33
    "while"       shift, and go to state 34
    "at"          shift, and go to state 35
    "identifier"  shift, and go to state 36
    "class"       shift, and go to state 37
    "package"     shift, and go to state 38
    "enum"        shift, and go to state 39
    "external"    shift, and go to state 40
    "import"      shift, and go to state 41
    "--"          shift, and go to state 42
    "++"          shift, and go to state 43
    "do"          shift, and go to state 44
    "assert"      shift, and go to state 45
    "detach"      shift, and go to state 46
    "disown"      shift, and go to state 47
    "new"         shift, and go to state 48
    "angle"       shift, and go to state 49
    "duration"    shift, and go to state 50
    "float"       shift, and go to state 51
    "string"      shift, and go to state 52
    "call"        shift, and go to state 53
    "this"        shift, and go to state 54
    "!"           shift, and go to state 55
    "compl"       shift, and go to state 56
    "-"           shift, and go to state 57
    "+"           shift, and go to state 58
    "<"           shift, and go to state 59
    "%unscope:"   shift, and go to state 60
    "%exp:"       shift, and go to state 61
    "%lvalue:"    shift, and go to state 62
    "%id:"        shift, and go to state 63

    cstmt        go to state 268
    stmt         go to state 67
    block        go to state 68
    exp          go to state 69
    routine      go to state 70
    primary-exp  go to state 71
    detach       go to state 72
    lvalue       go to state 73
    id           go to state 74
    bitor-exp    go to state 75
    new          go to state 76
    float-exp    go to state 77
    duration     go to state 78
    dictionary   go to state 79
    tuple        go to state 80
    literal-exp  go to state 81
    string       go to state 82
    unary-exp    go to state 83
    rel-exp      go to state 84


state 166

   17 cstmt.opt: cstmt "|" .  ["end of command", "case", "default", "}", ")", ",", ";"]
   18 cstmt: . stmt
   19      | . cstmt "|" cstmt
   19      | cstmt "|" . cstmt
   20      | . cstmt "&" cstmt
   23 stmt: . primary-exp ":" stmt
   24     | . exp
   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   37 exp: . "class" lvalue protos block
   38    | . "package" lvalue protos block
   43 stmt: . "enum" id "{" id.0 "}"
   47     | . "external" "identifier" "identifier"
   48     | . "external" "var" "identifier" "." "identifier" from "identifier"
   49     | . "external" event_or_function "(" unsigned ")" "identifier" "." "identifier" from "identifier"
   50     | . "import" lvalue
   51     | . exp "!" args.opt tilda.opt
   52 routine: . "closure"
   53        | . "function"
   54 stmt: . routine k1_id formals block
   55     | . id id formals block
   62 exp: . exp "=" exp
   63    | . exp "=" exp modifiers
   64    | . lvalue "+=" exp
   65    | . lvalue "-=" exp
   66    | . lvalue "*=" exp
   67    | . lvalue "/=" exp
   68    | . lvalue "^=" exp
   69    | . lvalue "%=" exp
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
   73 stmt: . "at" identifiers "(" exp tilda.opt ")" stmt onleave.opt
   74     | . "at" identifiers "(" event_match ")" stmt onleave.opt
   75     | . "every" "(" exp ")" stmt
   76     | . "if" "(" stmts ")" stmt else.opt
   77     | . "freezeif" "(" exp ")" stmt
   78     | . "stopif" "(" exp ")" stmt
   79     | . "switch" "(" exp ")" "{" cases default.opt "}"
   80     | . "timeout" "(" exp ")" stmt catch.opt else.opt finally.opt
   81     | . "return" exp.opt
   82     | . "break"
   83     | . "continue"
   84     | . "waituntil" "(" exp tilda.opt ")"
   85     | . "waituntil" "(" event_match ")"
   86     | . "whenever" "(" exp tilda.opt ")" stmt else.opt
   87     | . "whenever" "(" event_match ")" stmt else.opt
  108     | . "try" block catches.1 else.opt finally.opt
  109     | . "try" block "finally" block
  110     | . "throw" exp.opt
  111     | . "loop" stmt
  112     | . "for" "(" exp ")" stmt
  113     | . "for" "(" stmt.opt ";" exp ";" stmt.opt ")" stmt
  114     | . "for" "(" "var" "identifier" in_or_colon exp ")" stmt
  115     | . "while" "(" exp ")" stmt
  118 primary-exp: . block
  119            | . "do" "(" exp ")" block
  120 detach: . "detach"
  121       | . "disown"
  122 primary-exp: . "assert" "(" exp ")"
  123            | . "assert" "{" claims "}"
  124            | . detach "(" exp ")"
  125            | . detach block
  126            | . "isdef" "(" k1_id ")"
  127            | . "watch" "(" exp ")"
  128 lvalue: . id
  129       | . primary-exp "." id
  130       | . primary-exp "." "*"
  131 primary-exp: . "&" id
  132            | . primary-exp "." "&" id
  133 id: . "identifier"
  134 bitor-exp: . "var" bitor-exp
  135          | . "const" "var" bitor-exp
  136 primary-exp: . lvalue
  137            | . lvalue args
  138 new: . "new" "identifier" args.opt
  139 bitor-exp: . new
  140 id: . "new"
  141 primary-exp: . routine formals block
  142 float-exp: . "float"
  143 duration: . "duration"
  144         | . duration "duration"
  150 dictionary: . "[" assocs "]"
  154 tuple: . "(" tuple.exps ")"
  159 literal-exp: . float-exp
  160            | . "angle"
  161            | . duration
  162            | . string
  163            | . "[" exps "]"
  164            | . "[<" tuple.exps ">]"
  165            | . "<" bitor-exps ">"
  166            | . dictionary
  167            | . tuple
  168 string: . "string"
  169       | . string "string"
  170 literal-exp: . "__HERE__"
  176 lvalue: . primary-exp "[" exps "]"
  177 literal-exp: . "this"
  178            | . "call"
  179 primary-exp: . literal-exp
  180            | . "(" exp ")"
  181            | . "(" error ")"
  182            | . primary-exp "**" primary-exp
  183 unary-exp: . primary-exp
  184          | . "--" lvalue
  185          | . "++" lvalue
  186          | . "+" unary-exp
  187          | . "-" unary-exp
  188          | . "!" unary-exp
  189          | . "compl" unary-exp
  190 bitor-exp: . unary-exp
  191          | . bitor-exp "+" bitor-exp
  192          | . bitor-exp "-" bitor-exp
  193          | . bitor-exp "*" bitor-exp
  194          | . bitor-exp "/" bitor-exp
  195          | . bitor-exp "%" bitor-exp
  196          | . bitor-exp "^" bitor-exp
  197          | . bitor-exp "<<" bitor-exp
  198          | . bitor-exp "bitand" bitor-exp
  199          | . bitor-exp "bitor" bitor-exp
  200          | . bitor-exp ">>" bitor-exp
  211 rel-exp: . bitor-exp rel-ops
  214 exp: . rel-exp
  215    | . exp "&&" exp
  216    | . exp "||" exp
  217    | . exp "in" exp
  218    | . exp "!" "in" exp
  222    | . "%unscope:" unsigned
  223 primary-exp: . "%exp:" unsigned
  224 lvalue: . "%lvalue:" unsigned
  225       | . "%id:" unsigned
  226       | . primary-exp "." "%id:" unsigned
  227 primary-exp: . lvalue "(" "%exps:" unsigned ")"

    "__HERE__"    shift, and go to state 7
    "break"       shift, and go to state 8
    "closure"     shift, and go to state 9
    "const"       shift, and go to state 10
    "continue"    shift, and go to state 11
    "freezeif"    shift, and go to state 12
    "function"    shift, and go to state 13
    "if"          shift, and go to state 14
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "[<"          shift, and go to state 19
    "return"      shift, and go to state 20
    "stopif"      shift, and go to state 21
    "switch"      shift, and go to state 22
    "throw"       shift, and go to state 23
    "timeout"     shift, and go to state 24
    "try"         shift, and go to state 25
    "var"         shift, and go to state 26
    "waituntil"   shift, and go to state 27
    "watch"       shift, and go to state 28
    "whenever"    shift, and go to state 29
    "&"           shift, and go to state 30
    "every"       shift, and go to state 31
    "for"         shift, and go to state 32
    "loop"        shift, and go to state 33
    "while"       shift, and go to state 34
    "at"          shift, and go to state 35
    "identifier"  shift, and go to state 36
    "class"       shift, and go to state 37
    "package"     shift, and go to state 38
    "enum"        shift, and go to state 39
    "external"    shift, and go to state 40
    "import"      shift, and go to state 41
    "--"          shift, and go to state 42
    "++"          shift, and go to state 43
    "do"          shift, and go to state 44
    "assert"      shift, and go to state 45
    "detach"      shift, and go to state 46
    "disown"      shift, and go to state 47
    "new"         shift, and go to state 48
    "angle"       shift, and go to state 49
    "duration"    shift, and go to state 50
    "float"       shift, and go to state 51
    "string"      shift, and go to state 52
    "call"        shift, and go to state 53
    "this"        shift, and go to state 54
    "!"           shift, and go to state 55
    "compl"       shift, and go to state 56
    "-"           shift, and go to state 57
    "+"           shift, and go to state 58
    "<"           shift, and go to state 59
    "%unscope:"   shift, and go to state 60
    "%exp:"       shift, and go to state 61
    "%lvalue:"    shift, and go to state 62
    "%id:"        shift, and go to state 63

    $default  reduce using rule 17 (cstmt.opt)

    cstmt        go to state 269
    stmt         go to state 67
    block        go to state 68
    exp          go to state 69
    routine      go to state 70
    primary-exp  go to state 71
    detach       go to state 72
    lvalue       go to state 73
    id           go to state 74
    bitor-exp    go to state 75
    new          go to state 76
    float-exp    go to state 77
    duration     go to state 78
    dictionary   go to state 79
    tuple        go to state 80
    literal-exp  go to state 81
    string       go to state 82
    unary-exp    go to state 83
    rel-exp      go to state 84


state 167

   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   37 exp: . "class" lvalue protos block
   38    | . "package" lvalue protos block
   52 routine: . "closure"
   53        | . "function"
   62 exp: . exp "=" exp
   62    | exp "=" . exp
   63    | . exp "=" exp modifiers
   63    | exp "=" . exp modifiers
   64    | . lvalue "+=" exp
   65    | . lvalue "-=" exp
   66    | . lvalue "*=" exp
   67    | . lvalue "/=" exp
   68    | . lvalue "^=" exp
   69    | . lvalue "%=" exp
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
  118            | . block
  119            | . "do" "(" exp ")" block
  120 detach: . "detach"
  121       | . "disown"
  122 primary-exp: . "assert" "(" exp ")"
  123            | . "assert" "{" claims "}"
  124            | . detach "(" exp ")"
  125            | . detach block
  126            | . "isdef" "(" k1_id ")"
  127            | . "watch" "(" exp ")"
  128 lvalue: . id
  129       | . primary-exp "." id
  130       | . primary-exp "." "*"
  131 primary-exp: . "&" id
  132            | . primary-exp "." "&" id
  133 id: . "identifier"
  134 bitor-exp: . "var" bitor-exp
  135          | . "const" "var" bitor-exp
  136 primary-exp: . lvalue
  137            | . lvalue args
  138 new: . "new" "identifier" args.opt
  139 bitor-exp: . new
  140 id: . "new"
  141 primary-exp: . routine formals block
  142 float-exp: . "float"
  143 duration: . "duration"
  144         | . duration "duration"
  150 dictionary: . "[" assocs "]"
  154 tuple: . "(" tuple.exps ")"
  159 literal-exp: . float-exp
  160            | . "angle"
  161            | . duration
  162            | . string
  163            | . "[" exps "]"
  164            | . "[<" tuple.exps ">]"
  165            | . "<" bitor-exps ">"
  166            | . dictionary
  167            | . tuple
  168 string: . "string"
  169       | . string "string"
  170 literal-exp: . "__HERE__"
  176 lvalue: . primary-exp "[" exps "]"
  177 literal-exp: . "this"
  178            | . "call"
  179 primary-exp: . literal-exp
  180            | . "(" exp ")"
  181            | . "(" error ")"
  182            | . primary-exp "**" primary-exp
  183 unary-exp: . primary-exp
  184          | . "--" lvalue
  185          | . "++" lvalue
  186          | . "+" unary-exp
  187          | . "-" unary-exp
  188          | . "!" unary-exp
  189          | . "compl" unary-exp
  190 bitor-exp: . unary-exp
  191          | . bitor-exp "+" bitor-exp
  192          | . bitor-exp "-" bitor-exp
  193          | . bitor-exp "*" bitor-exp
  194          | . bitor-exp "/" bitor-exp
  195          | . bitor-exp "%" bitor-exp
  196          | . bitor-exp "^" bitor-exp
  197          | . bitor-exp "<<" bitor-exp
  198          | . bitor-exp "bitand" bitor-exp
  199          | . bitor-exp "bitor" bitor-exp
  200          | . bitor-exp ">>" bitor-exp
  211 rel-exp: . bitor-exp rel-ops
  214 exp: . rel-exp
  215    | . exp "&&" exp
  216    | . exp "||" exp
  217    | . exp "in" exp
  218    | . exp "!" "in" exp
  222    | . "%unscope:" unsigned
  223 primary-exp: . "%exp:" unsigned
  224 lvalue: . "%lvalue:" unsigned
  225       | . "%id:" unsigned
  226       | . primary-exp "." "%id:" unsigned
  227 primary-exp: . lvalue "(" "%exps:" unsigned ")"

    "__HERE__"    shift, and go to state 7
    "closure"     shift, and go to state 9
    "const"       shift, and go to state 10
    "function"    shift, and go to state 13
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "[<"          shift, and go to state 19
    "var"         shift, and go to state 26
    "watch"       shift, and go to state 28
    "&"           shift, and go to state 30
    "identifier"  shift, and go to state 36
    "class"       shift, and go to state 37
    "package"     shift, and go to state 38
    "--"          shift, and go to state 42
    "++"          shift, and go to state 43
    "do"          shift, and go to state 44
    "assert"      shift, and go to state 45
    "detach"      shift, and go to state 46
    "disown"      shift, and go to state 47
    "new"         shift, and go to state 48
    "angle"       shift, and go to state 49
    "duration"    shift, and go to state 50
    "float"       shift, and go to state 51
    "string"      shift, and go to state 52
    "call"        shift, and go to state 53
    "this"        shift, and go to state 54
    "!"           shift, and go to state 55
    "compl"       shift, and go to state 56
    "-"           shift, and go to state 57
    "+"           shift, and go to state 58
    "<"           shift, and go to state 59
    "%unscope:"   shift, and go to state 60
    "%exp:"       shift, and go to state 61
    "%lvalue:"    shift, and go to state 62
    "%id:"        shift, and go to state 63

    block        go to state 68
    exp          go to state 270
    routine      go to state 101
    primary-exp  go to state 102
    detach       go to state 72
    lvalue       go to state 73
    id           go to state 103
    bitor-exp    go to state 75
    new          go to state 76
    float-exp    go to state 77
    duration     go to state 78
    dictionary   go to state 79
    tuple        go to state 80
    literal-exp  go to state 81
    string       go to state 82
    unary-exp    go to state 83
    rel-exp      go to state 84


state 168

   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   37 exp: . "class" lvalue protos block
   38    | . "package" lvalue protos block
   52 routine: . "closure"
   53        | . "function"
   62 exp: . exp "=" exp
   63    | . exp "=" exp modifiers
   64    | . lvalue "+=" exp
   65    | . lvalue "-=" exp
   66    | . lvalue "*=" exp
   67    | . lvalue "/=" exp
   68    | . lvalue "^=" exp
   69    | . lvalue "%=" exp
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
  118            | . block
  119            | . "do" "(" exp ")" block
  120 detach: . "detach"
  121       | . "disown"
  122 primary-exp: . "assert" "(" exp ")"
  123            | . "assert" "{" claims "}"
  124            | . detach "(" exp ")"
  125            | . detach block
  126            | . "isdef" "(" k1_id ")"
  127            | . "watch" "(" exp ")"
  128 lvalue: . id
  129       | . primary-exp "." id
  130       | . primary-exp "." "*"
  131 primary-exp: . "&" id
  132            | . primary-exp "." "&" id
  133 id: . "identifier"
  134 bitor-exp: . "var" bitor-exp
  135          | . "const" "var" bitor-exp
  136 primary-exp: . lvalue
  137            | . lvalue args
  138 new: . "new" "identifier" args.opt
  139 bitor-exp: . new
  140 id: . "new"
  141 primary-exp: . routine formals block
  142 float-exp: . "float"
  143 duration: . "duration"
  144         | . duration "duration"
  150 dictionary: . "[" assocs "]"
  154 tuple: . "(" tuple.exps ")"
  159 literal-exp: . float-exp
  160            | . "angle"
  161            | . duration
  162            | . string
  163            | . "[" exps "]"
  164            | . "[<" tuple.exps ">]"
  165            | . "<" bitor-exps ">"
  166            | . dictionary
  167            | . tuple
  168 string: . "string"
  169       | . string "string"
  170 literal-exp: . "__HERE__"
  176 lvalue: . primary-exp "[" exps "]"
  177 literal-exp: . "this"
  178            | . "call"
  179 primary-exp: . literal-exp
  180            | . "(" exp ")"
  181            | . "(" error ")"
  182            | . primary-exp "**" primary-exp
  183 unary-exp: . primary-exp
  184          | . "--" lvalue
  185          | . "++" lvalue
  186          | . "+" unary-exp
  187          | . "-" unary-exp
  188          | . "!" unary-exp
  189          | . "compl" unary-exp
  190 bitor-exp: . unary-exp
  191          | . bitor-exp "+" bitor-exp
  192          | . bitor-exp "-" bitor-exp
  193          | . bitor-exp "*" bitor-exp
  194          | . bitor-exp "/" bitor-exp
  195          | . bitor-exp "%" bitor-exp
  196          | . bitor-exp "^" bitor-exp
  197          | . bitor-exp "<<" bitor-exp
  198          | . bitor-exp "bitand" bitor-exp
  199          | . bitor-exp "bitor" bitor-exp
  200          | . bitor-exp ">>" bitor-exp
  211 rel-exp: . bitor-exp rel-ops
  214 exp: . rel-exp
  215    | . exp "&&" exp
  216    | . exp "||" exp
  217    | . exp "in" exp
  217    | exp "in" . exp
  218    | . exp "!" "in" exp
  222    | . "%unscope:" unsigned
  223 primary-exp: . "%exp:" unsigned
  224 lvalue: . "%lvalue:" unsigned
  225       | . "%id:" unsigned
  226       | . primary-exp "." "%id:" unsigned
  227 primary-exp: . lvalue "(" "%exps:" unsigned ")"

    "__HERE__"    shift, and go to state 7
    "closure"     shift, and go to state 9
    "const"       shift, and go to state 10
    "function"    shift, and go to state 13
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "[<"          shift, and go to state 19
    "var"         shift, and go to state 26
    "watch"       shift, and go to state 28
    "&"           shift, and go to state 30
    "identifier"  shift, and go to state 36
    "class"       shift, and go to state 37
    "package"     shift, and go to state 38
    "--"          shift, and go to state 42
    "++"          shift, and go to state 43
    "do"          shift, and go to state 44
    "assert"      shift, and go to state 45
    "detach"      shift, and go to state 46
    "disown"      shift, and go to state 47
    "new"         shift, and go to state 48
    "angle"       shift, and go to state 49
    "duration"    shift, and go to state 50
    "float"       shift, and go to state 51
    "string"      shift, and go to state 52
    "call"        shift, and go to state 53
    "this"        shift, and go to state 54
    "!"           shift, and go to state 55
    "compl"       shift, and go to state 56
    "-"           shift, and go to state 57
    "+"           shift, and go to state 58
    "<"           shift, and go to state 59
    "%unscope:"   shift, and go to state 60
    "%exp:"       shift, and go to state 61
    "%lvalue:"    shift, and go to state 62
    "%id:"        shift, and go to state 63

    block        go to state 68
    exp          go to state 271
    routine      go to state 101
    primary-exp  go to state 102
    detach       go to state 72
    lvalue       go to state 73
    id           go to state 103
    bitor-exp    go to state 75
    new          go to state 76
    float-exp    go to state 77
    duration     go to state 78
    dictionary   go to state 79
    tuple        go to state 80
    literal-exp  go to state 81
    string       go to state 82
    unary-exp    go to state 83
    rel-exp      go to state 84


state 169

   51 stmt: exp "!" . args.opt tilda.opt
  218 exp: exp "!" . "in" exp
  237 args: . "(" exps ")"
  238 args.opt: .  ["end of command", "case", "catch", "default", "else", "finally", "onleave", "}", ")", "~", ",", ";", "&", "|"]
  239         | . args

    "in"  shift, and go to state 272
    "("   shift, and go to state 262

    $default  reduce using rule 238 (args.opt)

    args      go to state 263
    args.opt  go to state 273


state 170

   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   37 exp: . "class" lvalue protos block
   38    | . "package" lvalue protos block
   52 routine: . "closure"
   53        | . "function"
   62 exp: . exp "=" exp
   63    | . exp "=" exp modifiers
   64    | . lvalue "+=" exp
   65    | . lvalue "-=" exp
   66    | . lvalue "*=" exp
   67    | . lvalue "/=" exp
   68    | . lvalue "^=" exp
   69    | . lvalue "%=" exp
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
  118            | . block
  119            | . "do" "(" exp ")" block
  120 detach: . "detach"
  121       | . "disown"
  122 primary-exp: . "assert" "(" exp ")"
  123            | . "assert" "{" claims "}"
  124            | . detach "(" exp ")"
  125            | . detach block
  126            | . "isdef" "(" k1_id ")"
  127            | . "watch" "(" exp ")"
  128 lvalue: . id
  129       | . primary-exp "." id
  130       | . primary-exp "." "*"
  131 primary-exp: . "&" id
  132            | . primary-exp "." "&" id
  133 id: . "identifier"
  134 bitor-exp: . "var" bitor-exp
  135          | . "const" "var" bitor-exp
  136 primary-exp: . lvalue
  137            | . lvalue args
  138 new: . "new" "identifier" args.opt
  139 bitor-exp: . new
  140 id: . "new"
  141 primary-exp: . routine formals block
  142 float-exp: . "float"
  143 duration: . "duration"
  144         | . duration "duration"
  150 dictionary: . "[" assocs "]"
  154 tuple: . "(" tuple.exps ")"
  159 literal-exp: . float-exp
  160            | . "angle"
  161            | . duration
  162            | . string
  163            | . "[" exps "]"
  164            | . "[<" tuple.exps ">]"
  165            | . "<" bitor-exps ">"
  166            | . dictionary
  167            | . tuple
  168 string: . "string"
  169       | . string "string"
  170 literal-exp: . "__HERE__"
  176 lvalue: . primary-exp "[" exps "]"
  177 literal-exp: . "this"
  178            | . "call"
  179 primary-exp: . literal-exp
  180            | . "(" exp ")"
  181            | . "(" error ")"
  182            | . primary-exp "**" primary-exp
  183 unary-exp: . primary-exp
  184          | . "--" lvalue
  185          | . "++" lvalue
  186          | . "+" unary-exp
  187          | . "-" unary-exp
  188          | . "!" unary-exp
  189          | . "compl" unary-exp
  190 bitor-exp: . unary-exp
  191          | . bitor-exp "+" bitor-exp
  192          | . bitor-exp "-" bitor-exp
  193          | . bitor-exp "*" bitor-exp
  194          | . bitor-exp "/" bitor-exp
  195          | . bitor-exp "%" bitor-exp
  196          | . bitor-exp "^" bitor-exp
  197          | . bitor-exp "<<" bitor-exp
  198          | . bitor-exp "bitand" bitor-exp
  199          | . bitor-exp "bitor" bitor-exp
  200          | . bitor-exp ">>" bitor-exp
  211 rel-exp: . bitor-exp rel-ops
  214 exp: . rel-exp
  215    | . exp "&&" exp
  215    | exp "&&" . exp
  216    | . exp "||" exp
  217    | . exp "in" exp
  218    | . exp "!" "in" exp
  222    | . "%unscope:" unsigned
  223 primary-exp: . "%exp:" unsigned
  224 lvalue: . "%lvalue:" unsigned
  225       | . "%id:" unsigned
  226       | . primary-exp "." "%id:" unsigned
  227 primary-exp: . lvalue "(" "%exps:" unsigned ")"

    "__HERE__"    shift, and go to state 7
    "closure"     shift, and go to state 9
    "const"       shift, and go to state 10
    "function"    shift, and go to state 13
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "[<"          shift, and go to state 19
    "var"         shift, and go to state 26
    "watch"       shift, and go to state 28
    "&"           shift, and go to state 30
    "identifier"  shift, and go to state 36
    "class"       shift, and go to state 37
    "package"     shift, and go to state 38
    "--"          shift, and go to state 42
    "++"          shift, and go to state 43
    "do"          shift, and go to state 44
    "assert"      shift, and go to state 45
    "detach"      shift, and go to state 46
    "disown"      shift, and go to state 47
    "new"         shift, and go to state 48
    "angle"       shift, and go to state 49
    "duration"    shift, and go to state 50
    "float"       shift, and go to state 51
    "string"      shift, and go to state 52
    "call"        shift, and go to state 53
    "this"        shift, and go to state 54
    "!"           shift, and go to state 55
    "compl"       shift, and go to state 56
    "-"           shift, and go to state 57
    "+"           shift, and go to state 58
    "<"           shift, and go to state 59
    "%unscope:"   shift, and go to state 60
    "%exp:"       shift, and go to state 61
    "%lvalue:"    shift, and go to state 62
    "%id:"        shift, and go to state 63

    block        go to state 68
    exp          go to state 274
    routine      go to state 101
    primary-exp  go to state 102
    detach       go to state 72
    lvalue       go to state 73
    id           go to state 103
    bitor-exp    go to state 75
    new          go to state 76
    float-exp    go to state 77
    duration     go to state 78
    dictionary   go to state 79
    tuple        go to state 80
    literal-exp  go to state 81
    string       go to state 82
    unary-exp    go to state 83
    rel-exp      go to state 84


state 171

   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   37 exp: . "class" lvalue protos block
   38    | . "package" lvalue protos block
   52 routine: . "closure"
   53        | . "function"
   62 exp: . exp "=" exp
   63    | . exp "=" exp modifiers
   64    | . lvalue "+=" exp
   65    | . lvalue "-=" exp
   66    | . lvalue "*=" exp
   67    | . lvalue "/=" exp
   68    | . lvalue "^=" exp
   69    | . lvalue "%=" exp
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
  118            | . block
  119            | . "do" "(" exp ")" block
  120 detach: . "detach"
  121       | . "disown"
  122 primary-exp: . "assert" "(" exp ")"
  123            | . "assert" "{" claims "}"
  124            | . detach "(" exp ")"
  125            | . detach block
  126            | . "isdef" "(" k1_id ")"
  127            | . "watch" "(" exp ")"
  128 lvalue: . id
  129       | . primary-exp "." id
  130       | . primary-exp "." "*"
  131 primary-exp: . "&" id
  132            | . primary-exp "." "&" id
  133 id: . "identifier"
  134 bitor-exp: . "var" bitor-exp
  135          | . "const" "var" bitor-exp
  136 primary-exp: . lvalue
  137            | . lvalue args
  138 new: . "new" "identifier" args.opt
  139 bitor-exp: . new
  140 id: . "new"
  141 primary-exp: . routine formals block
  142 float-exp: . "float"
  143 duration: . "duration"
  144         | . duration "duration"
  150 dictionary: . "[" assocs "]"
  154 tuple: . "(" tuple.exps ")"
  159 literal-exp: . float-exp
  160            | . "angle"
  161            | . duration
  162            | . string
  163            | . "[" exps "]"
  164            | . "[<" tuple.exps ">]"
  165            | . "<" bitor-exps ">"
  166            | . dictionary
  167            | . tuple
  168 string: . "string"
  169       | . string "string"
  170 literal-exp: . "__HERE__"
  176 lvalue: . primary-exp "[" exps "]"
  177 literal-exp: . "this"
  178            | . "call"
  179 primary-exp: . literal-exp
  180            | . "(" exp ")"
  181            | . "(" error ")"
  182            | . primary-exp "**" primary-exp
  183 unary-exp: . primary-exp
  184          | . "--" lvalue
  185          | . "++" lvalue
  186          | . "+" unary-exp
  187          | . "-" unary-exp
  188          | . "!" unary-exp
  189          | . "compl" unary-exp
  190 bitor-exp: . unary-exp
  191          | . bitor-exp "+" bitor-exp
  192          | . bitor-exp "-" bitor-exp
  193          | . bitor-exp "*" bitor-exp
  194          | . bitor-exp "/" bitor-exp
  195          | . bitor-exp "%" bitor-exp
  196          | . bitor-exp "^" bitor-exp
  197          | . bitor-exp "<<" bitor-exp
  198          | . bitor-exp "bitand" bitor-exp
  199          | . bitor-exp "bitor" bitor-exp
  200          | . bitor-exp ">>" bitor-exp
  211 rel-exp: . bitor-exp rel-ops
  214 exp: . rel-exp
  215    | . exp "&&" exp
  216    | . exp "||" exp
  216    | exp "||" . exp
  217    | . exp "in" exp
  218    | . exp "!" "in" exp
  222    | . "%unscope:" unsigned
  223 primary-exp: . "%exp:" unsigned
  224 lvalue: . "%lvalue:" unsigned
  225       | . "%id:" unsigned
  226       | . primary-exp "." "%id:" unsigned
  227 primary-exp: . lvalue "(" "%exps:" unsigned ")"

    "__HERE__"    shift, and go to state 7
    "closure"     shift, and go to state 9
    "const"       shift, and go to state 10
    "function"    shift, and go to state 13
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "[<"          shift, and go to state 19
    "var"         shift, and go to state 26
    "watch"       shift, and go to state 28
    "&"           shift, and go to state 30
    "identifier"  shift, and go to state 36
    "class"       shift, and go to state 37
    "package"     shift, and go to state 38
    "--"          shift, and go to state 42
    "++"          shift, and go to state 43
    "do"          shift, and go to state 44
    "assert"      shift, and go to state 45
    "detach"      shift, and go to state 46
    "disown"      shift, and go to state 47
    "new"         shift, and go to state 48
    "angle"       shift, and go to state 49
    "duration"    shift, and go to state 50
    "float"       shift, and go to state 51
    "string"      shift, and go to state 52
    "call"        shift, and go to state 53
    "this"        shift, and go to state 54
    "!"           shift, and go to state 55
    "compl"       shift, and go to state 56
    "-"           shift, and go to state 57
    "+"           shift, and go to state 58
    "<"           shift, and go to state 59
    "%unscope:"   shift, and go to state 60
    "%exp:"       shift, and go to state 61
    "%lvalue:"    shift, and go to state 62
    "%id:"        shift, and go to state 63

    block        go to state 68
    exp          go to state 275
    routine      go to state 101
    primary-exp  go to state 102
    detach       go to state 72
    lvalue       go to state 73
    id           go to state 103
    bitor-exp    go to state 75
    new          go to state 76
    float-exp    go to state 77
    duration     go to state 78
    dictionary   go to state 79
    tuple        go to state 80
    literal-exp  go to state 81
    string       go to state 82
    unary-exp    go to state 83
    rel-exp      go to state 84


state 172

  245 formal: . var.opt "identifier" typespec.opt
  246       | . var.opt "identifier" "=" exp typespec.opt
  247       | . var.opt "identifier" "[" "]"
  248 formals.1: . formal
  249          | . formals.1 "," formal
  250 formals.0: .  [")"]
  251          | . formals.1 comma.opt
  253 formals: "(" . formals.0 ")"
  258 var.opt: .  ["identifier"]
  259        | . "var"

    "var"  shift, and go to state 276

    "identifier"  reduce using rule 258 (var.opt)
    $default      reduce using rule 250 (formals.0)

    formal     go to state 277
    formals.1  go to state 278
    formals.0  go to state 279
    var.opt    go to state 280


state 173

   56 k1_id: "identifier" .

    $default  reduce using rule 56 (k1_id)


state 174

   57 k1_id: "this" . "." "identifier"

    "."  shift, and go to state 281


state 175

   54 stmt: routine k1_id . formals block
   58 k1_id: k1_id . "." "identifier"
  252 formals: .  ["{"]
  253        | . "(" formals.0 ")"

    "("  shift, and go to state 172
    "."  shift, and go to state 282

    $default  reduce using rule 252 (formals)

    formals  go to state 283


state 176

   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
  141 primary-exp: routine formals . block

    "{"  shift, and go to state 16

    block  go to state 284


state 177

   23 stmt: . primary-exp ":" stmt
   23     | primary-exp ":" . stmt
   24     | . exp
   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   37 exp: . "class" lvalue protos block
   38    | . "package" lvalue protos block
   43 stmt: . "enum" id "{" id.0 "}"
   47     | . "external" "identifier" "identifier"
   48     | . "external" "var" "identifier" "." "identifier" from "identifier"
   49     | . "external" event_or_function "(" unsigned ")" "identifier" "." "identifier" from "identifier"
   50     | . "import" lvalue
   51     | . exp "!" args.opt tilda.opt
   52 routine: . "closure"
   53        | . "function"
   54 stmt: . routine k1_id formals block
   55     | . id id formals block
   62 exp: . exp "=" exp
   63    | . exp "=" exp modifiers
   64    | . lvalue "+=" exp
   65    | . lvalue "-=" exp
   66    | . lvalue "*=" exp
   67    | . lvalue "/=" exp
   68    | . lvalue "^=" exp
   69    | . lvalue "%=" exp
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
   73 stmt: . "at" identifiers "(" exp tilda.opt ")" stmt onleave.opt
   74     | . "at" identifiers "(" event_match ")" stmt onleave.opt
   75     | . "every" "(" exp ")" stmt
   76     | . "if" "(" stmts ")" stmt else.opt
   77     | . "freezeif" "(" exp ")" stmt
   78     | . "stopif" "(" exp ")" stmt
   79     | . "switch" "(" exp ")" "{" cases default.opt "}"
   80     | . "timeout" "(" exp ")" stmt catch.opt else.opt finally.opt
   81     | . "return" exp.opt
   82     | . "break"
   83     | . "continue"
   84     | . "waituntil" "(" exp tilda.opt ")"
   85     | . "waituntil" "(" event_match ")"
   86     | . "whenever" "(" exp tilda.opt ")" stmt else.opt
   87     | . "whenever" "(" event_match ")" stmt else.opt
  108     | . "try" block catches.1 else.opt finally.opt
  109     | . "try" block "finally" block
  110     | . "throw" exp.opt
  111     | . "loop" stmt
  112     | . "for" "(" exp ")" stmt
  113     | . "for" "(" stmt.opt ";" exp ";" stmt.opt ")" stmt
  114     | . "for" "(" "var" "identifier" in_or_colon exp ")" stmt
  115     | . "while" "(" exp ")" stmt
  118 primary-exp: . block
  119            | . "do" "(" exp ")" block
  120 detach: . "detach"
  121       | . "disown"
  122 primary-exp: . "assert" "(" exp ")"
  123            | . "assert" "{" claims "}"
  124            | . detach "(" exp ")"
  125            | . detach block
  126            | . "isdef" "(" k1_id ")"
  127            | . "watch" "(" exp ")"
  128 lvalue: . id
  129       | . primary-exp "." id
  130       | . primary-exp "." "*"
  131 primary-exp: . "&" id
  132            | . primary-exp "." "&" id
  133 id: . "identifier"
  134 bitor-exp: . "var" bitor-exp
  135          | . "const" "var" bitor-exp
  136 primary-exp: . lvalue
  137            | . lvalue args
  138 new: . "new" "identifier" args.opt
  139 bitor-exp: . new
  140 id: . "new"
  141 primary-exp: . routine formals block
  142 float-exp: . "float"
  143 duration: . "duration"
  144         | . duration "duration"
  150 dictionary: . "[" assocs "]"
  154 tuple: . "(" tuple.exps ")"
  159 literal-exp: . float-exp
  160            | . "angle"
  161            | . duration
  162            | . string
  163            | . "[" exps "]"
  164            | . "[<" tuple.exps ">]"
  165            | . "<" bitor-exps ">"
  166            | . dictionary
  167            | . tuple
  168 string: . "string"
  169       | . string "string"
  170 literal-exp: . "__HERE__"
  176 lvalue: . primary-exp "[" exps "]"
  177 literal-exp: . "this"
  178            | . "call"
  179 primary-exp: . literal-exp
  180            | . "(" exp ")"
  181            | . "(" error ")"
  182            | . primary-exp "**" primary-exp
  183 unary-exp: . primary-exp
  184          | . "--" lvalue
  185          | . "++" lvalue
  186          | . "+" unary-exp
  187          | . "-" unary-exp
  188          | . "!" unary-exp
  189          | . "compl" unary-exp
  190 bitor-exp: . unary-exp
  191          | . bitor-exp "+" bitor-exp
  192          | . bitor-exp "-" bitor-exp
  193          | . bitor-exp "*" bitor-exp
  194          | . bitor-exp "/" bitor-exp
  195          | . bitor-exp "%" bitor-exp
  196          | . bitor-exp "^" bitor-exp
  197          | . bitor-exp "<<" bitor-exp
  198          | . bitor-exp "bitand" bitor-exp
  199          | . bitor-exp "bitor" bitor-exp
  200          | . bitor-exp ">>" bitor-exp
  211 rel-exp: . bitor-exp rel-ops
  214 exp: . rel-exp
  215    | . exp "&&" exp
  216    | . exp "||" exp
  217    | . exp "in" exp
  218    | . exp "!" "in" exp
  222    | . "%unscope:" unsigned
  223 primary-exp: . "%exp:" unsigned
  224 lvalue: . "%lvalue:" unsigned
  225       | . "%id:" unsigned
  226       | . primary-exp "." "%id:" unsigned
  227 primary-exp: . lvalue "(" "%exps:" unsigned ")"

    "__HERE__"    shift, and go to state 7
    "break"       shift, and go to state 8
    "closure"     shift, and go to state 9
    "const"       shift, and go to state 10
    "continue"    shift, and go to state 11
    "freezeif"    shift, and go to state 12
    "function"    shift, and go to state 13
    "if"          shift, and go to state 14
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "[<"          shift, and go to state 19
    "return"      shift, and go to state 20
    "stopif"      shift, and go to state 21
    "switch"      shift, and go to state 22
    "throw"       shift, and go to state 23
    "timeout"     shift, and go to state 24
    "try"         shift, and go to state 25
    "var"         shift, and go to state 26
    "waituntil"   shift, and go to state 27
    "watch"       shift, and go to state 28
    "whenever"    shift, and go to state 29
    "&"           shift, and go to state 30
    "every"       shift, and go to state 31
    "for"         shift, and go to state 32
    "loop"        shift, and go to state 33
    "while"       shift, and go to state 34
    "at"          shift, and go to state 35
    "identifier"  shift, and go to state 36
    "class"       shift, and go to state 37
    "package"     shift, and go to state 38
    "enum"        shift, and go to state 39
    "external"    shift, and go to state 40
    "import"      shift, and go to state 41
    "--"          shift, and go to state 42
    "++"          shift, and go to state 43
    "do"          shift, and go to state 44
    "assert"      shift, and go to state 45
    "detach"      shift, and go to state 46
    "disown"      shift, and go to state 47
    "new"         shift, and go to state 48
    "angle"       shift, and go to state 49
    "duration"    shift, and go to state 50
    "float"       shift, and go to state 51
    "string"      shift, and go to state 52
    "call"        shift, and go to state 53
    "this"        shift, and go to state 54
    "!"           shift, and go to state 55
    "compl"       shift, and go to state 56
    "-"           shift, and go to state 57
    "+"           shift, and go to state 58
    "<"           shift, and go to state 59
    "%unscope:"   shift, and go to state 60
    "%exp:"       shift, and go to state 61
    "%lvalue:"    shift, and go to state 62
    "%id:"        shift, and go to state 63

    stmt         go to state 285
    block        go to state 68
    exp          go to state 69
    routine      go to state 70
    primary-exp  go to state 71
    detach       go to state 72
    lvalue       go to state 73
    id           go to state 74
    bitor-exp    go to state 75
    new          go to state 76
    float-exp    go to state 77
    duration     go to state 78
    dictionary   go to state 79
    tuple        go to state 80
    literal-exp  go to state 81
    string       go to state 82
    unary-exp    go to state 83
    rel-exp      go to state 84


state 178

   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   37 exp: . "class" lvalue protos block
   38    | . "package" lvalue protos block
   52 routine: . "closure"
   53        | . "function"
   62 exp: . exp "=" exp
   63    | . exp "=" exp modifiers
   64    | . lvalue "+=" exp
   65    | . lvalue "-=" exp
   66    | . lvalue "*=" exp
   67    | . lvalue "/=" exp
   68    | . lvalue "^=" exp
   69    | . lvalue "%=" exp
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
  118            | . block
  119            | . "do" "(" exp ")" block
  120 detach: . "detach"
  121       | . "disown"
  122 primary-exp: . "assert" "(" exp ")"
  123            | . "assert" "{" claims "}"
  124            | . detach "(" exp ")"
  125            | . detach block
  126            | . "isdef" "(" k1_id ")"
  127            | . "watch" "(" exp ")"
  128 lvalue: . id
  129       | . primary-exp "." id
  130       | . primary-exp "." "*"
  131 primary-exp: . "&" id
  132            | . primary-exp "." "&" id
  133 id: . "identifier"
  134 bitor-exp: . "var" bitor-exp
  135          | . "const" "var" bitor-exp
  136 primary-exp: . lvalue
  137            | . lvalue args
  138 new: . "new" "identifier" args.opt
  139 bitor-exp: . new
  140 id: . "new"
  141 primary-exp: . routine formals block
  142 float-exp: . "float"
  143 duration: . "duration"
  144         | . duration "duration"
  150 dictionary: . "[" assocs "]"
  154 tuple: . "(" tuple.exps ")"
  159 literal-exp: . float-exp
  160            | . "angle"
  161            | . duration
  162            | . string
  163            | . "[" exps "]"
  164            | . "[<" tuple.exps ">]"
  165            | . "<" bitor-exps ">"
  166            | . dictionary
  167            | . tuple
  168 string: . "string"
  169       | . string "string"
  170 literal-exp: . "__HERE__"
  176 lvalue: . primary-exp "[" exps "]"
  176       | primary-exp "[" . exps "]"
  177 literal-exp: . "this"
  178            | . "call"
  179 primary-exp: . literal-exp
  180            | . "(" exp ")"
  181            | . "(" error ")"
  182            | . primary-exp "**" primary-exp
  183 unary-exp: . primary-exp
  184          | . "--" lvalue
  185          | . "++" lvalue
  186          | . "+" unary-exp
  187          | . "-" unary-exp
  188          | . "!" unary-exp
  189          | . "compl" unary-exp
  190 bitor-exp: . unary-exp
  191          | . bitor-exp "+" bitor-exp
  192          | . bitor-exp "-" bitor-exp
  193          | . bitor-exp "*" bitor-exp
  194          | . bitor-exp "/" bitor-exp
  195          | . bitor-exp "%" bitor-exp
  196          | . bitor-exp "^" bitor-exp
  197          | . bitor-exp "<<" bitor-exp
  198          | . bitor-exp "bitand" bitor-exp
  199          | . bitor-exp "bitor" bitor-exp
  200          | . bitor-exp ">>" bitor-exp
  211 rel-exp: . bitor-exp rel-ops
  214 exp: . rel-exp
  215    | . exp "&&" exp
  216    | . exp "||" exp
  217    | . exp "in" exp
  218    | . exp "!" "in" exp
  222    | . "%unscope:" unsigned
  223 primary-exp: . "%exp:" unsigned
  224 lvalue: . "%lvalue:" unsigned
  225       | . "%id:" unsigned
  226       | . primary-exp "." "%id:" unsigned
  227 primary-exp: . lvalue "(" "%exps:" unsigned ")"
  232 exps: .  ["]"]
  233     | . exps.1 comma.opt
  234 exps.1: . exp
  235       | . exps.1 "," exp

    "__HERE__"    shift, and go to state 7
    "closure"     shift, and go to state 9
    "const"       shift, and go to state 10
    "function"    shift, and go to state 13
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "[<"          shift, and go to state 19
    "var"         shift, and go to state 26
    "watch"       shift, and go to state 28
    "&"           shift, and go to state 30
    "identifier"  shift, and go to state 36
    "class"       shift, and go to state 37
    "package"     shift, and go to state 38
    "--"          shift, and go to state 42
    "++"          shift, and go to state 43
    "do"          shift, and go to state 44
    "assert"      shift, and go to state 45
    "detach"      shift, and go to state 46
    "disown"      shift, and go to state 47
    "new"         shift, and go to state 48
    "angle"       shift, and go to state 49
    "duration"    shift, and go to state 50
    "float"       shift, and go to state 51
    "string"      shift, and go to state 52
    "call"        shift, and go to state 53
    "this"        shift, and go to state 54
    "!"           shift, and go to state 55
    "compl"       shift, and go to state 56
    "-"           shift, and go to state 57
    "+"           shift, and go to state 58
    "<"           shift, and go to state 59
    "%unscope:"   shift, and go to state 60
    "%exp:"       shift, and go to state 61
    "%lvalue:"    shift, and go to state 62
    "%id:"        shift, and go to state 63

    $default  reduce using rule 232 (exps)

    block        go to state 68
    exp          go to state 114
    routine      go to state 101
    primary-exp  go to state 102
    detach       go to state 72
    lvalue       go to state 73
    id           go to state 103
    bitor-exp    go to state 75
    new          go to state 76
    float-exp    go to state 77
    duration     go to state 78
    dictionary   go to state 79
    tuple        go to state 80
    literal-exp  go to state 81
    string       go to state 82
    unary-exp    go to state 83
    rel-exp      go to state 84
    exps         go to state 286
    exps.1       go to state 108


state 179

  129 lvalue: primary-exp "." . id
  130       | primary-exp "." . "*"
  132 primary-exp: primary-exp "." . "&" id
  133 id: . "identifier"
  140   | . "new"
  226 lvalue: primary-exp "." . "%id:" unsigned

    "&"           shift, and go to state 287
    "identifier"  shift, and go to state 36
    "new"         shift, and go to state 128
    "*"           shift, and go to state 288
    "%id:"        shift, and go to state 289

    id  go to state 290


state 180

   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   52 routine: . "closure"
   53        | . "function"
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
  118            | . block
  119            | . "do" "(" exp ")" block
  120 detach: . "detach"
  121       | . "disown"
  122 primary-exp: . "assert" "(" exp ")"
  123            | . "assert" "{" claims "}"
  124            | . detach "(" exp ")"
  125            | . detach block
  126            | . "isdef" "(" k1_id ")"
  127            | . "watch" "(" exp ")"
  128 lvalue: . id
  129       | . primary-exp "." id
  130       | . primary-exp "." "*"
  131 primary-exp: . "&" id
  132            | . primary-exp "." "&" id
  133 id: . "identifier"
  136 primary-exp: . lvalue
  137            | . lvalue args
  140 id: . "new"
  141 primary-exp: . routine formals block
  142 float-exp: . "float"
  143 duration: . "duration"
  144         | . duration "duration"
  150 dictionary: . "[" assocs "]"
  154 tuple: . "(" tuple.exps ")"
  159 literal-exp: . float-exp
  160            | . "angle"
  161            | . duration
  162            | . string
  163            | . "[" exps "]"
  164            | . "[<" tuple.exps ">]"
  165            | . "<" bitor-exps ">"
  166            | . dictionary
  167            | . tuple
  168 string: . "string"
  169       | . string "string"
  170 literal-exp: . "__HERE__"
  176 lvalue: . primary-exp "[" exps "]"
  177 literal-exp: . "this"
  178            | . "call"
  179 primary-exp: . literal-exp
  180            | . "(" exp ")"
  181            | . "(" error ")"
  182            | . primary-exp "**" primary-exp
  182            | primary-exp "**" . primary-exp
  223            | . "%exp:" unsigned
  224 lvalue: . "%lvalue:" unsigned
  225       | . "%id:" unsigned
  226       | . primary-exp "." "%id:" unsigned
  227 primary-exp: . lvalue "(" "%exps:" unsigned ")"

    "__HERE__"    shift, and go to state 7
    "closure"     shift, and go to state 9
    "function"    shift, and go to state 13
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "[<"          shift, and go to state 19
    "watch"       shift, and go to state 28
    "&"           shift, and go to state 30
    "identifier"  shift, and go to state 36
    "do"          shift, and go to state 44
    "assert"      shift, and go to state 45
    "detach"      shift, and go to state 46
    "disown"      shift, and go to state 47
    "new"         shift, and go to state 128
    "angle"       shift, and go to state 49
    "duration"    shift, and go to state 50
    "float"       shift, and go to state 51
    "string"      shift, and go to state 52
    "call"        shift, and go to state 53
    "this"        shift, and go to state 54
    "<"           shift, and go to state 59
    "%exp:"       shift, and go to state 61
    "%lvalue:"    shift, and go to state 62
    "%id:"        shift, and go to state 63

    block        go to state 68
    routine      go to state 101
    primary-exp  go to state 291
    detach       go to state 72
    lvalue       go to state 123
    id           go to state 103
    float-exp    go to state 77
    duration     go to state 78
    dictionary   go to state 79
    tuple        go to state 80
    literal-exp  go to state 81
    string       go to state 82


state 181

   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   37 exp: . "class" lvalue protos block
   38    | . "package" lvalue protos block
   52 routine: . "closure"
   53        | . "function"
   62 exp: . exp "=" exp
   63    | . exp "=" exp modifiers
   64    | . lvalue "+=" exp
   65    | . lvalue "-=" exp
   66    | . lvalue "*=" exp
   67    | . lvalue "/=" exp
   68    | . lvalue "^=" exp
   69    | . lvalue "%=" exp
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
  118            | . block
  119            | . "do" "(" exp ")" block
  120 detach: . "detach"
  121       | . "disown"
  122 primary-exp: . "assert" "(" exp ")"
  123            | . "assert" "{" claims "}"
  124            | . detach "(" exp ")"
  124            | detach "(" . exp ")"
  125            | . detach block
  126            | . "isdef" "(" k1_id ")"
  127            | . "watch" "(" exp ")"
  128 lvalue: . id
  129       | . primary-exp "." id
  130       | . primary-exp "." "*"
  131 primary-exp: . "&" id
  132            | . primary-exp "." "&" id
  133 id: . "identifier"
  134 bitor-exp: . "var" bitor-exp
  135          | . "const" "var" bitor-exp
  136 primary-exp: . lvalue
  137            | . lvalue args
  138 new: . "new" "identifier" args.opt
  139 bitor-exp: . new
  140 id: . "new"
  141 primary-exp: . routine formals block
  142 float-exp: . "float"
  143 duration: . "duration"
  144         | . duration "duration"
  150 dictionary: . "[" assocs "]"
  154 tuple: . "(" tuple.exps ")"
  159 literal-exp: . float-exp
  160            | . "angle"
  161            | . duration
  162            | . string
  163            | . "[" exps "]"
  164            | . "[<" tuple.exps ">]"
  165            | . "<" bitor-exps ">"
  166            | . dictionary
  167            | . tuple
  168 string: . "string"
  169       | . string "string"
  170 literal-exp: . "__HERE__"
  176 lvalue: . primary-exp "[" exps "]"
  177 literal-exp: . "this"
  178            | . "call"
  179 primary-exp: . literal-exp
  180            | . "(" exp ")"
  181            | . "(" error ")"
  182            | . primary-exp "**" primary-exp
  183 unary-exp: . primary-exp
  184          | . "--" lvalue
  185          | . "++" lvalue
  186          | . "+" unary-exp
  187          | . "-" unary-exp
  188          | . "!" unary-exp
  189          | . "compl" unary-exp
  190 bitor-exp: . unary-exp
  191          | . bitor-exp "+" bitor-exp
  192          | . bitor-exp "-" bitor-exp
  193          | . bitor-exp "*" bitor-exp
  194          | . bitor-exp "/" bitor-exp
  195          | . bitor-exp "%" bitor-exp
  196          | . bitor-exp "^" bitor-exp
  197          | . bitor-exp "<<" bitor-exp
  198          | . bitor-exp "bitand" bitor-exp
  199          | . bitor-exp "bitor" bitor-exp
  200          | . bitor-exp ">>" bitor-exp
  211 rel-exp: . bitor-exp rel-ops
  214 exp: . rel-exp
  215    | . exp "&&" exp
  216    | . exp "||" exp
  217    | . exp "in" exp
  218    | . exp "!" "in" exp
  222    | . "%unscope:" unsigned
  223 primary-exp: . "%exp:" unsigned
  224 lvalue: . "%lvalue:" unsigned
  225       | . "%id:" unsigned
  226       | . primary-exp "." "%id:" unsigned
  227 primary-exp: . lvalue "(" "%exps:" unsigned ")"

    "__HERE__"    shift, and go to state 7
    "closure"     shift, and go to state 9
    "const"       shift, and go to state 10
    "function"    shift, and go to state 13
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "[<"          shift, and go to state 19
    "var"         shift, and go to state 26
    "watch"       shift, and go to state 28
    "&"           shift, and go to state 30
    "identifier"  shift, and go to state 36
    "class"       shift, and go to state 37
    "package"     shift, and go to state 38
    "--"          shift, and go to state 42
    "++"          shift, and go to state 43
    "do"          shift, and go to state 44
    "assert"      shift, and go to state 45
    "detach"      shift, and go to state 46
    "disown"      shift, and go to state 47
    "new"         shift, and go to state 48
    "angle"       shift, and go to state 49
    "duration"    shift, and go to state 50
    "float"       shift, and go to state 51
    "string"      shift, and go to state 52
    "call"        shift, and go to state 53
    "this"        shift, and go to state 54
    "!"           shift, and go to state 55
    "compl"       shift, and go to state 56
    "-"           shift, and go to state 57
    "+"           shift, and go to state 58
    "<"           shift, and go to state 59
    "%unscope:"   shift, and go to state 60
    "%exp:"       shift, and go to state 61
    "%lvalue:"    shift, and go to state 62
    "%id:"        shift, and go to state 63

    block        go to state 68
    exp          go to state 292
    routine      go to state 101
    primary-exp  go to state 102
    detach       go to state 72
    lvalue       go to state 73
    id           go to state 103
    bitor-exp    go to state 75
    new          go to state 76
    float-exp    go to state 77
    duration     go to state 78
    dictionary   go to state 79
    tuple        go to state 80
    literal-exp  go to state 81
    string       go to state 82
    unary-exp    go to state 83
    rel-exp      go to state 84


state 182

  125 primary-exp: detach block .

    $default  reduce using rule 125 (primary-exp)


state 183

   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   37 exp: . "class" lvalue protos block
   38    | . "package" lvalue protos block
   52 routine: . "closure"
   53        | . "function"
   62 exp: . exp "=" exp
   63    | . exp "=" exp modifiers
   64    | . lvalue "+=" exp
   65    | . lvalue "-=" exp
   66    | . lvalue "*=" exp
   67    | . lvalue "/=" exp
   68    | . lvalue "^=" exp
   69    | . lvalue "%=" exp
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
  118            | . block
  119            | . "do" "(" exp ")" block
  120 detach: . "detach"
  121       | . "disown"
  122 primary-exp: . "assert" "(" exp ")"
  123            | . "assert" "{" claims "}"
  124            | . detach "(" exp ")"
  125            | . detach block
  126            | . "isdef" "(" k1_id ")"
  127            | . "watch" "(" exp ")"
  128 lvalue: . id
  129       | . primary-exp "." id
  130       | . primary-exp "." "*"
  131 primary-exp: . "&" id
  132            | . primary-exp "." "&" id
  133 id: . "identifier"
  134 bitor-exp: . "var" bitor-exp
  135          | . "const" "var" bitor-exp
  136 primary-exp: . lvalue
  137            | . lvalue args
  138 new: . "new" "identifier" args.opt
  139 bitor-exp: . new
  140 id: . "new"
  141 primary-exp: . routine formals block
  142 float-exp: . "float"
  143 duration: . "duration"
  144         | . duration "duration"
  150 dictionary: . "[" assocs "]"
  154 tuple: . "(" tuple.exps ")"
  159 literal-exp: . float-exp
  160            | . "angle"
  161            | . duration
  162            | . string
  163            | . "[" exps "]"
  164            | . "[<" tuple.exps ">]"
  165            | . "<" bitor-exps ">"
  166            | . dictionary
  167            | . tuple
  168 string: . "string"
  169       | . string "string"
  170 literal-exp: . "__HERE__"
  176 lvalue: . primary-exp "[" exps "]"
  177 literal-exp: . "this"
  178            | . "call"
  179 primary-exp: . literal-exp
  180            | . "(" exp ")"
  181            | . "(" error ")"
  182            | . primary-exp "**" primary-exp
  183 unary-exp: . primary-exp
  184          | . "--" lvalue
  185          | . "++" lvalue
  186          | . "+" unary-exp
  187          | . "-" unary-exp
  188          | . "!" unary-exp
  189          | . "compl" unary-exp
  190 bitor-exp: . unary-exp
  191          | . bitor-exp "+" bitor-exp
  192          | . bitor-exp "-" bitor-exp
  193          | . bitor-exp "*" bitor-exp
  194          | . bitor-exp "/" bitor-exp
  195          | . bitor-exp "%" bitor-exp
  196          | . bitor-exp "^" bitor-exp
  197          | . bitor-exp "<<" bitor-exp
  198          | . bitor-exp "bitand" bitor-exp
  199          | . bitor-exp "bitor" bitor-exp
  200          | . bitor-exp ">>" bitor-exp
  211 rel-exp: . bitor-exp rel-ops
  214 exp: . rel-exp
  215    | . exp "&&" exp
  216    | . exp "||" exp
  217    | . exp "in" exp
  218    | . exp "!" "in" exp
  222    | . "%unscope:" unsigned
  223 primary-exp: . "%exp:" unsigned
  224 lvalue: . "%lvalue:" unsigned
  225       | . "%id:" unsigned
  226       | . primary-exp "." "%id:" unsigned
  227 primary-exp: . lvalue "(" "%exps:" unsigned ")"
  227            | lvalue "(" . "%exps:" unsigned ")"
  232 exps: .  [")"]
  233     | . exps.1 comma.opt
  234 exps.1: . exp
  235       | . exps.1 "," exp
  237 args: "(" . exps ")"

    "__HERE__"    shift, and go to state 7
    "closure"     shift, and go to state 9
    "const"       shift, and go to state 10
    "function"    shift, and go to state 13
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "[<"          shift, and go to state 19
    "var"         shift, and go to state 26
    "watch"       shift, and go to state 28
    "&"           shift, and go to state 30
    "identifier"  shift, and go to state 36
    "class"       shift, and go to state 37
    "package"     shift, and go to state 38
    "--"          shift, and go to state 42
    "++"          shift, and go to state 43
    "do"          shift, and go to state 44
    "assert"      shift, and go to state 45
    "detach"      shift, and go to state 46
    "disown"      shift, and go to state 47
    "new"         shift, and go to state 48
    "angle"       shift, and go to state 49
    "duration"    shift, and go to state 50
    "float"       shift, and go to state 51
    "string"      shift, and go to state 52
    "call"        shift, and go to state 53
    "this"        shift, and go to state 54
    "!"           shift, and go to state 55
    "compl"       shift, and go to state 56
    "-"           shift, and go to state 57
    "+"           shift, and go to state 58
    "<"           shift, and go to state 59
    "%unscope:"   shift, and go to state 60
    "%exp:"       shift, and go to state 61
    "%lvalue:"    shift, and go to state 62
    "%id:"        shift, and go to state 63
    "%exps:"      shift, and go to state 293

    $default  reduce using rule 232 (exps)

    block        go to state 68
    exp          go to state 114
    routine      go to state 101
    primary-exp  go to state 102
    detach       go to state 72
    lvalue       go to state 73
    id           go to state 103
    bitor-exp    go to state 75
    new          go to state 76
    float-exp    go to state 77
    duration     go to state 78
    dictionary   go to state 79
    tuple        go to state 80
    literal-exp  go to state 81
    string       go to state 82
    unary-exp    go to state 83
    rel-exp      go to state 84
    exps         go to state 294
    exps.1       go to state 108


state 184

   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   37 exp: . "class" lvalue protos block
   38    | . "package" lvalue protos block
   52 routine: . "closure"
   53        | . "function"
   62 exp: . exp "=" exp
   63    | . exp "=" exp modifiers
   64    | . lvalue "+=" exp
   65    | . lvalue "-=" exp
   66    | . lvalue "*=" exp
   67    | . lvalue "/=" exp
   68    | . lvalue "^=" exp
   68    | lvalue "^=" . exp
   69    | . lvalue "%=" exp
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
  118            | . block
  119            | . "do" "(" exp ")" block
  120 detach: . "detach"
  121       | . "disown"
  122 primary-exp: . "assert" "(" exp ")"
  123            | . "assert" "{" claims "}"
  124            | . detach "(" exp ")"
  125            | . detach block
  126            | . "isdef" "(" k1_id ")"
  127            | . "watch" "(" exp ")"
  128 lvalue: . id
  129       | . primary-exp "." id
  130       | . primary-exp "." "*"
  131 primary-exp: . "&" id
  132            | . primary-exp "." "&" id
  133 id: . "identifier"
  134 bitor-exp: . "var" bitor-exp
  135          | . "const" "var" bitor-exp
  136 primary-exp: . lvalue
  137            | . lvalue args
  138 new: . "new" "identifier" args.opt
  139 bitor-exp: . new
  140 id: . "new"
  141 primary-exp: . routine formals block
  142 float-exp: . "float"
  143 duration: . "duration"
  144         | . duration "duration"
  150 dictionary: . "[" assocs "]"
  154 tuple: . "(" tuple.exps ")"
  159 literal-exp: . float-exp
  160            | . "angle"
  161            | . duration
  162            | . string
  163            | . "[" exps "]"
  164            | . "[<" tuple.exps ">]"
  165            | . "<" bitor-exps ">"
  166            | . dictionary
  167            | . tuple
  168 string: . "string"
  169       | . string "string"
  170 literal-exp: . "__HERE__"
  176 lvalue: . primary-exp "[" exps "]"
  177 literal-exp: . "this"
  178            | . "call"
  179 primary-exp: . literal-exp
  180            | . "(" exp ")"
  181            | . "(" error ")"
  182            | . primary-exp "**" primary-exp
  183 unary-exp: . primary-exp
  184          | . "--" lvalue
  185          | . "++" lvalue
  186          | . "+" unary-exp
  187          | . "-" unary-exp
  188          | . "!" unary-exp
  189          | . "compl" unary-exp
  190 bitor-exp: . unary-exp
  191          | . bitor-exp "+" bitor-exp
  192          | . bitor-exp "-" bitor-exp
  193          | . bitor-exp "*" bitor-exp
  194          | . bitor-exp "/" bitor-exp
  195          | . bitor-exp "%" bitor-exp
  196          | . bitor-exp "^" bitor-exp
  197          | . bitor-exp "<<" bitor-exp
  198          | . bitor-exp "bitand" bitor-exp
  199          | . bitor-exp "bitor" bitor-exp
  200          | . bitor-exp ">>" bitor-exp
  211 rel-exp: . bitor-exp rel-ops
  214 exp: . rel-exp
  215    | . exp "&&" exp
  216    | . exp "||" exp
  217    | . exp "in" exp
  218    | . exp "!" "in" exp
  222    | . "%unscope:" unsigned
  223 primary-exp: . "%exp:" unsigned
  224 lvalue: . "%lvalue:" unsigned
  225       | . "%id:" unsigned
  226       | . primary-exp "." "%id:" unsigned
  227 primary-exp: . lvalue "(" "%exps:" unsigned ")"

    "__HERE__"    shift, and go to state 7
    "closure"     shift, and go to state 9
    "const"       shift, and go to state 10
    "function"    shift, and go to state 13
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "[<"          shift, and go to state 19
    "var"         shift, and go to state 26
    "watch"       shift, and go to state 28
    "&"           shift, and go to state 30
    "identifier"  shift, and go to state 36
    "class"       shift, and go to state 37
    "package"     shift, and go to state 38
    "--"          shift, and go to state 42
    "++"          shift, and go to state 43
    "do"          shift, and go to state 44
    "assert"      shift, and go to state 45
    "detach"      shift, and go to state 46
    "disown"      shift, and go to state 47
    "new"         shift, and go to state 48
    "angle"       shift, and go to state 49
    "duration"    shift, and go to state 50
    "float"       shift, and go to state 51
    "string"      shift, and go to state 52
    "call"        shift, and go to state 53
    "this"        shift, and go to state 54
    "!"           shift, and go to state 55
    "compl"       shift, and go to state 56
    "-"           shift, and go to state 57
    "+"           shift, and go to state 58
    "<"           shift, and go to state 59
    "%unscope:"   shift, and go to state 60
    "%exp:"       shift, and go to state 61
    "%lvalue:"    shift, and go to state 62
    "%id:"        shift, and go to state 63

    block        go to state 68
    exp          go to state 295
    routine      go to state 101
    primary-exp  go to state 102
    detach       go to state 72
    lvalue       go to state 73
    id           go to state 103
    bitor-exp    go to state 75
    new          go to state 76
    float-exp    go to state 77
    duration     go to state 78
    dictionary   go to state 79
    tuple        go to state 80
    literal-exp  go to state 81
    string       go to state 82
    unary-exp    go to state 83
    rel-exp      go to state 84


state 185

   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   37 exp: . "class" lvalue protos block
   38    | . "package" lvalue protos block
   52 routine: . "closure"
   53        | . "function"
   62 exp: . exp "=" exp
   63    | . exp "=" exp modifiers
   64    | . lvalue "+=" exp
   65    | . lvalue "-=" exp
   65    | lvalue "-=" . exp
   66    | . lvalue "*=" exp
   67    | . lvalue "/=" exp
   68    | . lvalue "^=" exp
   69    | . lvalue "%=" exp
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
  118            | . block
  119            | . "do" "(" exp ")" block
  120 detach: . "detach"
  121       | . "disown"
  122 primary-exp: . "assert" "(" exp ")"
  123            | . "assert" "{" claims "}"
  124            | . detach "(" exp ")"
  125            | . detach block
  126            | . "isdef" "(" k1_id ")"
  127            | . "watch" "(" exp ")"
  128 lvalue: . id
  129       | . primary-exp "." id
  130       | . primary-exp "." "*"
  131 primary-exp: . "&" id
  132            | . primary-exp "." "&" id
  133 id: . "identifier"
  134 bitor-exp: . "var" bitor-exp
  135          | . "const" "var" bitor-exp
  136 primary-exp: . lvalue
  137            | . lvalue args
  138 new: . "new" "identifier" args.opt
  139 bitor-exp: . new
  140 id: . "new"
  141 primary-exp: . routine formals block
  142 float-exp: . "float"
  143 duration: . "duration"
  144         | . duration "duration"
  150 dictionary: . "[" assocs "]"
  154 tuple: . "(" tuple.exps ")"
  159 literal-exp: . float-exp
  160            | . "angle"
  161            | . duration
  162            | . string
  163            | . "[" exps "]"
  164            | . "[<" tuple.exps ">]"
  165            | . "<" bitor-exps ">"
  166            | . dictionary
  167            | . tuple
  168 string: . "string"
  169       | . string "string"
  170 literal-exp: . "__HERE__"
  176 lvalue: . primary-exp "[" exps "]"
  177 literal-exp: . "this"
  178            | . "call"
  179 primary-exp: . literal-exp
  180            | . "(" exp ")"
  181            | . "(" error ")"
  182            | . primary-exp "**" primary-exp
  183 unary-exp: . primary-exp
  184          | . "--" lvalue
  185          | . "++" lvalue
  186          | . "+" unary-exp
  187          | . "-" unary-exp
  188          | . "!" unary-exp
  189          | . "compl" unary-exp
  190 bitor-exp: . unary-exp
  191          | . bitor-exp "+" bitor-exp
  192          | . bitor-exp "-" bitor-exp
  193          | . bitor-exp "*" bitor-exp
  194          | . bitor-exp "/" bitor-exp
  195          | . bitor-exp "%" bitor-exp
  196          | . bitor-exp "^" bitor-exp
  197          | . bitor-exp "<<" bitor-exp
  198          | . bitor-exp "bitand" bitor-exp
  199          | . bitor-exp "bitor" bitor-exp
  200          | . bitor-exp ">>" bitor-exp
  211 rel-exp: . bitor-exp rel-ops
  214 exp: . rel-exp
  215    | . exp "&&" exp
  216    | . exp "||" exp
  217    | . exp "in" exp
  218    | . exp "!" "in" exp
  222    | . "%unscope:" unsigned
  223 primary-exp: . "%exp:" unsigned
  224 lvalue: . "%lvalue:" unsigned
  225       | . "%id:" unsigned
  226       | . primary-exp "." "%id:" unsigned
  227 primary-exp: . lvalue "(" "%exps:" unsigned ")"

    "__HERE__"    shift, and go to state 7
    "closure"     shift, and go to state 9
    "const"       shift, and go to state 10
    "function"    shift, and go to state 13
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "[<"          shift, and go to state 19
    "var"         shift, and go to state 26
    "watch"       shift, and go to state 28
    "&"           shift, and go to state 30
    "identifier"  shift, and go to state 36
    "class"       shift, and go to state 37
    "package"     shift, and go to state 38
    "--"          shift, and go to state 42
    "++"          shift, and go to state 43
    "do"          shift, and go to state 44
    "assert"      shift, and go to state 45
    "detach"      shift, and go to state 46
    "disown"      shift, and go to state 47
    "new"         shift, and go to state 48
    "angle"       shift, and go to state 49
    "duration"    shift, and go to state 50
    "float"       shift, and go to state 51
    "string"      shift, and go to state 52
    "call"        shift, and go to state 53
    "this"        shift, and go to state 54
    "!"           shift, and go to state 55
    "compl"       shift, and go to state 56
    "-"           shift, and go to state 57
    "+"           shift, and go to state 58
    "<"           shift, and go to state 59
    "%unscope:"   shift, and go to state 60
    "%exp:"       shift, and go to state 61
    "%lvalue:"    shift, and go to state 62
    "%id:"        shift, and go to state 63

    block        go to state 68
    exp          go to state 296
    routine      go to state 101
    primary-exp  go to state 102
    detach       go to state 72
    lvalue       go to state 73
    id           go to state 103
    bitor-exp    go to state 75
    new          go to state 76
    float-exp    go to state 77
    duration     go to state 78
    dictionary   go to state 79
    tuple        go to state 80
    literal-exp  go to state 81
    string       go to state 82
    unary-exp    go to state 83
    rel-exp      go to state 84


state 186

   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   37 exp: . "class" lvalue protos block
   38    | . "package" lvalue protos block
   52 routine: . "closure"
   53        | . "function"
   62 exp: . exp "=" exp
   63    | . exp "=" exp modifiers
   64    | . lvalue "+=" exp
   65    | . lvalue "-=" exp
   66    | . lvalue "*=" exp
   67    | . lvalue "/=" exp
   68    | . lvalue "^=" exp
   69    | . lvalue "%=" exp
   69    | lvalue "%=" . exp
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
  118            | . block
  119            | . "do" "(" exp ")" block
  120 detach: . "detach"
  121       | . "disown"
  122 primary-exp: . "assert" "(" exp ")"
  123            | . "assert" "{" claims "}"
  124            | . detach "(" exp ")"
  125            | . detach block
  126            | . "isdef" "(" k1_id ")"
  127            | . "watch" "(" exp ")"
  128 lvalue: . id
  129       | . primary-exp "." id
  130       | . primary-exp "." "*"
  131 primary-exp: . "&" id
  132            | . primary-exp "." "&" id
  133 id: . "identifier"
  134 bitor-exp: . "var" bitor-exp
  135          | . "const" "var" bitor-exp
  136 primary-exp: . lvalue
  137            | . lvalue args
  138 new: . "new" "identifier" args.opt
  139 bitor-exp: . new
  140 id: . "new"
  141 primary-exp: . routine formals block
  142 float-exp: . "float"
  143 duration: . "duration"
  144         | . duration "duration"
  150 dictionary: . "[" assocs "]"
  154 tuple: . "(" tuple.exps ")"
  159 literal-exp: . float-exp
  160            | . "angle"
  161            | . duration
  162            | . string
  163            | . "[" exps "]"
  164            | . "[<" tuple.exps ">]"
  165            | . "<" bitor-exps ">"
  166            | . dictionary
  167            | . tuple
  168 string: . "string"
  169       | . string "string"
  170 literal-exp: . "__HERE__"
  176 lvalue: . primary-exp "[" exps "]"
  177 literal-exp: . "this"
  178            | . "call"
  179 primary-exp: . literal-exp
  180            | . "(" exp ")"
  181            | . "(" error ")"
  182            | . primary-exp "**" primary-exp
  183 unary-exp: . primary-exp
  184          | . "--" lvalue
  185          | . "++" lvalue
  186          | . "+" unary-exp
  187          | . "-" unary-exp
  188          | . "!" unary-exp
  189          | . "compl" unary-exp
  190 bitor-exp: . unary-exp
  191          | . bitor-exp "+" bitor-exp
  192          | . bitor-exp "-" bitor-exp
  193          | . bitor-exp "*" bitor-exp
  194          | . bitor-exp "/" bitor-exp
  195          | . bitor-exp "%" bitor-exp
  196          | . bitor-exp "^" bitor-exp
  197          | . bitor-exp "<<" bitor-exp
  198          | . bitor-exp "bitand" bitor-exp
  199          | . bitor-exp "bitor" bitor-exp
  200          | . bitor-exp ">>" bitor-exp
  211 rel-exp: . bitor-exp rel-ops
  214 exp: . rel-exp
  215    | . exp "&&" exp
  216    | . exp "||" exp
  217    | . exp "in" exp
  218    | . exp "!" "in" exp
  222    | . "%unscope:" unsigned
  223 primary-exp: . "%exp:" unsigned
  224 lvalue: . "%lvalue:" unsigned
  225       | . "%id:" unsigned
  226       | . primary-exp "." "%id:" unsigned
  227 primary-exp: . lvalue "(" "%exps:" unsigned ")"

    "__HERE__"    shift, and go to state 7
    "closure"     shift, and go to state 9
    "const"       shift, and go to state 10
    "function"    shift, and go to state 13
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "[<"          shift, and go to state 19
    "var"         shift, and go to state 26
    "watch"       shift, and go to state 28
    "&"           shift, and go to state 30
    "identifier"  shift, and go to state 36
    "class"       shift, and go to state 37
    "package"     shift, and go to state 38
    "--"          shift, and go to state 42
    "++"          shift, and go to state 43
    "do"          shift, and go to state 44
    "assert"      shift, and go to state 45
    "detach"      shift, and go to state 46
    "disown"      shift, and go to state 47
    "new"         shift, and go to state 48
    "angle"       shift, and go to state 49
    "duration"    shift, and go to state 50
    "float"       shift, and go to state 51
    "string"      shift, and go to state 52
    "call"        shift, and go to state 53
    "this"        shift, and go to state 54
    "!"           shift, and go to state 55
    "compl"       shift, and go to state 56
    "-"           shift, and go to state 57
    "+"           shift, and go to state 58
    "<"           shift, and go to state 59
    "%unscope:"   shift, and go to state 60
    "%exp:"       shift, and go to state 61
    "%lvalue:"    shift, and go to state 62
    "%id:"        shift, and go to state 63

    block        go to state 68
    exp          go to state 297
    routine      go to state 101
    primary-exp  go to state 102
    detach       go to state 72
    lvalue       go to state 73
    id           go to state 103
    bitor-exp    go to state 75
    new          go to state 76
    float-exp    go to state 77
    duration     go to state 78
    dictionary   go to state 79
    tuple        go to state 80
    literal-exp  go to state 81
    string       go to state 82
    unary-exp    go to state 83
    rel-exp      go to state 84


state 187

   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   37 exp: . "class" lvalue protos block
   38    | . "package" lvalue protos block
   52 routine: . "closure"
   53        | . "function"
   62 exp: . exp "=" exp
   63    | . exp "=" exp modifiers
   64    | . lvalue "+=" exp
   64    | lvalue "+=" . exp
   65    | . lvalue "-=" exp
   66    | . lvalue "*=" exp
   67    | . lvalue "/=" exp
   68    | . lvalue "^=" exp
   69    | . lvalue "%=" exp
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
  118            | . block
  119            | . "do" "(" exp ")" block
  120 detach: . "detach"
  121       | . "disown"
  122 primary-exp: . "assert" "(" exp ")"
  123            | . "assert" "{" claims "}"
  124            | . detach "(" exp ")"
  125            | . detach block
  126            | . "isdef" "(" k1_id ")"
  127            | . "watch" "(" exp ")"
  128 lvalue: . id
  129       | . primary-exp "." id
  130       | . primary-exp "." "*"
  131 primary-exp: . "&" id
  132            | . primary-exp "." "&" id
  133 id: . "identifier"
  134 bitor-exp: . "var" bitor-exp
  135          | . "const" "var" bitor-exp
  136 primary-exp: . lvalue
  137            | . lvalue args
  138 new: . "new" "identifier" args.opt
  139 bitor-exp: . new
  140 id: . "new"
  141 primary-exp: . routine formals block
  142 float-exp: . "float"
  143 duration: . "duration"
  144         | . duration "duration"
  150 dictionary: . "[" assocs "]"
  154 tuple: . "(" tuple.exps ")"
  159 literal-exp: . float-exp
  160            | . "angle"
  161            | . duration
  162            | . string
  163            | . "[" exps "]"
  164            | . "[<" tuple.exps ">]"
  165            | . "<" bitor-exps ">"
  166            | . dictionary
  167            | . tuple
  168 string: . "string"
  169       | . string "string"
  170 literal-exp: . "__HERE__"
  176 lvalue: . primary-exp "[" exps "]"
  177 literal-exp: . "this"
  178            | . "call"
  179 primary-exp: . literal-exp
  180            | . "(" exp ")"
  181            | . "(" error ")"
  182            | . primary-exp "**" primary-exp
  183 unary-exp: . primary-exp
  184          | . "--" lvalue
  185          | . "++" lvalue
  186          | . "+" unary-exp
  187          | . "-" unary-exp
  188          | . "!" unary-exp
  189          | . "compl" unary-exp
  190 bitor-exp: . unary-exp
  191          | . bitor-exp "+" bitor-exp
  192          | . bitor-exp "-" bitor-exp
  193          | . bitor-exp "*" bitor-exp
  194          | . bitor-exp "/" bitor-exp
  195          | . bitor-exp "%" bitor-exp
  196          | . bitor-exp "^" bitor-exp
  197          | . bitor-exp "<<" bitor-exp
  198          | . bitor-exp "bitand" bitor-exp
  199          | . bitor-exp "bitor" bitor-exp
  200          | . bitor-exp ">>" bitor-exp
  211 rel-exp: . bitor-exp rel-ops
  214 exp: . rel-exp
  215    | . exp "&&" exp
  216    | . exp "||" exp
  217    | . exp "in" exp
  218    | . exp "!" "in" exp
  222    | . "%unscope:" unsigned
  223 primary-exp: . "%exp:" unsigned
  224 lvalue: . "%lvalue:" unsigned
  225       | . "%id:" unsigned
  226       | . primary-exp "." "%id:" unsigned
  227 primary-exp: . lvalue "(" "%exps:" unsigned ")"

    "__HERE__"    shift, and go to state 7
    "closure"     shift, and go to state 9
    "const"       shift, and go to state 10
    "function"    shift, and go to state 13
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "[<"          shift, and go to state 19
    "var"         shift, and go to state 26
    "watch"       shift, and go to state 28
    "&"           shift, and go to state 30
    "identifier"  shift, and go to state 36
    "class"       shift, and go to state 37
    "package"     shift, and go to state 38
    "--"          shift, and go to state 42
    "++"          shift, and go to state 43
    "do"          shift, and go to state 44
    "assert"      shift, and go to state 45
    "detach"      shift, and go to state 46
    "disown"      shift, and go to state 47
    "new"         shift, and go to state 48
    "angle"       shift, and go to state 49
    "duration"    shift, and go to state 50
    "float"       shift, and go to state 51
    "string"      shift, and go to state 52
    "call"        shift, and go to state 53
    "this"        shift, and go to state 54
    "!"           shift, and go to state 55
    "compl"       shift, and go to state 56
    "-"           shift, and go to state 57
    "+"           shift, and go to state 58
    "<"           shift, and go to state 59
    "%unscope:"   shift, and go to state 60
    "%exp:"       shift, and go to state 61
    "%lvalue:"    shift, and go to state 62
    "%id:"        shift, and go to state 63

    block        go to state 68
    exp          go to state 298
    routine      go to state 101
    primary-exp  go to state 102
    detach       go to state 72
    lvalue       go to state 73
    id           go to state 103
    bitor-exp    go to state 75
    new          go to state 76
    float-exp    go to state 77
    duration     go to state 78
    dictionary   go to state 79
    tuple        go to state 80
    literal-exp  go to state 81
    string       go to state 82
    unary-exp    go to state 83
    rel-exp      go to state 84


state 188

   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   37 exp: . "class" lvalue protos block
   38    | . "package" lvalue protos block
   52 routine: . "closure"
   53        | . "function"
   62 exp: . exp "=" exp
   63    | . exp "=" exp modifiers
   64    | . lvalue "+=" exp
   65    | . lvalue "-=" exp
   66    | . lvalue "*=" exp
   67    | . lvalue "/=" exp
   67    | lvalue "/=" . exp
   68    | . lvalue "^=" exp
   69    | . lvalue "%=" exp
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
  118            | . block
  119            | . "do" "(" exp ")" block
  120 detach: . "detach"
  121       | . "disown"
  122 primary-exp: . "assert" "(" exp ")"
  123            | . "assert" "{" claims "}"
  124            | . detach "(" exp ")"
  125            | . detach block
  126            | . "isdef" "(" k1_id ")"
  127            | . "watch" "(" exp ")"
  128 lvalue: . id
  129       | . primary-exp "." id
  130       | . primary-exp "." "*"
  131 primary-exp: . "&" id
  132            | . primary-exp "." "&" id
  133 id: . "identifier"
  134 bitor-exp: . "var" bitor-exp
  135          | . "const" "var" bitor-exp
  136 primary-exp: . lvalue
  137            | . lvalue args
  138 new: . "new" "identifier" args.opt
  139 bitor-exp: . new
  140 id: . "new"
  141 primary-exp: . routine formals block
  142 float-exp: . "float"
  143 duration: . "duration"
  144         | . duration "duration"
  150 dictionary: . "[" assocs "]"
  154 tuple: . "(" tuple.exps ")"
  159 literal-exp: . float-exp
  160            | . "angle"
  161            | . duration
  162            | . string
  163            | . "[" exps "]"
  164            | . "[<" tuple.exps ">]"
  165            | . "<" bitor-exps ">"
  166            | . dictionary
  167            | . tuple
  168 string: . "string"
  169       | . string "string"
  170 literal-exp: . "__HERE__"
  176 lvalue: . primary-exp "[" exps "]"
  177 literal-exp: . "this"
  178            | . "call"
  179 primary-exp: . literal-exp
  180            | . "(" exp ")"
  181            | . "(" error ")"
  182            | . primary-exp "**" primary-exp
  183 unary-exp: . primary-exp
  184          | . "--" lvalue
  185          | . "++" lvalue
  186          | . "+" unary-exp
  187          | . "-" unary-exp
  188          | . "!" unary-exp
  189          | . "compl" unary-exp
  190 bitor-exp: . unary-exp
  191          | . bitor-exp "+" bitor-exp
  192          | . bitor-exp "-" bitor-exp
  193          | . bitor-exp "*" bitor-exp
  194          | . bitor-exp "/" bitor-exp
  195          | . bitor-exp "%" bitor-exp
  196          | . bitor-exp "^" bitor-exp
  197          | . bitor-exp "<<" bitor-exp
  198          | . bitor-exp "bitand" bitor-exp
  199          | . bitor-exp "bitor" bitor-exp
  200          | . bitor-exp ">>" bitor-exp
  211 rel-exp: . bitor-exp rel-ops
  214 exp: . rel-exp
  215    | . exp "&&" exp
  216    | . exp "||" exp
  217    | . exp "in" exp
  218    | . exp "!" "in" exp
  222    | . "%unscope:" unsigned
  223 primary-exp: . "%exp:" unsigned
  224 lvalue: . "%lvalue:" unsigned
  225       | . "%id:" unsigned
  226       | . primary-exp "." "%id:" unsigned
  227 primary-exp: . lvalue "(" "%exps:" unsigned ")"

    "__HERE__"    shift, and go to state 7
    "closure"     shift, and go to state 9
    "const"       shift, and go to state 10
    "function"    shift, and go to state 13
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "[<"          shift, and go to state 19
    "var"         shift, and go to state 26
    "watch"       shift, and go to state 28
    "&"           shift, and go to state 30
    "identifier"  shift, and go to state 36
    "class"       shift, and go to state 37
    "package"     shift, and go to state 38
    "--"          shift, and go to state 42
    "++"          shift, and go to state 43
    "do"          shift, and go to state 44
    "assert"      shift, and go to state 45
    "detach"      shift, and go to state 46
    "disown"      shift, and go to state 47
    "new"         shift, and go to state 48
    "angle"       shift, and go to state 49
    "duration"    shift, and go to state 50
    "float"       shift, and go to state 51
    "string"      shift, and go to state 52
    "call"        shift, and go to state 53
    "this"        shift, and go to state 54
    "!"           shift, and go to state 55
    "compl"       shift, and go to state 56
    "-"           shift, and go to state 57
    "+"           shift, and go to state 58
    "<"           shift, and go to state 59
    "%unscope:"   shift, and go to state 60
    "%exp:"       shift, and go to state 61
    "%lvalue:"    shift, and go to state 62
    "%id:"        shift, and go to state 63

    block        go to state 68
    exp          go to state 299
    routine      go to state 101
    primary-exp  go to state 102
    detach       go to state 72
    lvalue       go to state 73
    id           go to state 103
    bitor-exp    go to state 75
    new          go to state 76
    float-exp    go to state 77
    duration     go to state 78
    dictionary   go to state 79
    tuple        go to state 80
    literal-exp  go to state 81
    string       go to state 82
    unary-exp    go to state 83
    rel-exp      go to state 84


state 189

   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   37 exp: . "class" lvalue protos block
   38    | . "package" lvalue protos block
   52 routine: . "closure"
   53        | . "function"
   62 exp: . exp "=" exp
   63    | . exp "=" exp modifiers
   64    | . lvalue "+=" exp
   65    | . lvalue "-=" exp
   66    | . lvalue "*=" exp
   66    | lvalue "*=" . exp
   67    | . lvalue "/=" exp
   68    | . lvalue "^=" exp
   69    | . lvalue "%=" exp
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
  118            | . block
  119            | . "do" "(" exp ")" block
  120 detach: . "detach"
  121       | . "disown"
  122 primary-exp: . "assert" "(" exp ")"
  123            | . "assert" "{" claims "}"
  124            | . detach "(" exp ")"
  125            | . detach block
  126            | . "isdef" "(" k1_id ")"
  127            | . "watch" "(" exp ")"
  128 lvalue: . id
  129       | . primary-exp "." id
  130       | . primary-exp "." "*"
  131 primary-exp: . "&" id
  132            | . primary-exp "." "&" id
  133 id: . "identifier"
  134 bitor-exp: . "var" bitor-exp
  135          | . "const" "var" bitor-exp
  136 primary-exp: . lvalue
  137            | . lvalue args
  138 new: . "new" "identifier" args.opt
  139 bitor-exp: . new
  140 id: . "new"
  141 primary-exp: . routine formals block
  142 float-exp: . "float"
  143 duration: . "duration"
  144         | . duration "duration"
  150 dictionary: . "[" assocs "]"
  154 tuple: . "(" tuple.exps ")"
  159 literal-exp: . float-exp
  160            | . "angle"
  161            | . duration
  162            | . string
  163            | . "[" exps "]"
  164            | . "[<" tuple.exps ">]"
  165            | . "<" bitor-exps ">"
  166            | . dictionary
  167            | . tuple
  168 string: . "string"
  169       | . string "string"
  170 literal-exp: . "__HERE__"
  176 lvalue: . primary-exp "[" exps "]"
  177 literal-exp: . "this"
  178            | . "call"
  179 primary-exp: . literal-exp
  180            | . "(" exp ")"
  181            | . "(" error ")"
  182            | . primary-exp "**" primary-exp
  183 unary-exp: . primary-exp
  184          | . "--" lvalue
  185          | . "++" lvalue
  186          | . "+" unary-exp
  187          | . "-" unary-exp
  188          | . "!" unary-exp
  189          | . "compl" unary-exp
  190 bitor-exp: . unary-exp
  191          | . bitor-exp "+" bitor-exp
  192          | . bitor-exp "-" bitor-exp
  193          | . bitor-exp "*" bitor-exp
  194          | . bitor-exp "/" bitor-exp
  195          | . bitor-exp "%" bitor-exp
  196          | . bitor-exp "^" bitor-exp
  197          | . bitor-exp "<<" bitor-exp
  198          | . bitor-exp "bitand" bitor-exp
  199          | . bitor-exp "bitor" bitor-exp
  200          | . bitor-exp ">>" bitor-exp
  211 rel-exp: . bitor-exp rel-ops
  214 exp: . rel-exp
  215    | . exp "&&" exp
  216    | . exp "||" exp
  217    | . exp "in" exp
  218    | . exp "!" "in" exp
  222    | . "%unscope:" unsigned
  223 primary-exp: . "%exp:" unsigned
  224 lvalue: . "%lvalue:" unsigned
  225       | . "%id:" unsigned
  226       | . primary-exp "." "%id:" unsigned
  227 primary-exp: . lvalue "(" "%exps:" unsigned ")"

    "__HERE__"    shift, and go to state 7
    "closure"     shift, and go to state 9
    "const"       shift, and go to state 10
    "function"    shift, and go to state 13
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "[<"          shift, and go to state 19
    "var"         shift, and go to state 26
    "watch"       shift, and go to state 28
    "&"           shift, and go to state 30
    "identifier"  shift, and go to state 36
    "class"       shift, and go to state 37
    "package"     shift, and go to state 38
    "--"          shift, and go to state 42
    "++"          shift, and go to state 43
    "do"          shift, and go to state 44
    "assert"      shift, and go to state 45
    "detach"      shift, and go to state 46
    "disown"      shift, and go to state 47
    "new"         shift, and go to state 48
    "angle"       shift, and go to state 49
    "duration"    shift, and go to state 50
    "float"       shift, and go to state 51
    "string"      shift, and go to state 52
    "call"        shift, and go to state 53
    "this"        shift, and go to state 54
    "!"           shift, and go to state 55
    "compl"       shift, and go to state 56
    "-"           shift, and go to state 57
    "+"           shift, and go to state 58
    "<"           shift, and go to state 59
    "%unscope:"   shift, and go to state 60
    "%exp:"       shift, and go to state 61
    "%lvalue:"    shift, and go to state 62
    "%id:"        shift, and go to state 63

    block        go to state 68
    exp          go to state 300
    routine      go to state 101
    primary-exp  go to state 102
    detach       go to state 72
    lvalue       go to state 73
    id           go to state 103
    bitor-exp    go to state 75
    new          go to state 76
    float-exp    go to state 77
    duration     go to state 78
    dictionary   go to state 79
    tuple        go to state 80
    literal-exp  go to state 81
    string       go to state 82
    unary-exp    go to state 83
    rel-exp      go to state 84


state 190

   70 primary-exp: lvalue "--" .

    $default  reduce using rule 70 (primary-exp)


state 191

   71 primary-exp: lvalue "++" .

    $default  reduce using rule 71 (primary-exp)


state 192

   72 primary-exp: lvalue "->" . id
  133 id: . "identifier"
  140   | . "new"

    "identifier"  shift, and go to state 36
    "new"         shift, and go to state 128

    id  go to state 301


state 193

  137 primary-exp: lvalue args .

    $default  reduce using rule 137 (primary-exp)


state 194

   55 stmt: id id . formals block
  252 formals: .  ["{"]
  253        | . "(" formals.0 ")"

    "("  shift, and go to state 172

    $default  reduce using rule 252 (formals)

    formals  go to state 302


state 195

   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   52 routine: . "closure"
   53        | . "function"
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
  118            | . block
  119            | . "do" "(" exp ")" block
  120 detach: . "detach"
  121       | . "disown"
  122 primary-exp: . "assert" "(" exp ")"
  123            | . "assert" "{" claims "}"
  124            | . detach "(" exp ")"
  125            | . detach block
  126            | . "isdef" "(" k1_id ")"
  127            | . "watch" "(" exp ")"
  128 lvalue: . id
  129       | . primary-exp "." id
  130       | . primary-exp "." "*"
  131 primary-exp: . "&" id
  132            | . primary-exp "." "&" id
  133 id: . "identifier"
  134 bitor-exp: . "var" bitor-exp
  135          | . "const" "var" bitor-exp
  136 primary-exp: . lvalue
  137            | . lvalue args
  138 new: . "new" "identifier" args.opt
  139 bitor-exp: . new
  140 id: . "new"
  141 primary-exp: . routine formals block
  142 float-exp: . "float"
  143 duration: . "duration"
  144         | . duration "duration"
  150 dictionary: . "[" assocs "]"
  154 tuple: . "(" tuple.exps ")"
  159 literal-exp: . float-exp
  160            | . "angle"
  161            | . duration
  162            | . string
  163            | . "[" exps "]"
  164            | . "[<" tuple.exps ">]"
  165            | . "<" bitor-exps ">"
  166            | . dictionary
  167            | . tuple
  168 string: . "string"
  169       | . string "string"
  170 literal-exp: . "__HERE__"
  176 lvalue: . primary-exp "[" exps "]"
  177 literal-exp: . "this"
  178            | . "call"
  179 primary-exp: . literal-exp
  180            | . "(" exp ")"
  181            | . "(" error ")"
  182            | . primary-exp "**" primary-exp
  183 unary-exp: . primary-exp
  184          | . "--" lvalue
  185          | . "++" lvalue
  186          | . "+" unary-exp
  187          | . "-" unary-exp
  188          | . "!" unary-exp
  189          | . "compl" unary-exp
  190 bitor-exp: . unary-exp
  191          | . bitor-exp "+" bitor-exp
  192          | . bitor-exp "-" bitor-exp
  193          | . bitor-exp "*" bitor-exp
  194          | . bitor-exp "/" bitor-exp
  195          | . bitor-exp "%" bitor-exp
  196          | . bitor-exp "^" bitor-exp
  197          | . bitor-exp "<<" bitor-exp
  198          | . bitor-exp "bitand" bitor-exp
  198          | bitor-exp "bitand" . bitor-exp
  199          | . bitor-exp "bitor" bitor-exp
  200          | . bitor-exp ">>" bitor-exp
  223 primary-exp: . "%exp:" unsigned
  224 lvalue: . "%lvalue:" unsigned
  225       | . "%id:" unsigned
  226       | . primary-exp "." "%id:" unsigned
  227 primary-exp: . lvalue "(" "%exps:" unsigned ")"

    "__HERE__"    shift, and go to state 7
    "closure"     shift, and go to state 9
    "const"       shift, and go to state 10
    "function"    shift, and go to state 13
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "[<"          shift, and go to state 19
    "var"         shift, and go to state 26
    "watch"       shift, and go to state 28
    "&"           shift, and go to state 30
    "identifier"  shift, and go to state 36
    "--"          shift, and go to state 42
    "++"          shift, and go to state 43
    "do"          shift, and go to state 44
    "assert"      shift, and go to state 45
    "detach"      shift, and go to state 46
    "disown"      shift, and go to state 47
    "new"         shift, and go to state 48
    "angle"       shift, and go to state 49
    "duration"    shift, and go to state 50
    "float"       shift, and go to state 51
    "string"      shift, and go to state 52
    "call"        shift, and go to state 53
    "this"        shift, and go to state 54
    "!"           shift, and go to state 55
    "compl"       shift, and go to state 56
    "-"           shift, and go to state 57
    "+"           shift, and go to state 58
    "<"           shift, and go to state 59
    "%exp:"       shift, and go to state 61
    "%lvalue:"    shift, and go to state 62
    "%id:"        shift, and go to state 63

    block        go to state 68
    routine      go to state 101
    primary-exp  go to state 102
    detach       go to state 72
    lvalue       go to state 123
    id           go to state 103
    bitor-exp    go to state 303
    new          go to state 76
    float-exp    go to state 77
    duration     go to state 78
    dictionary   go to state 79
    tuple        go to state 80
    literal-exp  go to state 81
    string       go to state 82
    unary-exp    go to state 83


state 196

   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   52 routine: . "closure"
   53        | . "function"
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
  118            | . block
  119            | . "do" "(" exp ")" block
  120 detach: . "detach"
  121       | . "disown"
  122 primary-exp: . "assert" "(" exp ")"
  123            | . "assert" "{" claims "}"
  124            | . detach "(" exp ")"
  125            | . detach block
  126            | . "isdef" "(" k1_id ")"
  127            | . "watch" "(" exp ")"
  128 lvalue: . id
  129       | . primary-exp "." id
  130       | . primary-exp "." "*"
  131 primary-exp: . "&" id
  132            | . primary-exp "." "&" id
  133 id: . "identifier"
  134 bitor-exp: . "var" bitor-exp
  135          | . "const" "var" bitor-exp
  136 primary-exp: . lvalue
  137            | . lvalue args
  138 new: . "new" "identifier" args.opt
  139 bitor-exp: . new
  140 id: . "new"
  141 primary-exp: . routine formals block
  142 float-exp: . "float"
  143 duration: . "duration"
  144         | . duration "duration"
  150 dictionary: . "[" assocs "]"
  154 tuple: . "(" tuple.exps ")"
  159 literal-exp: . float-exp
  160            | . "angle"
  161            | . duration
  162            | . string
  163            | . "[" exps "]"
  164            | . "[<" tuple.exps ">]"
  165            | . "<" bitor-exps ">"
  166            | . dictionary
  167            | . tuple
  168 string: . "string"
  169       | . string "string"
  170 literal-exp: . "__HERE__"
  176 lvalue: . primary-exp "[" exps "]"
  177 literal-exp: . "this"
  178            | . "call"
  179 primary-exp: . literal-exp
  180            | . "(" exp ")"
  181            | . "(" error ")"
  182            | . primary-exp "**" primary-exp
  183 unary-exp: . primary-exp
  184          | . "--" lvalue
  185          | . "++" lvalue
  186          | . "+" unary-exp
  187          | . "-" unary-exp
  188          | . "!" unary-exp
  189          | . "compl" unary-exp
  190 bitor-exp: . unary-exp
  191          | . bitor-exp "+" bitor-exp
  192          | . bitor-exp "-" bitor-exp
  193          | . bitor-exp "*" bitor-exp
  194          | . bitor-exp "/" bitor-exp
  195          | . bitor-exp "%" bitor-exp
  196          | . bitor-exp "^" bitor-exp
  197          | . bitor-exp "<<" bitor-exp
  198          | . bitor-exp "bitand" bitor-exp
  199          | . bitor-exp "bitor" bitor-exp
  199          | bitor-exp "bitor" . bitor-exp
  200          | . bitor-exp ">>" bitor-exp
  223 primary-exp: . "%exp:" unsigned
  224 lvalue: . "%lvalue:" unsigned
  225       | . "%id:" unsigned
  226       | . primary-exp "." "%id:" unsigned
  227 primary-exp: . lvalue "(" "%exps:" unsigned ")"

    "__HERE__"    shift, and go to state 7
    "closure"     shift, and go to state 9
    "const"       shift, and go to state 10
    "function"    shift, and go to state 13
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "[<"          shift, and go to state 19
    "var"         shift, and go to state 26
    "watch"       shift, and go to state 28
    "&"           shift, and go to state 30
    "identifier"  shift, and go to state 36
    "--"          shift, and go to state 42
    "++"          shift, and go to state 43
    "do"          shift, and go to state 44
    "assert"      shift, and go to state 45
    "detach"      shift, and go to state 46
    "disown"      shift, and go to state 47
    "new"         shift, and go to state 48
    "angle"       shift, and go to state 49
    "duration"    shift, and go to state 50
    "float"       shift, and go to state 51
    "string"      shift, and go to state 52
    "call"        shift, and go to state 53
    "this"        shift, and go to state 54
    "!"           shift, and go to state 55
    "compl"       shift, and go to state 56
    "-"           shift, and go to state 57
    "+"           shift, and go to state 58
    "<"           shift, and go to state 59
    "%exp:"       shift, and go to state 61
    "%lvalue:"    shift, and go to state 62
    "%id:"        shift, and go to state 63

    block        go to state 68
    routine      go to state 101
    primary-exp  go to state 102
    detach       go to state 72
    lvalue       go to state 123
    id           go to state 103
    bitor-exp    go to state 304
    new          go to state 76
    float-exp    go to state 77
    duration     go to state 78
    dictionary   go to state 79
    tuple        go to state 80
    literal-exp  go to state 81
    string       go to state 82
    unary-exp    go to state 83


state 197

   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   52 routine: . "closure"
   53        | . "function"
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
  118            | . block
  119            | . "do" "(" exp ")" block
  120 detach: . "detach"
  121       | . "disown"
  122 primary-exp: . "assert" "(" exp ")"
  123            | . "assert" "{" claims "}"
  124            | . detach "(" exp ")"
  125            | . detach block
  126            | . "isdef" "(" k1_id ")"
  127            | . "watch" "(" exp ")"
  128 lvalue: . id
  129       | . primary-exp "." id
  130       | . primary-exp "." "*"
  131 primary-exp: . "&" id
  132            | . primary-exp "." "&" id
  133 id: . "identifier"
  134 bitor-exp: . "var" bitor-exp
  135          | . "const" "var" bitor-exp
  136 primary-exp: . lvalue
  137            | . lvalue args
  138 new: . "new" "identifier" args.opt
  139 bitor-exp: . new
  140 id: . "new"
  141 primary-exp: . routine formals block
  142 float-exp: . "float"
  143 duration: . "duration"
  144         | . duration "duration"
  150 dictionary: . "[" assocs "]"
  154 tuple: . "(" tuple.exps ")"
  159 literal-exp: . float-exp
  160            | . "angle"
  161            | . duration
  162            | . string
  163            | . "[" exps "]"
  164            | . "[<" tuple.exps ">]"
  165            | . "<" bitor-exps ">"
  166            | . dictionary
  167            | . tuple
  168 string: . "string"
  169       | . string "string"
  170 literal-exp: . "__HERE__"
  176 lvalue: . primary-exp "[" exps "]"
  177 literal-exp: . "this"
  178            | . "call"
  179 primary-exp: . literal-exp
  180            | . "(" exp ")"
  181            | . "(" error ")"
  182            | . primary-exp "**" primary-exp
  183 unary-exp: . primary-exp
  184          | . "--" lvalue
  185          | . "++" lvalue
  186          | . "+" unary-exp
  187          | . "-" unary-exp
  188          | . "!" unary-exp
  189          | . "compl" unary-exp
  190 bitor-exp: . unary-exp
  191          | . bitor-exp "+" bitor-exp
  192          | . bitor-exp "-" bitor-exp
  193          | . bitor-exp "*" bitor-exp
  194          | . bitor-exp "/" bitor-exp
  195          | . bitor-exp "%" bitor-exp
  196          | . bitor-exp "^" bitor-exp
  196          | bitor-exp "^" . bitor-exp
  197          | . bitor-exp "<<" bitor-exp
  198          | . bitor-exp "bitand" bitor-exp
  199          | . bitor-exp "bitor" bitor-exp
  200          | . bitor-exp ">>" bitor-exp
  223 primary-exp: . "%exp:" unsigned
  224 lvalue: . "%lvalue:" unsigned
  225       | . "%id:" unsigned
  226       | . primary-exp "." "%id:" unsigned
  227 primary-exp: . lvalue "(" "%exps:" unsigned ")"

    "__HERE__"    shift, and go to state 7
    "closure"     shift, and go to state 9
    "const"       shift, and go to state 10
    "function"    shift, and go to state 13
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "[<"          shift, and go to state 19
    "var"         shift, and go to state 26
    "watch"       shift, and go to state 28
    "&"           shift, and go to state 30
    "identifier"  shift, and go to state 36
    "--"          shift, and go to state 42
    "++"          shift, and go to state 43
    "do"          shift, and go to state 44
    "assert"      shift, and go to state 45
    "detach"      shift, and go to state 46
    "disown"      shift, and go to state 47
    "new"         shift, and go to state 48
    "angle"       shift, and go to state 49
    "duration"    shift, and go to state 50
    "float"       shift, and go to state 51
    "string"      shift, and go to state 52
    "call"        shift, and go to state 53
    "this"        shift, and go to state 54
    "!"           shift, and go to state 55
    "compl"       shift, and go to state 56
    "-"           shift, and go to state 57
    "+"           shift, and go to state 58
    "<"           shift, and go to state 59
    "%exp:"       shift, and go to state 61
    "%lvalue:"    shift, and go to state 62
    "%id:"        shift, and go to state 63

    block        go to state 68
    routine      go to state 101
    primary-exp  go to state 102
    detach       go to state 72
    lvalue       go to state 123
    id           go to state 103
    bitor-exp    go to state 305
    new          go to state 76
    float-exp    go to state 77
    duration     go to state 78
    dictionary   go to state 79
    tuple        go to state 80
    literal-exp  go to state 81
    string       go to state 82
    unary-exp    go to state 83


state 198

   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   52 routine: . "closure"
   53        | . "function"
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
  118            | . block
  119            | . "do" "(" exp ")" block
  120 detach: . "detach"
  121       | . "disown"
  122 primary-exp: . "assert" "(" exp ")"
  123            | . "assert" "{" claims "}"
  124            | . detach "(" exp ")"
  125            | . detach block
  126            | . "isdef" "(" k1_id ")"
  127            | . "watch" "(" exp ")"
  128 lvalue: . id
  129       | . primary-exp "." id
  130       | . primary-exp "." "*"
  131 primary-exp: . "&" id
  132            | . primary-exp "." "&" id
  133 id: . "identifier"
  134 bitor-exp: . "var" bitor-exp
  135          | . "const" "var" bitor-exp
  136 primary-exp: . lvalue
  137            | . lvalue args
  138 new: . "new" "identifier" args.opt
  139 bitor-exp: . new
  140 id: . "new"
  141 primary-exp: . routine formals block
  142 float-exp: . "float"
  143 duration: . "duration"
  144         | . duration "duration"
  150 dictionary: . "[" assocs "]"
  154 tuple: . "(" tuple.exps ")"
  159 literal-exp: . float-exp
  160            | . "angle"
  161            | . duration
  162            | . string
  163            | . "[" exps "]"
  164            | . "[<" tuple.exps ">]"
  165            | . "<" bitor-exps ">"
  166            | . dictionary
  167            | . tuple
  168 string: . "string"
  169       | . string "string"
  170 literal-exp: . "__HERE__"
  176 lvalue: . primary-exp "[" exps "]"
  177 literal-exp: . "this"
  178            | . "call"
  179 primary-exp: . literal-exp
  180            | . "(" exp ")"
  181            | . "(" error ")"
  182            | . primary-exp "**" primary-exp
  183 unary-exp: . primary-exp
  184          | . "--" lvalue
  185          | . "++" lvalue
  186          | . "+" unary-exp
  187          | . "-" unary-exp
  188          | . "!" unary-exp
  189          | . "compl" unary-exp
  190 bitor-exp: . unary-exp
  191          | . bitor-exp "+" bitor-exp
  192          | . bitor-exp "-" bitor-exp
  193          | . bitor-exp "*" bitor-exp
  194          | . bitor-exp "/" bitor-exp
  195          | . bitor-exp "%" bitor-exp
  196          | . bitor-exp "^" bitor-exp
  197          | . bitor-exp "<<" bitor-exp
  198          | . bitor-exp "bitand" bitor-exp
  199          | . bitor-exp "bitor" bitor-exp
  200          | . bitor-exp ">>" bitor-exp
  200          | bitor-exp ">>" . bitor-exp
  223 primary-exp: . "%exp:" unsigned
  224 lvalue: . "%lvalue:" unsigned
  225       | . "%id:" unsigned
  226       | . primary-exp "." "%id:" unsigned
  227 primary-exp: . lvalue "(" "%exps:" unsigned ")"

    "__HERE__"    shift, and go to state 7
    "closure"     shift, and go to state 9
    "const"       shift, and go to state 10
    "function"    shift, and go to state 13
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "[<"          shift, and go to state 19
    "var"         shift, and go to state 26
    "watch"       shift, and go to state 28
    "&"           shift, and go to state 30
    "identifier"  shift, and go to state 36
    "--"          shift, and go to state 42
    "++"          shift, and go to state 43
    "do"          shift, and go to state 44
    "assert"      shift, and go to state 45
    "detach"      shift, and go to state 46
    "disown"      shift, and go to state 47
    "new"         shift, and go to state 48
    "angle"       shift, and go to state 49
    "duration"    shift, and go to state 50
    "float"       shift, and go to state 51
    "string"      shift, and go to state 52
    "call"        shift, and go to state 53
    "this"        shift, and go to state 54
    "!"           shift, and go to state 55
    "compl"       shift, and go to state 56
    "-"           shift, and go to state 57
    "+"           shift, and go to state 58
    "<"           shift, and go to state 59
    "%exp:"       shift, and go to state 61
    "%lvalue:"    shift, and go to state 62
    "%id:"        shift, and go to state 63

    block        go to state 68
    routine      go to state 101
    primary-exp  go to state 102
    detach       go to state 72
    lvalue       go to state 123
    id           go to state 103
    bitor-exp    go to state 306
    new          go to state 76
    float-exp    go to state 77
    duration     go to state 78
    dictionary   go to state 79
    tuple        go to state 80
    literal-exp  go to state 81
    string       go to state 82
    unary-exp    go to state 83


state 199

   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   52 routine: . "closure"
   53        | . "function"
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
  118            | . block
  119            | . "do" "(" exp ")" block
  120 detach: . "detach"
  121       | . "disown"
  122 primary-exp: . "assert" "(" exp ")"
  123            | . "assert" "{" claims "}"
  124            | . detach "(" exp ")"
  125            | . detach block
  126            | . "isdef" "(" k1_id ")"
  127            | . "watch" "(" exp ")"
  128 lvalue: . id
  129       | . primary-exp "." id
  130       | . primary-exp "." "*"
  131 primary-exp: . "&" id
  132            | . primary-exp "." "&" id
  133 id: . "identifier"
  134 bitor-exp: . "var" bitor-exp
  135          | . "const" "var" bitor-exp
  136 primary-exp: . lvalue
  137            | . lvalue args
  138 new: . "new" "identifier" args.opt
  139 bitor-exp: . new
  140 id: . "new"
  141 primary-exp: . routine formals block
  142 float-exp: . "float"
  143 duration: . "duration"
  144         | . duration "duration"
  150 dictionary: . "[" assocs "]"
  154 tuple: . "(" tuple.exps ")"
  159 literal-exp: . float-exp
  160            | . "angle"
  161            | . duration
  162            | . string
  163            | . "[" exps "]"
  164            | . "[<" tuple.exps ">]"
  165            | . "<" bitor-exps ">"
  166            | . dictionary
  167            | . tuple
  168 string: . "string"
  169       | . string "string"
  170 literal-exp: . "__HERE__"
  176 lvalue: . primary-exp "[" exps "]"
  177 literal-exp: . "this"
  178            | . "call"
  179 primary-exp: . literal-exp
  180            | . "(" exp ")"
  181            | . "(" error ")"
  182            | . primary-exp "**" primary-exp
  183 unary-exp: . primary-exp
  184          | . "--" lvalue
  185          | . "++" lvalue
  186          | . "+" unary-exp
  187          | . "-" unary-exp
  188          | . "!" unary-exp
  189          | . "compl" unary-exp
  190 bitor-exp: . unary-exp
  191          | . bitor-exp "+" bitor-exp
  192          | . bitor-exp "-" bitor-exp
  193          | . bitor-exp "*" bitor-exp
  194          | . bitor-exp "/" bitor-exp
  195          | . bitor-exp "%" bitor-exp
  196          | . bitor-exp "^" bitor-exp
  197          | . bitor-exp "<<" bitor-exp
  197          | bitor-exp "<<" . bitor-exp
  198          | . bitor-exp "bitand" bitor-exp
  199          | . bitor-exp "bitor" bitor-exp
  200          | . bitor-exp ">>" bitor-exp
  223 primary-exp: . "%exp:" unsigned
  224 lvalue: . "%lvalue:" unsigned
  225       | . "%id:" unsigned
  226       | . primary-exp "." "%id:" unsigned
  227 primary-exp: . lvalue "(" "%exps:" unsigned ")"

    "__HERE__"    shift, and go to state 7
    "closure"     shift, and go to state 9
    "const"       shift, and go to state 10
    "function"    shift, and go to state 13
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "[<"          shift, and go to state 19
    "var"         shift, and go to state 26
    "watch"       shift, and go to state 28
    "&"           shift, and go to state 30
    "identifier"  shift, and go to state 36
    "--"          shift, and go to state 42
    "++"          shift, and go to state 43
    "do"          shift, and go to state 44
    "assert"      shift, and go to state 45
    "detach"      shift, and go to state 46
    "disown"      shift, and go to state 47
    "new"         shift, and go to state 48
    "angle"       shift, and go to state 49
    "duration"    shift, and go to state 50
    "float"       shift, and go to state 51
    "string"      shift, and go to state 52
    "call"        shift, and go to state 53
    "this"        shift, and go to state 54
    "!"           shift, and go to state 55
    "compl"       shift, and go to state 56
    "-"           shift, and go to state 57
    "+"           shift, and go to state 58
    "<"           shift, and go to state 59
    "%exp:"       shift, and go to state 61
    "%lvalue:"    shift, and go to state 62
    "%id:"        shift, and go to state 63

    block        go to state 68
    routine      go to state 101
    primary-exp  go to state 102
    detach       go to state 72
    lvalue       go to state 123
    id           go to state 103
    bitor-exp    go to state 307
    new          go to state 76
    float-exp    go to state 77
    duration     go to state 78
    dictionary   go to state 79
    tuple        go to state 80
    literal-exp  go to state 81
    string       go to state 82
    unary-exp    go to state 83


state 200

   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   52 routine: . "closure"
   53        | . "function"
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
  118            | . block
  119            | . "do" "(" exp ")" block
  120 detach: . "detach"
  121       | . "disown"
  122 primary-exp: . "assert" "(" exp ")"
  123            | . "assert" "{" claims "}"
  124            | . detach "(" exp ")"
  125            | . detach block
  126            | . "isdef" "(" k1_id ")"
  127            | . "watch" "(" exp ")"
  128 lvalue: . id
  129       | . primary-exp "." id
  130       | . primary-exp "." "*"
  131 primary-exp: . "&" id
  132            | . primary-exp "." "&" id
  133 id: . "identifier"
  134 bitor-exp: . "var" bitor-exp
  135          | . "const" "var" bitor-exp
  136 primary-exp: . lvalue
  137            | . lvalue args
  138 new: . "new" "identifier" args.opt
  139 bitor-exp: . new
  140 id: . "new"
  141 primary-exp: . routine formals block
  142 float-exp: . "float"
  143 duration: . "duration"
  144         | . duration "duration"
  150 dictionary: . "[" assocs "]"
  154 tuple: . "(" tuple.exps ")"
  159 literal-exp: . float-exp
  160            | . "angle"
  161            | . duration
  162            | . string
  163            | . "[" exps "]"
  164            | . "[<" tuple.exps ">]"
  165            | . "<" bitor-exps ">"
  166            | . dictionary
  167            | . tuple
  168 string: . "string"
  169       | . string "string"
  170 literal-exp: . "__HERE__"
  176 lvalue: . primary-exp "[" exps "]"
  177 literal-exp: . "this"
  178            | . "call"
  179 primary-exp: . literal-exp
  180            | . "(" exp ")"
  181            | . "(" error ")"
  182            | . primary-exp "**" primary-exp
  183 unary-exp: . primary-exp
  184          | . "--" lvalue
  185          | . "++" lvalue
  186          | . "+" unary-exp
  187          | . "-" unary-exp
  188          | . "!" unary-exp
  189          | . "compl" unary-exp
  190 bitor-exp: . unary-exp
  191          | . bitor-exp "+" bitor-exp
  192          | . bitor-exp "-" bitor-exp
  192          | bitor-exp "-" . bitor-exp
  193          | . bitor-exp "*" bitor-exp
  194          | . bitor-exp "/" bitor-exp
  195          | . bitor-exp "%" bitor-exp
  196          | . bitor-exp "^" bitor-exp
  197          | . bitor-exp "<<" bitor-exp
  198          | . bitor-exp "bitand" bitor-exp
  199          | . bitor-exp "bitor" bitor-exp
  200          | . bitor-exp ">>" bitor-exp
  223 primary-exp: . "%exp:" unsigned
  224 lvalue: . "%lvalue:" unsigned
  225       | . "%id:" unsigned
  226       | . primary-exp "." "%id:" unsigned
  227 primary-exp: . lvalue "(" "%exps:" unsigned ")"

    "__HERE__"    shift, and go to state 7
    "closure"     shift, and go to state 9
    "const"       shift, and go to state 10
    "function"    shift, and go to state 13
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "[<"          shift, and go to state 19
    "var"         shift, and go to state 26
    "watch"       shift, and go to state 28
    "&"           shift, and go to state 30
    "identifier"  shift, and go to state 36
    "--"          shift, and go to state 42
    "++"          shift, and go to state 43
    "do"          shift, and go to state 44
    "assert"      shift, and go to state 45
    "detach"      shift, and go to state 46
    "disown"      shift, and go to state 47
    "new"         shift, and go to state 48
    "angle"       shift, and go to state 49
    "duration"    shift, and go to state 50
    "float"       shift, and go to state 51
    "string"      shift, and go to state 52
    "call"        shift, and go to state 53
    "this"        shift, and go to state 54
    "!"           shift, and go to state 55
    "compl"       shift, and go to state 56
    "-"           shift, and go to state 57
    "+"           shift, and go to state 58
    "<"           shift, and go to state 59
    "%exp:"       shift, and go to state 61
    "%lvalue:"    shift, and go to state 62
    "%id:"        shift, and go to state 63

    block        go to state 68
    routine      go to state 101
    primary-exp  go to state 102
    detach       go to state 72
    lvalue       go to state 123
    id           go to state 103
    bitor-exp    go to state 308
    new          go to state 76
    float-exp    go to state 77
    duration     go to state 78
    dictionary   go to state 79
    tuple        go to state 80
    literal-exp  go to state 81
    string       go to state 82
    unary-exp    go to state 83


state 201

   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   52 routine: . "closure"
   53        | . "function"
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
  118            | . block
  119            | . "do" "(" exp ")" block
  120 detach: . "detach"
  121       | . "disown"
  122 primary-exp: . "assert" "(" exp ")"
  123            | . "assert" "{" claims "}"
  124            | . detach "(" exp ")"
  125            | . detach block
  126            | . "isdef" "(" k1_id ")"
  127            | . "watch" "(" exp ")"
  128 lvalue: . id
  129       | . primary-exp "." id
  130       | . primary-exp "." "*"
  131 primary-exp: . "&" id
  132            | . primary-exp "." "&" id
  133 id: . "identifier"
  134 bitor-exp: . "var" bitor-exp
  135          | . "const" "var" bitor-exp
  136 primary-exp: . lvalue
  137            | . lvalue args
  138 new: . "new" "identifier" args.opt
  139 bitor-exp: . new
  140 id: . "new"
  141 primary-exp: . routine formals block
  142 float-exp: . "float"
  143 duration: . "duration"
  144         | . duration "duration"
  150 dictionary: . "[" assocs "]"
  154 tuple: . "(" tuple.exps ")"
  159 literal-exp: . float-exp
  160            | . "angle"
  161            | . duration
  162            | . string
  163            | . "[" exps "]"
  164            | . "[<" tuple.exps ">]"
  165            | . "<" bitor-exps ">"
  166            | . dictionary
  167            | . tuple
  168 string: . "string"
  169       | . string "string"
  170 literal-exp: . "__HERE__"
  176 lvalue: . primary-exp "[" exps "]"
  177 literal-exp: . "this"
  178            | . "call"
  179 primary-exp: . literal-exp
  180            | . "(" exp ")"
  181            | . "(" error ")"
  182            | . primary-exp "**" primary-exp
  183 unary-exp: . primary-exp
  184          | . "--" lvalue
  185          | . "++" lvalue
  186          | . "+" unary-exp
  187          | . "-" unary-exp
  188          | . "!" unary-exp
  189          | . "compl" unary-exp
  190 bitor-exp: . unary-exp
  191          | . bitor-exp "+" bitor-exp
  192          | . bitor-exp "-" bitor-exp
  193          | . bitor-exp "*" bitor-exp
  194          | . bitor-exp "/" bitor-exp
  195          | . bitor-exp "%" bitor-exp
  195          | bitor-exp "%" . bitor-exp
  196          | . bitor-exp "^" bitor-exp
  197          | . bitor-exp "<<" bitor-exp
  198          | . bitor-exp "bitand" bitor-exp
  199          | . bitor-exp "bitor" bitor-exp
  200          | . bitor-exp ">>" bitor-exp
  223 primary-exp: . "%exp:" unsigned
  224 lvalue: . "%lvalue:" unsigned
  225       | . "%id:" unsigned
  226       | . primary-exp "." "%id:" unsigned
  227 primary-exp: . lvalue "(" "%exps:" unsigned ")"

    "__HERE__"    shift, and go to state 7
    "closure"     shift, and go to state 9
    "const"       shift, and go to state 10
    "function"    shift, and go to state 13
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "[<"          shift, and go to state 19
    "var"         shift, and go to state 26
    "watch"       shift, and go to state 28
    "&"           shift, and go to state 30
    "identifier"  shift, and go to state 36
    "--"          shift, and go to state 42
    "++"          shift, and go to state 43
    "do"          shift, and go to state 44
    "assert"      shift, and go to state 45
    "detach"      shift, and go to state 46
    "disown"      shift, and go to state 47
    "new"         shift, and go to state 48
    "angle"       shift, and go to state 49
    "duration"    shift, and go to state 50
    "float"       shift, and go to state 51
    "string"      shift, and go to state 52
    "call"        shift, and go to state 53
    "this"        shift, and go to state 54
    "!"           shift, and go to state 55
    "compl"       shift, and go to state 56
    "-"           shift, and go to state 57
    "+"           shift, and go to state 58
    "<"           shift, and go to state 59
    "%exp:"       shift, and go to state 61
    "%lvalue:"    shift, and go to state 62
    "%id:"        shift, and go to state 63

    block        go to state 68
    routine      go to state 101
    primary-exp  go to state 102
    detach       go to state 72
    lvalue       go to state 123
    id           go to state 103
    bitor-exp    go to state 309
    new          go to state 76
    float-exp    go to state 77
    duration     go to state 78
    dictionary   go to state 79
    tuple        go to state 80
    literal-exp  go to state 81
    string       go to state 82
    unary-exp    go to state 83


state 202

   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   52 routine: . "closure"
   53        | . "function"
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
  118            | . block
  119            | . "do" "(" exp ")" block
  120 detach: . "detach"
  121       | . "disown"
  122 primary-exp: . "assert" "(" exp ")"
  123            | . "assert" "{" claims "}"
  124            | . detach "(" exp ")"
  125            | . detach block
  126            | . "isdef" "(" k1_id ")"
  127            | . "watch" "(" exp ")"
  128 lvalue: . id
  129       | . primary-exp "." id
  130       | . primary-exp "." "*"
  131 primary-exp: . "&" id
  132            | . primary-exp "." "&" id
  133 id: . "identifier"
  134 bitor-exp: . "var" bitor-exp
  135          | . "const" "var" bitor-exp
  136 primary-exp: . lvalue
  137            | . lvalue args
  138 new: . "new" "identifier" args.opt
  139 bitor-exp: . new
  140 id: . "new"
  141 primary-exp: . routine formals block
  142 float-exp: . "float"
  143 duration: . "duration"
  144         | . duration "duration"
  150 dictionary: . "[" assocs "]"
  154 tuple: . "(" tuple.exps ")"
  159 literal-exp: . float-exp
  160            | . "angle"
  161            | . duration
  162            | . string
  163            | . "[" exps "]"
  164            | . "[<" tuple.exps ">]"
  165            | . "<" bitor-exps ">"
  166            | . dictionary
  167            | . tuple
  168 string: . "string"
  169       | . string "string"
  170 literal-exp: . "__HERE__"
  176 lvalue: . primary-exp "[" exps "]"
  177 literal-exp: . "this"
  178            | . "call"
  179 primary-exp: . literal-exp
  180            | . "(" exp ")"
  181            | . "(" error ")"
  182            | . primary-exp "**" primary-exp
  183 unary-exp: . primary-exp
  184          | . "--" lvalue
  185          | . "++" lvalue
  186          | . "+" unary-exp
  187          | . "-" unary-exp
  188          | . "!" unary-exp
  189          | . "compl" unary-exp
  190 bitor-exp: . unary-exp
  191          | . bitor-exp "+" bitor-exp
  191          | bitor-exp "+" . bitor-exp
  192          | . bitor-exp "-" bitor-exp
  193          | . bitor-exp "*" bitor-exp
  194          | . bitor-exp "/" bitor-exp
  195          | . bitor-exp "%" bitor-exp
  196          | . bitor-exp "^" bitor-exp
  197          | . bitor-exp "<<" bitor-exp
  198          | . bitor-exp "bitand" bitor-exp
  199          | . bitor-exp "bitor" bitor-exp
  200          | . bitor-exp ">>" bitor-exp
  223 primary-exp: . "%exp:" unsigned
  224 lvalue: . "%lvalue:" unsigned
  225       | . "%id:" unsigned
  226       | . primary-exp "." "%id:" unsigned
  227 primary-exp: . lvalue "(" "%exps:" unsigned ")"

    "__HERE__"    shift, and go to state 7
    "closure"     shift, and go to state 9
    "const"       shift, and go to state 10
    "function"    shift, and go to state 13
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "[<"          shift, and go to state 19
    "var"         shift, and go to state 26
    "watch"       shift, and go to state 28
    "&"           shift, and go to state 30
    "identifier"  shift, and go to state 36
    "--"          shift, and go to state 42
    "++"          shift, and go to state 43
    "do"          shift, and go to state 44
    "assert"      shift, and go to state 45
    "detach"      shift, and go to state 46
    "disown"      shift, and go to state 47
    "new"         shift, and go to state 48
    "angle"       shift, and go to state 49
    "duration"    shift, and go to state 50
    "float"       shift, and go to state 51
    "string"      shift, and go to state 52
    "call"        shift, and go to state 53
    "this"        shift, and go to state 54
    "!"           shift, and go to state 55
    "compl"       shift, and go to state 56
    "-"           shift, and go to state 57
    "+"           shift, and go to state 58
    "<"           shift, and go to state 59
    "%exp:"       shift, and go to state 61
    "%lvalue:"    shift, and go to state 62
    "%id:"        shift, and go to state 63

    block        go to state 68
    routine      go to state 101
    primary-exp  go to state 102
    detach       go to state 72
    lvalue       go to state 123
    id           go to state 103
    bitor-exp    go to state 310
    new          go to state 76
    float-exp    go to state 77
    duration     go to state 78
    dictionary   go to state 79
    tuple        go to state 80
    literal-exp  go to state 81
    string       go to state 82
    unary-exp    go to state 83


state 203

   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   52 routine: . "closure"
   53        | . "function"
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
  118            | . block
  119            | . "do" "(" exp ")" block
  120 detach: . "detach"
  121       | . "disown"
  122 primary-exp: . "assert" "(" exp ")"
  123            | . "assert" "{" claims "}"
  124            | . detach "(" exp ")"
  125            | . detach block
  126            | . "isdef" "(" k1_id ")"
  127            | . "watch" "(" exp ")"
  128 lvalue: . id
  129       | . primary-exp "." id
  130       | . primary-exp "." "*"
  131 primary-exp: . "&" id
  132            | . primary-exp "." "&" id
  133 id: . "identifier"
  134 bitor-exp: . "var" bitor-exp
  135          | . "const" "var" bitor-exp
  136 primary-exp: . lvalue
  137            | . lvalue args
  138 new: . "new" "identifier" args.opt
  139 bitor-exp: . new
  140 id: . "new"
  141 primary-exp: . routine formals block
  142 float-exp: . "float"
  143 duration: . "duration"
  144         | . duration "duration"
  150 dictionary: . "[" assocs "]"
  154 tuple: . "(" tuple.exps ")"
  159 literal-exp: . float-exp
  160            | . "angle"
  161            | . duration
  162            | . string
  163            | . "[" exps "]"
  164            | . "[<" tuple.exps ">]"
  165            | . "<" bitor-exps ">"
  166            | . dictionary
  167            | . tuple
  168 string: . "string"
  169       | . string "string"
  170 literal-exp: . "__HERE__"
  176 lvalue: . primary-exp "[" exps "]"
  177 literal-exp: . "this"
  178            | . "call"
  179 primary-exp: . literal-exp
  180            | . "(" exp ")"
  181            | . "(" error ")"
  182            | . primary-exp "**" primary-exp
  183 unary-exp: . primary-exp
  184          | . "--" lvalue
  185          | . "++" lvalue
  186          | . "+" unary-exp
  187          | . "-" unary-exp
  188          | . "!" unary-exp
  189          | . "compl" unary-exp
  190 bitor-exp: . unary-exp
  191          | . bitor-exp "+" bitor-exp
  192          | . bitor-exp "-" bitor-exp
  193          | . bitor-exp "*" bitor-exp
  194          | . bitor-exp "/" bitor-exp
  194          | bitor-exp "/" . bitor-exp
  195          | . bitor-exp "%" bitor-exp
  196          | . bitor-exp "^" bitor-exp
  197          | . bitor-exp "<<" bitor-exp
  198          | . bitor-exp "bitand" bitor-exp
  199          | . bitor-exp "bitor" bitor-exp
  200          | . bitor-exp ">>" bitor-exp
  223 primary-exp: . "%exp:" unsigned
  224 lvalue: . "%lvalue:" unsigned
  225       | . "%id:" unsigned
  226       | . primary-exp "." "%id:" unsigned
  227 primary-exp: . lvalue "(" "%exps:" unsigned ")"

    "__HERE__"    shift, and go to state 7
    "closure"     shift, and go to state 9
    "const"       shift, and go to state 10
    "function"    shift, and go to state 13
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "[<"          shift, and go to state 19
    "var"         shift, and go to state 26
    "watch"       shift, and go to state 28
    "&"           shift, and go to state 30
    "identifier"  shift, and go to state 36
    "--"          shift, and go to state 42
    "++"          shift, and go to state 43
    "do"          shift, and go to state 44
    "assert"      shift, and go to state 45
    "detach"      shift, and go to state 46
    "disown"      shift, and go to state 47
    "new"         shift, and go to state 48
    "angle"       shift, and go to state 49
    "duration"    shift, and go to state 50
    "float"       shift, and go to state 51
    "string"      shift, and go to state 52
    "call"        shift, and go to state 53
    "this"        shift, and go to state 54
    "!"           shift, and go to state 55
    "compl"       shift, and go to state 56
    "-"           shift, and go to state 57
    "+"           shift, and go to state 58
    "<"           shift, and go to state 59
    "%exp:"       shift, and go to state 61
    "%lvalue:"    shift, and go to state 62
    "%id:"        shift, and go to state 63

    block        go to state 68
    routine      go to state 101
    primary-exp  go to state 102
    detach       go to state 72
    lvalue       go to state 123
    id           go to state 103
    bitor-exp    go to state 311
    new          go to state 76
    float-exp    go to state 77
    duration     go to state 78
    dictionary   go to state 79
    tuple        go to state 80
    literal-exp  go to state 81
    string       go to state 82
    unary-exp    go to state 83


state 204

   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   52 routine: . "closure"
   53        | . "function"
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
  118            | . block
  119            | . "do" "(" exp ")" block
  120 detach: . "detach"
  121       | . "disown"
  122 primary-exp: . "assert" "(" exp ")"
  123            | . "assert" "{" claims "}"
  124            | . detach "(" exp ")"
  125            | . detach block
  126            | . "isdef" "(" k1_id ")"
  127            | . "watch" "(" exp ")"
  128 lvalue: . id
  129       | . primary-exp "." id
  130       | . primary-exp "." "*"
  131 primary-exp: . "&" id
  132            | . primary-exp "." "&" id
  133 id: . "identifier"
  134 bitor-exp: . "var" bitor-exp
  135          | . "const" "var" bitor-exp
  136 primary-exp: . lvalue
  137            | . lvalue args
  138 new: . "new" "identifier" args.opt
  139 bitor-exp: . new
  140 id: . "new"
  141 primary-exp: . routine formals block
  142 float-exp: . "float"
  143 duration: . "duration"
  144         | . duration "duration"
  150 dictionary: . "[" assocs "]"
  154 tuple: . "(" tuple.exps ")"
  159 literal-exp: . float-exp
  160            | . "angle"
  161            | . duration
  162            | . string
  163            | . "[" exps "]"
  164            | . "[<" tuple.exps ">]"
  165            | . "<" bitor-exps ">"
  166            | . dictionary
  167            | . tuple
  168 string: . "string"
  169       | . string "string"
  170 literal-exp: . "__HERE__"
  176 lvalue: . primary-exp "[" exps "]"
  177 literal-exp: . "this"
  178            | . "call"
  179 primary-exp: . literal-exp
  180            | . "(" exp ")"
  181            | . "(" error ")"
  182            | . primary-exp "**" primary-exp
  183 unary-exp: . primary-exp
  184          | . "--" lvalue
  185          | . "++" lvalue
  186          | . "+" unary-exp
  187          | . "-" unary-exp
  188          | . "!" unary-exp
  189          | . "compl" unary-exp
  190 bitor-exp: . unary-exp
  191          | . bitor-exp "+" bitor-exp
  192          | . bitor-exp "-" bitor-exp
  193          | . bitor-exp "*" bitor-exp
  193          | bitor-exp "*" . bitor-exp
  194          | . bitor-exp "/" bitor-exp
  195          | . bitor-exp "%" bitor-exp
  196          | . bitor-exp "^" bitor-exp
  197          | . bitor-exp "<<" bitor-exp
  198          | . bitor-exp "bitand" bitor-exp
  199          | . bitor-exp "bitor" bitor-exp
  200          | . bitor-exp ">>" bitor-exp
  223 primary-exp: . "%exp:" unsigned
  224 lvalue: . "%lvalue:" unsigned
  225       | . "%id:" unsigned
  226       | . primary-exp "." "%id:" unsigned
  227 primary-exp: . lvalue "(" "%exps:" unsigned ")"

    "__HERE__"    shift, and go to state 7
    "closure"     shift, and go to state 9
    "const"       shift, and go to state 10
    "function"    shift, and go to state 13
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "[<"          shift, and go to state 19
    "var"         shift, and go to state 26
    "watch"       shift, and go to state 28
    "&"           shift, and go to state 30
    "identifier"  shift, and go to state 36
    "--"          shift, and go to state 42
    "++"          shift, and go to state 43
    "do"          shift, and go to state 44
    "assert"      shift, and go to state 45
    "detach"      shift, and go to state 46
    "disown"      shift, and go to state 47
    "new"         shift, and go to state 48
    "angle"       shift, and go to state 49
    "duration"    shift, and go to state 50
    "float"       shift, and go to state 51
    "string"      shift, and go to state 52
    "call"        shift, and go to state 53
    "this"        shift, and go to state 54
    "!"           shift, and go to state 55
    "compl"       shift, and go to state 56
    "-"           shift, and go to state 57
    "+"           shift, and go to state 58
    "<"           shift, and go to state 59
    "%exp:"       shift, and go to state 61
    "%lvalue:"    shift, and go to state 62
    "%id:"        shift, and go to state 63

    block        go to state 68
    routine      go to state 101
    primary-exp  go to state 102
    detach       go to state 72
    lvalue       go to state 123
    id           go to state 103
    bitor-exp    go to state 312
    new          go to state 76
    float-exp    go to state 77
    duration     go to state 78
    dictionary   go to state 79
    tuple        go to state 80
    literal-exp  go to state 81
    string       go to state 82
    unary-exp    go to state 83


state 205

  201 rel-op: . "!="
  202       | . "!=="
  203       | . "<"
  204       | . "<="
  205       | . "=="
  206       | . "==="
  207       | . "=~="
  208       | . ">"
  209       | . ">="
  210       | . "~="
  211 rel-exp: bitor-exp rel-ops .  ["end of command", "=", "case", "catch", ":", "default", "else", "finally", "if", "in", "{", ">]", "onleave", "}", "]", ")", "~", ",", ";", "&", "|", "identifier", "=>", "?", "!", "&&", "||"]
  213 rel-ops: rel-ops . rel-op bitor-exp

    "=~="  shift, and go to state 313
    "=="   shift, and go to state 314
    "==="  shift, and go to state 315
    ">="   shift, and go to state 316
    ">"    shift, and go to state 317
    "<="   shift, and go to state 318
    "<"    shift, and go to state 319
    "!="   shift, and go to state 320
    "!=="  shift, and go to state 321
    "~="   shift, and go to state 322

    $default  reduce using rule 211 (rel-exp)

    rel-op  go to state 323


state 206

  144 duration: duration "duration" .

    $default  reduce using rule 144 (duration)


state 207

  169 string: string "string" .

    $default  reduce using rule 169 (string)


state 208

   14 stmts: stmts "," . cstmt.opt
   15 cstmt.opt: .  ["end of command", "case", "default", "}", ")", ",", ";"]
   16          | . cstmt
   17          | . cstmt "|"
   18 cstmt: . stmt
   19      | . cstmt "|" cstmt
   20      | . cstmt "&" cstmt
   23 stmt: . primary-exp ":" stmt
   24     | . exp
   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   37 exp: . "class" lvalue protos block
   38    | . "package" lvalue protos block
   43 stmt: . "enum" id "{" id.0 "}"
   47     | . "external" "identifier" "identifier"
   48     | . "external" "var" "identifier" "." "identifier" from "identifier"
   49     | . "external" event_or_function "(" unsigned ")" "identifier" "." "identifier" from "identifier"
   50     | . "import" lvalue
   51     | . exp "!" args.opt tilda.opt
   52 routine: . "closure"
   53        | . "function"
   54 stmt: . routine k1_id formals block
   55     | . id id formals block
   62 exp: . exp "=" exp
   63    | . exp "=" exp modifiers
   64    | . lvalue "+=" exp
   65    | . lvalue "-=" exp
   66    | . lvalue "*=" exp
   67    | . lvalue "/=" exp
   68    | . lvalue "^=" exp
   69    | . lvalue "%=" exp
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
   73 stmt: . "at" identifiers "(" exp tilda.opt ")" stmt onleave.opt
   74     | . "at" identifiers "(" event_match ")" stmt onleave.opt
   75     | . "every" "(" exp ")" stmt
   76     | . "if" "(" stmts ")" stmt else.opt
   77     | . "freezeif" "(" exp ")" stmt
   78     | . "stopif" "(" exp ")" stmt
   79     | . "switch" "(" exp ")" "{" cases default.opt "}"
   80     | . "timeout" "(" exp ")" stmt catch.opt else.opt finally.opt
   81     | . "return" exp.opt
   82     | . "break"
   83     | . "continue"
   84     | . "waituntil" "(" exp tilda.opt ")"
   85     | . "waituntil" "(" event_match ")"
   86     | . "whenever" "(" exp tilda.opt ")" stmt else.opt
   87     | . "whenever" "(" event_match ")" stmt else.opt
  108     | . "try" block catches.1 else.opt finally.opt
  109     | . "try" block "finally" block
  110     | . "throw" exp.opt
  111     | . "loop" stmt
  112     | . "for" "(" exp ")" stmt
  113     | . "for" "(" stmt.opt ";" exp ";" stmt.opt ")" stmt
  114     | . "for" "(" "var" "identifier" in_or_colon exp ")" stmt
  115     | . "while" "(" exp ")" stmt
  118 primary-exp: . block
  119            | . "do" "(" exp ")" block
  120 detach: . "detach"
  121       | . "disown"
  122 primary-exp: . "assert" "(" exp ")"
  123            | . "assert" "{" claims "}"
  124            | . detach "(" exp ")"
  125            | . detach block
  126            | . "isdef" "(" k1_id ")"
  127            | . "watch" "(" exp ")"
  128 lvalue: . id
  129       | . primary-exp "." id
  130       | . primary-exp "." "*"
  131 primary-exp: . "&" id
  132            | . primary-exp "." "&" id
  133 id: . "identifier"
  134 bitor-exp: . "var" bitor-exp
  135          | . "const" "var" bitor-exp
  136 primary-exp: . lvalue
  137            | . lvalue args
  138 new: . "new" "identifier" args.opt
  139 bitor-exp: . new
  140 id: . "new"
  141 primary-exp: . routine formals block
  142 float-exp: . "float"
  143 duration: . "duration"
  144         | . duration "duration"
  150 dictionary: . "[" assocs "]"
  154 tuple: . "(" tuple.exps ")"
  159 literal-exp: . float-exp
  160            | . "angle"
  161            | . duration
  162            | . string
  163            | . "[" exps "]"
  164            | . "[<" tuple.exps ">]"
  165            | . "<" bitor-exps ">"
  166            | . dictionary
  167            | . tuple
  168 string: . "string"
  169       | . string "string"
  170 literal-exp: . "__HERE__"
  176 lvalue: . primary-exp "[" exps "]"
  177 literal-exp: . "this"
  178            | . "call"
  179 primary-exp: . literal-exp
  180            | . "(" exp ")"
  181            | . "(" error ")"
  182            | . primary-exp "**" primary-exp
  183 unary-exp: . primary-exp
  184          | . "--" lvalue
  185          | . "++" lvalue
  186          | . "+" unary-exp
  187          | . "-" unary-exp
  188          | . "!" unary-exp
  189          | . "compl" unary-exp
  190 bitor-exp: . unary-exp
  191          | . bitor-exp "+" bitor-exp
  192          | . bitor-exp "-" bitor-exp
  193          | . bitor-exp "*" bitor-exp
  194          | . bitor-exp "/" bitor-exp
  195          | . bitor-exp "%" bitor-exp
  196          | . bitor-exp "^" bitor-exp
  197          | . bitor-exp "<<" bitor-exp
  198          | . bitor-exp "bitand" bitor-exp
  199          | . bitor-exp "bitor" bitor-exp
  200          | . bitor-exp ">>" bitor-exp
  211 rel-exp: . bitor-exp rel-ops
  214 exp: . rel-exp
  215    | . exp "&&" exp
  216    | . exp "||" exp
  217    | . exp "in" exp
  218    | . exp "!" "in" exp
  222    | . "%unscope:" unsigned
  223 primary-exp: . "%exp:" unsigned
  224 lvalue: . "%lvalue:" unsigned
  225       | . "%id:" unsigned
  226       | . primary-exp "." "%id:" unsigned
  227 primary-exp: . lvalue "(" "%exps:" unsigned ")"

    "__HERE__"    shift, and go to state 7
    "break"       shift, and go to state 8
    "closure"     shift, and go to state 9
    "const"       shift, and go to state 10
    "continue"    shift, and go to state 11
    "freezeif"    shift, and go to state 12
    "function"    shift, and go to state 13
    "if"          shift, and go to state 14
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "[<"          shift, and go to state 19
    "return"      shift, and go to state 20
    "stopif"      shift, and go to state 21
    "switch"      shift, and go to state 22
    "throw"       shift, and go to state 23
    "timeout"     shift, and go to state 24
    "try"         shift, and go to state 25
    "var"         shift, and go to state 26
    "waituntil"   shift, and go to state 27
    "watch"       shift, and go to state 28
    "whenever"    shift, and go to state 29
    "&"           shift, and go to state 30
    "every"       shift, and go to state 31
    "for"         shift, and go to state 32
    "loop"        shift, and go to state 33
    "while"       shift, and go to state 34
    "at"          shift, and go to state 35
    "identifier"  shift, and go to state 36
    "class"       shift, and go to state 37
    "package"     shift, and go to state 38
    "enum"        shift, and go to state 39
    "external"    shift, and go to state 40
    "import"      shift, and go to state 41
    "--"          shift, and go to state 42
    "++"          shift, and go to state 43
    "do"          shift, and go to state 44
    "assert"      shift, and go to state 45
    "detach"      shift, and go to state 46
    "disown"      shift, and go to state 47
    "new"         shift, and go to state 48
    "angle"       shift, and go to state 49
    "duration"    shift, and go to state 50
    "float"       shift, and go to state 51
    "string"      shift, and go to state 52
    "call"        shift, and go to state 53
    "this"        shift, and go to state 54
    "!"           shift, and go to state 55
    "compl"       shift, and go to state 56
    "-"           shift, and go to state 57
    "+"           shift, and go to state 58
    "<"           shift, and go to state 59
    "%unscope:"   shift, and go to state 60
    "%exp:"       shift, and go to state 61
    "%lvalue:"    shift, and go to state 62
    "%id:"        shift, and go to state 63

    $default  reduce using rule 15 (cstmt.opt)

    cstmt.opt    go to state 324
    cstmt        go to state 66
    stmt         go to state 67
    block        go to state 68
    exp          go to state 69
    routine      go to state 70
    primary-exp  go to state 71
    detach       go to state 72
    lvalue       go to state 73
    id           go to state 74
    bitor-exp    go to state 75
    new          go to state 76
    float-exp    go to state 77
    duration     go to state 78
    dictionary   go to state 79
    tuple        go to state 80
    literal-exp  go to state 81
    string       go to state 82
    unary-exp    go to state 83
    rel-exp      go to state 84


state 209

   13 stmts: stmts ";" . cstmt.opt
   15 cstmt.opt: .  ["end of command", "case", "default", "}", ")", ",", ";"]
   16          | . cstmt
   17          | . cstmt "|"
   18 cstmt: . stmt
   19      | . cstmt "|" cstmt
   20      | . cstmt "&" cstmt
   23 stmt: . primary-exp ":" stmt
   24     | . exp
   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   37 exp: . "class" lvalue protos block
   38    | . "package" lvalue protos block
   43 stmt: . "enum" id "{" id.0 "}"
   47     | . "external" "identifier" "identifier"
   48     | . "external" "var" "identifier" "." "identifier" from "identifier"
   49     | . "external" event_or_function "(" unsigned ")" "identifier" "." "identifier" from "identifier"
   50     | . "import" lvalue
   51     | . exp "!" args.opt tilda.opt
   52 routine: . "closure"
   53        | . "function"
   54 stmt: . routine k1_id formals block
   55     | . id id formals block
   62 exp: . exp "=" exp
   63    | . exp "=" exp modifiers
   64    | . lvalue "+=" exp
   65    | . lvalue "-=" exp
   66    | . lvalue "*=" exp
   67    | . lvalue "/=" exp
   68    | . lvalue "^=" exp
   69    | . lvalue "%=" exp
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
   73 stmt: . "at" identifiers "(" exp tilda.opt ")" stmt onleave.opt
   74     | . "at" identifiers "(" event_match ")" stmt onleave.opt
   75     | . "every" "(" exp ")" stmt
   76     | . "if" "(" stmts ")" stmt else.opt
   77     | . "freezeif" "(" exp ")" stmt
   78     | . "stopif" "(" exp ")" stmt
   79     | . "switch" "(" exp ")" "{" cases default.opt "}"
   80     | . "timeout" "(" exp ")" stmt catch.opt else.opt finally.opt
   81     | . "return" exp.opt
   82     | . "break"
   83     | . "continue"
   84     | . "waituntil" "(" exp tilda.opt ")"
   85     | . "waituntil" "(" event_match ")"
   86     | . "whenever" "(" exp tilda.opt ")" stmt else.opt
   87     | . "whenever" "(" event_match ")" stmt else.opt
  108     | . "try" block catches.1 else.opt finally.opt
  109     | . "try" block "finally" block
  110     | . "throw" exp.opt
  111     | . "loop" stmt
  112     | . "for" "(" exp ")" stmt
  113     | . "for" "(" stmt.opt ";" exp ";" stmt.opt ")" stmt
  114     | . "for" "(" "var" "identifier" in_or_colon exp ")" stmt
  115     | . "while" "(" exp ")" stmt
  118 primary-exp: . block
  119            | . "do" "(" exp ")" block
  120 detach: . "detach"
  121       | . "disown"
  122 primary-exp: . "assert" "(" exp ")"
  123            | . "assert" "{" claims "}"
  124            | . detach "(" exp ")"
  125            | . detach block
  126            | . "isdef" "(" k1_id ")"
  127            | . "watch" "(" exp ")"
  128 lvalue: . id
  129       | . primary-exp "." id
  130       | . primary-exp "." "*"
  131 primary-exp: . "&" id
  132            | . primary-exp "." "&" id
  133 id: . "identifier"
  134 bitor-exp: . "var" bitor-exp
  135          | . "const" "var" bitor-exp
  136 primary-exp: . lvalue
  137            | . lvalue args
  138 new: . "new" "identifier" args.opt
  139 bitor-exp: . new
  140 id: . "new"
  141 primary-exp: . routine formals block
  142 float-exp: . "float"
  143 duration: . "duration"
  144         | . duration "duration"
  150 dictionary: . "[" assocs "]"
  154 tuple: . "(" tuple.exps ")"
  159 literal-exp: . float-exp
  160            | . "angle"
  161            | . duration
  162            | . string
  163            | . "[" exps "]"
  164            | . "[<" tuple.exps ">]"
  165            | . "<" bitor-exps ">"
  166            | . dictionary
  167            | . tuple
  168 string: . "string"
  169       | . string "string"
  170 literal-exp: . "__HERE__"
  176 lvalue: . primary-exp "[" exps "]"
  177 literal-exp: . "this"
  178            | . "call"
  179 primary-exp: . literal-exp
  180            | . "(" exp ")"
  181            | . "(" error ")"
  182            | . primary-exp "**" primary-exp
  183 unary-exp: . primary-exp
  184          | . "--" lvalue
  185          | . "++" lvalue
  186          | . "+" unary-exp
  187          | . "-" unary-exp
  188          | . "!" unary-exp
  189          | . "compl" unary-exp
  190 bitor-exp: . unary-exp
  191          | . bitor-exp "+" bitor-exp
  192          | . bitor-exp "-" bitor-exp
  193          | . bitor-exp "*" bitor-exp
  194          | . bitor-exp "/" bitor-exp
  195          | . bitor-exp "%" bitor-exp
  196          | . bitor-exp "^" bitor-exp
  197          | . bitor-exp "<<" bitor-exp
  198          | . bitor-exp "bitand" bitor-exp
  199          | . bitor-exp "bitor" bitor-exp
  200          | . bitor-exp ">>" bitor-exp
  211 rel-exp: . bitor-exp rel-ops
  214 exp: . rel-exp
  215    | . exp "&&" exp
  216    | . exp "||" exp
  217    | . exp "in" exp
  218    | . exp "!" "in" exp
  222    | . "%unscope:" unsigned
  223 primary-exp: . "%exp:" unsigned
  224 lvalue: . "%lvalue:" unsigned
  225       | . "%id:" unsigned
  226       | . primary-exp "." "%id:" unsigned
  227 primary-exp: . lvalue "(" "%exps:" unsigned ")"

    "__HERE__"    shift, and go to state 7
    "break"       shift, and go to state 8
    "closure"     shift, and go to state 9
    "const"       shift, and go to state 10
    "continue"    shift, and go to state 11
    "freezeif"    shift, and go to state 12
    "function"    shift, and go to state 13
    "if"          shift, and go to state 14
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "[<"          shift, and go to state 19
    "return"      shift, and go to state 20
    "stopif"      shift, and go to state 21
    "switch"      shift, and go to state 22
    "throw"       shift, and go to state 23
    "timeout"     shift, and go to state 24
    "try"         shift, and go to state 25
    "var"         shift, and go to state 26
    "waituntil"   shift, and go to state 27
    "watch"       shift, and go to state 28
    "whenever"    shift, and go to state 29
    "&"           shift, and go to state 30
    "every"       shift, and go to state 31
    "for"         shift, and go to state 32
    "loop"        shift, and go to state 33
    "while"       shift, and go to state 34
    "at"          shift, and go to state 35
    "identifier"  shift, and go to state 36
    "class"       shift, and go to state 37
    "package"     shift, and go to state 38
    "enum"        shift, and go to state 39
    "external"    shift, and go to state 40
    "import"      shift, and go to state 41
    "--"          shift, and go to state 42
    "++"          shift, and go to state 43
    "do"          shift, and go to state 44
    "assert"      shift, and go to state 45
    "detach"      shift, and go to state 46
    "disown"      shift, and go to state 47
    "new"         shift, and go to state 48
    "angle"       shift, and go to state 49
    "duration"    shift, and go to state 50
    "float"       shift, and go to state 51
    "string"      shift, and go to state 52
    "call"        shift, and go to state 53
    "this"        shift, and go to state 54
    "!"           shift, and go to state 55
    "compl"       shift, and go to state 56
    "-"           shift, and go to state 57
    "+"           shift, and go to state 58
    "<"           shift, and go to state 59
    "%unscope:"   shift, and go to state 60
    "%exp:"       shift, and go to state 61
    "%lvalue:"    shift, and go to state 62
    "%id:"        shift, and go to state 63

    $default  reduce using rule 15 (cstmt.opt)

    cstmt.opt    go to state 325
    cstmt        go to state 66
    stmt         go to state 67
    block        go to state 68
    exp          go to state 69
    routine      go to state 70
    primary-exp  go to state 71
    detach       go to state 72
    lvalue       go to state 73
    id           go to state 74
    bitor-exp    go to state 75
    new          go to state 76
    float-exp    go to state 77
    duration     go to state 78
    dictionary   go to state 79
    tuple        go to state 80
    literal-exp  go to state 81
    string       go to state 82
    unary-exp    go to state 83
    rel-exp      go to state 84


state 210

  135 bitor-exp: "const" "var" bitor-exp .  ["end of command", "=", "case", "catch", ":", "default", "else", "finally", "if", "in", "{", ">]", "onleave", "}", "]", ")", "~", ",", ";", "&", "|", "identifier", "=>", "?", "!", "=~=", "==", "===", ">=", ">", "<=", "<", "!=", "!==", "~=", "&&", "||"]
  191          | bitor-exp . "+" bitor-exp
  192          | bitor-exp . "-" bitor-exp
  193          | bitor-exp . "*" bitor-exp
  194          | bitor-exp . "/" bitor-exp
  195          | bitor-exp . "%" bitor-exp
  196          | bitor-exp . "^" bitor-exp
  197          | bitor-exp . "<<" bitor-exp
  198          | bitor-exp . "bitand" bitor-exp
  199          | bitor-exp . "bitor" bitor-exp
  200          | bitor-exp . ">>" bitor-exp

    "bitand"  shift, and go to state 195
    "bitor"   shift, and go to state 196
    "^"       shift, and go to state 197
    ">>"      shift, and go to state 198
    "<<"      shift, and go to state 199
    "-"       shift, and go to state 200
    "%"       shift, and go to state 201
    "+"       shift, and go to state 202
    "/"       shift, and go to state 203
    "*"       shift, and go to state 204

    $default  reduce using rule 135 (bitor-exp)

    Conflict between rule 135 and token "bitand" resolved as shift ("var" < "bitand").
    Conflict between rule 135 and token "bitor" resolved as shift ("var" < "bitor").
    Conflict between rule 135 and token "^" resolved as shift ("var" < "^").
    Conflict between rule 135 and token ">>" resolved as shift ("var" < ">>").
    Conflict between rule 135 and token "<<" resolved as shift ("var" < "<<").
    Conflict between rule 135 and token "-" resolved as shift ("var" < "-").
    Conflict between rule 135 and token "%" resolved as shift ("var" < "%").
    Conflict between rule 135 and token "+" resolved as shift ("var" < "+").
    Conflict between rule 135 and token "/" resolved as shift ("var" < "/").
    Conflict between rule 135 and token "*" resolved as shift ("var" < "*").


state 211

   62 exp: exp . "=" exp
   63    | exp . "=" exp modifiers
   77 stmt: "freezeif" "(" exp . ")" stmt
  215 exp: exp . "&&" exp
  216    | exp . "||" exp
  217    | exp . "in" exp
  218    | exp . "!" "in" exp

    "="   shift, and go to state 167
    "in"  shift, and go to state 168
    ")"   shift, and go to state 326
    "!"   shift, and go to state 218
    "&&"  shift, and go to state 170
    "||"  shift, and go to state 171


state 212

   13 stmts: stmts . ";" cstmt.opt
   14      | stmts . "," cstmt.opt
   76 stmt: "if" "(" stmts . ")" stmt else.opt

    ")"  shift, and go to state 327
    ","  shift, and go to state 208
    ";"  shift, and go to state 209


state 213

   58 k1_id: k1_id . "." "identifier"
  126 primary-exp: "isdef" "(" k1_id . ")"

    "."  shift, and go to state 282
    ")"  shift, and go to state 328


state 214

   26 block: "{" error "}" .

    $default  reduce using rule 26 (block)


state 215

   25 block: "{" stmts "}" .

    $default  reduce using rule 25 (block)


state 216

   27 block: "{" id "~" . id "}"
  133 id: . "identifier"
  140   | . "new"

    "identifier"  shift, and go to state 36
    "new"         shift, and go to state 128

    id  go to state 329


state 217

   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   37 exp: . "class" lvalue protos block
   38    | . "package" lvalue protos block
   52 routine: . "closure"
   53        | . "function"
   62 exp: . exp "=" exp
   63    | . exp "=" exp modifiers
   64    | . lvalue "+=" exp
   65    | . lvalue "-=" exp
   66    | . lvalue "*=" exp
   67    | . lvalue "/=" exp
   68    | . lvalue "^=" exp
   69    | . lvalue "%=" exp
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
  118            | . block
  119            | . "do" "(" exp ")" block
  120 detach: . "detach"
  121       | . "disown"
  122 primary-exp: . "assert" "(" exp ")"
  123            | . "assert" "{" claims "}"
  124            | . detach "(" exp ")"
  125            | . detach block
  126            | . "isdef" "(" k1_id ")"
  127            | . "watch" "(" exp ")"
  128 lvalue: . id
  129       | . primary-exp "." id
  130       | . primary-exp "." "*"
  131 primary-exp: . "&" id
  132            | . primary-exp "." "&" id
  133 id: . "identifier"
  134 bitor-exp: . "var" bitor-exp
  135          | . "const" "var" bitor-exp
  136 primary-exp: . lvalue
  137            | . lvalue args
  138 new: . "new" "identifier" args.opt
  139 bitor-exp: . new
  140 id: . "new"
  141 primary-exp: . routine formals block
  142 float-exp: . "float"
  143 duration: . "duration"
  144         | . duration "duration"
  145 assoc: exp "=>" . exp
  150 dictionary: . "[" assocs "]"
  154 tuple: . "(" tuple.exps ")"
  159 literal-exp: . float-exp
  160            | . "angle"
  161            | . duration
  162            | . string
  163            | . "[" exps "]"
  164            | . "[<" tuple.exps ">]"
  165            | . "<" bitor-exps ">"
  166            | . dictionary
  167            | . tuple
  168 string: . "string"
  169       | . string "string"
  170 literal-exp: . "__HERE__"
  176 lvalue: . primary-exp "[" exps "]"
  177 literal-exp: . "this"
  178            | . "call"
  179 primary-exp: . literal-exp
  180            | . "(" exp ")"
  181            | . "(" error ")"
  182            | . primary-exp "**" primary-exp
  183 unary-exp: . primary-exp
  184          | . "--" lvalue
  185          | . "++" lvalue
  186          | . "+" unary-exp
  187          | . "-" unary-exp
  188          | . "!" unary-exp
  189          | . "compl" unary-exp
  190 bitor-exp: . unary-exp
  191          | . bitor-exp "+" bitor-exp
  192          | . bitor-exp "-" bitor-exp
  193          | . bitor-exp "*" bitor-exp
  194          | . bitor-exp "/" bitor-exp
  195          | . bitor-exp "%" bitor-exp
  196          | . bitor-exp "^" bitor-exp
  197          | . bitor-exp "<<" bitor-exp
  198          | . bitor-exp "bitand" bitor-exp
  199          | . bitor-exp "bitor" bitor-exp
  200          | . bitor-exp ">>" bitor-exp
  211 rel-exp: . bitor-exp rel-ops
  214 exp: . rel-exp
  215    | . exp "&&" exp
  216    | . exp "||" exp
  217    | . exp "in" exp
  218    | . exp "!" "in" exp
  222    | . "%unscope:" unsigned
  223 primary-exp: . "%exp:" unsigned
  224 lvalue: . "%lvalue:" unsigned
  225       | . "%id:" unsigned
  226       | . primary-exp "." "%id:" unsigned
  227 primary-exp: . lvalue "(" "%exps:" unsigned ")"

    "__HERE__"    shift, and go to state 7
    "closure"     shift, and go to state 9
    "const"       shift, and go to state 10
    "function"    shift, and go to state 13
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "[<"          shift, and go to state 19
    "var"         shift, and go to state 26
    "watch"       shift, and go to state 28
    "&"           shift, and go to state 30
    "identifier"  shift, and go to state 36
    "class"       shift, and go to state 37
    "package"     shift, and go to state 38
    "--"          shift, and go to state 42
    "++"          shift, and go to state 43
    "do"          shift, and go to state 44
    "assert"      shift, and go to state 45
    "detach"      shift, and go to state 46
    "disown"      shift, and go to state 47
    "new"         shift, and go to state 48
    "angle"       shift, and go to state 49
    "duration"    shift, and go to state 50
    "float"       shift, and go to state 51
    "string"      shift, and go to state 52
    "call"        shift, and go to state 53
    "this"        shift, and go to state 54
    "!"           shift, and go to state 55
    "compl"       shift, and go to state 56
    "-"           shift, and go to state 57
    "+"           shift, and go to state 58
    "<"           shift, and go to state 59
    "%unscope:"   shift, and go to state 60
    "%exp:"       shift, and go to state 61
    "%lvalue:"    shift, and go to state 62
    "%id:"        shift, and go to state 63

    block        go to state 68
    exp          go to state 330
    routine      go to state 101
    primary-exp  go to state 102
    detach       go to state 72
    lvalue       go to state 73
    id           go to state 103
    bitor-exp    go to state 75
    new          go to state 76
    float-exp    go to state 77
    duration     go to state 78
    dictionary   go to state 79
    tuple        go to state 80
    literal-exp  go to state 81
    string       go to state 82
    unary-exp    go to state 83
    rel-exp      go to state 84


state 218

  218 exp: exp "!" . "in" exp

    "in"  shift, and go to state 272


state 219

   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   37 exp: . "class" lvalue protos block
   38    | . "package" lvalue protos block
   52 routine: . "closure"
   53        | . "function"
   62 exp: . exp "=" exp
   63    | . exp "=" exp modifiers
   64    | . lvalue "+=" exp
   65    | . lvalue "-=" exp
   66    | . lvalue "*=" exp
   67    | . lvalue "/=" exp
   68    | . lvalue "^=" exp
   69    | . lvalue "%=" exp
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
  118            | . block
  119            | . "do" "(" exp ")" block
  120 detach: . "detach"
  121       | . "disown"
  122 primary-exp: . "assert" "(" exp ")"
  123            | . "assert" "{" claims "}"
  124            | . detach "(" exp ")"
  125            | . detach block
  126            | . "isdef" "(" k1_id ")"
  127            | . "watch" "(" exp ")"
  128 lvalue: . id
  129       | . primary-exp "." id
  130       | . primary-exp "." "*"
  131 primary-exp: . "&" id
  132            | . primary-exp "." "&" id
  133 id: . "identifier"
  134 bitor-exp: . "var" bitor-exp
  135          | . "const" "var" bitor-exp
  136 primary-exp: . lvalue
  137            | . lvalue args
  138 new: . "new" "identifier" args.opt
  139 bitor-exp: . new
  140 id: . "new"
  141 primary-exp: . routine formals block
  142 float-exp: . "float"
  143 duration: . "duration"
  144         | . duration "duration"
  145 assoc: . exp "=>" exp
  147 assocs.1: assocs.1 "," . assoc
  150 dictionary: . "[" assocs "]"
  154 tuple: . "(" tuple.exps ")"
  159 literal-exp: . float-exp
  160            | . "angle"
  161            | . duration
  162            | . string
  163            | . "[" exps "]"
  164            | . "[<" tuple.exps ">]"
  165            | . "<" bitor-exps ">"
  166            | . dictionary
  167            | . tuple
  168 string: . "string"
  169       | . string "string"
  170 literal-exp: . "__HERE__"
  176 lvalue: . primary-exp "[" exps "]"
  177 literal-exp: . "this"
  178            | . "call"
  179 primary-exp: . literal-exp
  180            | . "(" exp ")"
  181            | . "(" error ")"
  182            | . primary-exp "**" primary-exp
  183 unary-exp: . primary-exp
  184          | . "--" lvalue
  185          | . "++" lvalue
  186          | . "+" unary-exp
  187          | . "-" unary-exp
  188          | . "!" unary-exp
  189          | . "compl" unary-exp
  190 bitor-exp: . unary-exp
  191          | . bitor-exp "+" bitor-exp
  192          | . bitor-exp "-" bitor-exp
  193          | . bitor-exp "*" bitor-exp
  194          | . bitor-exp "/" bitor-exp
  195          | . bitor-exp "%" bitor-exp
  196          | . bitor-exp "^" bitor-exp
  197          | . bitor-exp "<<" bitor-exp
  198          | . bitor-exp "bitand" bitor-exp
  199          | . bitor-exp "bitor" bitor-exp
  200          | . bitor-exp ">>" bitor-exp
  211 rel-exp: . bitor-exp rel-ops
  214 exp: . rel-exp
  215    | . exp "&&" exp
  216    | . exp "||" exp
  217    | . exp "in" exp
  218    | . exp "!" "in" exp
  222    | . "%unscope:" unsigned
  223 primary-exp: . "%exp:" unsigned
  224 lvalue: . "%lvalue:" unsigned
  225       | . "%id:" unsigned
  226       | . primary-exp "." "%id:" unsigned
  227 primary-exp: . lvalue "(" "%exps:" unsigned ")"
  255 comma.opt: "," .  ["]"]

    "__HERE__"    shift, and go to state 7
    "closure"     shift, and go to state 9
    "const"       shift, and go to state 10
    "function"    shift, and go to state 13
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "[<"          shift, and go to state 19
    "var"         shift, and go to state 26
    "watch"       shift, and go to state 28
    "&"           shift, and go to state 30
    "identifier"  shift, and go to state 36
    "class"       shift, and go to state 37
    "package"     shift, and go to state 38
    "--"          shift, and go to state 42
    "++"          shift, and go to state 43
    "do"          shift, and go to state 44
    "assert"      shift, and go to state 45
    "detach"      shift, and go to state 46
    "disown"      shift, and go to state 47
    "new"         shift, and go to state 48
    "angle"       shift, and go to state 49
    "duration"    shift, and go to state 50
    "float"       shift, and go to state 51
    "string"      shift, and go to state 52
    "call"        shift, and go to state 53
    "this"        shift, and go to state 54
    "!"           shift, and go to state 55
    "compl"       shift, and go to state 56
    "-"           shift, and go to state 57
    "+"           shift, and go to state 58
    "<"           shift, and go to state 59
    "%unscope:"   shift, and go to state 60
    "%exp:"       shift, and go to state 61
    "%lvalue:"    shift, and go to state 62
    "%id:"        shift, and go to state 63

    $default  reduce using rule 255 (comma.opt)

    block        go to state 68
    exp          go to state 331
    routine      go to state 101
    primary-exp  go to state 102
    detach       go to state 72
    lvalue       go to state 73
    id           go to state 103
    bitor-exp    go to state 75
    new          go to state 76
    float-exp    go to state 77
    duration     go to state 78
    assoc        go to state 332
    dictionary   go to state 79
    tuple        go to state 80
    literal-exp  go to state 81
    string       go to state 82
    unary-exp    go to state 83
    rel-exp      go to state 84


state 220

  149 assocs: assocs.1 comma.opt .

    $default  reduce using rule 149 (assocs)


state 221

  150 dictionary: "[" assocs "]" .

    $default  reduce using rule 150 (dictionary)


state 222

  163 literal-exp: "[" exps "]" .

    $default  reduce using rule 163 (literal-exp)


state 223

   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   37 exp: . "class" lvalue protos block
   38    | . "package" lvalue protos block
   52 routine: . "closure"
   53        | . "function"
   62 exp: . exp "=" exp
   63    | . exp "=" exp modifiers
   64    | . lvalue "+=" exp
   65    | . lvalue "-=" exp
   66    | . lvalue "*=" exp
   67    | . lvalue "/=" exp
   68    | . lvalue "^=" exp
   69    | . lvalue "%=" exp
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
  118            | . block
  119            | . "do" "(" exp ")" block
  120 detach: . "detach"
  121       | . "disown"
  122 primary-exp: . "assert" "(" exp ")"
  123            | . "assert" "{" claims "}"
  124            | . detach "(" exp ")"
  125            | . detach block
  126            | . "isdef" "(" k1_id ")"
  127            | . "watch" "(" exp ")"
  128 lvalue: . id
  129       | . primary-exp "." id
  130       | . primary-exp "." "*"
  131 primary-exp: . "&" id
  132            | . primary-exp "." "&" id
  133 id: . "identifier"
  134 bitor-exp: . "var" bitor-exp
  135          | . "const" "var" bitor-exp
  136 primary-exp: . lvalue
  137            | . lvalue args
  138 new: . "new" "identifier" args.opt
  139 bitor-exp: . new
  140 id: . "new"
  141 primary-exp: . routine formals block
  142 float-exp: . "float"
  143 duration: . "duration"
  144         | . duration "duration"
  150 dictionary: . "[" assocs "]"
  154 tuple: . "(" tuple.exps ")"
  159 literal-exp: . float-exp
  160            | . "angle"
  161            | . duration
  162            | . string
  163            | . "[" exps "]"
  164            | . "[<" tuple.exps ">]"
  165            | . "<" bitor-exps ">"
  166            | . dictionary
  167            | . tuple
  168 string: . "string"
  169       | . string "string"
  170 literal-exp: . "__HERE__"
  176 lvalue: . primary-exp "[" exps "]"
  177 literal-exp: . "this"
  178            | . "call"
  179 primary-exp: . literal-exp
  180            | . "(" exp ")"
  181            | . "(" error ")"
  182            | . primary-exp "**" primary-exp
  183 unary-exp: . primary-exp
  184          | . "--" lvalue
  185          | . "++" lvalue
  186          | . "+" unary-exp
  187          | . "-" unary-exp
  188          | . "!" unary-exp
  189          | . "compl" unary-exp
  190 bitor-exp: . unary-exp
  191          | . bitor-exp "+" bitor-exp
  192          | . bitor-exp "-" bitor-exp
  193          | . bitor-exp "*" bitor-exp
  194          | . bitor-exp "/" bitor-exp
  195          | . bitor-exp "%" bitor-exp
  196          | . bitor-exp "^" bitor-exp
  197          | . bitor-exp "<<" bitor-exp
  198          | . bitor-exp "bitand" bitor-exp
  199          | . bitor-exp "bitor" bitor-exp
  200          | . bitor-exp ">>" bitor-exp
  211 rel-exp: . bitor-exp rel-ops
  214 exp: . rel-exp
  215    | . exp "&&" exp
  216    | . exp "||" exp
  217    | . exp "in" exp
  218    | . exp "!" "in" exp
  222    | . "%unscope:" unsigned
  223 primary-exp: . "%exp:" unsigned
  224 lvalue: . "%lvalue:" unsigned
  225       | . "%id:" unsigned
  226       | . primary-exp "." "%id:" unsigned
  227 primary-exp: . lvalue "(" "%exps:" unsigned ")"
  235 exps.1: exps.1 "," . exp
  255 comma.opt: "," .  ["]", ")"]

    "__HERE__"    shift, and go to state 7
    "closure"     shift, and go to state 9
    "const"       shift, and go to state 10
    "function"    shift, and go to state 13
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "[<"          shift, and go to state 19
    "var"         shift, and go to state 26
    "watch"       shift, and go to state 28
    "&"           shift, and go to state 30
    "identifier"  shift, and go to state 36
    "class"       shift, and go to state 37
    "package"     shift, and go to state 38
    "--"          shift, and go to state 42
    "++"          shift, and go to state 43
    "do"          shift, and go to state 44
    "assert"      shift, and go to state 45
    "detach"      shift, and go to state 46
    "disown"      shift, and go to state 47
    "new"         shift, and go to state 48
    "angle"       shift, and go to state 49
    "duration"    shift, and go to state 50
    "float"       shift, and go to state 51
    "string"      shift, and go to state 52
    "call"        shift, and go to state 53
    "this"        shift, and go to state 54
    "!"           shift, and go to state 55
    "compl"       shift, and go to state 56
    "-"           shift, and go to state 57
    "+"           shift, and go to state 58
    "<"           shift, and go to state 59
    "%unscope:"   shift, and go to state 60
    "%exp:"       shift, and go to state 61
    "%lvalue:"    shift, and go to state 62
    "%id:"        shift, and go to state 63

    $default  reduce using rule 255 (comma.opt)

    block        go to state 68
    exp          go to state 333
    routine      go to state 101
    primary-exp  go to state 102
    detach       go to state 72
    lvalue       go to state 73
    id           go to state 103
    bitor-exp    go to state 75
    new          go to state 76
    float-exp    go to state 77
    duration     go to state 78
    dictionary   go to state 79
    tuple        go to state 80
    literal-exp  go to state 81
    string       go to state 82
    unary-exp    go to state 83
    rel-exp      go to state 84


state 224

  233 exps: exps.1 comma.opt .

    $default  reduce using rule 233 (exps)


state 225

  181 primary-exp: "(" error ")" .

    $default  reduce using rule 181 (primary-exp)


state 226

  180 primary-exp: "(" exp ")" .

    $default  reduce using rule 180 (primary-exp)


state 227

  154 tuple: "(" tuple.exps ")" .

    $default  reduce using rule 154 (tuple)


state 228

   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   37 exp: . "class" lvalue protos block
   38    | . "package" lvalue protos block
   52 routine: . "closure"
   53        | . "function"
   62 exp: . exp "=" exp
   63    | . exp "=" exp modifiers
   64    | . lvalue "+=" exp
   65    | . lvalue "-=" exp
   66    | . lvalue "*=" exp
   67    | . lvalue "/=" exp
   68    | . lvalue "^=" exp
   69    | . lvalue "%=" exp
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
  118            | . block
  119            | . "do" "(" exp ")" block
  120 detach: . "detach"
  121       | . "disown"
  122 primary-exp: . "assert" "(" exp ")"
  123            | . "assert" "{" claims "}"
  124            | . detach "(" exp ")"
  125            | . detach block
  126            | . "isdef" "(" k1_id ")"
  127            | . "watch" "(" exp ")"
  128 lvalue: . id
  129       | . primary-exp "." id
  130       | . primary-exp "." "*"
  131 primary-exp: . "&" id
  132            | . primary-exp "." "&" id
  133 id: . "identifier"
  134 bitor-exp: . "var" bitor-exp
  135          | . "const" "var" bitor-exp
  136 primary-exp: . lvalue
  137            | . lvalue args
  138 new: . "new" "identifier" args.opt
  139 bitor-exp: . new
  140 id: . "new"
  141 primary-exp: . routine formals block
  142 float-exp: . "float"
  143 duration: . "duration"
  144         | . duration "duration"
  150 dictionary: . "[" assocs "]"
  152 tuple.exps: exps.1 "," .  [">]", ")"]
  154 tuple: . "(" tuple.exps ")"
  159 literal-exp: . float-exp
  160            | . "angle"
  161            | . duration
  162            | . string
  163            | . "[" exps "]"
  164            | . "[<" tuple.exps ">]"
  165            | . "<" bitor-exps ">"
  166            | . dictionary
  167            | . tuple
  168 string: . "string"
  169       | . string "string"
  170 literal-exp: . "__HERE__"
  176 lvalue: . primary-exp "[" exps "]"
  177 literal-exp: . "this"
  178            | . "call"
  179 primary-exp: . literal-exp
  180            | . "(" exp ")"
  181            | . "(" error ")"
  182            | . primary-exp "**" primary-exp
  183 unary-exp: . primary-exp
  184          | . "--" lvalue
  185          | . "++" lvalue
  186          | . "+" unary-exp
  187          | . "-" unary-exp
  188          | . "!" unary-exp
  189          | . "compl" unary-exp
  190 bitor-exp: . unary-exp
  191          | . bitor-exp "+" bitor-exp
  192          | . bitor-exp "-" bitor-exp
  193          | . bitor-exp "*" bitor-exp
  194          | . bitor-exp "/" bitor-exp
  195          | . bitor-exp "%" bitor-exp
  196          | . bitor-exp "^" bitor-exp
  197          | . bitor-exp "<<" bitor-exp
  198          | . bitor-exp "bitand" bitor-exp
  199          | . bitor-exp "bitor" bitor-exp
  200          | . bitor-exp ">>" bitor-exp
  211 rel-exp: . bitor-exp rel-ops
  214 exp: . rel-exp
  215    | . exp "&&" exp
  216    | . exp "||" exp
  217    | . exp "in" exp
  218    | . exp "!" "in" exp
  222    | . "%unscope:" unsigned
  223 primary-exp: . "%exp:" unsigned
  224 lvalue: . "%lvalue:" unsigned
  225       | . "%id:" unsigned
  226       | . primary-exp "." "%id:" unsigned
  227 primary-exp: . lvalue "(" "%exps:" unsigned ")"
  235 exps.1: exps.1 "," . exp
  236 exps.2: exps.1 "," . exp

    "__HERE__"    shift, and go to state 7
    "closure"     shift, and go to state 9
    "const"       shift, and go to state 10
    "function"    shift, and go to state 13
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "[<"          shift, and go to state 19
    "var"         shift, and go to state 26
    "watch"       shift, and go to state 28
    "&"           shift, and go to state 30
    "identifier"  shift, and go to state 36
    "class"       shift, and go to state 37
    "package"     shift, and go to state 38
    "--"          shift, and go to state 42
    "++"          shift, and go to state 43
    "do"          shift, and go to state 44
    "assert"      shift, and go to state 45
    "detach"      shift, and go to state 46
    "disown"      shift, and go to state 47
    "new"         shift, and go to state 48
    "angle"       shift, and go to state 49
    "duration"    shift, and go to state 50
    "float"       shift, and go to state 51
    "string"      shift, and go to state 52
    "call"        shift, and go to state 53
    "this"        shift, and go to state 54
    "!"           shift, and go to state 55
    "compl"       shift, and go to state 56
    "-"           shift, and go to state 57
    "+"           shift, and go to state 58
    "<"           shift, and go to state 59
    "%unscope:"   shift, and go to state 60
    "%exp:"       shift, and go to state 61
    "%lvalue:"    shift, and go to state 62
    "%id:"        shift, and go to state 63

    $default  reduce using rule 152 (tuple.exps)

    block        go to state 68
    exp          go to state 334
    routine      go to state 101
    primary-exp  go to state 102
    detach       go to state 72
    lvalue       go to state 73
    id           go to state 103
    bitor-exp    go to state 75
    new          go to state 76
    float-exp    go to state 77
    duration     go to state 78
    dictionary   go to state 79
    tuple        go to state 80
    literal-exp  go to state 81
    string       go to state 82
    unary-exp    go to state 83
    rel-exp      go to state 84


state 229

  164 literal-exp: "[<" tuple.exps ">]" .

    $default  reduce using rule 164 (literal-exp)


state 230

   62 exp: exp . "=" exp
   63    | exp . "=" exp modifiers
   78 stmt: "stopif" "(" exp . ")" stmt
  215 exp: exp . "&&" exp
  216    | exp . "||" exp
  217    | exp . "in" exp
  218    | exp . "!" "in" exp

    "="   shift, and go to state 167
    "in"  shift, and go to state 168
    ")"   shift, and go to state 335
    "!"   shift, and go to state 218
    "&&"  shift, and go to state 170
    "||"  shift, and go to state 171


state 231

   62 exp: exp . "=" exp
   63    | exp . "=" exp modifiers
   79 stmt: "switch" "(" exp . ")" "{" cases default.opt "}"
  215 exp: exp . "&&" exp
  216    | exp . "||" exp
  217    | exp . "in" exp
  218    | exp . "!" "in" exp

    "="   shift, and go to state 167
    "in"  shift, and go to state 168
    ")"   shift, and go to state 336
    "!"   shift, and go to state 218
    "&&"  shift, and go to state 170
    "||"  shift, and go to state 171


state 232

   62 exp: exp . "=" exp
   63    | exp . "=" exp modifiers
   80 stmt: "timeout" "(" exp . ")" stmt catch.opt else.opt finally.opt
  215 exp: exp . "&&" exp
  216    | exp . "||" exp
  217    | exp . "in" exp
  218    | exp . "!" "in" exp

    "="   shift, and go to state 167
    "in"  shift, and go to state 168
    ")"   shift, and go to state 337
    "!"   shift, and go to state 218
    "&&"  shift, and go to state 170
    "||"  shift, and go to state 171


state 233

  101 match.opt: .  ["{"]
  102          | . "(" match ")"
  103 catch: "catch" . match.opt block

    "("  shift, and go to state 338

    $default  reduce using rule 101 (match.opt)

    match.opt  go to state 339


state 234

   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
  109 stmt: "try" block "finally" . block

    "{"  shift, and go to state 16

    block  go to state 340


state 235

   90 else.opt: .  ["end of command", "case", "default", "finally", "onleave", "}", ")", ",", ";", "&", "|"]
   91         | . "else" stmt
   98 catches.1: catches.1 . catch
  103 catch: . "catch" match.opt block
  108 stmt: "try" block catches.1 . else.opt finally.opt

    "catch"  shift, and go to state 233
    "else"   shift, and go to state 341

    $default  reduce using rule 90 (else.opt)

    else.opt  go to state 342
    catch     go to state 343

    Conflict between rule 90 and token "catch" resolved as shift (EMPTY < "catch").
    Conflict between rule 90 and token "else" resolved as shift (EMPTY < "else").


state 236

   97 catches.1: catch .

    $default  reduce using rule 97 (catches.1)


state 237

   62 exp: exp . "=" exp
   63    | exp . "=" exp modifiers
   84 stmt: "waituntil" "(" exp . tilda.opt ")"
  171 event_match: exp . "?" args.opt tilda.opt guard.opt
  174 tilda.opt: .  [")"]
  175          | . "~" exp
  215 exp: exp . "&&" exp
  216    | exp . "||" exp
  217    | exp . "in" exp
  218    | exp . "!" "in" exp

    "="   shift, and go to state 167
    "in"  shift, and go to state 168
    "~"   shift, and go to state 344
    "?"   shift, and go to state 345
    "!"   shift, and go to state 218
    "&&"  shift, and go to state 170
    "||"  shift, and go to state 171

    $default  reduce using rule 174 (tilda.opt)

    tilda.opt  go to state 346


state 238

   85 stmt: "waituntil" "(" event_match . ")"

    ")"  shift, and go to state 347


state 239

   62 exp: exp . "=" exp
   63    | exp . "=" exp modifiers
  127 primary-exp: "watch" "(" exp . ")"
  215 exp: exp . "&&" exp
  216    | exp . "||" exp
  217    | exp . "in" exp
  218    | exp . "!" "in" exp

    "="   shift, and go to state 167
    "in"  shift, and go to state 168
    ")"   shift, and go to state 348
    "!"   shift, and go to state 218
    "&&"  shift, and go to state 170
    "||"  shift, and go to state 171


state 240

   62 exp: exp . "=" exp
   63    | exp . "=" exp modifiers
   86 stmt: "whenever" "(" exp . tilda.opt ")" stmt else.opt
  171 event_match: exp . "?" args.opt tilda.opt guard.opt
  174 tilda.opt: .  [")"]
  175          | . "~" exp
  215 exp: exp . "&&" exp
  216    | exp . "||" exp
  217    | exp . "in" exp
  218    | exp . "!" "in" exp

    "="   shift, and go to state 167
    "in"  shift, and go to state 168
    "~"   shift, and go to state 344
    "?"   shift, and go to state 345
    "!"   shift, and go to state 218
    "&&"  shift, and go to state 170
    "||"  shift, and go to state 171

    $default  reduce using rule 174 (tilda.opt)

    tilda.opt  go to state 349


state 241

   87 stmt: "whenever" "(" event_match . ")" stmt else.opt

    ")"  shift, and go to state 350


state 242

   62 exp: exp . "=" exp
   63    | exp . "=" exp modifiers
   75 stmt: "every" "(" exp . ")" stmt
  215 exp: exp . "&&" exp
  216    | exp . "||" exp
  217    | exp . "in" exp
  218    | exp . "!" "in" exp

    "="   shift, and go to state 167
    "in"  shift, and go to state 168
    ")"   shift, and go to state 351
    "!"   shift, and go to state 218
    "&&"  shift, and go to state 170
    "||"  shift, and go to state 171


state 243

   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   52 routine: . "closure"
   53        | . "function"
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
  114 stmt: "for" "(" "var" . "identifier" in_or_colon exp ")" stmt
  118 primary-exp: . block
  119            | . "do" "(" exp ")" block
  120 detach: . "detach"
  121       | . "disown"
  122 primary-exp: . "assert" "(" exp ")"
  123            | . "assert" "{" claims "}"
  124            | . detach "(" exp ")"
  125            | . detach block
  126            | . "isdef" "(" k1_id ")"
  127            | . "watch" "(" exp ")"
  128 lvalue: . id
  129       | . primary-exp "." id
  130       | . primary-exp "." "*"
  131 primary-exp: . "&" id
  132            | . primary-exp "." "&" id
  133 id: . "identifier"
  134 bitor-exp: . "var" bitor-exp
  134          | "var" . bitor-exp
  135          | . "const" "var" bitor-exp
  136 primary-exp: . lvalue
  137            | . lvalue args
  138 new: . "new" "identifier" args.opt
  139 bitor-exp: . new
  140 id: . "new"
  141 primary-exp: . routine formals block
  142 float-exp: . "float"
  143 duration: . "duration"
  144         | . duration "duration"
  150 dictionary: . "[" assocs "]"
  154 tuple: . "(" tuple.exps ")"
  159 literal-exp: . float-exp
  160            | . "angle"
  161            | . duration
  162            | . string
  163            | . "[" exps "]"
  164            | . "[<" tuple.exps ">]"
  165            | . "<" bitor-exps ">"
  166            | . dictionary
  167            | . tuple
  168 string: . "string"
  169       | . string "string"
  170 literal-exp: . "__HERE__"
  176 lvalue: . primary-exp "[" exps "]"
  177 literal-exp: . "this"
  178            | . "call"
  179 primary-exp: . literal-exp
  180            | . "(" exp ")"
  181            | . "(" error ")"
  182            | . primary-exp "**" primary-exp
  183 unary-exp: . primary-exp
  184          | . "--" lvalue
  185          | . "++" lvalue
  186          | . "+" unary-exp
  187          | . "-" unary-exp
  188          | . "!" unary-exp
  189          | . "compl" unary-exp
  190 bitor-exp: . unary-exp
  191          | . bitor-exp "+" bitor-exp
  192          | . bitor-exp "-" bitor-exp
  193          | . bitor-exp "*" bitor-exp
  194          | . bitor-exp "/" bitor-exp
  195          | . bitor-exp "%" bitor-exp
  196          | . bitor-exp "^" bitor-exp
  197          | . bitor-exp "<<" bitor-exp
  198          | . bitor-exp "bitand" bitor-exp
  199          | . bitor-exp "bitor" bitor-exp
  200          | . bitor-exp ">>" bitor-exp
  223 primary-exp: . "%exp:" unsigned
  224 lvalue: . "%lvalue:" unsigned
  225       | . "%id:" unsigned
  226       | . primary-exp "." "%id:" unsigned
  227 primary-exp: . lvalue "(" "%exps:" unsigned ")"

    "__HERE__"    shift, and go to state 7
    "closure"     shift, and go to state 9
    "const"       shift, and go to state 10
    "function"    shift, and go to state 13
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "[<"          shift, and go to state 19
    "var"         shift, and go to state 26
    "watch"       shift, and go to state 28
    "&"           shift, and go to state 30
    "identifier"  shift, and go to state 352
    "--"          shift, and go to state 42
    "++"          shift, and go to state 43
    "do"          shift, and go to state 44
    "assert"      shift, and go to state 45
    "detach"      shift, and go to state 46
    "disown"      shift, and go to state 47
    "new"         shift, and go to state 48
    "angle"       shift, and go to state 49
    "duration"    shift, and go to state 50
    "float"       shift, and go to state 51
    "string"      shift, and go to state 52
    "call"        shift, and go to state 53
    "this"        shift, and go to state 54
    "!"           shift, and go to state 55
    "compl"       shift, and go to state 56
    "-"           shift, and go to state 57
    "+"           shift, and go to state 58
    "<"           shift, and go to state 59
    "%exp:"       shift, and go to state 61
    "%lvalue:"    shift, and go to state 62
    "%id:"        shift, and go to state 63

    block        go to state 68
    routine      go to state 101
    primary-exp  go to state 102
    detach       go to state 72
    lvalue       go to state 123
    id           go to state 103
    bitor-exp    go to state 124
    new          go to state 76
    float-exp    go to state 77
    duration     go to state 78
    dictionary   go to state 79
    tuple        go to state 80
    literal-exp  go to state 81
    string       go to state 82
    unary-exp    go to state 83


state 244

  113 stmt: "for" "(" stmt.opt . ";" exp ";" stmt.opt ")" stmt

    ";"  shift, and go to state 353


state 245

   22 stmt.opt: stmt .

    $default  reduce using rule 22 (stmt.opt)


state 246

   24 stmt: exp .  [";"]
   51     | exp . "!" args.opt tilda.opt
   62 exp: exp . "=" exp
   63    | exp . "=" exp modifiers
  112 stmt: "for" "(" exp . ")" stmt
  215 exp: exp . "&&" exp
  216    | exp . "||" exp
  217    | exp . "in" exp
  218    | exp . "!" "in" exp

    "="   shift, and go to state 167
    "in"  shift, and go to state 168
    ")"   shift, and go to state 354
    "!"   shift, and go to state 169
    "&&"  shift, and go to state 170
    "||"  shift, and go to state 171

    $default  reduce using rule 24 (stmt)


state 247

   62 exp: exp . "=" exp
   63    | exp . "=" exp modifiers
  115 stmt: "while" "(" exp . ")" stmt
  215 exp: exp . "&&" exp
  216    | exp . "||" exp
  217    | exp . "in" exp
  218    | exp . "!" "in" exp

    "="   shift, and go to state 167
    "in"  shift, and go to state 168
    ")"   shift, and go to state 355
    "!"   shift, and go to state 218
    "&&"  shift, and go to state 170
    "||"  shift, and go to state 171


state 248

   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   37 exp: . "class" lvalue protos block
   38    | . "package" lvalue protos block
   52 routine: . "closure"
   53        | . "function"
   62 exp: . exp "=" exp
   63    | . exp "=" exp modifiers
   64    | . lvalue "+=" exp
   65    | . lvalue "-=" exp
   66    | . lvalue "*=" exp
   67    | . lvalue "/=" exp
   68    | . lvalue "^=" exp
   69    | . lvalue "%=" exp
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
   73 stmt: "at" identifiers "(" . exp tilda.opt ")" stmt onleave.opt
   74     | "at" identifiers "(" . event_match ")" stmt onleave.opt
  118 primary-exp: . block
  119            | . "do" "(" exp ")" block
  120 detach: . "detach"
  121       | . "disown"
  122 primary-exp: . "assert" "(" exp ")"
  123            | . "assert" "{" claims "}"
  124            | . detach "(" exp ")"
  125            | . detach block
  126            | . "isdef" "(" k1_id ")"
  127            | . "watch" "(" exp ")"
  128 lvalue: . id
  129       | . primary-exp "." id
  130       | . primary-exp "." "*"
  131 primary-exp: . "&" id
  132            | . primary-exp "." "&" id
  133 id: . "identifier"
  134 bitor-exp: . "var" bitor-exp
  135          | . "const" "var" bitor-exp
  136 primary-exp: . lvalue
  137            | . lvalue args
  138 new: . "new" "identifier" args.opt
  139 bitor-exp: . new
  140 id: . "new"
  141 primary-exp: . routine formals block
  142 float-exp: . "float"
  143 duration: . "duration"
  144         | . duration "duration"
  150 dictionary: . "[" assocs "]"
  154 tuple: . "(" tuple.exps ")"
  159 literal-exp: . float-exp
  160            | . "angle"
  161            | . duration
  162            | . string
  163            | . "[" exps "]"
  164            | . "[<" tuple.exps ">]"
  165            | . "<" bitor-exps ">"
  166            | . dictionary
  167            | . tuple
  168 string: . "string"
  169       | . string "string"
  170 literal-exp: . "__HERE__"
  171 event_match: . exp "?" args.opt tilda.opt guard.opt
  176 lvalue: . primary-exp "[" exps "]"
  177 literal-exp: . "this"
  178            | . "call"
  179 primary-exp: . literal-exp
  180            | . "(" exp ")"
  181            | . "(" error ")"
  182            | . primary-exp "**" primary-exp
  183 unary-exp: . primary-exp
  184          | . "--" lvalue
  185          | . "++" lvalue
  186          | . "+" unary-exp
  187          | . "-" unary-exp
  188          | . "!" unary-exp
  189          | . "compl" unary-exp
  190 bitor-exp: . unary-exp
  191          | . bitor-exp "+" bitor-exp
  192          | . bitor-exp "-" bitor-exp
  193          | . bitor-exp "*" bitor-exp
  194          | . bitor-exp "/" bitor-exp
  195          | . bitor-exp "%" bitor-exp
  196          | . bitor-exp "^" bitor-exp
  197          | . bitor-exp "<<" bitor-exp
  198          | . bitor-exp "bitand" bitor-exp
  199          | . bitor-exp "bitor" bitor-exp
  200          | . bitor-exp ">>" bitor-exp
  211 rel-exp: . bitor-exp rel-ops
  214 exp: . rel-exp
  215    | . exp "&&" exp
  216    | . exp "||" exp
  217    | . exp "in" exp
  218    | . exp "!" "in" exp
  222    | . "%unscope:" unsigned
  223 primary-exp: . "%exp:" unsigned
  224 lvalue: . "%lvalue:" unsigned
  225       | . "%id:" unsigned
  226       | . primary-exp "." "%id:" unsigned
  227 primary-exp: . lvalue "(" "%exps:" unsigned ")"

    "__HERE__"    shift, and go to state 7
    "closure"     shift, and go to state 9
    "const"       shift, and go to state 10
    "function"    shift, and go to state 13
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "[<"          shift, and go to state 19
    "var"         shift, and go to state 26
    "watch"       shift, and go to state 28
    "&"           shift, and go to state 30
    "identifier"  shift, and go to state 36
    "class"       shift, and go to state 37
    "package"     shift, and go to state 38
    "--"          shift, and go to state 42
    "++"          shift, and go to state 43
    "do"          shift, and go to state 44
    "assert"      shift, and go to state 45
    "detach"      shift, and go to state 46
    "disown"      shift, and go to state 47
    "new"         shift, and go to state 48
    "angle"       shift, and go to state 49
    "duration"    shift, and go to state 50
    "float"       shift, and go to state 51
    "string"      shift, and go to state 52
    "call"        shift, and go to state 53
    "this"        shift, and go to state 54
    "!"           shift, and go to state 55
    "compl"       shift, and go to state 56
    "-"           shift, and go to state 57
    "+"           shift, and go to state 58
    "<"           shift, and go to state 59
    "%unscope:"   shift, and go to state 60
    "%exp:"       shift, and go to state 61
    "%lvalue:"    shift, and go to state 62
    "%id:"        shift, and go to state 63

    block        go to state 68
    exp          go to state 356
    routine      go to state 101
    primary-exp  go to state 102
    detach       go to state 72
    lvalue       go to state 73
    id           go to state 103
    bitor-exp    go to state 75
    new          go to state 76
    float-exp    go to state 77
    duration     go to state 78
    dictionary   go to state 79
    tuple        go to state 80
    literal-exp  go to state 81
    string       go to state 82
    event_match  go to state 357
    unary-exp    go to state 83
    rel-exp      go to state 84


state 249

  241 identifiers: identifiers "identifier" .

    $default  reduce using rule 241 (identifiers)


state 250

   28 visibility: .  ["__HERE__", "closure", "const", "function", "isdef", "{", "[", "(", "[<", "var", "watch", "&", "identifier", "class", "package", "--", "++", "do", "assert", "detach", "disown", "new", "angle", "duration", "float", "string", "call", "this", "!", "compl", "-", "+", "<", "%unscope:", "%exp:", "%lvalue:", "%id:"]
   29           | . "private"
   30           | . "protected"
   31           | . "public"
   32 proto: . visibility exp
   33 protos.1: . proto
   34         | . protos.1 "," proto
   36 protos: ":" . protos.1

    "private"    shift, and go to state 358
    "protected"  shift, and go to state 359
    "public"     shift, and go to state 360

    $default  reduce using rule 28 (visibility)

    visibility  go to state 361
    proto       go to state 362
    protos.1    go to state 363


state 251

   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   37 exp: "class" lvalue protos . block

    "{"  shift, and go to state 16

    block  go to state 364


state 252

   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   38 exp: "package" lvalue protos . block

    "{"  shift, and go to state 16

    block  go to state 365


state 253

   39 id.0: .  ["}"]
   40     | . id.1 comma.opt
   41 id.1: . id
   42     | . id.1 "," id
   43 stmt: "enum" id "{" . id.0 "}"
  133 id: . "identifier"
  140   | . "new"

    "identifier"  shift, and go to state 36
    "new"         shift, and go to state 128

    $default  reduce using rule 39 (id.0)

    id.0  go to state 366
    id.1  go to state 367
    id    go to state 368


state 254

   48 stmt: "external" "var" "identifier" . "." "identifier" from "identifier"

    "."  shift, and go to state 369


state 255

   47 stmt: "external" "identifier" "identifier" .

    $default  reduce using rule 47 (stmt)


state 256

   49 stmt: "external" event_or_function "(" . unsigned ")" "identifier" "." "identifier" from "identifier"
  221 unsigned: . "float"

    "float"  shift, and go to state 157

    unsigned  go to state 370


state 257

   62 exp: exp . "=" exp
   63    | exp . "=" exp modifiers
  119 primary-exp: "do" "(" exp . ")" block
  215 exp: exp . "&&" exp
  216    | exp . "||" exp
  217    | exp . "in" exp
  218    | exp . "!" "in" exp

    "="   shift, and go to state 167
    "in"  shift, and go to state 168
    ")"   shift, and go to state 371
    "!"   shift, and go to state 218
    "&&"  shift, and go to state 170
    "||"  shift, and go to state 171


state 258

   62 exp: exp . "=" exp
   63    | exp . "=" exp modifiers
  215    | exp . "&&" exp
  216    | exp . "||" exp
  217    | exp . "in" exp
  218    | exp . "!" "in" exp
  230 claims.1: exp .  ["}", ";"]

    "="   shift, and go to state 167
    "in"  shift, and go to state 168
    "!"   shift, and go to state 218
    "&&"  shift, and go to state 170
    "||"  shift, and go to state 171

    $default  reduce using rule 230 (claims.1)


state 259

  123 primary-exp: "assert" "{" claims . "}"

    "}"  shift, and go to state 372


state 260

  229 claims: claims.1 . semi.opt
  231 claims.1: claims.1 . ";" exp
  256 semi.opt: .  ["}"]
  257         | . ";"

    ";"  shift, and go to state 373

    $default  reduce using rule 256 (semi.opt)

    semi.opt  go to state 374


state 261

   62 exp: exp . "=" exp
   63    | exp . "=" exp modifiers
  122 primary-exp: "assert" "(" exp . ")"
  215 exp: exp . "&&" exp
  216    | exp . "||" exp
  217    | exp . "in" exp
  218    | exp . "!" "in" exp

    "="   shift, and go to state 167
    "in"  shift, and go to state 168
    ")"   shift, and go to state 375
    "!"   shift, and go to state 218
    "&&"  shift, and go to state 170
    "||"  shift, and go to state 171


state 262

   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   37 exp: . "class" lvalue protos block
   38    | . "package" lvalue protos block
   52 routine: . "closure"
   53        | . "function"
   62 exp: . exp "=" exp
   63    | . exp "=" exp modifiers
   64    | . lvalue "+=" exp
   65    | . lvalue "-=" exp
   66    | . lvalue "*=" exp
   67    | . lvalue "/=" exp
   68    | . lvalue "^=" exp
   69    | . lvalue "%=" exp
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
  118            | . block
  119            | . "do" "(" exp ")" block
  120 detach: . "detach"
  121       | . "disown"
  122 primary-exp: . "assert" "(" exp ")"
  123            | . "assert" "{" claims "}"
  124            | . detach "(" exp ")"
  125            | . detach block
  126            | . "isdef" "(" k1_id ")"
  127            | . "watch" "(" exp ")"
  128 lvalue: . id
  129       | . primary-exp "." id
  130       | . primary-exp "." "*"
  131 primary-exp: . "&" id
  132            | . primary-exp "." "&" id
  133 id: . "identifier"
  134 bitor-exp: . "var" bitor-exp
  135          | . "const" "var" bitor-exp
  136 primary-exp: . lvalue
  137            | . lvalue args
  138 new: . "new" "identifier" args.opt
  139 bitor-exp: . new
  140 id: . "new"
  141 primary-exp: . routine formals block
  142 float-exp: . "float"
  143 duration: . "duration"
  144         | . duration "duration"
  150 dictionary: . "[" assocs "]"
  154 tuple: . "(" tuple.exps ")"
  159 literal-exp: . float-exp
  160            | . "angle"
  161            | . duration
  162            | . string
  163            | . "[" exps "]"
  164            | . "[<" tuple.exps ">]"
  165            | . "<" bitor-exps ">"
  166            | . dictionary
  167            | . tuple
  168 string: . "string"
  169       | . string "string"
  170 literal-exp: . "__HERE__"
  176 lvalue: . primary-exp "[" exps "]"
  177 literal-exp: . "this"
  178            | . "call"
  179 primary-exp: . literal-exp
  180            | . "(" exp ")"
  181            | . "(" error ")"
  182            | . primary-exp "**" primary-exp
  183 unary-exp: . primary-exp
  184          | . "--" lvalue
  185          | . "++" lvalue
  186          | . "+" unary-exp
  187          | . "-" unary-exp
  188          | . "!" unary-exp
  189          | . "compl" unary-exp
  190 bitor-exp: . unary-exp
  191          | . bitor-exp "+" bitor-exp
  192          | . bitor-exp "-" bitor-exp
  193          | . bitor-exp "*" bitor-exp
  194          | . bitor-exp "/" bitor-exp
  195          | . bitor-exp "%" bitor-exp
  196          | . bitor-exp "^" bitor-exp
  197          | . bitor-exp "<<" bitor-exp
  198          | . bitor-exp "bitand" bitor-exp
  199          | . bitor-exp "bitor" bitor-exp
  200          | . bitor-exp ">>" bitor-exp
  211 rel-exp: . bitor-exp rel-ops
  214 exp: . rel-exp
  215    | . exp "&&" exp
  216    | . exp "||" exp
  217    | . exp "in" exp
  218    | . exp "!" "in" exp
  222    | . "%unscope:" unsigned
  223 primary-exp: . "%exp:" unsigned
  224 lvalue: . "%lvalue:" unsigned
  225       | . "%id:" unsigned
  226       | . primary-exp "." "%id:" unsigned
  227 primary-exp: . lvalue "(" "%exps:" unsigned ")"
  232 exps: .  [")"]
  233     | . exps.1 comma.opt
  234 exps.1: . exp
  235       | . exps.1 "," exp
  237 args: "(" . exps ")"

    "__HERE__"    shift, and go to state 7
    "closure"     shift, and go to state 9
    "const"       shift, and go to state 10
    "function"    shift, and go to state 13
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "[<"          shift, and go to state 19
    "var"         shift, and go to state 26
    "watch"       shift, and go to state 28
    "&"           shift, and go to state 30
    "identifier"  shift, and go to state 36
    "class"       shift, and go to state 37
    "package"     shift, and go to state 38
    "--"          shift, and go to state 42
    "++"          shift, and go to state 43
    "do"          shift, and go to state 44
    "assert"      shift, and go to state 45
    "detach"      shift, and go to state 46
    "disown"      shift, and go to state 47
    "new"         shift, and go to state 48
    "angle"       shift, and go to state 49
    "duration"    shift, and go to state 50
    "float"       shift, and go to state 51
    "string"      shift, and go to state 52
    "call"        shift, and go to state 53
    "this"        shift, and go to state 54
    "!"           shift, and go to state 55
    "compl"       shift, and go to state 56
    "-"           shift, and go to state 57
    "+"           shift, and go to state 58
    "<"           shift, and go to state 59
    "%unscope:"   shift, and go to state 60
    "%exp:"       shift, and go to state 61
    "%lvalue:"    shift, and go to state 62
    "%id:"        shift, and go to state 63

    $default  reduce using rule 232 (exps)

    block        go to state 68
    exp          go to state 114
    routine      go to state 101
    primary-exp  go to state 102
    detach       go to state 72
    lvalue       go to state 73
    id           go to state 103
    bitor-exp    go to state 75
    new          go to state 76
    float-exp    go to state 77
    duration     go to state 78
    dictionary   go to state 79
    tuple        go to state 80
    literal-exp  go to state 81
    string       go to state 82
    unary-exp    go to state 83
    rel-exp      go to state 84
    exps         go to state 294
    exps.1       go to state 108


state 263

  239 args.opt: args .

    $default  reduce using rule 239 (args.opt)


state 264

  138 new: "new" "identifier" args.opt .

    $default  reduce using rule 138 (new)


state 265

  165 literal-exp: "<" bitor-exps ">" .

    $default  reduce using rule 165 (literal-exp)


state 266

   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   52 routine: . "closure"
   53        | . "function"
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
  118            | . block
  119            | . "do" "(" exp ")" block
  120 detach: . "detach"
  121       | . "disown"
  122 primary-exp: . "assert" "(" exp ")"
  123            | . "assert" "{" claims "}"
  124            | . detach "(" exp ")"
  125            | . detach block
  126            | . "isdef" "(" k1_id ")"
  127            | . "watch" "(" exp ")"
  128 lvalue: . id
  129       | . primary-exp "." id
  130       | . primary-exp "." "*"
  131 primary-exp: . "&" id
  132            | . primary-exp "." "&" id
  133 id: . "identifier"
  134 bitor-exp: . "var" bitor-exp
  135          | . "const" "var" bitor-exp
  136 primary-exp: . lvalue
  137            | . lvalue args
  138 new: . "new" "identifier" args.opt
  139 bitor-exp: . new
  140 id: . "new"
  141 primary-exp: . routine formals block
  142 float-exp: . "float"
  143 duration: . "duration"
  144         | . duration "duration"
  150 dictionary: . "[" assocs "]"
  154 tuple: . "(" tuple.exps ")"
  158 bitor-exps.1: bitor-exps.1 "," . bitor-exp
  159 literal-exp: . float-exp
  160            | . "angle"
  161            | . duration
  162            | . string
  163            | . "[" exps "]"
  164            | . "[<" tuple.exps ">]"
  165            | . "<" bitor-exps ">"
  166            | . dictionary
  167            | . tuple
  168 string: . "string"
  169       | . string "string"
  170 literal-exp: . "__HERE__"
  176 lvalue: . primary-exp "[" exps "]"
  177 literal-exp: . "this"
  178            | . "call"
  179 primary-exp: . literal-exp
  180            | . "(" exp ")"
  181            | . "(" error ")"
  182            | . primary-exp "**" primary-exp
  183 unary-exp: . primary-exp
  184          | . "--" lvalue
  185          | . "++" lvalue
  186          | . "+" unary-exp
  187          | . "-" unary-exp
  188          | . "!" unary-exp
  189          | . "compl" unary-exp
  190 bitor-exp: . unary-exp
  191          | . bitor-exp "+" bitor-exp
  192          | . bitor-exp "-" bitor-exp
  193          | . bitor-exp "*" bitor-exp
  194          | . bitor-exp "/" bitor-exp
  195          | . bitor-exp "%" bitor-exp
  196          | . bitor-exp "^" bitor-exp
  197          | . bitor-exp "<<" bitor-exp
  198          | . bitor-exp "bitand" bitor-exp
  199          | . bitor-exp "bitor" bitor-exp
  200          | . bitor-exp ">>" bitor-exp
  223 primary-exp: . "%exp:" unsigned
  224 lvalue: . "%lvalue:" unsigned
  225       | . "%id:" unsigned
  226       | . primary-exp "." "%id:" unsigned
  227 primary-exp: . lvalue "(" "%exps:" unsigned ")"
  255 comma.opt: "," .  [">"]

    "__HERE__"    shift, and go to state 7
    "closure"     shift, and go to state 9
    "const"       shift, and go to state 10
    "function"    shift, and go to state 13
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "[<"          shift, and go to state 19
    "var"         shift, and go to state 26
    "watch"       shift, and go to state 28
    "&"           shift, and go to state 30
    "identifier"  shift, and go to state 36
    "--"          shift, and go to state 42
    "++"          shift, and go to state 43
    "do"          shift, and go to state 44
    "assert"      shift, and go to state 45
    "detach"      shift, and go to state 46
    "disown"      shift, and go to state 47
    "new"         shift, and go to state 48
    "angle"       shift, and go to state 49
    "duration"    shift, and go to state 50
    "float"       shift, and go to state 51
    "string"      shift, and go to state 52
    "call"        shift, and go to state 53
    "this"        shift, and go to state 54
    "!"           shift, and go to state 55
    "compl"       shift, and go to state 56
    "-"           shift, and go to state 57
    "+"           shift, and go to state 58
    "<"           shift, and go to state 59
    "%exp:"       shift, and go to state 61
    "%lvalue:"    shift, and go to state 62
    "%id:"        shift, and go to state 63

    $default  reduce using rule 255 (comma.opt)

    block        go to state 68
    routine      go to state 101
    primary-exp  go to state 102
    detach       go to state 72
    lvalue       go to state 123
    id           go to state 103
    bitor-exp    go to state 376
    new          go to state 76
    float-exp    go to state 77
    duration     go to state 78
    dictionary   go to state 79
    tuple        go to state 80
    literal-exp  go to state 81
    string       go to state 82
    unary-exp    go to state 83


state 267

  156 bitor-exps: bitor-exps.1 comma.opt .

    $default  reduce using rule 156 (bitor-exps)


state 268

   19 cstmt: cstmt . "|" cstmt
   20      | cstmt . "&" cstmt
   20      | cstmt "&" cstmt .  ["end of command", "case", "default", "}", ")", ",", ";", "&", "|"]

    $default  reduce using rule 20 (cstmt)

    Conflict between rule 20 and token "&" resolved as reduce (%left "&").
    Conflict between rule 20 and token "|" resolved as reduce ("|" < "&").


state 269

   19 cstmt: cstmt . "|" cstmt
   19      | cstmt "|" cstmt .  ["end of command", "case", "default", "}", ")", ",", ";", "|"]
   20      | cstmt . "&" cstmt

    "&"  shift, and go to state 165

    $default  reduce using rule 19 (cstmt)

    Conflict between rule 19 and token "&" resolved as shift ("|" < "&").
    Conflict between rule 19 and token "|" resolved as reduce (%left "|").


state 270

   59 modifier: . "identifier" ":" exp
   60 modifiers: . modifier
   61          | . modifiers modifier
   62 exp: exp . "=" exp
   62    | exp "=" exp .  ["end of command", "case", "catch", ":", "default", "else", "finally", "if", "{", ">]", "onleave", "}", "]", ")", "~", ",", ";", "&", "|", "=>", "?"]
   63    | exp . "=" exp modifiers
   63    | exp "=" exp . modifiers
  215    | exp . "&&" exp
  216    | exp . "||" exp
  217    | exp . "in" exp
  218    | exp . "!" "in" exp

    "="           shift, and go to state 167
    "in"          shift, and go to state 168
    "identifier"  shift, and go to state 377
    "!"           shift, and go to state 218
    "&&"          shift, and go to state 170
    "||"          shift, and go to state 171

    $default  reduce using rule 62 (exp)

    modifier   go to state 378
    modifiers  go to state 379

    Conflict between rule 62 and token "=" resolved as shift (ASSIGN < "=").
    Conflict between rule 62 and token "in" resolved as shift (ASSIGN < "in").
    Conflict between rule 62 and token "identifier" resolved as shift (ASSIGN < "identifier").
    Conflict between rule 62 and token "!" resolved as shift (ASSIGN < "!").
    Conflict between rule 62 and token "&&" resolved as shift (ASSIGN < "&&").
    Conflict between rule 62 and token "||" resolved as shift (ASSIGN < "||").


state 271

   62 exp: exp . "=" exp
   63    | exp . "=" exp modifiers
  215    | exp . "&&" exp
  216    | exp . "||" exp
  217    | exp . "in" exp
  217    | exp "in" exp .  ["end of command", "=", "case", "catch", ":", "default", "else", "finally", "if", "{", ">]", "onleave", "}", "]", ")", "~", ",", ";", "&", "|", "identifier", "=>", "?", "&&", "||"]
  218    | exp . "!" "in" exp

    "!"  shift, and go to state 218

    "in"  error (nonassociative)

    $default  reduce using rule 217 (exp)

    Conflict between rule 217 and token "=" resolved as reduce ("=" < "in").
    Conflict between rule 217 and token "in" resolved as an error (%nonassoc "in").
    Conflict between rule 217 and token "!" resolved as shift ("in" < "!").
    Conflict between rule 217 and token "&&" resolved as reduce ("&&" < "in").
    Conflict between rule 217 and token "||" resolved as reduce ("||" < "in").


state 272

   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   37 exp: . "class" lvalue protos block
   38    | . "package" lvalue protos block
   52 routine: . "closure"
   53        | . "function"
   62 exp: . exp "=" exp
   63    | . exp "=" exp modifiers
   64    | . lvalue "+=" exp
   65    | . lvalue "-=" exp
   66    | . lvalue "*=" exp
   67    | . lvalue "/=" exp
   68    | . lvalue "^=" exp
   69    | . lvalue "%=" exp
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
  118            | . block
  119            | . "do" "(" exp ")" block
  120 detach: . "detach"
  121       | . "disown"
  122 primary-exp: . "assert" "(" exp ")"
  123            | . "assert" "{" claims "}"
  124            | . detach "(" exp ")"
  125            | . detach block
  126            | . "isdef" "(" k1_id ")"
  127            | . "watch" "(" exp ")"
  128 lvalue: . id
  129       | . primary-exp "." id
  130       | . primary-exp "." "*"
  131 primary-exp: . "&" id
  132            | . primary-exp "." "&" id
  133 id: . "identifier"
  134 bitor-exp: . "var" bitor-exp
  135          | . "const" "var" bitor-exp
  136 primary-exp: . lvalue
  137            | . lvalue args
  138 new: . "new" "identifier" args.opt
  139 bitor-exp: . new
  140 id: . "new"
  141 primary-exp: . routine formals block
  142 float-exp: . "float"
  143 duration: . "duration"
  144         | . duration "duration"
  150 dictionary: . "[" assocs "]"
  154 tuple: . "(" tuple.exps ")"
  159 literal-exp: . float-exp
  160            | . "angle"
  161            | . duration
  162            | . string
  163            | . "[" exps "]"
  164            | . "[<" tuple.exps ">]"
  165            | . "<" bitor-exps ">"
  166            | . dictionary
  167            | . tuple
  168 string: . "string"
  169       | . string "string"
  170 literal-exp: . "__HERE__"
  176 lvalue: . primary-exp "[" exps "]"
  177 literal-exp: . "this"
  178            | . "call"
  179 primary-exp: . literal-exp
  180            | . "(" exp ")"
  181            | . "(" error ")"
  182            | . primary-exp "**" primary-exp
  183 unary-exp: . primary-exp
  184          | . "--" lvalue
  185          | . "++" lvalue
  186          | . "+" unary-exp
  187          | . "-" unary-exp
  188          | . "!" unary-exp
  189          | . "compl" unary-exp
  190 bitor-exp: . unary-exp
  191          | . bitor-exp "+" bitor-exp
  192          | . bitor-exp "-" bitor-exp
  193          | . bitor-exp "*" bitor-exp
  194          | . bitor-exp "/" bitor-exp
  195          | . bitor-exp "%" bitor-exp
  196          | . bitor-exp "^" bitor-exp
  197          | . bitor-exp "<<" bitor-exp
  198          | . bitor-exp "bitand" bitor-exp
  199          | . bitor-exp "bitor" bitor-exp
  200          | . bitor-exp ">>" bitor-exp
  211 rel-exp: . bitor-exp rel-ops
  214 exp: . rel-exp
  215    | . exp "&&" exp
  216    | . exp "||" exp
  217    | . exp "in" exp
  218    | . exp "!" "in" exp
  218    | exp "!" "in" . exp
  222    | . "%unscope:" unsigned
  223 primary-exp: . "%exp:" unsigned
  224 lvalue: . "%lvalue:" unsigned
  225       | . "%id:" unsigned
  226       | . primary-exp "." "%id:" unsigned
  227 primary-exp: . lvalue "(" "%exps:" unsigned ")"

    "__HERE__"    shift, and go to state 7
    "closure"     shift, and go to state 9
    "const"       shift, and go to state 10
    "function"    shift, and go to state 13
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "[<"          shift, and go to state 19
    "var"         shift, and go to state 26
    "watch"       shift, and go to state 28
    "&"           shift, and go to state 30
    "identifier"  shift, and go to state 36
    "class"       shift, and go to state 37
    "package"     shift, and go to state 38
    "--"          shift, and go to state 42
    "++"          shift, and go to state 43
    "do"          shift, and go to state 44
    "assert"      shift, and go to state 45
    "detach"      shift, and go to state 46
    "disown"      shift, and go to state 47
    "new"         shift, and go to state 48
    "angle"       shift, and go to state 49
    "duration"    shift, and go to state 50
    "float"       shift, and go to state 51
    "string"      shift, and go to state 52
    "call"        shift, and go to state 53
    "this"        shift, and go to state 54
    "!"           shift, and go to state 55
    "compl"       shift, and go to state 56
    "-"           shift, and go to state 57
    "+"           shift, and go to state 58
    "<"           shift, and go to state 59
    "%unscope:"   shift, and go to state 60
    "%exp:"       shift, and go to state 61
    "%lvalue:"    shift, and go to state 62
    "%id:"        shift, and go to state 63

    block        go to state 68
    exp          go to state 380
    routine      go to state 101
    primary-exp  go to state 102
    detach       go to state 72
    lvalue       go to state 73
    id           go to state 103
    bitor-exp    go to state 75
    new          go to state 76
    float-exp    go to state 77
    duration     go to state 78
    dictionary   go to state 79
    tuple        go to state 80
    literal-exp  go to state 81
    string       go to state 82
    unary-exp    go to state 83
    rel-exp      go to state 84


state 273

   51 stmt: exp "!" args.opt . tilda.opt
  174 tilda.opt: .  ["end of command", "case", "catch", "default", "else", "finally", "onleave", "}", ")", ",", ";", "&", "|"]
  175          | . "~" exp

    "~"  shift, and go to state 344

    $default  reduce using rule 174 (tilda.opt)

    tilda.opt  go to state 381


state 274

   62 exp: exp . "=" exp
   63    | exp . "=" exp modifiers
  215    | exp . "&&" exp
  215    | exp "&&" exp .  ["end of command", "=", "case", "catch", ":", "default", "else", "finally", "if", "{", ">]", "onleave", "}", "]", ")", "~", ",", ";", "&", "|", "identifier", "=>", "?", "&&", "||"]
  216    | exp . "||" exp
  217    | exp . "in" exp
  218    | exp . "!" "in" exp

    "in"  shift, and go to state 168
    "!"   shift, and go to state 218

    $default  reduce using rule 215 (exp)

    Conflict between rule 215 and token "=" resolved as reduce ("=" < "&&").
    Conflict between rule 215 and token "in" resolved as shift ("&&" < "in").
    Conflict between rule 215 and token "!" resolved as shift ("&&" < "!").
    Conflict between rule 215 and token "&&" resolved as reduce (%left "&&").
    Conflict between rule 215 and token "||" resolved as reduce ("||" < "&&").


state 275

   62 exp: exp . "=" exp
   63    | exp . "=" exp modifiers
  215    | exp . "&&" exp
  216    | exp . "||" exp
  216    | exp "||" exp .  ["end of command", "=", "case", "catch", ":", "default", "else", "finally", "if", "{", ">]", "onleave", "}", "]", ")", "~", ",", ";", "&", "|", "identifier", "=>", "?", "||"]
  217    | exp . "in" exp
  218    | exp . "!" "in" exp

    "in"  shift, and go to state 168
    "!"   shift, and go to state 218
    "&&"  shift, and go to state 170

    $default  reduce using rule 216 (exp)

    Conflict between rule 216 and token "=" resolved as reduce ("=" < "||").
    Conflict between rule 216 and token "in" resolved as shift ("||" < "in").
    Conflict between rule 216 and token "!" resolved as shift ("||" < "!").
    Conflict between rule 216 and token "&&" resolved as shift ("||" < "&&").
    Conflict between rule 216 and token "||" resolved as reduce (%left "||").


state 276

  259 var.opt: "var" .

    $default  reduce using rule 259 (var.opt)


state 277

  248 formals.1: formal .

    $default  reduce using rule 248 (formals.1)


state 278

  249 formals.1: formals.1 . "," formal
  251 formals.0: formals.1 . comma.opt
  254 comma.opt: .  [")"]
  255          | . ","

    ","  shift, and go to state 382

    $default  reduce using rule 254 (comma.opt)

    comma.opt  go to state 383


state 279

  253 formals: "(" formals.0 . ")"

    ")"  shift, and go to state 384


state 280

  245 formal: var.opt . "identifier" typespec.opt
  246       | var.opt . "identifier" "=" exp typespec.opt
  247       | var.opt . "identifier" "[" "]"

    "identifier"  shift, and go to state 385


state 281

   57 k1_id: "this" "." . "identifier"

    "identifier"  shift, and go to state 386


state 282

   58 k1_id: k1_id "." . "identifier"

    "identifier"  shift, and go to state 387


state 283

   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   54 stmt: routine k1_id formals . block

    "{"  shift, and go to state 16

    block  go to state 388


state 284

  141 primary-exp: routine formals block .

    $default  reduce using rule 141 (primary-exp)


state 285

   23 stmt: primary-exp ":" stmt .

    $default  reduce using rule 23 (stmt)


state 286

  176 lvalue: primary-exp "[" exps . "]"

    "]"  shift, and go to state 389


state 287

  132 primary-exp: primary-exp "." "&" . id
  133 id: . "identifier"
  140   | . "new"

    "identifier"  shift, and go to state 36
    "new"         shift, and go to state 128

    id  go to state 390


state 288

  130 lvalue: primary-exp "." "*" .

    $default  reduce using rule 130 (lvalue)


state 289

  221 unsigned: . "float"
  226 lvalue: primary-exp "." "%id:" . unsigned

    "float"  shift, and go to state 157

    unsigned  go to state 391


state 290

  129 lvalue: primary-exp "." id .

    $default  reduce using rule 129 (lvalue)


state 291

  129 lvalue: primary-exp . "." id
  130       | primary-exp . "." "*"
  132 primary-exp: primary-exp . "." "&" id
  176 lvalue: primary-exp . "[" exps "]"
  182 primary-exp: primary-exp . "**" primary-exp
  182            | primary-exp "**" primary-exp .  ["end of command", "=", "case", "catch", ":", "default", "else", "finally", "if", "in", "{", ">]", "onleave", "}", "]", ")", "~", ",", ";", "&", "|", "identifier", "=>", "?", "!", "bitand", "bitor", "^", ">>", "<<", "-", "%", "+", "/", "*", "=~=", "==", "===", ">=", ">", "<=", "<", "!=", "!==", "~=", "&&", "||"]
  226 lvalue: primary-exp . "." "%id:" unsigned

    "["   shift, and go to state 178
    "."   shift, and go to state 179
    "**"  shift, and go to state 180

    $default  reduce using rule 182 (primary-exp)

    Conflict between rule 182 and token "[" resolved as shift ("**" < "[").
    Conflict between rule 182 and token "." resolved as shift ("**" < ".").
    Conflict between rule 182 and token "**" resolved as shift (%right "**").


state 292

   62 exp: exp . "=" exp
   63    | exp . "=" exp modifiers
  124 primary-exp: detach "(" exp . ")"
  215 exp: exp . "&&" exp
  216    | exp . "||" exp
  217    | exp . "in" exp
  218    | exp . "!" "in" exp

    "="   shift, and go to state 167
    "in"  shift, and go to state 168
    ")"   shift, and go to state 392
    "!"   shift, and go to state 218
    "&&"  shift, and go to state 170
    "||"  shift, and go to state 171


state 293

  221 unsigned: . "float"
  227 primary-exp: lvalue "(" "%exps:" . unsigned ")"

    "float"  shift, and go to state 157

    unsigned  go to state 393


state 294

  237 args: "(" exps . ")"

    ")"  shift, and go to state 394


state 295

   62 exp: exp . "=" exp
   63    | exp . "=" exp modifiers
   68    | lvalue "^=" exp .  ["end of command", "case", "catch", ":", "default", "else", "finally", "if", "{", ">]", "onleave", "}", "]", ")", "~", ",", ";", "&", "|", "identifier", "=>", "?"]
  215    | exp . "&&" exp
  216    | exp . "||" exp
  217    | exp . "in" exp
  218    | exp . "!" "in" exp

    "="   shift, and go to state 167
    "in"  shift, and go to state 168
    "!"   shift, and go to state 218
    "&&"  shift, and go to state 170
    "||"  shift, and go to state 171

    $default  reduce using rule 68 (exp)

    Conflict between rule 68 and token "=" resolved as shift (%right "=").
    Conflict between rule 68 and token "in" resolved as shift ("^=" < "in").
    Conflict between rule 68 and token "!" resolved as shift ("^=" < "!").
    Conflict between rule 68 and token "&&" resolved as shift ("^=" < "&&").
    Conflict between rule 68 and token "||" resolved as shift ("^=" < "||").


state 296

   62 exp: exp . "=" exp
   63    | exp . "=" exp modifiers
   65    | lvalue "-=" exp .  ["end of command", "case", "catch", ":", "default", "else", "finally", "if", "{", ">]", "onleave", "}", "]", ")", "~", ",", ";", "&", "|", "identifier", "=>", "?"]
  215    | exp . "&&" exp
  216    | exp . "||" exp
  217    | exp . "in" exp
  218    | exp . "!" "in" exp

    "="   shift, and go to state 167
    "in"  shift, and go to state 168
    "!"   shift, and go to state 218
    "&&"  shift, and go to state 170
    "||"  shift, and go to state 171

    $default  reduce using rule 65 (exp)

    Conflict between rule 65 and token "=" resolved as shift (%right "=").
    Conflict between rule 65 and token "in" resolved as shift ("-=" < "in").
    Conflict between rule 65 and token "!" resolved as shift ("-=" < "!").
    Conflict between rule 65 and token "&&" resolved as shift ("-=" < "&&").
    Conflict between rule 65 and token "||" resolved as shift ("-=" < "||").


state 297

   62 exp: exp . "=" exp
   63    | exp . "=" exp modifiers
   69    | lvalue "%=" exp .  ["end of command", "case", "catch", ":", "default", "else", "finally", "if", "{", ">]", "onleave", "}", "]", ")", "~", ",", ";", "&", "|", "identifier", "=>", "?"]
  215    | exp . "&&" exp
  216    | exp . "||" exp
  217    | exp . "in" exp
  218    | exp . "!" "in" exp

    "="   shift, and go to state 167
    "in"  shift, and go to state 168
    "!"   shift, and go to state 218
    "&&"  shift, and go to state 170
    "||"  shift, and go to state 171

    $default  reduce using rule 69 (exp)

    Conflict between rule 69 and token "=" resolved as shift (%right "=").
    Conflict between rule 69 and token "in" resolved as shift ("%=" < "in").
    Conflict between rule 69 and token "!" resolved as shift ("%=" < "!").
    Conflict between rule 69 and token "&&" resolved as shift ("%=" < "&&").
    Conflict between rule 69 and token "||" resolved as shift ("%=" < "||").


state 298

   62 exp: exp . "=" exp
   63    | exp . "=" exp modifiers
   64    | lvalue "+=" exp .  ["end of command", "case", "catch", ":", "default", "else", "finally", "if", "{", ">]", "onleave", "}", "]", ")", "~", ",", ";", "&", "|", "identifier", "=>", "?"]
  215    | exp . "&&" exp
  216    | exp . "||" exp
  217    | exp . "in" exp
  218    | exp . "!" "in" exp

    "="   shift, and go to state 167
    "in"  shift, and go to state 168
    "!"   shift, and go to state 218
    "&&"  shift, and go to state 170
    "||"  shift, and go to state 171

    $default  reduce using rule 64 (exp)

    Conflict between rule 64 and token "=" resolved as shift (%right "=").
    Conflict between rule 64 and token "in" resolved as shift ("+=" < "in").
    Conflict between rule 64 and token "!" resolved as shift ("+=" < "!").
    Conflict between rule 64 and token "&&" resolved as shift ("+=" < "&&").
    Conflict between rule 64 and token "||" resolved as shift ("+=" < "||").


state 299

   62 exp: exp . "=" exp
   63    | exp . "=" exp modifiers
   67    | lvalue "/=" exp .  ["end of command", "case", "catch", ":", "default", "else", "finally", "if", "{", ">]", "onleave", "}", "]", ")", "~", ",", ";", "&", "|", "identifier", "=>", "?"]
  215    | exp . "&&" exp
  216    | exp . "||" exp
  217    | exp . "in" exp
  218    | exp . "!" "in" exp

    "="   shift, and go to state 167
    "in"  shift, and go to state 168
    "!"   shift, and go to state 218
    "&&"  shift, and go to state 170
    "||"  shift, and go to state 171

    $default  reduce using rule 67 (exp)

    Conflict between rule 67 and token "=" resolved as shift (%right "=").
    Conflict between rule 67 and token "in" resolved as shift ("/=" < "in").
    Conflict between rule 67 and token "!" resolved as shift ("/=" < "!").
    Conflict between rule 67 and token "&&" resolved as shift ("/=" < "&&").
    Conflict between rule 67 and token "||" resolved as shift ("/=" < "||").


state 300

   62 exp: exp . "=" exp
   63    | exp . "=" exp modifiers
   66    | lvalue "*=" exp .  ["end of command", "case", "catch", ":", "default", "else", "finally", "if", "{", ">]", "onleave", "}", "]", ")", "~", ",", ";", "&", "|", "identifier", "=>", "?"]
  215    | exp . "&&" exp
  216    | exp . "||" exp
  217    | exp . "in" exp
  218    | exp . "!" "in" exp

    "="   shift, and go to state 167
    "in"  shift, and go to state 168
    "!"   shift, and go to state 218
    "&&"  shift, and go to state 170
    "||"  shift, and go to state 171

    $default  reduce using rule 66 (exp)

    Conflict between rule 66 and token "=" resolved as shift (%right "=").
    Conflict between rule 66 and token "in" resolved as shift ("*=" < "in").
    Conflict between rule 66 and token "!" resolved as shift ("*=" < "!").
    Conflict between rule 66 and token "&&" resolved as shift ("*=" < "&&").
    Conflict between rule 66 and token "||" resolved as shift ("*=" < "||").


state 301

   72 primary-exp: lvalue "->" id .

    $default  reduce using rule 72 (primary-exp)


state 302

   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   55 stmt: id id formals . block

    "{"  shift, and go to state 16

    block  go to state 395


state 303

  191 bitor-exp: bitor-exp . "+" bitor-exp
  192          | bitor-exp . "-" bitor-exp
  193          | bitor-exp . "*" bitor-exp
  194          | bitor-exp . "/" bitor-exp
  195          | bitor-exp . "%" bitor-exp
  196          | bitor-exp . "^" bitor-exp
  197          | bitor-exp . "<<" bitor-exp
  198          | bitor-exp . "bitand" bitor-exp
  198          | bitor-exp "bitand" bitor-exp .  ["end of command", "=", "case", "catch", ":", "default", "else", "finally", "if", "in", "{", ">]", "onleave", "}", "]", ")", "~", ",", ";", "&", "|", "identifier", "=>", "?", "!", "bitand", "bitor", "^", "=~=", "==", "===", ">=", ">", "<=", "<", "!=", "!==", "~=", "&&", "||"]
  199          | bitor-exp . "bitor" bitor-exp
  200          | bitor-exp . ">>" bitor-exp

    ">>"  shift, and go to state 198
    "<<"  shift, and go to state 199
    "-"   shift, and go to state 200
    "%"   shift, and go to state 201
    "+"   shift, and go to state 202
    "/"   shift, and go to state 203
    "*"   shift, and go to state 204

    $default  reduce using rule 198 (bitor-exp)

    Conflict between rule 198 and token "bitand" resolved as reduce (%left "bitand").
    Conflict between rule 198 and token "bitor" resolved as reduce ("bitor" < "bitand").
    Conflict between rule 198 and token "^" resolved as reduce ("^" < "bitand").
    Conflict between rule 198 and token ">>" resolved as shift ("bitand" < ">>").
    Conflict between rule 198 and token "<<" resolved as shift ("bitand" < "<<").
    Conflict between rule 198 and token "-" resolved as shift ("bitand" < "-").
    Conflict between rule 198 and token "%" resolved as shift ("bitand" < "%").
    Conflict between rule 198 and token "+" resolved as shift ("bitand" < "+").
    Conflict between rule 198 and token "/" resolved as shift ("bitand" < "/").
    Conflict between rule 198 and token "*" resolved as shift ("bitand" < "*").


state 304

  191 bitor-exp: bitor-exp . "+" bitor-exp
  192          | bitor-exp . "-" bitor-exp
  193          | bitor-exp . "*" bitor-exp
  194          | bitor-exp . "/" bitor-exp
  195          | bitor-exp . "%" bitor-exp
  196          | bitor-exp . "^" bitor-exp
  197          | bitor-exp . "<<" bitor-exp
  198          | bitor-exp . "bitand" bitor-exp
  199          | bitor-exp . "bitor" bitor-exp
  199          | bitor-exp "bitor" bitor-exp .  ["end of command", "=", "case", "catch", ":", "default", "else", "finally", "if", "in", "{", ">]", "onleave", "}", "]", ")", "~", ",", ";", "&", "|", "identifier", "=>", "?", "!", "bitor", "=~=", "==", "===", ">=", ">", "<=", "<", "!=", "!==", "~=", "&&", "||"]
  200          | bitor-exp . ">>" bitor-exp

    "bitand"  shift, and go to state 195
    "^"       shift, and go to state 197
    ">>"      shift, and go to state 198
    "<<"      shift, and go to state 199
    "-"       shift, and go to state 200
    "%"       shift, and go to state 201
    "+"       shift, and go to state 202
    "/"       shift, and go to state 203
    "*"       shift, and go to state 204

    $default  reduce using rule 199 (bitor-exp)

    Conflict between rule 199 and token "bitand" resolved as shift ("bitor" < "bitand").
    Conflict between rule 199 and token "bitor" resolved as reduce (%left "bitor").
    Conflict between rule 199 and token "^" resolved as shift ("bitor" < "^").
    Conflict between rule 199 and token ">>" resolved as shift ("bitor" < ">>").
    Conflict between rule 199 and token "<<" resolved as shift ("bitor" < "<<").
    Conflict between rule 199 and token "-" resolved as shift ("bitor" < "-").
    Conflict between rule 199 and token "%" resolved as shift ("bitor" < "%").
    Conflict between rule 199 and token "+" resolved as shift ("bitor" < "+").
    Conflict between rule 199 and token "/" resolved as shift ("bitor" < "/").
    Conflict between rule 199 and token "*" resolved as shift ("bitor" < "*").


state 305

  191 bitor-exp: bitor-exp . "+" bitor-exp
  192          | bitor-exp . "-" bitor-exp
  193          | bitor-exp . "*" bitor-exp
  194          | bitor-exp . "/" bitor-exp
  195          | bitor-exp . "%" bitor-exp
  196          | bitor-exp . "^" bitor-exp
  196          | bitor-exp "^" bitor-exp .  ["end of command", "=", "case", "catch", ":", "default", "else", "finally", "if", "in", "{", ">]", "onleave", "}", "]", ")", "~", ",", ";", "&", "|", "identifier", "=>", "?", "!", "bitor", "^", "=~=", "==", "===", ">=", ">", "<=", "<", "!=", "!==", "~=", "&&", "||"]
  197          | bitor-exp . "<<" bitor-exp
  198          | bitor-exp . "bitand" bitor-exp
  199          | bitor-exp . "bitor" bitor-exp
  200          | bitor-exp . ">>" bitor-exp

    "bitand"  shift, and go to state 195
    ">>"      shift, and go to state 198
    "<<"      shift, and go to state 199
    "-"       shift, and go to state 200
    "%"       shift, and go to state 201
    "+"       shift, and go to state 202
    "/"       shift, and go to state 203
    "*"       shift, and go to state 204

    $default  reduce using rule 196 (bitor-exp)

    Conflict between rule 196 and token "bitand" resolved as shift ("^" < "bitand").
    Conflict between rule 196 and token "bitor" resolved as reduce ("bitor" < "^").
    Conflict between rule 196 and token "^" resolved as reduce (%left "^").
    Conflict between rule 196 and token ">>" resolved as shift ("^" < ">>").
    Conflict between rule 196 and token "<<" resolved as shift ("^" < "<<").
    Conflict between rule 196 and token "-" resolved as shift ("^" < "-").
    Conflict between rule 196 and token "%" resolved as shift ("^" < "%").
    Conflict between rule 196 and token "+" resolved as shift ("^" < "+").
    Conflict between rule 196 and token "/" resolved as shift ("^" < "/").
    Conflict between rule 196 and token "*" resolved as shift ("^" < "*").


state 306

  191 bitor-exp: bitor-exp . "+" bitor-exp
  192          | bitor-exp . "-" bitor-exp
  193          | bitor-exp . "*" bitor-exp
  194          | bitor-exp . "/" bitor-exp
  195          | bitor-exp . "%" bitor-exp
  196          | bitor-exp . "^" bitor-exp
  197          | bitor-exp . "<<" bitor-exp
  198          | bitor-exp . "bitand" bitor-exp
  199          | bitor-exp . "bitor" bitor-exp
  200          | bitor-exp . ">>" bitor-exp
  200          | bitor-exp ">>" bitor-exp .  ["end of command", "=", "case", "catch", ":", "default", "else", "finally", "if", "in", "{", ">]", "onleave", "}", "]", ")", "~", ",", ";", "&", "|", "identifier", "=>", "?", "!", "bitand", "bitor", "^", ">>", "<<", "=~=", "==", "===", ">=", ">", "<=", "<", "!=", "!==", "~=", "&&", "||"]

    "-"  shift, and go to state 200
    "%"  shift, and go to state 201
    "+"  shift, and go to state 202
    "/"  shift, and go to state 203
    "*"  shift, and go to state 204

    $default  reduce using rule 200 (bitor-exp)

    Conflict between rule 200 and token "bitand" resolved as reduce ("bitand" < ">>").
    Conflict between rule 200 and token "bitor" resolved as reduce ("bitor" < ">>").
    Conflict between rule 200 and token "^" resolved as reduce ("^" < ">>").
    Conflict between rule 200 and token ">>" resolved as reduce (%left ">>").
    Conflict between rule 200 and token "<<" resolved as reduce (%left "<<").
    Conflict between rule 200 and token "-" resolved as shift (">>" < "-").
    Conflict between rule 200 and token "%" resolved as shift (">>" < "%").
    Conflict between rule 200 and token "+" resolved as shift (">>" < "+").
    Conflict between rule 200 and token "/" resolved as shift (">>" < "/").
    Conflict between rule 200 and token "*" resolved as shift (">>" < "*").


state 307

  191 bitor-exp: bitor-exp . "+" bitor-exp
  192          | bitor-exp . "-" bitor-exp
  193          | bitor-exp . "*" bitor-exp
  194          | bitor-exp . "/" bitor-exp
  195          | bitor-exp . "%" bitor-exp
  196          | bitor-exp . "^" bitor-exp
  197          | bitor-exp . "<<" bitor-exp
  197          | bitor-exp "<<" bitor-exp .  ["end of command", "=", "case", "catch", ":", "default", "else", "finally", "if", "in", "{", ">]", "onleave", "}", "]", ")", "~", ",", ";", "&", "|", "identifier", "=>", "?", "!", "bitand", "bitor", "^", ">>", "<<", "=~=", "==", "===", ">=", ">", "<=", "<", "!=", "!==", "~=", "&&", "||"]
  198          | bitor-exp . "bitand" bitor-exp
  199          | bitor-exp . "bitor" bitor-exp
  200          | bitor-exp . ">>" bitor-exp

    "-"  shift, and go to state 200
    "%"  shift, and go to state 201
    "+"  shift, and go to state 202
    "/"  shift, and go to state 203
    "*"  shift, and go to state 204

    $default  reduce using rule 197 (bitor-exp)

    Conflict between rule 197 and token "bitand" resolved as reduce ("bitand" < "<<").
    Conflict between rule 197 and token "bitor" resolved as reduce ("bitor" < "<<").
    Conflict between rule 197 and token "^" resolved as reduce ("^" < "<<").
    Conflict between rule 197 and token ">>" resolved as reduce (%left ">>").
    Conflict between rule 197 and token "<<" resolved as reduce (%left "<<").
    Conflict between rule 197 and token "-" resolved as shift ("<<" < "-").
    Conflict between rule 197 and token "%" resolved as shift ("<<" < "%").
    Conflict between rule 197 and token "+" resolved as shift ("<<" < "+").
    Conflict between rule 197 and token "/" resolved as shift ("<<" < "/").
    Conflict between rule 197 and token "*" resolved as shift ("<<" < "*").


state 308

  191 bitor-exp: bitor-exp . "+" bitor-exp
  192          | bitor-exp . "-" bitor-exp
  192          | bitor-exp "-" bitor-exp .  ["end of command", "=", "case", "catch", ":", "default", "else", "finally", "if", "in", "{", ">]", "onleave", "}", "]", ")", "~", ",", ";", "&", "|", "identifier", "=>", "?", "!", "bitand", "bitor", "^", ">>", "<<", "-", "+", "=~=", "==", "===", ">=", ">", "<=", "<", "!=", "!==", "~=", "&&", "||"]
  193          | bitor-exp . "*" bitor-exp
  194          | bitor-exp . "/" bitor-exp
  195          | bitor-exp . "%" bitor-exp
  196          | bitor-exp . "^" bitor-exp
  197          | bitor-exp . "<<" bitor-exp
  198          | bitor-exp . "bitand" bitor-exp
  199          | bitor-exp . "bitor" bitor-exp
  200          | bitor-exp . ">>" bitor-exp

    "%"  shift, and go to state 201
    "/"  shift, and go to state 203
    "*"  shift, and go to state 204

    $default  reduce using rule 192 (bitor-exp)

    Conflict between rule 192 and token "bitand" resolved as reduce ("bitand" < "-").
    Conflict between rule 192 and token "bitor" resolved as reduce ("bitor" < "-").
    Conflict between rule 192 and token "^" resolved as reduce ("^" < "-").
    Conflict between rule 192 and token ">>" resolved as reduce (">>" < "-").
    Conflict between rule 192 and token "<<" resolved as reduce ("<<" < "-").
    Conflict between rule 192 and token "-" resolved as reduce (%left "-").
    Conflict between rule 192 and token "%" resolved as shift ("-" < "%").
    Conflict between rule 192 and token "+" resolved as reduce (%left "+").
    Conflict between rule 192 and token "/" resolved as shift ("-" < "/").
    Conflict between rule 192 and token "*" resolved as shift ("-" < "*").


state 309

  191 bitor-exp: bitor-exp . "+" bitor-exp
  192          | bitor-exp . "-" bitor-exp
  193          | bitor-exp . "*" bitor-exp
  194          | bitor-exp . "/" bitor-exp
  195          | bitor-exp . "%" bitor-exp
  195          | bitor-exp "%" bitor-exp .  ["end of command", "=", "case", "catch", ":", "default", "else", "finally", "if", "in", "{", ">]", "onleave", "}", "]", ")", "~", ",", ";", "&", "|", "identifier", "=>", "?", "!", "bitand", "bitor", "^", ">>", "<<", "-", "%", "+", "/", "*", "=~=", "==", "===", ">=", ">", "<=", "<", "!=", "!==", "~=", "&&", "||"]
  196          | bitor-exp . "^" bitor-exp
  197          | bitor-exp . "<<" bitor-exp
  198          | bitor-exp . "bitand" bitor-exp
  199          | bitor-exp . "bitor" bitor-exp
  200          | bitor-exp . ">>" bitor-exp

    $default  reduce using rule 195 (bitor-exp)

    Conflict between rule 195 and token "bitand" resolved as reduce ("bitand" < "%").
    Conflict between rule 195 and token "bitor" resolved as reduce ("bitor" < "%").
    Conflict between rule 195 and token "^" resolved as reduce ("^" < "%").
    Conflict between rule 195 and token ">>" resolved as reduce (">>" < "%").
    Conflict between rule 195 and token "<<" resolved as reduce ("<<" < "%").
    Conflict between rule 195 and token "-" resolved as reduce ("-" < "%").
    Conflict between rule 195 and token "%" resolved as reduce (%left "%").
    Conflict between rule 195 and token "+" resolved as reduce ("+" < "%").
    Conflict between rule 195 and token "/" resolved as reduce (%left "/").
    Conflict between rule 195 and token "*" resolved as reduce (%left "*").


state 310

  191 bitor-exp: bitor-exp . "+" bitor-exp
  191          | bitor-exp "+" bitor-exp .  ["end of command", "=", "case", "catch", ":", "default", "else", "finally", "if", "in", "{", ">]", "onleave", "}", "]", ")", "~", ",", ";", "&", "|", "identifier", "=>", "?", "!", "bitand", "bitor", "^", ">>", "<<", "-", "+", "=~=", "==", "===", ">=", ">", "<=", "<", "!=", "!==", "~=", "&&", "||"]
  192          | bitor-exp . "-" bitor-exp
  193          | bitor-exp . "*" bitor-exp
  194          | bitor-exp . "/" bitor-exp
  195          | bitor-exp . "%" bitor-exp
  196          | bitor-exp . "^" bitor-exp
  197          | bitor-exp . "<<" bitor-exp
  198          | bitor-exp . "bitand" bitor-exp
  199          | bitor-exp . "bitor" bitor-exp
  200          | bitor-exp . ">>" bitor-exp

    "%"  shift, and go to state 201
    "/"  shift, and go to state 203
    "*"  shift, and go to state 204

    $default  reduce using rule 191 (bitor-exp)

    Conflict between rule 191 and token "bitand" resolved as reduce ("bitand" < "+").
    Conflict between rule 191 and token "bitor" resolved as reduce ("bitor" < "+").
    Conflict between rule 191 and token "^" resolved as reduce ("^" < "+").
    Conflict between rule 191 and token ">>" resolved as reduce (">>" < "+").
    Conflict between rule 191 and token "<<" resolved as reduce ("<<" < "+").
    Conflict between rule 191 and token "-" resolved as reduce (%left "-").
    Conflict between rule 191 and token "%" resolved as shift ("+" < "%").
    Conflict between rule 191 and token "+" resolved as reduce (%left "+").
    Conflict between rule 191 and token "/" resolved as shift ("+" < "/").
    Conflict between rule 191 and token "*" resolved as shift ("+" < "*").


state 311

  191 bitor-exp: bitor-exp . "+" bitor-exp
  192          | bitor-exp . "-" bitor-exp
  193          | bitor-exp . "*" bitor-exp
  194          | bitor-exp . "/" bitor-exp
  194          | bitor-exp "/" bitor-exp .  ["end of command", "=", "case", "catch", ":", "default", "else", "finally", "if", "in", "{", ">]", "onleave", "}", "]", ")", "~", ",", ";", "&", "|", "identifier", "=>", "?", "!", "bitand", "bitor", "^", ">>", "<<", "-", "%", "+", "/", "*", "=~=", "==", "===", ">=", ">", "<=", "<", "!=", "!==", "~=", "&&", "||"]
  195          | bitor-exp . "%" bitor-exp
  196          | bitor-exp . "^" bitor-exp
  197          | bitor-exp . "<<" bitor-exp
  198          | bitor-exp . "bitand" bitor-exp
  199          | bitor-exp . "bitor" bitor-exp
  200          | bitor-exp . ">>" bitor-exp

    $default  reduce using rule 194 (bitor-exp)

    Conflict between rule 194 and token "bitand" resolved as reduce ("bitand" < "/").
    Conflict between rule 194 and token "bitor" resolved as reduce ("bitor" < "/").
    Conflict between rule 194 and token "^" resolved as reduce ("^" < "/").
    Conflict between rule 194 and token ">>" resolved as reduce (">>" < "/").
    Conflict between rule 194 and token "<<" resolved as reduce ("<<" < "/").
    Conflict between rule 194 and token "-" resolved as reduce ("-" < "/").
    Conflict between rule 194 and token "%" resolved as reduce (%left "%").
    Conflict between rule 194 and token "+" resolved as reduce ("+" < "/").
    Conflict between rule 194 and token "/" resolved as reduce (%left "/").
    Conflict between rule 194 and token "*" resolved as reduce (%left "*").


state 312

  191 bitor-exp: bitor-exp . "+" bitor-exp
  192          | bitor-exp . "-" bitor-exp
  193          | bitor-exp . "*" bitor-exp
  193          | bitor-exp "*" bitor-exp .  ["end of command", "=", "case", "catch", ":", "default", "else", "finally", "if", "in", "{", ">]", "onleave", "}", "]", ")", "~", ",", ";", "&", "|", "identifier", "=>", "?", "!", "bitand", "bitor", "^", ">>", "<<", "-", "%", "+", "/", "*", "=~=", "==", "===", ">=", ">", "<=", "<", "!=", "!==", "~=", "&&", "||"]
  194          | bitor-exp . "/" bitor-exp
  195          | bitor-exp . "%" bitor-exp
  196          | bitor-exp . "^" bitor-exp
  197          | bitor-exp . "<<" bitor-exp
  198          | bitor-exp . "bitand" bitor-exp
  199          | bitor-exp . "bitor" bitor-exp
  200          | bitor-exp . ">>" bitor-exp

    $default  reduce using rule 193 (bitor-exp)

    Conflict between rule 193 and token "bitand" resolved as reduce ("bitand" < "*").
    Conflict between rule 193 and token "bitor" resolved as reduce ("bitor" < "*").
    Conflict between rule 193 and token "^" resolved as reduce ("^" < "*").
    Conflict between rule 193 and token ">>" resolved as reduce (">>" < "*").
    Conflict between rule 193 and token "<<" resolved as reduce ("<<" < "*").
    Conflict between rule 193 and token "-" resolved as reduce ("-" < "*").
    Conflict between rule 193 and token "%" resolved as reduce (%left "%").
    Conflict between rule 193 and token "+" resolved as reduce ("+" < "*").
    Conflict between rule 193 and token "/" resolved as reduce (%left "/").
    Conflict between rule 193 and token "*" resolved as reduce (%left "*").


state 313

  207 rel-op: "=~=" .

    $default  reduce using rule 207 (rel-op)


state 314

  205 rel-op: "==" .

    $default  reduce using rule 205 (rel-op)


state 315

  206 rel-op: "===" .

    $default  reduce using rule 206 (rel-op)


state 316

  209 rel-op: ">=" .

    $default  reduce using rule 209 (rel-op)


state 317

  208 rel-op: ">" .

    $default  reduce using rule 208 (rel-op)


state 318

  204 rel-op: "<=" .

    $default  reduce using rule 204 (rel-op)


state 319

  203 rel-op: "<" .

    $default  reduce using rule 203 (rel-op)


state 320

  201 rel-op: "!=" .

    $default  reduce using rule 201 (rel-op)


state 321

  202 rel-op: "!==" .

    $default  reduce using rule 202 (rel-op)


state 322

  210 rel-op: "~=" .

    $default  reduce using rule 210 (rel-op)


state 323

   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   52 routine: . "closure"
   53        | . "function"
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
  118            | . block
  119            | . "do" "(" exp ")" block
  120 detach: . "detach"
  121       | . "disown"
  122 primary-exp: . "assert" "(" exp ")"
  123            | . "assert" "{" claims "}"
  124            | . detach "(" exp ")"
  125            | . detach block
  126            | . "isdef" "(" k1_id ")"
  127            | . "watch" "(" exp ")"
  128 lvalue: . id
  129       | . primary-exp "." id
  130       | . primary-exp "." "*"
  131 primary-exp: . "&" id
  132            | . primary-exp "." "&" id
  133 id: . "identifier"
  134 bitor-exp: . "var" bitor-exp
  135          | . "const" "var" bitor-exp
  136 primary-exp: . lvalue
  137            | . lvalue args
  138 new: . "new" "identifier" args.opt
  139 bitor-exp: . new
  140 id: . "new"
  141 primary-exp: . routine formals block
  142 float-exp: . "float"
  143 duration: . "duration"
  144         | . duration "duration"
  150 dictionary: . "[" assocs "]"
  154 tuple: . "(" tuple.exps ")"
  159 literal-exp: . float-exp
  160            | . "angle"
  161            | . duration
  162            | . string
  163            | . "[" exps "]"
  164            | . "[<" tuple.exps ">]"
  165            | . "<" bitor-exps ">"
  166            | . dictionary
  167            | . tuple
  168 string: . "string"
  169       | . string "string"
  170 literal-exp: . "__HERE__"
  176 lvalue: . primary-exp "[" exps "]"
  177 literal-exp: . "this"
  178            | . "call"
  179 primary-exp: . literal-exp
  180            | . "(" exp ")"
  181            | . "(" error ")"
  182            | . primary-exp "**" primary-exp
  183 unary-exp: . primary-exp
  184          | . "--" lvalue
  185          | . "++" lvalue
  186          | . "+" unary-exp
  187          | . "-" unary-exp
  188          | . "!" unary-exp
  189          | . "compl" unary-exp
  190 bitor-exp: . unary-exp
  191          | . bitor-exp "+" bitor-exp
  192          | . bitor-exp "-" bitor-exp
  193          | . bitor-exp "*" bitor-exp
  194          | . bitor-exp "/" bitor-exp
  195          | . bitor-exp "%" bitor-exp
  196          | . bitor-exp "^" bitor-exp
  197          | . bitor-exp "<<" bitor-exp
  198          | . bitor-exp "bitand" bitor-exp
  199          | . bitor-exp "bitor" bitor-exp
  200          | . bitor-exp ">>" bitor-exp
  213 rel-ops: rel-ops rel-op . bitor-exp
  223 primary-exp: . "%exp:" unsigned
  224 lvalue: . "%lvalue:" unsigned
  225       | . "%id:" unsigned
  226       | . primary-exp "." "%id:" unsigned
  227 primary-exp: . lvalue "(" "%exps:" unsigned ")"

    "__HERE__"    shift, and go to state 7
    "closure"     shift, and go to state 9
    "const"       shift, and go to state 10
    "function"    shift, and go to state 13
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "[<"          shift, and go to state 19
    "var"         shift, and go to state 26
    "watch"       shift, and go to state 28
    "&"           shift, and go to state 30
    "identifier"  shift, and go to state 36
    "--"          shift, and go to state 42
    "++"          shift, and go to state 43
    "do"          shift, and go to state 44
    "assert"      shift, and go to state 45
    "detach"      shift, and go to state 46
    "disown"      shift, and go to state 47
    "new"         shift, and go to state 48
    "angle"       shift, and go to state 49
    "duration"    shift, and go to state 50
    "float"       shift, and go to state 51
    "string"      shift, and go to state 52
    "call"        shift, and go to state 53
    "this"        shift, and go to state 54
    "!"           shift, and go to state 55
    "compl"       shift, and go to state 56
    "-"           shift, and go to state 57
    "+"           shift, and go to state 58
    "<"           shift, and go to state 59
    "%exp:"       shift, and go to state 61
    "%lvalue:"    shift, and go to state 62
    "%id:"        shift, and go to state 63

    block        go to state 68
    routine      go to state 101
    primary-exp  go to state 102
    detach       go to state 72
    lvalue       go to state 123
    id           go to state 103
    bitor-exp    go to state 396
    new          go to state 76
    float-exp    go to state 77
    duration     go to state 78
    dictionary   go to state 79
    tuple        go to state 80
    literal-exp  go to state 81
    string       go to state 82
    unary-exp    go to state 83


state 324

   14 stmts: stmts "," cstmt.opt .

    $default  reduce using rule 14 (stmts)


state 325

   13 stmts: stmts ";" cstmt.opt .

    $default  reduce using rule 13 (stmts)


state 326

   23 stmt: . primary-exp ":" stmt
   24     | . exp
   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   37 exp: . "class" lvalue protos block
   38    | . "package" lvalue protos block
   43 stmt: . "enum" id "{" id.0 "}"
   47     | . "external" "identifier" "identifier"
   48     | . "external" "var" "identifier" "." "identifier" from "identifier"
   49     | . "external" event_or_function "(" unsigned ")" "identifier" "." "identifier" from "identifier"
   50     | . "import" lvalue
   51     | . exp "!" args.opt tilda.opt
   52 routine: . "closure"
   53        | . "function"
   54 stmt: . routine k1_id formals block
   55     | . id id formals block
   62 exp: . exp "=" exp
   63    | . exp "=" exp modifiers
   64    | . lvalue "+=" exp
   65    | . lvalue "-=" exp
   66    | . lvalue "*=" exp
   67    | . lvalue "/=" exp
   68    | . lvalue "^=" exp
   69    | . lvalue "%=" exp
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
   73 stmt: . "at" identifiers "(" exp tilda.opt ")" stmt onleave.opt
   74     | . "at" identifiers "(" event_match ")" stmt onleave.opt
   75     | . "every" "(" exp ")" stmt
   76     | . "if" "(" stmts ")" stmt else.opt
   77     | . "freezeif" "(" exp ")" stmt
   77     | "freezeif" "(" exp ")" . stmt
   78     | . "stopif" "(" exp ")" stmt
   79     | . "switch" "(" exp ")" "{" cases default.opt "}"
   80     | . "timeout" "(" exp ")" stmt catch.opt else.opt finally.opt
   81     | . "return" exp.opt
   82     | . "break"
   83     | . "continue"
   84     | . "waituntil" "(" exp tilda.opt ")"
   85     | . "waituntil" "(" event_match ")"
   86     | . "whenever" "(" exp tilda.opt ")" stmt else.opt
   87     | . "whenever" "(" event_match ")" stmt else.opt
  108     | . "try" block catches.1 else.opt finally.opt
  109     | . "try" block "finally" block
  110     | . "throw" exp.opt
  111     | . "loop" stmt
  112     | . "for" "(" exp ")" stmt
  113     | . "for" "(" stmt.opt ";" exp ";" stmt.opt ")" stmt
  114     | . "for" "(" "var" "identifier" in_or_colon exp ")" stmt
  115     | . "while" "(" exp ")" stmt
  118 primary-exp: . block
  119            | . "do" "(" exp ")" block
  120 detach: . "detach"
  121       | . "disown"
  122 primary-exp: . "assert" "(" exp ")"
  123            | . "assert" "{" claims "}"
  124            | . detach "(" exp ")"
  125            | . detach block
  126            | . "isdef" "(" k1_id ")"
  127            | . "watch" "(" exp ")"
  128 lvalue: . id
  129       | . primary-exp "." id
  130       | . primary-exp "." "*"
  131 primary-exp: . "&" id
  132            | . primary-exp "." "&" id
  133 id: . "identifier"
  134 bitor-exp: . "var" bitor-exp
  135          | . "const" "var" bitor-exp
  136 primary-exp: . lvalue
  137            | . lvalue args
  138 new: . "new" "identifier" args.opt
  139 bitor-exp: . new
  140 id: . "new"
  141 primary-exp: . routine formals block
  142 float-exp: . "float"
  143 duration: . "duration"
  144         | . duration "duration"
  150 dictionary: . "[" assocs "]"
  154 tuple: . "(" tuple.exps ")"
  159 literal-exp: . float-exp
  160            | . "angle"
  161            | . duration
  162            | . string
  163            | . "[" exps "]"
  164            | . "[<" tuple.exps ">]"
  165            | . "<" bitor-exps ">"
  166            | . dictionary
  167            | . tuple
  168 string: . "string"
  169       | . string "string"
  170 literal-exp: . "__HERE__"
  176 lvalue: . primary-exp "[" exps "]"
  177 literal-exp: . "this"
  178            | . "call"
  179 primary-exp: . literal-exp
  180            | . "(" exp ")"
  181            | . "(" error ")"
  182            | . primary-exp "**" primary-exp
  183 unary-exp: . primary-exp
  184          | . "--" lvalue
  185          | . "++" lvalue
  186          | . "+" unary-exp
  187          | . "-" unary-exp
  188          | . "!" unary-exp
  189          | . "compl" unary-exp
  190 bitor-exp: . unary-exp
  191          | . bitor-exp "+" bitor-exp
  192          | . bitor-exp "-" bitor-exp
  193          | . bitor-exp "*" bitor-exp
  194          | . bitor-exp "/" bitor-exp
  195          | . bitor-exp "%" bitor-exp
  196          | . bitor-exp "^" bitor-exp
  197          | . bitor-exp "<<" bitor-exp
  198          | . bitor-exp "bitand" bitor-exp
  199          | . bitor-exp "bitor" bitor-exp
  200          | . bitor-exp ">>" bitor-exp
  211 rel-exp: . bitor-exp rel-ops
  214 exp: . rel-exp
  215    | . exp "&&" exp
  216    | . exp "||" exp
  217    | . exp "in" exp
  218    | . exp "!" "in" exp
  222    | . "%unscope:" unsigned
  223 primary-exp: . "%exp:" unsigned
  224 lvalue: . "%lvalue:" unsigned
  225       | . "%id:" unsigned
  226       | . primary-exp "." "%id:" unsigned
  227 primary-exp: . lvalue "(" "%exps:" unsigned ")"

    "__HERE__"    shift, and go to state 7
    "break"       shift, and go to state 8
    "closure"     shift, and go to state 9
    "const"       shift, and go to state 10
    "continue"    shift, and go to state 11
    "freezeif"    shift, and go to state 12
    "function"    shift, and go to state 13
    "if"          shift, and go to state 14
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "[<"          shift, and go to state 19
    "return"      shift, and go to state 20
    "stopif"      shift, and go to state 21
    "switch"      shift, and go to state 22
    "throw"       shift, and go to state 23
    "timeout"     shift, and go to state 24
    "try"         shift, and go to state 25
    "var"         shift, and go to state 26
    "waituntil"   shift, and go to state 27
    "watch"       shift, and go to state 28
    "whenever"    shift, and go to state 29
    "&"           shift, and go to state 30
    "every"       shift, and go to state 31
    "for"         shift, and go to state 32
    "loop"        shift, and go to state 33
    "while"       shift, and go to state 34
    "at"          shift, and go to state 35
    "identifier"  shift, and go to state 36
    "class"       shift, and go to state 37
    "package"     shift, and go to state 38
    "enum"        shift, and go to state 39
    "external"    shift, and go to state 40
    "import"      shift, and go to state 41
    "--"          shift, and go to state 42
    "++"          shift, and go to state 43
    "do"          shift, and go to state 44
    "assert"      shift, and go to state 45
    "detach"      shift, and go to state 46
    "disown"      shift, and go to state 47
    "new"         shift, and go to state 48
    "angle"       shift, and go to state 49
    "duration"    shift, and go to state 50
    "float"       shift, and go to state 51
    "string"      shift, and go to state 52
    "call"        shift, and go to state 53
    "this"        shift, and go to state 54
    "!"           shift, and go to state 55
    "compl"       shift, and go to state 56
    "-"           shift, and go to state 57
    "+"           shift, and go to state 58
    "<"           shift, and go to state 59
    "%unscope:"   shift, and go to state 60
    "%exp:"       shift, and go to state 61
    "%lvalue:"    shift, and go to state 62
    "%id:"        shift, and go to state 63

    stmt         go to state 397
    block        go to state 68
    exp          go to state 69
    routine      go to state 70
    primary-exp  go to state 71
    detach       go to state 72
    lvalue       go to state 73
    id           go to state 74
    bitor-exp    go to state 75
    new          go to state 76
    float-exp    go to state 77
    duration     go to state 78
    dictionary   go to state 79
    tuple        go to state 80
    literal-exp  go to state 81
    string       go to state 82
    unary-exp    go to state 83
    rel-exp      go to state 84


state 327

   23 stmt: . primary-exp ":" stmt
   24     | . exp
   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   37 exp: . "class" lvalue protos block
   38    | . "package" lvalue protos block
   43 stmt: . "enum" id "{" id.0 "}"
   47     | . "external" "identifier" "identifier"
   48     | . "external" "var" "identifier" "." "identifier" from "identifier"
   49     | . "external" event_or_function "(" unsigned ")" "identifier" "." "identifier" from "identifier"
   50     | . "import" lvalue
   51     | . exp "!" args.opt tilda.opt
   52 routine: . "closure"
   53        | . "function"
   54 stmt: . routine k1_id formals block
   55     | . id id formals block
   62 exp: . exp "=" exp
   63    | . exp "=" exp modifiers
   64    | . lvalue "+=" exp
   65    | . lvalue "-=" exp
   66    | . lvalue "*=" exp
   67    | . lvalue "/=" exp
   68    | . lvalue "^=" exp
   69    | . lvalue "%=" exp
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
   73 stmt: . "at" identifiers "(" exp tilda.opt ")" stmt onleave.opt
   74     | . "at" identifiers "(" event_match ")" stmt onleave.opt
   75     | . "every" "(" exp ")" stmt
   76     | . "if" "(" stmts ")" stmt else.opt
   76     | "if" "(" stmts ")" . stmt else.opt
   77     | . "freezeif" "(" exp ")" stmt
   78     | . "stopif" "(" exp ")" stmt
   79     | . "switch" "(" exp ")" "{" cases default.opt "}"
   80     | . "timeout" "(" exp ")" stmt catch.opt else.opt finally.opt
   81     | . "return" exp.opt
   82     | . "break"
   83     | . "continue"
   84     | . "waituntil" "(" exp tilda.opt ")"
   85     | . "waituntil" "(" event_match ")"
   86     | . "whenever" "(" exp tilda.opt ")" stmt else.opt
   87     | . "whenever" "(" event_match ")" stmt else.opt
  108     | . "try" block catches.1 else.opt finally.opt
  109     | . "try" block "finally" block
  110     | . "throw" exp.opt
  111     | . "loop" stmt
  112     | . "for" "(" exp ")" stmt
  113     | . "for" "(" stmt.opt ";" exp ";" stmt.opt ")" stmt
  114     | . "for" "(" "var" "identifier" in_or_colon exp ")" stmt
  115     | . "while" "(" exp ")" stmt
  118 primary-exp: . block
  119            | . "do" "(" exp ")" block
  120 detach: . "detach"
  121       | . "disown"
  122 primary-exp: . "assert" "(" exp ")"
  123            | . "assert" "{" claims "}"
  124            | . detach "(" exp ")"
  125            | . detach block
  126            | . "isdef" "(" k1_id ")"
  127            | . "watch" "(" exp ")"
  128 lvalue: . id
  129       | . primary-exp "." id
  130       | . primary-exp "." "*"
  131 primary-exp: . "&" id
  132            | . primary-exp "." "&" id
  133 id: . "identifier"
  134 bitor-exp: . "var" bitor-exp
  135          | . "const" "var" bitor-exp
  136 primary-exp: . lvalue
  137            | . lvalue args
  138 new: . "new" "identifier" args.opt
  139 bitor-exp: . new
  140 id: . "new"
  141 primary-exp: . routine formals block
  142 float-exp: . "float"
  143 duration: . "duration"
  144         | . duration "duration"
  150 dictionary: . "[" assocs "]"
  154 tuple: . "(" tuple.exps ")"
  159 literal-exp: . float-exp
  160            | . "angle"
  161            | . duration
  162            | . string
  163            | . "[" exps "]"
  164            | . "[<" tuple.exps ">]"
  165            | . "<" bitor-exps ">"
  166            | . dictionary
  167            | . tuple
  168 string: . "string"
  169       | . string "string"
  170 literal-exp: . "__HERE__"
  176 lvalue: . primary-exp "[" exps "]"
  177 literal-exp: . "this"
  178            | . "call"
  179 primary-exp: . literal-exp
  180            | . "(" exp ")"
  181            | . "(" error ")"
  182            | . primary-exp "**" primary-exp
  183 unary-exp: . primary-exp
  184          | . "--" lvalue
  185          | . "++" lvalue
  186          | . "+" unary-exp
  187          | . "-" unary-exp
  188          | . "!" unary-exp
  189          | . "compl" unary-exp
  190 bitor-exp: . unary-exp
  191          | . bitor-exp "+" bitor-exp
  192          | . bitor-exp "-" bitor-exp
  193          | . bitor-exp "*" bitor-exp
  194          | . bitor-exp "/" bitor-exp
  195          | . bitor-exp "%" bitor-exp
  196          | . bitor-exp "^" bitor-exp
  197          | . bitor-exp "<<" bitor-exp
  198          | . bitor-exp "bitand" bitor-exp
  199          | . bitor-exp "bitor" bitor-exp
  200          | . bitor-exp ">>" bitor-exp
  211 rel-exp: . bitor-exp rel-ops
  214 exp: . rel-exp
  215    | . exp "&&" exp
  216    | . exp "||" exp
  217    | . exp "in" exp
  218    | . exp "!" "in" exp
  222    | . "%unscope:" unsigned
  223 primary-exp: . "%exp:" unsigned
  224 lvalue: . "%lvalue:" unsigned
  225       | . "%id:" unsigned
  226       | . primary-exp "." "%id:" unsigned
  227 primary-exp: . lvalue "(" "%exps:" unsigned ")"

    "__HERE__"    shift, and go to state 7
    "break"       shift, and go to state 8
    "closure"     shift, and go to state 9
    "const"       shift, and go to state 10
    "continue"    shift, and go to state 11
    "freezeif"    shift, and go to state 12
    "function"    shift, and go to state 13
    "if"          shift, and go to state 14
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "[<"          shift, and go to state 19
    "return"      shift, and go to state 20
    "stopif"      shift, and go to state 21
    "switch"      shift, and go to state 22
    "throw"       shift, and go to state 23
    "timeout"     shift, and go to state 24
    "try"         shift, and go to state 25
    "var"         shift, and go to state 26
    "waituntil"   shift, and go to state 27
    "watch"       shift, and go to state 28
    "whenever"    shift, and go to state 29
    "&"           shift, and go to state 30
    "every"       shift, and go to state 31
    "for"         shift, and go to state 32
    "loop"        shift, and go to state 33
    "while"       shift, and go to state 34
    "at"          shift, and go to state 35
    "identifier"  shift, and go to state 36
    "class"       shift, and go to state 37
    "package"     shift, and go to state 38
    "enum"        shift, and go to state 39
    "external"    shift, and go to state 40
    "import"      shift, and go to state 41
    "--"          shift, and go to state 42
    "++"          shift, and go to state 43
    "do"          shift, and go to state 44
    "assert"      shift, and go to state 45
    "detach"      shift, and go to state 46
    "disown"      shift, and go to state 47
    "new"         shift, and go to state 48
    "angle"       shift, and go to state 49
    "duration"    shift, and go to state 50
    "float"       shift, and go to state 51
    "string"      shift, and go to state 52
    "call"        shift, and go to state 53
    "this"        shift, and go to state 54
    "!"           shift, and go to state 55
    "compl"       shift, and go to state 56
    "-"           shift, and go to state 57
    "+"           shift, and go to state 58
    "<"           shift, and go to state 59
    "%unscope:"   shift, and go to state 60
    "%exp:"       shift, and go to state 61
    "%lvalue:"    shift, and go to state 62
    "%id:"        shift, and go to state 63

    stmt         go to state 398
    block        go to state 68
    exp          go to state 69
    routine      go to state 70
    primary-exp  go to state 71
    detach       go to state 72
    lvalue       go to state 73
    id           go to state 74
    bitor-exp    go to state 75
    new          go to state 76
    float-exp    go to state 77
    duration     go to state 78
    dictionary   go to state 79
    tuple        go to state 80
    literal-exp  go to state 81
    string       go to state 82
    unary-exp    go to state 83
    rel-exp      go to state 84


state 328

  126 primary-exp: "isdef" "(" k1_id ")" .

    $default  reduce using rule 126 (primary-exp)


state 329

   27 block: "{" id "~" id . "}"

    "}"  shift, and go to state 399


state 330

   62 exp: exp . "=" exp
   63    | exp . "=" exp modifiers
  145 assoc: exp "=>" exp .  ["]", ","]
  215 exp: exp . "&&" exp
  216    | exp . "||" exp
  217    | exp . "in" exp
  218    | exp . "!" "in" exp

    "="   shift, and go to state 167
    "in"  shift, and go to state 168
    "!"   shift, and go to state 218
    "&&"  shift, and go to state 170
    "||"  shift, and go to state 171

    $default  reduce using rule 145 (assoc)


state 331

   62 exp: exp . "=" exp
   63    | exp . "=" exp modifiers
  145 assoc: exp . "=>" exp
  215 exp: exp . "&&" exp
  216    | exp . "||" exp
  217    | exp . "in" exp
  218    | exp . "!" "in" exp

    "="   shift, and go to state 167
    "in"  shift, and go to state 168
    "=>"  shift, and go to state 217
    "!"   shift, and go to state 218
    "&&"  shift, and go to state 170
    "||"  shift, and go to state 171


state 332

  147 assocs.1: assocs.1 "," assoc .

    $default  reduce using rule 147 (assocs.1)


state 333

   62 exp: exp . "=" exp
   63    | exp . "=" exp modifiers
  215    | exp . "&&" exp
  216    | exp . "||" exp
  217    | exp . "in" exp
  218    | exp . "!" "in" exp
  235 exps.1: exps.1 "," exp .  ["]", ")", ","]

    "="   shift, and go to state 167
    "in"  shift, and go to state 168
    "!"   shift, and go to state 218
    "&&"  shift, and go to state 170
    "||"  shift, and go to state 171

    $default  reduce using rule 235 (exps.1)


state 334

   62 exp: exp . "=" exp
   63    | exp . "=" exp modifiers
  215    | exp . "&&" exp
  216    | exp . "||" exp
  217    | exp . "in" exp
  218    | exp . "!" "in" exp
  235 exps.1: exps.1 "," exp .  [","]
  236 exps.2: exps.1 "," exp .  [">]", ")"]

    "="   shift, and go to state 167
    "in"  shift, and go to state 168
    "!"   shift, and go to state 218
    "&&"  shift, and go to state 170
    "||"  shift, and go to state 171

    ","       reduce using rule 235 (exps.1)
    $default  reduce using rule 236 (exps.2)


state 335

   23 stmt: . primary-exp ":" stmt
   24     | . exp
   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   37 exp: . "class" lvalue protos block
   38    | . "package" lvalue protos block
   43 stmt: . "enum" id "{" id.0 "}"
   47     | . "external" "identifier" "identifier"
   48     | . "external" "var" "identifier" "." "identifier" from "identifier"
   49     | . "external" event_or_function "(" unsigned ")" "identifier" "." "identifier" from "identifier"
   50     | . "import" lvalue
   51     | . exp "!" args.opt tilda.opt
   52 routine: . "closure"
   53        | . "function"
   54 stmt: . routine k1_id formals block
   55     | . id id formals block
   62 exp: . exp "=" exp
   63    | . exp "=" exp modifiers
   64    | . lvalue "+=" exp
   65    | . lvalue "-=" exp
   66    | . lvalue "*=" exp
   67    | . lvalue "/=" exp
   68    | . lvalue "^=" exp
   69    | . lvalue "%=" exp
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
   73 stmt: . "at" identifiers "(" exp tilda.opt ")" stmt onleave.opt
   74     | . "at" identifiers "(" event_match ")" stmt onleave.opt
   75     | . "every" "(" exp ")" stmt
   76     | . "if" "(" stmts ")" stmt else.opt
   77     | . "freezeif" "(" exp ")" stmt
   78     | . "stopif" "(" exp ")" stmt
   78     | "stopif" "(" exp ")" . stmt
   79     | . "switch" "(" exp ")" "{" cases default.opt "}"
   80     | . "timeout" "(" exp ")" stmt catch.opt else.opt finally.opt
   81     | . "return" exp.opt
   82     | . "break"
   83     | . "continue"
   84     | . "waituntil" "(" exp tilda.opt ")"
   85     | . "waituntil" "(" event_match ")"
   86     | . "whenever" "(" exp tilda.opt ")" stmt else.opt
   87     | . "whenever" "(" event_match ")" stmt else.opt
  108     | . "try" block catches.1 else.opt finally.opt
  109     | . "try" block "finally" block
  110     | . "throw" exp.opt
  111     | . "loop" stmt
  112     | . "for" "(" exp ")" stmt
  113     | . "for" "(" stmt.opt ";" exp ";" stmt.opt ")" stmt
  114     | . "for" "(" "var" "identifier" in_or_colon exp ")" stmt
  115     | . "while" "(" exp ")" stmt
  118 primary-exp: . block
  119            | . "do" "(" exp ")" block
  120 detach: . "detach"
  121       | . "disown"
  122 primary-exp: . "assert" "(" exp ")"
  123            | . "assert" "{" claims "}"
  124            | . detach "(" exp ")"
  125            | . detach block
  126            | . "isdef" "(" k1_id ")"
  127            | . "watch" "(" exp ")"
  128 lvalue: . id
  129       | . primary-exp "." id
  130       | . primary-exp "." "*"
  131 primary-exp: . "&" id
  132            | . primary-exp "." "&" id
  133 id: . "identifier"
  134 bitor-exp: . "var" bitor-exp
  135          | . "const" "var" bitor-exp
  136 primary-exp: . lvalue
  137            | . lvalue args
  138 new: . "new" "identifier" args.opt
  139 bitor-exp: . new
  140 id: . "new"
  141 primary-exp: . routine formals block
  142 float-exp: . "float"
  143 duration: . "duration"
  144         | . duration "duration"
  150 dictionary: . "[" assocs "]"
  154 tuple: . "(" tuple.exps ")"
  159 literal-exp: . float-exp
  160            | . "angle"
  161            | . duration
  162            | . string
  163            | . "[" exps "]"
  164            | . "[<" tuple.exps ">]"
  165            | . "<" bitor-exps ">"
  166            | . dictionary
  167            | . tuple
  168 string: . "string"
  169       | . string "string"
  170 literal-exp: . "__HERE__"
  176 lvalue: . primary-exp "[" exps "]"
  177 literal-exp: . "this"
  178            | . "call"
  179 primary-exp: . literal-exp
  180            | . "(" exp ")"
  181            | . "(" error ")"
  182            | . primary-exp "**" primary-exp
  183 unary-exp: . primary-exp
  184          | . "--" lvalue
  185          | . "++" lvalue
  186          | . "+" unary-exp
  187          | . "-" unary-exp
  188          | . "!" unary-exp
  189          | . "compl" unary-exp
  190 bitor-exp: . unary-exp
  191          | . bitor-exp "+" bitor-exp
  192          | . bitor-exp "-" bitor-exp
  193          | . bitor-exp "*" bitor-exp
  194          | . bitor-exp "/" bitor-exp
  195          | . bitor-exp "%" bitor-exp
  196          | . bitor-exp "^" bitor-exp
  197          | . bitor-exp "<<" bitor-exp
  198          | . bitor-exp "bitand" bitor-exp
  199          | . bitor-exp "bitor" bitor-exp
  200          | . bitor-exp ">>" bitor-exp
  211 rel-exp: . bitor-exp rel-ops
  214 exp: . rel-exp
  215    | . exp "&&" exp
  216    | . exp "||" exp
  217    | . exp "in" exp
  218    | . exp "!" "in" exp
  222    | . "%unscope:" unsigned
  223 primary-exp: . "%exp:" unsigned
  224 lvalue: . "%lvalue:" unsigned
  225       | . "%id:" unsigned
  226       | . primary-exp "." "%id:" unsigned
  227 primary-exp: . lvalue "(" "%exps:" unsigned ")"

    "__HERE__"    shift, and go to state 7
    "break"       shift, and go to state 8
    "closure"     shift, and go to state 9
    "const"       shift, and go to state 10
    "continue"    shift, and go to state 11
    "freezeif"    shift, and go to state 12
    "function"    shift, and go to state 13
    "if"          shift, and go to state 14
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "[<"          shift, and go to state 19
    "return"      shift, and go to state 20
    "stopif"      shift, and go to state 21
    "switch"      shift, and go to state 22
    "throw"       shift, and go to state 23
    "timeout"     shift, and go to state 24
    "try"         shift, and go to state 25
    "var"         shift, and go to state 26
    "waituntil"   shift, and go to state 27
    "watch"       shift, and go to state 28
    "whenever"    shift, and go to state 29
    "&"           shift, and go to state 30
    "every"       shift, and go to state 31
    "for"         shift, and go to state 32
    "loop"        shift, and go to state 33
    "while"       shift, and go to state 34
    "at"          shift, and go to state 35
    "identifier"  shift, and go to state 36
    "class"       shift, and go to state 37
    "package"     shift, and go to state 38
    "enum"        shift, and go to state 39
    "external"    shift, and go to state 40
    "import"      shift, and go to state 41
    "--"          shift, and go to state 42
    "++"          shift, and go to state 43
    "do"          shift, and go to state 44
    "assert"      shift, and go to state 45
    "detach"      shift, and go to state 46
    "disown"      shift, and go to state 47
    "new"         shift, and go to state 48
    "angle"       shift, and go to state 49
    "duration"    shift, and go to state 50
    "float"       shift, and go to state 51
    "string"      shift, and go to state 52
    "call"        shift, and go to state 53
    "this"        shift, and go to state 54
    "!"           shift, and go to state 55
    "compl"       shift, and go to state 56
    "-"           shift, and go to state 57
    "+"           shift, and go to state 58
    "<"           shift, and go to state 59
    "%unscope:"   shift, and go to state 60
    "%exp:"       shift, and go to state 61
    "%lvalue:"    shift, and go to state 62
    "%id:"        shift, and go to state 63

    stmt         go to state 400
    block        go to state 68
    exp          go to state 69
    routine      go to state 70
    primary-exp  go to state 71
    detach       go to state 72
    lvalue       go to state 73
    id           go to state 74
    bitor-exp    go to state 75
    new          go to state 76
    float-exp    go to state 77
    duration     go to state 78
    dictionary   go to state 79
    tuple        go to state 80
    literal-exp  go to state 81
    string       go to state 82
    unary-exp    go to state 83
    rel-exp      go to state 84


state 336

   79 stmt: "switch" "(" exp ")" . "{" cases default.opt "}"

    "{"  shift, and go to state 401


state 337

   23 stmt: . primary-exp ":" stmt
   24     | . exp
   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   37 exp: . "class" lvalue protos block
   38    | . "package" lvalue protos block
   43 stmt: . "enum" id "{" id.0 "}"
   47     | . "external" "identifier" "identifier"
   48     | . "external" "var" "identifier" "." "identifier" from "identifier"
   49     | . "external" event_or_function "(" unsigned ")" "identifier" "." "identifier" from "identifier"
   50     | . "import" lvalue
   51     | . exp "!" args.opt tilda.opt
   52 routine: . "closure"
   53        | . "function"
   54 stmt: . routine k1_id formals block
   55     | . id id formals block
   62 exp: . exp "=" exp
   63    | . exp "=" exp modifiers
   64    | . lvalue "+=" exp
   65    | . lvalue "-=" exp
   66    | . lvalue "*=" exp
   67    | . lvalue "/=" exp
   68    | . lvalue "^=" exp
   69    | . lvalue "%=" exp
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
   73 stmt: . "at" identifiers "(" exp tilda.opt ")" stmt onleave.opt
   74     | . "at" identifiers "(" event_match ")" stmt onleave.opt
   75     | . "every" "(" exp ")" stmt
   76     | . "if" "(" stmts ")" stmt else.opt
   77     | . "freezeif" "(" exp ")" stmt
   78     | . "stopif" "(" exp ")" stmt
   79     | . "switch" "(" exp ")" "{" cases default.opt "}"
   80     | . "timeout" "(" exp ")" stmt catch.opt else.opt finally.opt
   80     | "timeout" "(" exp ")" . stmt catch.opt else.opt finally.opt
   81     | . "return" exp.opt
   82     | . "break"
   83     | . "continue"
   84     | . "waituntil" "(" exp tilda.opt ")"
   85     | . "waituntil" "(" event_match ")"
   86     | . "whenever" "(" exp tilda.opt ")" stmt else.opt
   87     | . "whenever" "(" event_match ")" stmt else.opt
  108     | . "try" block catches.1 else.opt finally.opt
  109     | . "try" block "finally" block
  110     | . "throw" exp.opt
  111     | . "loop" stmt
  112     | . "for" "(" exp ")" stmt
  113     | . "for" "(" stmt.opt ";" exp ";" stmt.opt ")" stmt
  114     | . "for" "(" "var" "identifier" in_or_colon exp ")" stmt
  115     | . "while" "(" exp ")" stmt
  118 primary-exp: . block
  119            | . "do" "(" exp ")" block
  120 detach: . "detach"
  121       | . "disown"
  122 primary-exp: . "assert" "(" exp ")"
  123            | . "assert" "{" claims "}"
  124            | . detach "(" exp ")"
  125            | . detach block
  126            | . "isdef" "(" k1_id ")"
  127            | . "watch" "(" exp ")"
  128 lvalue: . id
  129       | . primary-exp "." id
  130       | . primary-exp "." "*"
  131 primary-exp: . "&" id
  132            | . primary-exp "." "&" id
  133 id: . "identifier"
  134 bitor-exp: . "var" bitor-exp
  135          | . "const" "var" bitor-exp
  136 primary-exp: . lvalue
  137            | . lvalue args
  138 new: . "new" "identifier" args.opt
  139 bitor-exp: . new
  140 id: . "new"
  141 primary-exp: . routine formals block
  142 float-exp: . "float"
  143 duration: . "duration"
  144         | . duration "duration"
  150 dictionary: . "[" assocs "]"
  154 tuple: . "(" tuple.exps ")"
  159 literal-exp: . float-exp
  160            | . "angle"
  161            | . duration
  162            | . string
  163            | . "[" exps "]"
  164            | . "[<" tuple.exps ">]"
  165            | . "<" bitor-exps ">"
  166            | . dictionary
  167            | . tuple
  168 string: . "string"
  169       | . string "string"
  170 literal-exp: . "__HERE__"
  176 lvalue: . primary-exp "[" exps "]"
  177 literal-exp: . "this"
  178            | . "call"
  179 primary-exp: . literal-exp
  180            | . "(" exp ")"
  181            | . "(" error ")"
  182            | . primary-exp "**" primary-exp
  183 unary-exp: . primary-exp
  184          | . "--" lvalue
  185          | . "++" lvalue
  186          | . "+" unary-exp
  187          | . "-" unary-exp
  188          | . "!" unary-exp
  189          | . "compl" unary-exp
  190 bitor-exp: . unary-exp
  191          | . bitor-exp "+" bitor-exp
  192          | . bitor-exp "-" bitor-exp
  193          | . bitor-exp "*" bitor-exp
  194          | . bitor-exp "/" bitor-exp
  195          | . bitor-exp "%" bitor-exp
  196          | . bitor-exp "^" bitor-exp
  197          | . bitor-exp "<<" bitor-exp
  198          | . bitor-exp "bitand" bitor-exp
  199          | . bitor-exp "bitor" bitor-exp
  200          | . bitor-exp ">>" bitor-exp
  211 rel-exp: . bitor-exp rel-ops
  214 exp: . rel-exp
  215    | . exp "&&" exp
  216    | . exp "||" exp
  217    | . exp "in" exp
  218    | . exp "!" "in" exp
  222    | . "%unscope:" unsigned
  223 primary-exp: . "%exp:" unsigned
  224 lvalue: . "%lvalue:" unsigned
  225       | . "%id:" unsigned
  226       | . primary-exp "." "%id:" unsigned
  227 primary-exp: . lvalue "(" "%exps:" unsigned ")"

    "__HERE__"    shift, and go to state 7
    "break"       shift, and go to state 8
    "closure"     shift, and go to state 9
    "const"       shift, and go to state 10
    "continue"    shift, and go to state 11
    "freezeif"    shift, and go to state 12
    "function"    shift, and go to state 13
    "if"          shift, and go to state 14
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "[<"          shift, and go to state 19
    "return"      shift, and go to state 20
    "stopif"      shift, and go to state 21
    "switch"      shift, and go to state 22
    "throw"       shift, and go to state 23
    "timeout"     shift, and go to state 24
    "try"         shift, and go to state 25
    "var"         shift, and go to state 26
    "waituntil"   shift, and go to state 27
    "watch"       shift, and go to state 28
    "whenever"    shift, and go to state 29
    "&"           shift, and go to state 30
    "every"       shift, and go to state 31
    "for"         shift, and go to state 32
    "loop"        shift, and go to state 33
    "while"       shift, and go to state 34
    "at"          shift, and go to state 35
    "identifier"  shift, and go to state 36
    "class"       shift, and go to state 37
    "package"     shift, and go to state 38
    "enum"        shift, and go to state 39
    "external"    shift, and go to state 40
    "import"      shift, and go to state 41
    "--"          shift, and go to state 42
    "++"          shift, and go to state 43
    "do"          shift, and go to state 44
    "assert"      shift, and go to state 45
    "detach"      shift, and go to state 46
    "disown"      shift, and go to state 47
    "new"         shift, and go to state 48
    "angle"       shift, and go to state 49
    "duration"    shift, and go to state 50
    "float"       shift, and go to state 51
    "string"      shift, and go to state 52
    "call"        shift, and go to state 53
    "this"        shift, and go to state 54
    "!"           shift, and go to state 55
    "compl"       shift, and go to state 56
    "-"           shift, and go to state 57
    "+"           shift, and go to state 58
    "<"           shift, and go to state 59
    "%unscope:"   shift, and go to state 60
    "%exp:"       shift, and go to state 61
    "%lvalue:"    shift, and go to state 62
    "%id:"        shift, and go to state 63

    stmt         go to state 402
    block        go to state 68
    exp          go to state 69
    routine      go to state 70
    primary-exp  go to state 71
    detach       go to state 72
    lvalue       go to state 73
    id           go to state 74
    bitor-exp    go to state 75
    new          go to state 76
    float-exp    go to state 77
    duration     go to state 78
    dictionary   go to state 79
    tuple        go to state 80
    literal-exp  go to state 81
    string       go to state 82
    unary-exp    go to state 83
    rel-exp      go to state 84


state 338

   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   37 exp: . "class" lvalue protos block
   38    | . "package" lvalue protos block
   52 routine: . "closure"
   53        | . "function"
   62 exp: . exp "=" exp
   63    | . exp "=" exp modifiers
   64    | . lvalue "+=" exp
   65    | . lvalue "-=" exp
   66    | . lvalue "*=" exp
   67    | . lvalue "/=" exp
   68    | . lvalue "^=" exp
   69    | . lvalue "%=" exp
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
   99 match: . exp
  100      | . exp "if" exp
  102 match.opt: "(" . match ")"
  118 primary-exp: . block
  119            | . "do" "(" exp ")" block
  120 detach: . "detach"
  121       | . "disown"
  122 primary-exp: . "assert" "(" exp ")"
  123            | . "assert" "{" claims "}"
  124            | . detach "(" exp ")"
  125            | . detach block
  126            | . "isdef" "(" k1_id ")"
  127            | . "watch" "(" exp ")"
  128 lvalue: . id
  129       | . primary-exp "." id
  130       | . primary-exp "." "*"
  131 primary-exp: . "&" id
  132            | . primary-exp "." "&" id
  133 id: . "identifier"
  134 bitor-exp: . "var" bitor-exp
  135          | . "const" "var" bitor-exp
  136 primary-exp: . lvalue
  137            | . lvalue args
  138 new: . "new" "identifier" args.opt
  139 bitor-exp: . new
  140 id: . "new"
  141 primary-exp: . routine formals block
  142 float-exp: . "float"
  143 duration: . "duration"
  144         | . duration "duration"
  150 dictionary: . "[" assocs "]"
  154 tuple: . "(" tuple.exps ")"
  159 literal-exp: . float-exp
  160            | . "angle"
  161            | . duration
  162            | . string
  163            | . "[" exps "]"
  164            | . "[<" tuple.exps ">]"
  165            | . "<" bitor-exps ">"
  166            | . dictionary
  167            | . tuple
  168 string: . "string"
  169       | . string "string"
  170 literal-exp: . "__HERE__"
  176 lvalue: . primary-exp "[" exps "]"
  177 literal-exp: . "this"
  178            | . "call"
  179 primary-exp: . literal-exp
  180            | . "(" exp ")"
  181            | . "(" error ")"
  182            | . primary-exp "**" primary-exp
  183 unary-exp: . primary-exp
  184          | . "--" lvalue
  185          | . "++" lvalue
  186          | . "+" unary-exp
  187          | . "-" unary-exp
  188          | . "!" unary-exp
  189          | . "compl" unary-exp
  190 bitor-exp: . unary-exp
  191          | . bitor-exp "+" bitor-exp
  192          | . bitor-exp "-" bitor-exp
  193          | . bitor-exp "*" bitor-exp
  194          | . bitor-exp "/" bitor-exp
  195          | . bitor-exp "%" bitor-exp
  196          | . bitor-exp "^" bitor-exp
  197          | . bitor-exp "<<" bitor-exp
  198          | . bitor-exp "bitand" bitor-exp
  199          | . bitor-exp "bitor" bitor-exp
  200          | . bitor-exp ">>" bitor-exp
  211 rel-exp: . bitor-exp rel-ops
  214 exp: . rel-exp
  215    | . exp "&&" exp
  216    | . exp "||" exp
  217    | . exp "in" exp
  218    | . exp "!" "in" exp
  222    | . "%unscope:" unsigned
  223 primary-exp: . "%exp:" unsigned
  224 lvalue: . "%lvalue:" unsigned
  225       | . "%id:" unsigned
  226       | . primary-exp "." "%id:" unsigned
  227 primary-exp: . lvalue "(" "%exps:" unsigned ")"

    "__HERE__"    shift, and go to state 7
    "closure"     shift, and go to state 9
    "const"       shift, and go to state 10
    "function"    shift, and go to state 13
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "[<"          shift, and go to state 19
    "var"         shift, and go to state 26
    "watch"       shift, and go to state 28
    "&"           shift, and go to state 30
    "identifier"  shift, and go to state 36
    "class"       shift, and go to state 37
    "package"     shift, and go to state 38
    "--"          shift, and go to state 42
    "++"          shift, and go to state 43
    "do"          shift, and go to state 44
    "assert"      shift, and go to state 45
    "detach"      shift, and go to state 46
    "disown"      shift, and go to state 47
    "new"         shift, and go to state 48
    "angle"       shift, and go to state 49
    "duration"    shift, and go to state 50
    "float"       shift, and go to state 51
    "string"      shift, and go to state 52
    "call"        shift, and go to state 53
    "this"        shift, and go to state 54
    "!"           shift, and go to state 55
    "compl"       shift, and go to state 56
    "-"           shift, and go to state 57
    "+"           shift, and go to state 58
    "<"           shift, and go to state 59
    "%unscope:"   shift, and go to state 60
    "%exp:"       shift, and go to state 61
    "%lvalue:"    shift, and go to state 62
    "%id:"        shift, and go to state 63

    block        go to state 68
    exp          go to state 403
    routine      go to state 101
    primary-exp  go to state 102
    match        go to state 404
    detach       go to state 72
    lvalue       go to state 73
    id           go to state 103
    bitor-exp    go to state 75
    new          go to state 76
    float-exp    go to state 77
    duration     go to state 78
    dictionary   go to state 79
    tuple        go to state 80
    literal-exp  go to state 81
    string       go to state 82
    unary-exp    go to state 83
    rel-exp      go to state 84


state 339

   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
  103 catch: "catch" match.opt . block

    "{"  shift, and go to state 16

    block  go to state 405


state 340

  109 stmt: "try" block "finally" block .

    $default  reduce using rule 109 (stmt)


state 341

   23 stmt: . primary-exp ":" stmt
   24     | . exp
   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   37 exp: . "class" lvalue protos block
   38    | . "package" lvalue protos block
   43 stmt: . "enum" id "{" id.0 "}"
   47     | . "external" "identifier" "identifier"
   48     | . "external" "var" "identifier" "." "identifier" from "identifier"
   49     | . "external" event_or_function "(" unsigned ")" "identifier" "." "identifier" from "identifier"
   50     | . "import" lvalue
   51     | . exp "!" args.opt tilda.opt
   52 routine: . "closure"
   53        | . "function"
   54 stmt: . routine k1_id formals block
   55     | . id id formals block
   62 exp: . exp "=" exp
   63    | . exp "=" exp modifiers
   64    | . lvalue "+=" exp
   65    | . lvalue "-=" exp
   66    | . lvalue "*=" exp
   67    | . lvalue "/=" exp
   68    | . lvalue "^=" exp
   69    | . lvalue "%=" exp
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
   73 stmt: . "at" identifiers "(" exp tilda.opt ")" stmt onleave.opt
   74     | . "at" identifiers "(" event_match ")" stmt onleave.opt
   75     | . "every" "(" exp ")" stmt
   76     | . "if" "(" stmts ")" stmt else.opt
   77     | . "freezeif" "(" exp ")" stmt
   78     | . "stopif" "(" exp ")" stmt
   79     | . "switch" "(" exp ")" "{" cases default.opt "}"
   80     | . "timeout" "(" exp ")" stmt catch.opt else.opt finally.opt
   81     | . "return" exp.opt
   82     | . "break"
   83     | . "continue"
   84     | . "waituntil" "(" exp tilda.opt ")"
   85     | . "waituntil" "(" event_match ")"
   86     | . "whenever" "(" exp tilda.opt ")" stmt else.opt
   87     | . "whenever" "(" event_match ")" stmt else.opt
   91 else.opt: "else" . stmt
  108 stmt: . "try" block catches.1 else.opt finally.opt
  109     | . "try" block "finally" block
  110     | . "throw" exp.opt
  111     | . "loop" stmt
  112     | . "for" "(" exp ")" stmt
  113     | . "for" "(" stmt.opt ";" exp ";" stmt.opt ")" stmt
  114     | . "for" "(" "var" "identifier" in_or_colon exp ")" stmt
  115     | . "while" "(" exp ")" stmt
  118 primary-exp: . block
  119            | . "do" "(" exp ")" block
  120 detach: . "detach"
  121       | . "disown"
  122 primary-exp: . "assert" "(" exp ")"
  123            | . "assert" "{" claims "}"
  124            | . detach "(" exp ")"
  125            | . detach block
  126            | . "isdef" "(" k1_id ")"
  127            | . "watch" "(" exp ")"
  128 lvalue: . id
  129       | . primary-exp "." id
  130       | . primary-exp "." "*"
  131 primary-exp: . "&" id
  132            | . primary-exp "." "&" id
  133 id: . "identifier"
  134 bitor-exp: . "var" bitor-exp
  135          | . "const" "var" bitor-exp
  136 primary-exp: . lvalue
  137            | . lvalue args
  138 new: . "new" "identifier" args.opt
  139 bitor-exp: . new
  140 id: . "new"
  141 primary-exp: . routine formals block
  142 float-exp: . "float"
  143 duration: . "duration"
  144         | . duration "duration"
  150 dictionary: . "[" assocs "]"
  154 tuple: . "(" tuple.exps ")"
  159 literal-exp: . float-exp
  160            | . "angle"
  161            | . duration
  162            | . string
  163            | . "[" exps "]"
  164            | . "[<" tuple.exps ">]"
  165            | . "<" bitor-exps ">"
  166            | . dictionary
  167            | . tuple
  168 string: . "string"
  169       | . string "string"
  170 literal-exp: . "__HERE__"
  176 lvalue: . primary-exp "[" exps "]"
  177 literal-exp: . "this"
  178            | . "call"
  179 primary-exp: . literal-exp
  180            | . "(" exp ")"
  181            | . "(" error ")"
  182            | . primary-exp "**" primary-exp
  183 unary-exp: . primary-exp
  184          | . "--" lvalue
  185          | . "++" lvalue
  186          | . "+" unary-exp
  187          | . "-" unary-exp
  188          | . "!" unary-exp
  189          | . "compl" unary-exp
  190 bitor-exp: . unary-exp
  191          | . bitor-exp "+" bitor-exp
  192          | . bitor-exp "-" bitor-exp
  193          | . bitor-exp "*" bitor-exp
  194          | . bitor-exp "/" bitor-exp
  195          | . bitor-exp "%" bitor-exp
  196          | . bitor-exp "^" bitor-exp
  197          | . bitor-exp "<<" bitor-exp
  198          | . bitor-exp "bitand" bitor-exp
  199          | . bitor-exp "bitor" bitor-exp
  200          | . bitor-exp ">>" bitor-exp
  211 rel-exp: . bitor-exp rel-ops
  214 exp: . rel-exp
  215    | . exp "&&" exp
  216    | . exp "||" exp
  217    | . exp "in" exp
  218    | . exp "!" "in" exp
  222    | . "%unscope:" unsigned
  223 primary-exp: . "%exp:" unsigned
  224 lvalue: . "%lvalue:" unsigned
  225       | . "%id:" unsigned
  226       | . primary-exp "." "%id:" unsigned
  227 primary-exp: . lvalue "(" "%exps:" unsigned ")"

    "__HERE__"    shift, and go to state 7
    "break"       shift, and go to state 8
    "closure"     shift, and go to state 9
    "const"       shift, and go to state 10
    "continue"    shift, and go to state 11
    "freezeif"    shift, and go to state 12
    "function"    shift, and go to state 13
    "if"          shift, and go to state 14
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "[<"          shift, and go to state 19
    "return"      shift, and go to state 20
    "stopif"      shift, and go to state 21
    "switch"      shift, and go to state 22
    "throw"       shift, and go to state 23
    "timeout"     shift, and go to state 24
    "try"         shift, and go to state 25
    "var"         shift, and go to state 26
    "waituntil"   shift, and go to state 27
    "watch"       shift, and go to state 28
    "whenever"    shift, and go to state 29
    "&"           shift, and go to state 30
    "every"       shift, and go to state 31
    "for"         shift, and go to state 32
    "loop"        shift, and go to state 33
    "while"       shift, and go to state 34
    "at"          shift, and go to state 35
    "identifier"  shift, and go to state 36
    "class"       shift, and go to state 37
    "package"     shift, and go to state 38
    "enum"        shift, and go to state 39
    "external"    shift, and go to state 40
    "import"      shift, and go to state 41
    "--"          shift, and go to state 42
    "++"          shift, and go to state 43
    "do"          shift, and go to state 44
    "assert"      shift, and go to state 45
    "detach"      shift, and go to state 46
    "disown"      shift, and go to state 47
    "new"         shift, and go to state 48
    "angle"       shift, and go to state 49
    "duration"    shift, and go to state 50
    "float"       shift, and go to state 51
    "string"      shift, and go to state 52
    "call"        shift, and go to state 53
    "this"        shift, and go to state 54
    "!"           shift, and go to state 55
    "compl"       shift, and go to state 56
    "-"           shift, and go to state 57
    "+"           shift, and go to state 58
    "<"           shift, and go to state 59
    "%unscope:"   shift, and go to state 60
    "%exp:"       shift, and go to state 61
    "%lvalue:"    shift, and go to state 62
    "%id:"        shift, and go to state 63

    stmt         go to state 406
    block        go to state 68
    exp          go to state 69
    routine      go to state 70
    primary-exp  go to state 71
    detach       go to state 72
    lvalue       go to state 73
    id           go to state 74
    bitor-exp    go to state 75
    new          go to state 76
    float-exp    go to state 77
    duration     go to state 78
    dictionary   go to state 79
    tuple        go to state 80
    literal-exp  go to state 81
    string       go to state 82
    unary-exp    go to state 83
    rel-exp      go to state 84


state 342

  106 finally.opt: .  ["end of command", "case", "catch", "default", "else", "onleave", "}", ")", ",", ";", "&", "|"]
  107            | . "finally" block
  108 stmt: "try" block catches.1 else.opt . finally.opt

    "finally"  shift, and go to state 407

    $default  reduce using rule 106 (finally.opt)

    finally.opt  go to state 408

    Conflict between rule 106 and token "finally" resolved as shift (EMPTY < "finally").


state 343

   98 catches.1: catches.1 catch .

    $default  reduce using rule 98 (catches.1)


state 344

   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   37 exp: . "class" lvalue protos block
   38    | . "package" lvalue protos block
   52 routine: . "closure"
   53        | . "function"
   62 exp: . exp "=" exp
   63    | . exp "=" exp modifiers
   64    | . lvalue "+=" exp
   65    | . lvalue "-=" exp
   66    | . lvalue "*=" exp
   67    | . lvalue "/=" exp
   68    | . lvalue "^=" exp
   69    | . lvalue "%=" exp
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
  118            | . block
  119            | . "do" "(" exp ")" block
  120 detach: . "detach"
  121       | . "disown"
  122 primary-exp: . "assert" "(" exp ")"
  123            | . "assert" "{" claims "}"
  124            | . detach "(" exp ")"
  125            | . detach block
  126            | . "isdef" "(" k1_id ")"
  127            | . "watch" "(" exp ")"
  128 lvalue: . id
  129       | . primary-exp "." id
  130       | . primary-exp "." "*"
  131 primary-exp: . "&" id
  132            | . primary-exp "." "&" id
  133 id: . "identifier"
  134 bitor-exp: . "var" bitor-exp
  135          | . "const" "var" bitor-exp
  136 primary-exp: . lvalue
  137            | . lvalue args
  138 new: . "new" "identifier" args.opt
  139 bitor-exp: . new
  140 id: . "new"
  141 primary-exp: . routine formals block
  142 float-exp: . "float"
  143 duration: . "duration"
  144         | . duration "duration"
  150 dictionary: . "[" assocs "]"
  154 tuple: . "(" tuple.exps ")"
  159 literal-exp: . float-exp
  160            | . "angle"
  161            | . duration
  162            | . string
  163            | . "[" exps "]"
  164            | . "[<" tuple.exps ">]"
  165            | . "<" bitor-exps ">"
  166            | . dictionary
  167            | . tuple
  168 string: . "string"
  169       | . string "string"
  170 literal-exp: . "__HERE__"
  175 tilda.opt: "~" . exp
  176 lvalue: . primary-exp "[" exps "]"
  177 literal-exp: . "this"
  178            | . "call"
  179 primary-exp: . literal-exp
  180            | . "(" exp ")"
  181            | . "(" error ")"
  182            | . primary-exp "**" primary-exp
  183 unary-exp: . primary-exp
  184          | . "--" lvalue
  185          | . "++" lvalue
  186          | . "+" unary-exp
  187          | . "-" unary-exp
  188          | . "!" unary-exp
  189          | . "compl" unary-exp
  190 bitor-exp: . unary-exp
  191          | . bitor-exp "+" bitor-exp
  192          | . bitor-exp "-" bitor-exp
  193          | . bitor-exp "*" bitor-exp
  194          | . bitor-exp "/" bitor-exp
  195          | . bitor-exp "%" bitor-exp
  196          | . bitor-exp "^" bitor-exp
  197          | . bitor-exp "<<" bitor-exp
  198          | . bitor-exp "bitand" bitor-exp
  199          | . bitor-exp "bitor" bitor-exp
  200          | . bitor-exp ">>" bitor-exp
  211 rel-exp: . bitor-exp rel-ops
  214 exp: . rel-exp
  215    | . exp "&&" exp
  216    | . exp "||" exp
  217    | . exp "in" exp
  218    | . exp "!" "in" exp
  222    | . "%unscope:" unsigned
  223 primary-exp: . "%exp:" unsigned
  224 lvalue: . "%lvalue:" unsigned
  225       | . "%id:" unsigned
  226       | . primary-exp "." "%id:" unsigned
  227 primary-exp: . lvalue "(" "%exps:" unsigned ")"

    "__HERE__"    shift, and go to state 7
    "closure"     shift, and go to state 9
    "const"       shift, and go to state 10
    "function"    shift, and go to state 13
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "[<"          shift, and go to state 19
    "var"         shift, and go to state 26
    "watch"       shift, and go to state 28
    "&"           shift, and go to state 30
    "identifier"  shift, and go to state 36
    "class"       shift, and go to state 37
    "package"     shift, and go to state 38
    "--"          shift, and go to state 42
    "++"          shift, and go to state 43
    "do"          shift, and go to state 44
    "assert"      shift, and go to state 45
    "detach"      shift, and go to state 46
    "disown"      shift, and go to state 47
    "new"         shift, and go to state 48
    "angle"       shift, and go to state 49
    "duration"    shift, and go to state 50
    "float"       shift, and go to state 51
    "string"      shift, and go to state 52
    "call"        shift, and go to state 53
    "this"        shift, and go to state 54
    "!"           shift, and go to state 55
    "compl"       shift, and go to state 56
    "-"           shift, and go to state 57
    "+"           shift, and go to state 58
    "<"           shift, and go to state 59
    "%unscope:"   shift, and go to state 60
    "%exp:"       shift, and go to state 61
    "%lvalue:"    shift, and go to state 62
    "%id:"        shift, and go to state 63

    block        go to state 68
    exp          go to state 409
    routine      go to state 101
    primary-exp  go to state 102
    detach       go to state 72
    lvalue       go to state 73
    id           go to state 103
    bitor-exp    go to state 75
    new          go to state 76
    float-exp    go to state 77
    duration     go to state 78
    dictionary   go to state 79
    tuple        go to state 80
    literal-exp  go to state 81
    string       go to state 82
    unary-exp    go to state 83
    rel-exp      go to state 84


state 345

  171 event_match: exp "?" . args.opt tilda.opt guard.opt
  237 args: . "(" exps ")"
  238 args.opt: .  ["if", ")", "~"]
  239         | . args

    "("  shift, and go to state 262

    $default  reduce using rule 238 (args.opt)

    args      go to state 263
    args.opt  go to state 410


state 346

   84 stmt: "waituntil" "(" exp tilda.opt . ")"

    ")"  shift, and go to state 411


state 347

   85 stmt: "waituntil" "(" event_match ")" .

    $default  reduce using rule 85 (stmt)


state 348

  127 primary-exp: "watch" "(" exp ")" .

    $default  reduce using rule 127 (primary-exp)


state 349

   86 stmt: "whenever" "(" exp tilda.opt . ")" stmt else.opt

    ")"  shift, and go to state 412


state 350

   23 stmt: . primary-exp ":" stmt
   24     | . exp
   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   37 exp: . "class" lvalue protos block
   38    | . "package" lvalue protos block
   43 stmt: . "enum" id "{" id.0 "}"
   47     | . "external" "identifier" "identifier"
   48     | . "external" "var" "identifier" "." "identifier" from "identifier"
   49     | . "external" event_or_function "(" unsigned ")" "identifier" "." "identifier" from "identifier"
   50     | . "import" lvalue
   51     | . exp "!" args.opt tilda.opt
   52 routine: . "closure"
   53        | . "function"
   54 stmt: . routine k1_id formals block
   55     | . id id formals block
   62 exp: . exp "=" exp
   63    | . exp "=" exp modifiers
   64    | . lvalue "+=" exp
   65    | . lvalue "-=" exp
   66    | . lvalue "*=" exp
   67    | . lvalue "/=" exp
   68    | . lvalue "^=" exp
   69    | . lvalue "%=" exp
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
   73 stmt: . "at" identifiers "(" exp tilda.opt ")" stmt onleave.opt
   74     | . "at" identifiers "(" event_match ")" stmt onleave.opt
   75     | . "every" "(" exp ")" stmt
   76     | . "if" "(" stmts ")" stmt else.opt
   77     | . "freezeif" "(" exp ")" stmt
   78     | . "stopif" "(" exp ")" stmt
   79     | . "switch" "(" exp ")" "{" cases default.opt "}"
   80     | . "timeout" "(" exp ")" stmt catch.opt else.opt finally.opt
   81     | . "return" exp.opt
   82     | . "break"
   83     | . "continue"
   84     | . "waituntil" "(" exp tilda.opt ")"
   85     | . "waituntil" "(" event_match ")"
   86     | . "whenever" "(" exp tilda.opt ")" stmt else.opt
   87     | . "whenever" "(" event_match ")" stmt else.opt
   87     | "whenever" "(" event_match ")" . stmt else.opt
  108     | . "try" block catches.1 else.opt finally.opt
  109     | . "try" block "finally" block
  110     | . "throw" exp.opt
  111     | . "loop" stmt
  112     | . "for" "(" exp ")" stmt
  113     | . "for" "(" stmt.opt ";" exp ";" stmt.opt ")" stmt
  114     | . "for" "(" "var" "identifier" in_or_colon exp ")" stmt
  115     | . "while" "(" exp ")" stmt
  118 primary-exp: . block
  119            | . "do" "(" exp ")" block
  120 detach: . "detach"
  121       | . "disown"
  122 primary-exp: . "assert" "(" exp ")"
  123            | . "assert" "{" claims "}"
  124            | . detach "(" exp ")"
  125            | . detach block
  126            | . "isdef" "(" k1_id ")"
  127            | . "watch" "(" exp ")"
  128 lvalue: . id
  129       | . primary-exp "." id
  130       | . primary-exp "." "*"
  131 primary-exp: . "&" id
  132            | . primary-exp "." "&" id
  133 id: . "identifier"
  134 bitor-exp: . "var" bitor-exp
  135          | . "const" "var" bitor-exp
  136 primary-exp: . lvalue
  137            | . lvalue args
  138 new: . "new" "identifier" args.opt
  139 bitor-exp: . new
  140 id: . "new"
  141 primary-exp: . routine formals block
  142 float-exp: . "float"
  143 duration: . "duration"
  144         | . duration "duration"
  150 dictionary: . "[" assocs "]"
  154 tuple: . "(" tuple.exps ")"
  159 literal-exp: . float-exp
  160            | . "angle"
  161            | . duration
  162            | . string
  163            | . "[" exps "]"
  164            | . "[<" tuple.exps ">]"
  165            | . "<" bitor-exps ">"
  166            | . dictionary
  167            | . tuple
  168 string: . "string"
  169       | . string "string"
  170 literal-exp: . "__HERE__"
  176 lvalue: . primary-exp "[" exps "]"
  177 literal-exp: . "this"
  178            | . "call"
  179 primary-exp: . literal-exp
  180            | . "(" exp ")"
  181            | . "(" error ")"
  182            | . primary-exp "**" primary-exp
  183 unary-exp: . primary-exp
  184          | . "--" lvalue
  185          | . "++" lvalue
  186          | . "+" unary-exp
  187          | . "-" unary-exp
  188          | . "!" unary-exp
  189          | . "compl" unary-exp
  190 bitor-exp: . unary-exp
  191          | . bitor-exp "+" bitor-exp
  192          | . bitor-exp "-" bitor-exp
  193          | . bitor-exp "*" bitor-exp
  194          | . bitor-exp "/" bitor-exp
  195          | . bitor-exp "%" bitor-exp
  196          | . bitor-exp "^" bitor-exp
  197          | . bitor-exp "<<" bitor-exp
  198          | . bitor-exp "bitand" bitor-exp
  199          | . bitor-exp "bitor" bitor-exp
  200          | . bitor-exp ">>" bitor-exp
  211 rel-exp: . bitor-exp rel-ops
  214 exp: . rel-exp
  215    | . exp "&&" exp
  216    | . exp "||" exp
  217    | . exp "in" exp
  218    | . exp "!" "in" exp
  222    | . "%unscope:" unsigned
  223 primary-exp: . "%exp:" unsigned
  224 lvalue: . "%lvalue:" unsigned
  225       | . "%id:" unsigned
  226       | . primary-exp "." "%id:" unsigned
  227 primary-exp: . lvalue "(" "%exps:" unsigned ")"

    "__HERE__"    shift, and go to state 7
    "break"       shift, and go to state 8
    "closure"     shift, and go to state 9
    "const"       shift, and go to state 10
    "continue"    shift, and go to state 11
    "freezeif"    shift, and go to state 12
    "function"    shift, and go to state 13
    "if"          shift, and go to state 14
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "[<"          shift, and go to state 19
    "return"      shift, and go to state 20
    "stopif"      shift, and go to state 21
    "switch"      shift, and go to state 22
    "throw"       shift, and go to state 23
    "timeout"     shift, and go to state 24
    "try"         shift, and go to state 25
    "var"         shift, and go to state 26
    "waituntil"   shift, and go to state 27
    "watch"       shift, and go to state 28
    "whenever"    shift, and go to state 29
    "&"           shift, and go to state 30
    "every"       shift, and go to state 31
    "for"         shift, and go to state 32
    "loop"        shift, and go to state 33
    "while"       shift, and go to state 34
    "at"          shift, and go to state 35
    "identifier"  shift, and go to state 36
    "class"       shift, and go to state 37
    "package"     shift, and go to state 38
    "enum"        shift, and go to state 39
    "external"    shift, and go to state 40
    "import"      shift, and go to state 41
    "--"          shift, and go to state 42
    "++"          shift, and go to state 43
    "do"          shift, and go to state 44
    "assert"      shift, and go to state 45
    "detach"      shift, and go to state 46
    "disown"      shift, and go to state 47
    "new"         shift, and go to state 48
    "angle"       shift, and go to state 49
    "duration"    shift, and go to state 50
    "float"       shift, and go to state 51
    "string"      shift, and go to state 52
    "call"        shift, and go to state 53
    "this"        shift, and go to state 54
    "!"           shift, and go to state 55
    "compl"       shift, and go to state 56
    "-"           shift, and go to state 57
    "+"           shift, and go to state 58
    "<"           shift, and go to state 59
    "%unscope:"   shift, and go to state 60
    "%exp:"       shift, and go to state 61
    "%lvalue:"    shift, and go to state 62
    "%id:"        shift, and go to state 63

    stmt         go to state 413
    block        go to state 68
    exp          go to state 69
    routine      go to state 70
    primary-exp  go to state 71
    detach       go to state 72
    lvalue       go to state 73
    id           go to state 74
    bitor-exp    go to state 75
    new          go to state 76
    float-exp    go to state 77
    duration     go to state 78
    dictionary   go to state 79
    tuple        go to state 80
    literal-exp  go to state 81
    string       go to state 82
    unary-exp    go to state 83
    rel-exp      go to state 84


state 351

   23 stmt: . primary-exp ":" stmt
   24     | . exp
   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   37 exp: . "class" lvalue protos block
   38    | . "package" lvalue protos block
   43 stmt: . "enum" id "{" id.0 "}"
   47     | . "external" "identifier" "identifier"
   48     | . "external" "var" "identifier" "." "identifier" from "identifier"
   49     | . "external" event_or_function "(" unsigned ")" "identifier" "." "identifier" from "identifier"
   50     | . "import" lvalue
   51     | . exp "!" args.opt tilda.opt
   52 routine: . "closure"
   53        | . "function"
   54 stmt: . routine k1_id formals block
   55     | . id id formals block
   62 exp: . exp "=" exp
   63    | . exp "=" exp modifiers
   64    | . lvalue "+=" exp
   65    | . lvalue "-=" exp
   66    | . lvalue "*=" exp
   67    | . lvalue "/=" exp
   68    | . lvalue "^=" exp
   69    | . lvalue "%=" exp
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
   73 stmt: . "at" identifiers "(" exp tilda.opt ")" stmt onleave.opt
   74     | . "at" identifiers "(" event_match ")" stmt onleave.opt
   75     | . "every" "(" exp ")" stmt
   75     | "every" "(" exp ")" . stmt
   76     | . "if" "(" stmts ")" stmt else.opt
   77     | . "freezeif" "(" exp ")" stmt
   78     | . "stopif" "(" exp ")" stmt
   79     | . "switch" "(" exp ")" "{" cases default.opt "}"
   80     | . "timeout" "(" exp ")" stmt catch.opt else.opt finally.opt
   81     | . "return" exp.opt
   82     | . "break"
   83     | . "continue"
   84     | . "waituntil" "(" exp tilda.opt ")"
   85     | . "waituntil" "(" event_match ")"
   86     | . "whenever" "(" exp tilda.opt ")" stmt else.opt
   87     | . "whenever" "(" event_match ")" stmt else.opt
  108     | . "try" block catches.1 else.opt finally.opt
  109     | . "try" block "finally" block
  110     | . "throw" exp.opt
  111     | . "loop" stmt
  112     | . "for" "(" exp ")" stmt
  113     | . "for" "(" stmt.opt ";" exp ";" stmt.opt ")" stmt
  114     | . "for" "(" "var" "identifier" in_or_colon exp ")" stmt
  115     | . "while" "(" exp ")" stmt
  118 primary-exp: . block
  119            | . "do" "(" exp ")" block
  120 detach: . "detach"
  121       | . "disown"
  122 primary-exp: . "assert" "(" exp ")"
  123            | . "assert" "{" claims "}"
  124            | . detach "(" exp ")"
  125            | . detach block
  126            | . "isdef" "(" k1_id ")"
  127            | . "watch" "(" exp ")"
  128 lvalue: . id
  129       | . primary-exp "." id
  130       | . primary-exp "." "*"
  131 primary-exp: . "&" id
  132            | . primary-exp "." "&" id
  133 id: . "identifier"
  134 bitor-exp: . "var" bitor-exp
  135          | . "const" "var" bitor-exp
  136 primary-exp: . lvalue
  137            | . lvalue args
  138 new: . "new" "identifier" args.opt
  139 bitor-exp: . new
  140 id: . "new"
  141 primary-exp: . routine formals block
  142 float-exp: . "float"
  143 duration: . "duration"
  144         | . duration "duration"
  150 dictionary: . "[" assocs "]"
  154 tuple: . "(" tuple.exps ")"
  159 literal-exp: . float-exp
  160            | . "angle"
  161            | . duration
  162            | . string
  163            | . "[" exps "]"
  164            | . "[<" tuple.exps ">]"
  165            | . "<" bitor-exps ">"
  166            | . dictionary
  167            | . tuple
  168 string: . "string"
  169       | . string "string"
  170 literal-exp: . "__HERE__"
  176 lvalue: . primary-exp "[" exps "]"
  177 literal-exp: . "this"
  178            | . "call"
  179 primary-exp: . literal-exp
  180            | . "(" exp ")"
  181            | . "(" error ")"
  182            | . primary-exp "**" primary-exp
  183 unary-exp: . primary-exp
  184          | . "--" lvalue
  185          | . "++" lvalue
  186          | . "+" unary-exp
  187          | . "-" unary-exp
  188          | . "!" unary-exp
  189          | . "compl" unary-exp
  190 bitor-exp: . unary-exp
  191          | . bitor-exp "+" bitor-exp
  192          | . bitor-exp "-" bitor-exp
  193          | . bitor-exp "*" bitor-exp
  194          | . bitor-exp "/" bitor-exp
  195          | . bitor-exp "%" bitor-exp
  196          | . bitor-exp "^" bitor-exp
  197          | . bitor-exp "<<" bitor-exp
  198          | . bitor-exp "bitand" bitor-exp
  199          | . bitor-exp "bitor" bitor-exp
  200          | . bitor-exp ">>" bitor-exp
  211 rel-exp: . bitor-exp rel-ops
  214 exp: . rel-exp
  215    | . exp "&&" exp
  216    | . exp "||" exp
  217    | . exp "in" exp
  218    | . exp "!" "in" exp
  222    | . "%unscope:" unsigned
  223 primary-exp: . "%exp:" unsigned
  224 lvalue: . "%lvalue:" unsigned
  225       | . "%id:" unsigned
  226       | . primary-exp "." "%id:" unsigned
  227 primary-exp: . lvalue "(" "%exps:" unsigned ")"

    "__HERE__"    shift, and go to state 7
    "break"       shift, and go to state 8
    "closure"     shift, and go to state 9
    "const"       shift, and go to state 10
    "continue"    shift, and go to state 11
    "freezeif"    shift, and go to state 12
    "function"    shift, and go to state 13
    "if"          shift, and go to state 14
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "[<"          shift, and go to state 19
    "return"      shift, and go to state 20
    "stopif"      shift, and go to state 21
    "switch"      shift, and go to state 22
    "throw"       shift, and go to state 23
    "timeout"     shift, and go to state 24
    "try"         shift, and go to state 25
    "var"         shift, and go to state 26
    "waituntil"   shift, and go to state 27
    "watch"       shift, and go to state 28
    "whenever"    shift, and go to state 29
    "&"           shift, and go to state 30
    "every"       shift, and go to state 31
    "for"         shift, and go to state 32
    "loop"        shift, and go to state 33
    "while"       shift, and go to state 34
    "at"          shift, and go to state 35
    "identifier"  shift, and go to state 36
    "class"       shift, and go to state 37
    "package"     shift, and go to state 38
    "enum"        shift, and go to state 39
    "external"    shift, and go to state 40
    "import"      shift, and go to state 41
    "--"          shift, and go to state 42
    "++"          shift, and go to state 43
    "do"          shift, and go to state 44
    "assert"      shift, and go to state 45
    "detach"      shift, and go to state 46
    "disown"      shift, and go to state 47
    "new"         shift, and go to state 48
    "angle"       shift, and go to state 49
    "duration"    shift, and go to state 50
    "float"       shift, and go to state 51
    "string"      shift, and go to state 52
    "call"        shift, and go to state 53
    "this"        shift, and go to state 54
    "!"           shift, and go to state 55
    "compl"       shift, and go to state 56
    "-"           shift, and go to state 57
    "+"           shift, and go to state 58
    "<"           shift, and go to state 59
    "%unscope:"   shift, and go to state 60
    "%exp:"       shift, and go to state 61
    "%lvalue:"    shift, and go to state 62
    "%id:"        shift, and go to state 63

    stmt         go to state 414
    block        go to state 68
    exp          go to state 69
    routine      go to state 70
    primary-exp  go to state 71
    detach       go to state 72
    lvalue       go to state 73
    id           go to state 74
    bitor-exp    go to state 75
    new          go to state 76
    float-exp    go to state 77
    duration     go to state 78
    dictionary   go to state 79
    tuple        go to state 80
    literal-exp  go to state 81
    string       go to state 82
    unary-exp    go to state 83
    rel-exp      go to state 84


state 352

  114 stmt: "for" "(" "var" "identifier" . in_or_colon exp ")" stmt
  116 in_or_colon: . "in"
  117            | . ":"
  133 id: "identifier" .  ["=", "[", "(", ".", ")", ";", "--", "++", "->", "!", "bitand", "bitor", "^", ">>", "<<", "-", "%", "+", "/", "*", "**", "=~=", "==", "===", ">=", ">", "<=", "<", "!=", "!==", "~=", "&&", "||"]

    ":"   shift, and go to state 415
    "in"  shift, and go to state 416

    $default  reduce using rule 133 (id)

    in_or_colon  go to state 417

    Conflict between rule 133 and token "in" resolved as shift ("identifier" < "in").


state 353

   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   37 exp: . "class" lvalue protos block
   38    | . "package" lvalue protos block
   52 routine: . "closure"
   53        | . "function"
   62 exp: . exp "=" exp
   63    | . exp "=" exp modifiers
   64    | . lvalue "+=" exp
   65    | . lvalue "-=" exp
   66    | . lvalue "*=" exp
   67    | . lvalue "/=" exp
   68    | . lvalue "^=" exp
   69    | . lvalue "%=" exp
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
  113 stmt: "for" "(" stmt.opt ";" . exp ";" stmt.opt ")" stmt
  118 primary-exp: . block
  119            | . "do" "(" exp ")" block
  120 detach: . "detach"
  121       | . "disown"
  122 primary-exp: . "assert" "(" exp ")"
  123            | . "assert" "{" claims "}"
  124            | . detach "(" exp ")"
  125            | . detach block
  126            | . "isdef" "(" k1_id ")"
  127            | . "watch" "(" exp ")"
  128 lvalue: . id
  129       | . primary-exp "." id
  130       | . primary-exp "." "*"
  131 primary-exp: . "&" id
  132            | . primary-exp "." "&" id
  133 id: . "identifier"
  134 bitor-exp: . "var" bitor-exp
  135          | . "const" "var" bitor-exp
  136 primary-exp: . lvalue
  137            | . lvalue args
  138 new: . "new" "identifier" args.opt
  139 bitor-exp: . new
  140 id: . "new"
  141 primary-exp: . routine formals block
  142 float-exp: . "float"
  143 duration: . "duration"
  144         | . duration "duration"
  150 dictionary: . "[" assocs "]"
  154 tuple: . "(" tuple.exps ")"
  159 literal-exp: . float-exp
  160            | . "angle"
  161            | . duration
  162            | . string
  163            | . "[" exps "]"
  164            | . "[<" tuple.exps ">]"
  165            | . "<" bitor-exps ">"
  166            | . dictionary
  167            | . tuple
  168 string: . "string"
  169       | . string "string"
  170 literal-exp: . "__HERE__"
  176 lvalue: . primary-exp "[" exps "]"
  177 literal-exp: . "this"
  178            | . "call"
  179 primary-exp: . literal-exp
  180            | . "(" exp ")"
  181            | . "(" error ")"
  182            | . primary-exp "**" primary-exp
  183 unary-exp: . primary-exp
  184          | . "--" lvalue
  185          | . "++" lvalue
  186          | . "+" unary-exp
  187          | . "-" unary-exp
  188          | . "!" unary-exp
  189          | . "compl" unary-exp
  190 bitor-exp: . unary-exp
  191          | . bitor-exp "+" bitor-exp
  192          | . bitor-exp "-" bitor-exp
  193          | . bitor-exp "*" bitor-exp
  194          | . bitor-exp "/" bitor-exp
  195          | . bitor-exp "%" bitor-exp
  196          | . bitor-exp "^" bitor-exp
  197          | . bitor-exp "<<" bitor-exp
  198          | . bitor-exp "bitand" bitor-exp
  199          | . bitor-exp "bitor" bitor-exp
  200          | . bitor-exp ">>" bitor-exp
  211 rel-exp: . bitor-exp rel-ops
  214 exp: . rel-exp
  215    | . exp "&&" exp
  216    | . exp "||" exp
  217    | . exp "in" exp
  218    | . exp "!" "in" exp
  222    | . "%unscope:" unsigned
  223 primary-exp: . "%exp:" unsigned
  224 lvalue: . "%lvalue:" unsigned
  225       | . "%id:" unsigned
  226       | . primary-exp "." "%id:" unsigned
  227 primary-exp: . lvalue "(" "%exps:" unsigned ")"

    "__HERE__"    shift, and go to state 7
    "closure"     shift, and go to state 9
    "const"       shift, and go to state 10
    "function"    shift, and go to state 13
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "[<"          shift, and go to state 19
    "var"         shift, and go to state 26
    "watch"       shift, and go to state 28
    "&"           shift, and go to state 30
    "identifier"  shift, and go to state 36
    "class"       shift, and go to state 37
    "package"     shift, and go to state 38
    "--"          shift, and go to state 42
    "++"          shift, and go to state 43
    "do"          shift, and go to state 44
    "assert"      shift, and go to state 45
    "detach"      shift, and go to state 46
    "disown"      shift, and go to state 47
    "new"         shift, and go to state 48
    "angle"       shift, and go to state 49
    "duration"    shift, and go to state 50
    "float"       shift, and go to state 51
    "string"      shift, and go to state 52
    "call"        shift, and go to state 53
    "this"        shift, and go to state 54
    "!"           shift, and go to state 55
    "compl"       shift, and go to state 56
    "-"           shift, and go to state 57
    "+"           shift, and go to state 58
    "<"           shift, and go to state 59
    "%unscope:"   shift, and go to state 60
    "%exp:"       shift, and go to state 61
    "%lvalue:"    shift, and go to state 62
    "%id:"        shift, and go to state 63

    block        go to state 68
    exp          go to state 418
    routine      go to state 101
    primary-exp  go to state 102
    detach       go to state 72
    lvalue       go to state 73
    id           go to state 103
    bitor-exp    go to state 75
    new          go to state 76
    float-exp    go to state 77
    duration     go to state 78
    dictionary   go to state 79
    tuple        go to state 80
    literal-exp  go to state 81
    string       go to state 82
    unary-exp    go to state 83
    rel-exp      go to state 84


state 354

   23 stmt: . primary-exp ":" stmt
   24     | . exp
   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   37 exp: . "class" lvalue protos block
   38    | . "package" lvalue protos block
   43 stmt: . "enum" id "{" id.0 "}"
   47     | . "external" "identifier" "identifier"
   48     | . "external" "var" "identifier" "." "identifier" from "identifier"
   49     | . "external" event_or_function "(" unsigned ")" "identifier" "." "identifier" from "identifier"
   50     | . "import" lvalue
   51     | . exp "!" args.opt tilda.opt
   52 routine: . "closure"
   53        | . "function"
   54 stmt: . routine k1_id formals block
   55     | . id id formals block
   62 exp: . exp "=" exp
   63    | . exp "=" exp modifiers
   64    | . lvalue "+=" exp
   65    | . lvalue "-=" exp
   66    | . lvalue "*=" exp
   67    | . lvalue "/=" exp
   68    | . lvalue "^=" exp
   69    | . lvalue "%=" exp
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
   73 stmt: . "at" identifiers "(" exp tilda.opt ")" stmt onleave.opt
   74     | . "at" identifiers "(" event_match ")" stmt onleave.opt
   75     | . "every" "(" exp ")" stmt
   76     | . "if" "(" stmts ")" stmt else.opt
   77     | . "freezeif" "(" exp ")" stmt
   78     | . "stopif" "(" exp ")" stmt
   79     | . "switch" "(" exp ")" "{" cases default.opt "}"
   80     | . "timeout" "(" exp ")" stmt catch.opt else.opt finally.opt
   81     | . "return" exp.opt
   82     | . "break"
   83     | . "continue"
   84     | . "waituntil" "(" exp tilda.opt ")"
   85     | . "waituntil" "(" event_match ")"
   86     | . "whenever" "(" exp tilda.opt ")" stmt else.opt
   87     | . "whenever" "(" event_match ")" stmt else.opt
  108     | . "try" block catches.1 else.opt finally.opt
  109     | . "try" block "finally" block
  110     | . "throw" exp.opt
  111     | . "loop" stmt
  112     | . "for" "(" exp ")" stmt
  112     | "for" "(" exp ")" . stmt
  113     | . "for" "(" stmt.opt ";" exp ";" stmt.opt ")" stmt
  114     | . "for" "(" "var" "identifier" in_or_colon exp ")" stmt
  115     | . "while" "(" exp ")" stmt
  118 primary-exp: . block
  119            | . "do" "(" exp ")" block
  120 detach: . "detach"
  121       | . "disown"
  122 primary-exp: . "assert" "(" exp ")"
  123            | . "assert" "{" claims "}"
  124            | . detach "(" exp ")"
  125            | . detach block
  126            | . "isdef" "(" k1_id ")"
  127            | . "watch" "(" exp ")"
  128 lvalue: . id
  129       | . primary-exp "." id
  130       | . primary-exp "." "*"
  131 primary-exp: . "&" id
  132            | . primary-exp "." "&" id
  133 id: . "identifier"
  134 bitor-exp: . "var" bitor-exp
  135          | . "const" "var" bitor-exp
  136 primary-exp: . lvalue
  137            | . lvalue args
  138 new: . "new" "identifier" args.opt
  139 bitor-exp: . new
  140 id: . "new"
  141 primary-exp: . routine formals block
  142 float-exp: . "float"
  143 duration: . "duration"
  144         | . duration "duration"
  150 dictionary: . "[" assocs "]"
  154 tuple: . "(" tuple.exps ")"
  159 literal-exp: . float-exp
  160            | . "angle"
  161            | . duration
  162            | . string
  163            | . "[" exps "]"
  164            | . "[<" tuple.exps ">]"
  165            | . "<" bitor-exps ">"
  166            | . dictionary
  167            | . tuple
  168 string: . "string"
  169       | . string "string"
  170 literal-exp: . "__HERE__"
  176 lvalue: . primary-exp "[" exps "]"
  177 literal-exp: . "this"
  178            | . "call"
  179 primary-exp: . literal-exp
  180            | . "(" exp ")"
  181            | . "(" error ")"
  182            | . primary-exp "**" primary-exp
  183 unary-exp: . primary-exp
  184          | . "--" lvalue
  185          | . "++" lvalue
  186          | . "+" unary-exp
  187          | . "-" unary-exp
  188          | . "!" unary-exp
  189          | . "compl" unary-exp
  190 bitor-exp: . unary-exp
  191          | . bitor-exp "+" bitor-exp
  192          | . bitor-exp "-" bitor-exp
  193          | . bitor-exp "*" bitor-exp
  194          | . bitor-exp "/" bitor-exp
  195          | . bitor-exp "%" bitor-exp
  196          | . bitor-exp "^" bitor-exp
  197          | . bitor-exp "<<" bitor-exp
  198          | . bitor-exp "bitand" bitor-exp
  199          | . bitor-exp "bitor" bitor-exp
  200          | . bitor-exp ">>" bitor-exp
  211 rel-exp: . bitor-exp rel-ops
  214 exp: . rel-exp
  215    | . exp "&&" exp
  216    | . exp "||" exp
  217    | . exp "in" exp
  218    | . exp "!" "in" exp
  222    | . "%unscope:" unsigned
  223 primary-exp: . "%exp:" unsigned
  224 lvalue: . "%lvalue:" unsigned
  225       | . "%id:" unsigned
  226       | . primary-exp "." "%id:" unsigned
  227 primary-exp: . lvalue "(" "%exps:" unsigned ")"

    "__HERE__"    shift, and go to state 7
    "break"       shift, and go to state 8
    "closure"     shift, and go to state 9
    "const"       shift, and go to state 10
    "continue"    shift, and go to state 11
    "freezeif"    shift, and go to state 12
    "function"    shift, and go to state 13
    "if"          shift, and go to state 14
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "[<"          shift, and go to state 19
    "return"      shift, and go to state 20
    "stopif"      shift, and go to state 21
    "switch"      shift, and go to state 22
    "throw"       shift, and go to state 23
    "timeout"     shift, and go to state 24
    "try"         shift, and go to state 25
    "var"         shift, and go to state 26
    "waituntil"   shift, and go to state 27
    "watch"       shift, and go to state 28
    "whenever"    shift, and go to state 29
    "&"           shift, and go to state 30
    "every"       shift, and go to state 31
    "for"         shift, and go to state 32
    "loop"        shift, and go to state 33
    "while"       shift, and go to state 34
    "at"          shift, and go to state 35
    "identifier"  shift, and go to state 36
    "class"       shift, and go to state 37
    "package"     shift, and go to state 38
    "enum"        shift, and go to state 39
    "external"    shift, and go to state 40
    "import"      shift, and go to state 41
    "--"          shift, and go to state 42
    "++"          shift, and go to state 43
    "do"          shift, and go to state 44
    "assert"      shift, and go to state 45
    "detach"      shift, and go to state 46
    "disown"      shift, and go to state 47
    "new"         shift, and go to state 48
    "angle"       shift, and go to state 49
    "duration"    shift, and go to state 50
    "float"       shift, and go to state 51
    "string"      shift, and go to state 52
    "call"        shift, and go to state 53
    "this"        shift, and go to state 54
    "!"           shift, and go to state 55
    "compl"       shift, and go to state 56
    "-"           shift, and go to state 57
    "+"           shift, and go to state 58
    "<"           shift, and go to state 59
    "%unscope:"   shift, and go to state 60
    "%exp:"       shift, and go to state 61
    "%lvalue:"    shift, and go to state 62
    "%id:"        shift, and go to state 63

    stmt         go to state 419
    block        go to state 68
    exp          go to state 69
    routine      go to state 70
    primary-exp  go to state 71
    detach       go to state 72
    lvalue       go to state 73
    id           go to state 74
    bitor-exp    go to state 75
    new          go to state 76
    float-exp    go to state 77
    duration     go to state 78
    dictionary   go to state 79
    tuple        go to state 80
    literal-exp  go to state 81
    string       go to state 82
    unary-exp    go to state 83
    rel-exp      go to state 84


state 355

   23 stmt: . primary-exp ":" stmt
   24     | . exp
   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   37 exp: . "class" lvalue protos block
   38    | . "package" lvalue protos block
   43 stmt: . "enum" id "{" id.0 "}"
   47     | . "external" "identifier" "identifier"
   48     | . "external" "var" "identifier" "." "identifier" from "identifier"
   49     | . "external" event_or_function "(" unsigned ")" "identifier" "." "identifier" from "identifier"
   50     | . "import" lvalue
   51     | . exp "!" args.opt tilda.opt
   52 routine: . "closure"
   53        | . "function"
   54 stmt: . routine k1_id formals block
   55     | . id id formals block
   62 exp: . exp "=" exp
   63    | . exp "=" exp modifiers
   64    | . lvalue "+=" exp
   65    | . lvalue "-=" exp
   66    | . lvalue "*=" exp
   67    | . lvalue "/=" exp
   68    | . lvalue "^=" exp
   69    | . lvalue "%=" exp
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
   73 stmt: . "at" identifiers "(" exp tilda.opt ")" stmt onleave.opt
   74     | . "at" identifiers "(" event_match ")" stmt onleave.opt
   75     | . "every" "(" exp ")" stmt
   76     | . "if" "(" stmts ")" stmt else.opt
   77     | . "freezeif" "(" exp ")" stmt
   78     | . "stopif" "(" exp ")" stmt
   79     | . "switch" "(" exp ")" "{" cases default.opt "}"
   80     | . "timeout" "(" exp ")" stmt catch.opt else.opt finally.opt
   81     | . "return" exp.opt
   82     | . "break"
   83     | . "continue"
   84     | . "waituntil" "(" exp tilda.opt ")"
   85     | . "waituntil" "(" event_match ")"
   86     | . "whenever" "(" exp tilda.opt ")" stmt else.opt
   87     | . "whenever" "(" event_match ")" stmt else.opt
  108     | . "try" block catches.1 else.opt finally.opt
  109     | . "try" block "finally" block
  110     | . "throw" exp.opt
  111     | . "loop" stmt
  112     | . "for" "(" exp ")" stmt
  113     | . "for" "(" stmt.opt ";" exp ";" stmt.opt ")" stmt
  114     | . "for" "(" "var" "identifier" in_or_colon exp ")" stmt
  115     | . "while" "(" exp ")" stmt
  115     | "while" "(" exp ")" . stmt
  118 primary-exp: . block
  119            | . "do" "(" exp ")" block
  120 detach: . "detach"
  121       | . "disown"
  122 primary-exp: . "assert" "(" exp ")"
  123            | . "assert" "{" claims "}"
  124            | . detach "(" exp ")"
  125            | . detach block
  126            | . "isdef" "(" k1_id ")"
  127            | . "watch" "(" exp ")"
  128 lvalue: . id
  129       | . primary-exp "." id
  130       | . primary-exp "." "*"
  131 primary-exp: . "&" id
  132            | . primary-exp "." "&" id
  133 id: . "identifier"
  134 bitor-exp: . "var" bitor-exp
  135          | . "const" "var" bitor-exp
  136 primary-exp: . lvalue
  137            | . lvalue args
  138 new: . "new" "identifier" args.opt
  139 bitor-exp: . new
  140 id: . "new"
  141 primary-exp: . routine formals block
  142 float-exp: . "float"
  143 duration: . "duration"
  144         | . duration "duration"
  150 dictionary: . "[" assocs "]"
  154 tuple: . "(" tuple.exps ")"
  159 literal-exp: . float-exp
  160            | . "angle"
  161            | . duration
  162            | . string
  163            | . "[" exps "]"
  164            | . "[<" tuple.exps ">]"
  165            | . "<" bitor-exps ">"
  166            | . dictionary
  167            | . tuple
  168 string: . "string"
  169       | . string "string"
  170 literal-exp: . "__HERE__"
  176 lvalue: . primary-exp "[" exps "]"
  177 literal-exp: . "this"
  178            | . "call"
  179 primary-exp: . literal-exp
  180            | . "(" exp ")"
  181            | . "(" error ")"
  182            | . primary-exp "**" primary-exp
  183 unary-exp: . primary-exp
  184          | . "--" lvalue
  185          | . "++" lvalue
  186          | . "+" unary-exp
  187          | . "-" unary-exp
  188          | . "!" unary-exp
  189          | . "compl" unary-exp
  190 bitor-exp: . unary-exp
  191          | . bitor-exp "+" bitor-exp
  192          | . bitor-exp "-" bitor-exp
  193          | . bitor-exp "*" bitor-exp
  194          | . bitor-exp "/" bitor-exp
  195          | . bitor-exp "%" bitor-exp
  196          | . bitor-exp "^" bitor-exp
  197          | . bitor-exp "<<" bitor-exp
  198          | . bitor-exp "bitand" bitor-exp
  199          | . bitor-exp "bitor" bitor-exp
  200          | . bitor-exp ">>" bitor-exp
  211 rel-exp: . bitor-exp rel-ops
  214 exp: . rel-exp
  215    | . exp "&&" exp
  216    | . exp "||" exp
  217    | . exp "in" exp
  218    | . exp "!" "in" exp
  222    | . "%unscope:" unsigned
  223 primary-exp: . "%exp:" unsigned
  224 lvalue: . "%lvalue:" unsigned
  225       | . "%id:" unsigned
  226       | . primary-exp "." "%id:" unsigned
  227 primary-exp: . lvalue "(" "%exps:" unsigned ")"

    "__HERE__"    shift, and go to state 7
    "break"       shift, and go to state 8
    "closure"     shift, and go to state 9
    "const"       shift, and go to state 10
    "continue"    shift, and go to state 11
    "freezeif"    shift, and go to state 12
    "function"    shift, and go to state 13
    "if"          shift, and go to state 14
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "[<"          shift, and go to state 19
    "return"      shift, and go to state 20
    "stopif"      shift, and go to state 21
    "switch"      shift, and go to state 22
    "throw"       shift, and go to state 23
    "timeout"     shift, and go to state 24
    "try"         shift, and go to state 25
    "var"         shift, and go to state 26
    "waituntil"   shift, and go to state 27
    "watch"       shift, and go to state 28
    "whenever"    shift, and go to state 29
    "&"           shift, and go to state 30
    "every"       shift, and go to state 31
    "for"         shift, and go to state 32
    "loop"        shift, and go to state 33
    "while"       shift, and go to state 34
    "at"          shift, and go to state 35
    "identifier"  shift, and go to state 36
    "class"       shift, and go to state 37
    "package"     shift, and go to state 38
    "enum"        shift, and go to state 39
    "external"    shift, and go to state 40
    "import"      shift, and go to state 41
    "--"          shift, and go to state 42
    "++"          shift, and go to state 43
    "do"          shift, and go to state 44
    "assert"      shift, and go to state 45
    "detach"      shift, and go to state 46
    "disown"      shift, and go to state 47
    "new"         shift, and go to state 48
    "angle"       shift, and go to state 49
    "duration"    shift, and go to state 50
    "float"       shift, and go to state 51
    "string"      shift, and go to state 52
    "call"        shift, and go to state 53
    "this"        shift, and go to state 54
    "!"           shift, and go to state 55
    "compl"       shift, and go to state 56
    "-"           shift, and go to state 57
    "+"           shift, and go to state 58
    "<"           shift, and go to state 59
    "%unscope:"   shift, and go to state 60
    "%exp:"       shift, and go to state 61
    "%lvalue:"    shift, and go to state 62
    "%id:"        shift, and go to state 63

    stmt         go to state 420
    block        go to state 68
    exp          go to state 69
    routine      go to state 70
    primary-exp  go to state 71
    detach       go to state 72
    lvalue       go to state 73
    id           go to state 74
    bitor-exp    go to state 75
    new          go to state 76
    float-exp    go to state 77
    duration     go to state 78
    dictionary   go to state 79
    tuple        go to state 80
    literal-exp  go to state 81
    string       go to state 82
    unary-exp    go to state 83
    rel-exp      go to state 84


state 356

   62 exp: exp . "=" exp
   63    | exp . "=" exp modifiers
   73 stmt: "at" identifiers "(" exp . tilda.opt ")" stmt onleave.opt
  171 event_match: exp . "?" args.opt tilda.opt guard.opt
  174 tilda.opt: .  [")"]
  175          | . "~" exp
  215 exp: exp . "&&" exp
  216    | exp . "||" exp
  217    | exp . "in" exp
  218    | exp . "!" "in" exp

    "="   shift, and go to state 167
    "in"  shift, and go to state 168
    "~"   shift, and go to state 344
    "?"   shift, and go to state 345
    "!"   shift, and go to state 218
    "&&"  shift, and go to state 170
    "||"  shift, and go to state 171

    $default  reduce using rule 174 (tilda.opt)

    tilda.opt  go to state 421


state 357

   74 stmt: "at" identifiers "(" event_match . ")" stmt onleave.opt

    ")"  shift, and go to state 422


state 358

   29 visibility: "private" .

    $default  reduce using rule 29 (visibility)


state 359

   30 visibility: "protected" .

    $default  reduce using rule 30 (visibility)


state 360

   31 visibility: "public" .

    $default  reduce using rule 31 (visibility)


state 361

   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   32 proto: visibility . exp
   37 exp: . "class" lvalue protos block
   38    | . "package" lvalue protos block
   52 routine: . "closure"
   53        | . "function"
   62 exp: . exp "=" exp
   63    | . exp "=" exp modifiers
   64    | . lvalue "+=" exp
   65    | . lvalue "-=" exp
   66    | . lvalue "*=" exp
   67    | . lvalue "/=" exp
   68    | . lvalue "^=" exp
   69    | . lvalue "%=" exp
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
  118            | . block
  119            | . "do" "(" exp ")" block
  120 detach: . "detach"
  121       | . "disown"
  122 primary-exp: . "assert" "(" exp ")"
  123            | . "assert" "{" claims "}"
  124            | . detach "(" exp ")"
  125            | . detach block
  126            | . "isdef" "(" k1_id ")"
  127            | . "watch" "(" exp ")"
  128 lvalue: . id
  129       | . primary-exp "." id
  130       | . primary-exp "." "*"
  131 primary-exp: . "&" id
  132            | . primary-exp "." "&" id
  133 id: . "identifier"
  134 bitor-exp: . "var" bitor-exp
  135          | . "const" "var" bitor-exp
  136 primary-exp: . lvalue
  137            | . lvalue args
  138 new: . "new" "identifier" args.opt
  139 bitor-exp: . new
  140 id: . "new"
  141 primary-exp: . routine formals block
  142 float-exp: . "float"
  143 duration: . "duration"
  144         | . duration "duration"
  150 dictionary: . "[" assocs "]"
  154 tuple: . "(" tuple.exps ")"
  159 literal-exp: . float-exp
  160            | . "angle"
  161            | . duration
  162            | . string
  163            | . "[" exps "]"
  164            | . "[<" tuple.exps ">]"
  165            | . "<" bitor-exps ">"
  166            | . dictionary
  167            | . tuple
  168 string: . "string"
  169       | . string "string"
  170 literal-exp: . "__HERE__"
  176 lvalue: . primary-exp "[" exps "]"
  177 literal-exp: . "this"
  178            | . "call"
  179 primary-exp: . literal-exp
  180            | . "(" exp ")"
  181            | . "(" error ")"
  182            | . primary-exp "**" primary-exp
  183 unary-exp: . primary-exp
  184          | . "--" lvalue
  185          | . "++" lvalue
  186          | . "+" unary-exp
  187          | . "-" unary-exp
  188          | . "!" unary-exp
  189          | . "compl" unary-exp
  190 bitor-exp: . unary-exp
  191          | . bitor-exp "+" bitor-exp
  192          | . bitor-exp "-" bitor-exp
  193          | . bitor-exp "*" bitor-exp
  194          | . bitor-exp "/" bitor-exp
  195          | . bitor-exp "%" bitor-exp
  196          | . bitor-exp "^" bitor-exp
  197          | . bitor-exp "<<" bitor-exp
  198          | . bitor-exp "bitand" bitor-exp
  199          | . bitor-exp "bitor" bitor-exp
  200          | . bitor-exp ">>" bitor-exp
  211 rel-exp: . bitor-exp rel-ops
  214 exp: . rel-exp
  215    | . exp "&&" exp
  216    | . exp "||" exp
  217    | . exp "in" exp
  218    | . exp "!" "in" exp
  222    | . "%unscope:" unsigned
  223 primary-exp: . "%exp:" unsigned
  224 lvalue: . "%lvalue:" unsigned
  225       | . "%id:" unsigned
  226       | . primary-exp "." "%id:" unsigned
  227 primary-exp: . lvalue "(" "%exps:" unsigned ")"

    "__HERE__"    shift, and go to state 7
    "closure"     shift, and go to state 9
    "const"       shift, and go to state 10
    "function"    shift, and go to state 13
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "[<"          shift, and go to state 19
    "var"         shift, and go to state 26
    "watch"       shift, and go to state 28
    "&"           shift, and go to state 30
    "identifier"  shift, and go to state 36
    "class"       shift, and go to state 37
    "package"     shift, and go to state 38
    "--"          shift, and go to state 42
    "++"          shift, and go to state 43
    "do"          shift, and go to state 44
    "assert"      shift, and go to state 45
    "detach"      shift, and go to state 46
    "disown"      shift, and go to state 47
    "new"         shift, and go to state 48
    "angle"       shift, and go to state 49
    "duration"    shift, and go to state 50
    "float"       shift, and go to state 51
    "string"      shift, and go to state 52
    "call"        shift, and go to state 53
    "this"        shift, and go to state 54
    "!"           shift, and go to state 55
    "compl"       shift, and go to state 56
    "-"           shift, and go to state 57
    "+"           shift, and go to state 58
    "<"           shift, and go to state 59
    "%unscope:"   shift, and go to state 60
    "%exp:"       shift, and go to state 61
    "%lvalue:"    shift, and go to state 62
    "%id:"        shift, and go to state 63

    block        go to state 68
    exp          go to state 423
    routine      go to state 101
    primary-exp  go to state 102
    detach       go to state 72
    lvalue       go to state 73
    id           go to state 103
    bitor-exp    go to state 75
    new          go to state 76
    float-exp    go to state 77
    duration     go to state 78
    dictionary   go to state 79
    tuple        go to state 80
    literal-exp  go to state 81
    string       go to state 82
    unary-exp    go to state 83
    rel-exp      go to state 84


state 362

   33 protos.1: proto .

    $default  reduce using rule 33 (protos.1)


state 363

   34 protos.1: protos.1 . "," proto
   36 protos: ":" protos.1 .  ["{"]

    ","  shift, and go to state 424

    $default  reduce using rule 36 (protos)


state 364

   37 exp: "class" lvalue protos block .

    $default  reduce using rule 37 (exp)


state 365

   38 exp: "package" lvalue protos block .

    $default  reduce using rule 38 (exp)


state 366

   43 stmt: "enum" id "{" id.0 . "}"

    "}"  shift, and go to state 425


state 367

   40 id.0: id.1 . comma.opt
   42 id.1: id.1 . "," id
  254 comma.opt: .  ["}"]
  255          | . ","

    ","  shift, and go to state 426

    $default  reduce using rule 254 (comma.opt)

    comma.opt  go to state 427


state 368

   41 id.1: id .

    $default  reduce using rule 41 (id.1)


state 369

   48 stmt: "external" "var" "identifier" "." . "identifier" from "identifier"

    "identifier"  shift, and go to state 428


state 370

   49 stmt: "external" event_or_function "(" unsigned . ")" "identifier" "." "identifier" from "identifier"

    ")"  shift, and go to state 429


state 371

   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
  119 primary-exp: "do" "(" exp ")" . block

    "{"  shift, and go to state 16

    block  go to state 430


state 372

  123 primary-exp: "assert" "{" claims "}" .

    $default  reduce using rule 123 (primary-exp)


state 373

   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   37 exp: . "class" lvalue protos block
   38    | . "package" lvalue protos block
   52 routine: . "closure"
   53        | . "function"
   62 exp: . exp "=" exp
   63    | . exp "=" exp modifiers
   64    | . lvalue "+=" exp
   65    | . lvalue "-=" exp
   66    | . lvalue "*=" exp
   67    | . lvalue "/=" exp
   68    | . lvalue "^=" exp
   69    | . lvalue "%=" exp
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
  118            | . block
  119            | . "do" "(" exp ")" block
  120 detach: . "detach"
  121       | . "disown"
  122 primary-exp: . "assert" "(" exp ")"
  123            | . "assert" "{" claims "}"
  124            | . detach "(" exp ")"
  125            | . detach block
  126            | . "isdef" "(" k1_id ")"
  127            | . "watch" "(" exp ")"
  128 lvalue: . id
  129       | . primary-exp "." id
  130       | . primary-exp "." "*"
  131 primary-exp: . "&" id
  132            | . primary-exp "." "&" id
  133 id: . "identifier"
  134 bitor-exp: . "var" bitor-exp
  135          | . "const" "var" bitor-exp
  136 primary-exp: . lvalue
  137            | . lvalue args
  138 new: . "new" "identifier" args.opt
  139 bitor-exp: . new
  140 id: . "new"
  141 primary-exp: . routine formals block
  142 float-exp: . "float"
  143 duration: . "duration"
  144         | . duration "duration"
  150 dictionary: . "[" assocs "]"
  154 tuple: . "(" tuple.exps ")"
  159 literal-exp: . float-exp
  160            | . "angle"
  161            | . duration
  162            | . string
  163            | . "[" exps "]"
  164            | . "[<" tuple.exps ">]"
  165            | . "<" bitor-exps ">"
  166            | . dictionary
  167            | . tuple
  168 string: . "string"
  169       | . string "string"
  170 literal-exp: . "__HERE__"
  176 lvalue: . primary-exp "[" exps "]"
  177 literal-exp: . "this"
  178            | . "call"
  179 primary-exp: . literal-exp
  180            | . "(" exp ")"
  181            | . "(" error ")"
  182            | . primary-exp "**" primary-exp
  183 unary-exp: . primary-exp
  184          | . "--" lvalue
  185          | . "++" lvalue
  186          | . "+" unary-exp
  187          | . "-" unary-exp
  188          | . "!" unary-exp
  189          | . "compl" unary-exp
  190 bitor-exp: . unary-exp
  191          | . bitor-exp "+" bitor-exp
  192          | . bitor-exp "-" bitor-exp
  193          | . bitor-exp "*" bitor-exp
  194          | . bitor-exp "/" bitor-exp
  195          | . bitor-exp "%" bitor-exp
  196          | . bitor-exp "^" bitor-exp
  197          | . bitor-exp "<<" bitor-exp
  198          | . bitor-exp "bitand" bitor-exp
  199          | . bitor-exp "bitor" bitor-exp
  200          | . bitor-exp ">>" bitor-exp
  211 rel-exp: . bitor-exp rel-ops
  214 exp: . rel-exp
  215    | . exp "&&" exp
  216    | . exp "||" exp
  217    | . exp "in" exp
  218    | . exp "!" "in" exp
  222    | . "%unscope:" unsigned
  223 primary-exp: . "%exp:" unsigned
  224 lvalue: . "%lvalue:" unsigned
  225       | . "%id:" unsigned
  226       | . primary-exp "." "%id:" unsigned
  227 primary-exp: . lvalue "(" "%exps:" unsigned ")"
  231 claims.1: claims.1 ";" . exp
  257 semi.opt: ";" .  ["}"]

    "__HERE__"    shift, and go to state 7
    "closure"     shift, and go to state 9
    "const"       shift, and go to state 10
    "function"    shift, and go to state 13
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "[<"          shift, and go to state 19
    "var"         shift, and go to state 26
    "watch"       shift, and go to state 28
    "&"           shift, and go to state 30
    "identifier"  shift, and go to state 36
    "class"       shift, and go to state 37
    "package"     shift, and go to state 38
    "--"          shift, and go to state 42
    "++"          shift, and go to state 43
    "do"          shift, and go to state 44
    "assert"      shift, and go to state 45
    "detach"      shift, and go to state 46
    "disown"      shift, and go to state 47
    "new"         shift, and go to state 48
    "angle"       shift, and go to state 49
    "duration"    shift, and go to state 50
    "float"       shift, and go to state 51
    "string"      shift, and go to state 52
    "call"        shift, and go to state 53
    "this"        shift, and go to state 54
    "!"           shift, and go to state 55
    "compl"       shift, and go to state 56
    "-"           shift, and go to state 57
    "+"           shift, and go to state 58
    "<"           shift, and go to state 59
    "%unscope:"   shift, and go to state 60
    "%exp:"       shift, and go to state 61
    "%lvalue:"    shift, and go to state 62
    "%id:"        shift, and go to state 63

    $default  reduce using rule 257 (semi.opt)

    block        go to state 68
    exp          go to state 431
    routine      go to state 101
    primary-exp  go to state 102
    detach       go to state 72
    lvalue       go to state 73
    id           go to state 103
    bitor-exp    go to state 75
    new          go to state 76
    float-exp    go to state 77
    duration     go to state 78
    dictionary   go to state 79
    tuple        go to state 80
    literal-exp  go to state 81
    string       go to state 82
    unary-exp    go to state 83
    rel-exp      go to state 84


state 374

  229 claims: claims.1 semi.opt .

    $default  reduce using rule 229 (claims)


state 375

  122 primary-exp: "assert" "(" exp ")" .

    $default  reduce using rule 122 (primary-exp)


state 376

  158 bitor-exps.1: bitor-exps.1 "," bitor-exp .  [",", ">"]
  191 bitor-exp: bitor-exp . "+" bitor-exp
  192          | bitor-exp . "-" bitor-exp
  193          | bitor-exp . "*" bitor-exp
  194          | bitor-exp . "/" bitor-exp
  195          | bitor-exp . "%" bitor-exp
  196          | bitor-exp . "^" bitor-exp
  197          | bitor-exp . "<<" bitor-exp
  198          | bitor-exp . "bitand" bitor-exp
  199          | bitor-exp . "bitor" bitor-exp
  200          | bitor-exp . ">>" bitor-exp

    "bitand"  shift, and go to state 195
    "bitor"   shift, and go to state 196
    "^"       shift, and go to state 197
    ">>"      shift, and go to state 198
    "<<"      shift, and go to state 199
    "-"       shift, and go to state 200
    "%"       shift, and go to state 201
    "+"       shift, and go to state 202
    "/"       shift, and go to state 203
    "*"       shift, and go to state 204

    $default  reduce using rule 158 (bitor-exps.1)


state 377

   59 modifier: "identifier" . ":" exp

    ":"  shift, and go to state 432


state 378

   60 modifiers: modifier .

    $default  reduce using rule 60 (modifiers)


state 379

   59 modifier: . "identifier" ":" exp
   61 modifiers: modifiers . modifier
   63 exp: exp "=" exp modifiers .  ["end of command", "=", "case", "catch", ":", "default", "else", "finally", "if", "in", "{", ">]", "onleave", "}", "]", ")", "~", ",", ";", "&", "|", "=>", "?", "!", "&&", "||"]

    "identifier"  shift, and go to state 377

    $default  reduce using rule 63 (exp)

    modifier  go to state 433

    Conflict between rule 63 and token "identifier" resolved as shift (ASSIGN < "identifier").


state 380

   62 exp: exp . "=" exp
   63    | exp . "=" exp modifiers
  215    | exp . "&&" exp
  216    | exp . "||" exp
  217    | exp . "in" exp
  218    | exp . "!" "in" exp
  218    | exp "!" "in" exp .  ["end of command", "=", "case", "catch", ":", "default", "else", "finally", "if", "{", ">]", "onleave", "}", "]", ")", "~", ",", ";", "&", "|", "identifier", "=>", "?", "&&", "||"]

    "!"  shift, and go to state 218

    "in"  error (nonassociative)

    $default  reduce using rule 218 (exp)

    Conflict between rule 218 and token "=" resolved as reduce ("=" < "in").
    Conflict between rule 218 and token "in" resolved as an error (%nonassoc "in").
    Conflict between rule 218 and token "!" resolved as shift ("in" < "!").
    Conflict between rule 218 and token "&&" resolved as reduce ("&&" < "in").
    Conflict between rule 218 and token "||" resolved as reduce ("||" < "in").


state 381

   51 stmt: exp "!" args.opt tilda.opt .

    $default  reduce using rule 51 (stmt)


state 382

  245 formal: . var.opt "identifier" typespec.opt
  246       | . var.opt "identifier" "=" exp typespec.opt
  247       | . var.opt "identifier" "[" "]"
  249 formals.1: formals.1 "," . formal
  255 comma.opt: "," .  [")"]
  258 var.opt: .  ["identifier"]
  259        | . "var"

    "var"  shift, and go to state 276

    "identifier"  reduce using rule 258 (var.opt)
    $default      reduce using rule 255 (comma.opt)

    formal   go to state 434
    var.opt  go to state 280


state 383

  251 formals.0: formals.1 comma.opt .

    $default  reduce using rule 251 (formals.0)


state 384

  253 formals: "(" formals.0 ")" .

    $default  reduce using rule 253 (formals)


state 385

  242 typespec: . ":" exp
  243 typespec.opt: .  [")", ","]
  244             | . typespec
  245 formal: var.opt "identifier" . typespec.opt
  246       | var.opt "identifier" . "=" exp typespec.opt
  247       | var.opt "identifier" . "[" "]"

    "="  shift, and go to state 435
    ":"  shift, and go to state 436
    "["  shift, and go to state 437

    $default  reduce using rule 243 (typespec.opt)

    typespec      go to state 438
    typespec.opt  go to state 439


state 386

   57 k1_id: "this" "." "identifier" .

    $default  reduce using rule 57 (k1_id)


state 387

   58 k1_id: k1_id "." "identifier" .

    $default  reduce using rule 58 (k1_id)


state 388

   54 stmt: routine k1_id formals block .

    $default  reduce using rule 54 (stmt)


state 389

  176 lvalue: primary-exp "[" exps "]" .

    $default  reduce using rule 176 (lvalue)


state 390

  132 primary-exp: primary-exp "." "&" id .

    $default  reduce using rule 132 (primary-exp)


state 391

  226 lvalue: primary-exp "." "%id:" unsigned .

    $default  reduce using rule 226 (lvalue)


state 392

  124 primary-exp: detach "(" exp ")" .

    $default  reduce using rule 124 (primary-exp)


state 393

  227 primary-exp: lvalue "(" "%exps:" unsigned . ")"

    ")"  shift, and go to state 440


state 394

  237 args: "(" exps ")" .

    $default  reduce using rule 237 (args)


state 395

   55 stmt: id id formals block .

    $default  reduce using rule 55 (stmt)


state 396

  191 bitor-exp: bitor-exp . "+" bitor-exp
  192          | bitor-exp . "-" bitor-exp
  193          | bitor-exp . "*" bitor-exp
  194          | bitor-exp . "/" bitor-exp
  195          | bitor-exp . "%" bitor-exp
  196          | bitor-exp . "^" bitor-exp
  197          | bitor-exp . "<<" bitor-exp
  198          | bitor-exp . "bitand" bitor-exp
  199          | bitor-exp . "bitor" bitor-exp
  200          | bitor-exp . ">>" bitor-exp
  213 rel-ops: rel-ops rel-op bitor-exp .  ["end of command", "=", "case", "catch", ":", "default", "else", "finally", "if", "in", "{", ">]", "onleave", "}", "]", ")", "~", ",", ";", "&", "|", "identifier", "=>", "?", "!", "=~=", "==", "===", ">=", ">", "<=", "<", "!=", "!==", "~=", "&&", "||"]

    "bitand"  shift, and go to state 195
    "bitor"   shift, and go to state 196
    "^"       shift, and go to state 197
    ">>"      shift, and go to state 198
    "<<"      shift, and go to state 199
    "-"       shift, and go to state 200
    "%"       shift, and go to state 201
    "+"       shift, and go to state 202
    "/"       shift, and go to state 203
    "*"       shift, and go to state 204

    $default  reduce using rule 213 (rel-ops)


state 397

   77 stmt: "freezeif" "(" exp ")" stmt .

    $default  reduce using rule 77 (stmt)


state 398

   76 stmt: "if" "(" stmts ")" stmt . else.opt
   90 else.opt: .  ["end of command", "case", "catch", "default", "finally", "onleave", "}", ")", ",", ";", "&", "|"]
   91         | . "else" stmt

    "else"  shift, and go to state 341

    $default  reduce using rule 90 (else.opt)

    else.opt  go to state 441

    Conflict between rule 90 and token "else" resolved as shift (EMPTY < "else").


state 399

   27 block: "{" id "~" id "}" .

    $default  reduce using rule 27 (block)


state 400

   78 stmt: "stopif" "(" exp ")" stmt .

    $default  reduce using rule 78 (stmt)


state 401

   79 stmt: "switch" "(" exp ")" "{" . cases default.opt "}"
   94 cases: .
   95      | . cases case

    $default  reduce using rule 94 (cases)

    cases  go to state 442


state 402

   80 stmt: "timeout" "(" exp ")" stmt . catch.opt else.opt finally.opt
  104 catch.opt: .  ["end of command", "case", "default", "else", "finally", "onleave", "}", ")", ",", ";", "&", "|"]
  105          | . "catch" block

    "catch"  shift, and go to state 443

    $default  reduce using rule 104 (catch.opt)

    catch.opt  go to state 444

    Conflict between rule 104 and token "catch" resolved as shift (EMPTY < "catch").


state 403

   62 exp: exp . "=" exp
   63    | exp . "=" exp modifiers
   99 match: exp .  [":", ")"]
  100      | exp . "if" exp
  215 exp: exp . "&&" exp
  216    | exp . "||" exp
  217    | exp . "in" exp
  218    | exp . "!" "in" exp

    "="   shift, and go to state 167
    "if"  shift, and go to state 445
    "in"  shift, and go to state 168
    "!"   shift, and go to state 218
    "&&"  shift, and go to state 170
    "||"  shift, and go to state 171

    $default  reduce using rule 99 (match)


state 404

  102 match.opt: "(" match . ")"

    ")"  shift, and go to state 446


state 405

  103 catch: "catch" match.opt block .

    $default  reduce using rule 103 (catch)


state 406

   91 else.opt: "else" stmt .

    $default  reduce using rule 91 (else.opt)


state 407

   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
  107 finally.opt: "finally" . block

    "{"  shift, and go to state 16

    block  go to state 447


state 408

  108 stmt: "try" block catches.1 else.opt finally.opt .

    $default  reduce using rule 108 (stmt)


state 409

   62 exp: exp . "=" exp
   63    | exp . "=" exp modifiers
  175 tilda.opt: "~" exp .  ["end of command", "case", "catch", "default", "else", "finally", "if", "onleave", "}", ")", ",", ";", "&", "|"]
  215 exp: exp . "&&" exp
  216    | exp . "||" exp
  217    | exp . "in" exp
  218    | exp . "!" "in" exp

    "="   shift, and go to state 167
    "in"  shift, and go to state 168
    "!"   shift, and go to state 218
    "&&"  shift, and go to state 170
    "||"  shift, and go to state 171

    $default  reduce using rule 175 (tilda.opt)


state 410

  171 event_match: exp "?" args.opt . tilda.opt guard.opt
  174 tilda.opt: .  ["if", ")"]
  175          | . "~" exp

    "~"  shift, and go to state 344

    $default  reduce using rule 174 (tilda.opt)

    tilda.opt  go to state 448


state 411

   84 stmt: "waituntil" "(" exp tilda.opt ")" .

    $default  reduce using rule 84 (stmt)


state 412

   23 stmt: . primary-exp ":" stmt
   24     | . exp
   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   37 exp: . "class" lvalue protos block
   38    | . "package" lvalue protos block
   43 stmt: . "enum" id "{" id.0 "}"
   47     | . "external" "identifier" "identifier"
   48     | . "external" "var" "identifier" "." "identifier" from "identifier"
   49     | . "external" event_or_function "(" unsigned ")" "identifier" "." "identifier" from "identifier"
   50     | . "import" lvalue
   51     | . exp "!" args.opt tilda.opt
   52 routine: . "closure"
   53        | . "function"
   54 stmt: . routine k1_id formals block
   55     | . id id formals block
   62 exp: . exp "=" exp
   63    | . exp "=" exp modifiers
   64    | . lvalue "+=" exp
   65    | . lvalue "-=" exp
   66    | . lvalue "*=" exp
   67    | . lvalue "/=" exp
   68    | . lvalue "^=" exp
   69    | . lvalue "%=" exp
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
   73 stmt: . "at" identifiers "(" exp tilda.opt ")" stmt onleave.opt
   74     | . "at" identifiers "(" event_match ")" stmt onleave.opt
   75     | . "every" "(" exp ")" stmt
   76     | . "if" "(" stmts ")" stmt else.opt
   77     | . "freezeif" "(" exp ")" stmt
   78     | . "stopif" "(" exp ")" stmt
   79     | . "switch" "(" exp ")" "{" cases default.opt "}"
   80     | . "timeout" "(" exp ")" stmt catch.opt else.opt finally.opt
   81     | . "return" exp.opt
   82     | . "break"
   83     | . "continue"
   84     | . "waituntil" "(" exp tilda.opt ")"
   85     | . "waituntil" "(" event_match ")"
   86     | . "whenever" "(" exp tilda.opt ")" stmt else.opt
   86     | "whenever" "(" exp tilda.opt ")" . stmt else.opt
   87     | . "whenever" "(" event_match ")" stmt else.opt
  108     | . "try" block catches.1 else.opt finally.opt
  109     | . "try" block "finally" block
  110     | . "throw" exp.opt
  111     | . "loop" stmt
  112     | . "for" "(" exp ")" stmt
  113     | . "for" "(" stmt.opt ";" exp ";" stmt.opt ")" stmt
  114     | . "for" "(" "var" "identifier" in_or_colon exp ")" stmt
  115     | . "while" "(" exp ")" stmt
  118 primary-exp: . block
  119            | . "do" "(" exp ")" block
  120 detach: . "detach"
  121       | . "disown"
  122 primary-exp: . "assert" "(" exp ")"
  123            | . "assert" "{" claims "}"
  124            | . detach "(" exp ")"
  125            | . detach block
  126            | . "isdef" "(" k1_id ")"
  127            | . "watch" "(" exp ")"
  128 lvalue: . id
  129       | . primary-exp "." id
  130       | . primary-exp "." "*"
  131 primary-exp: . "&" id
  132            | . primary-exp "." "&" id
  133 id: . "identifier"
  134 bitor-exp: . "var" bitor-exp
  135          | . "const" "var" bitor-exp
  136 primary-exp: . lvalue
  137            | . lvalue args
  138 new: . "new" "identifier" args.opt
  139 bitor-exp: . new
  140 id: . "new"
  141 primary-exp: . routine formals block
  142 float-exp: . "float"
  143 duration: . "duration"
  144         | . duration "duration"
  150 dictionary: . "[" assocs "]"
  154 tuple: . "(" tuple.exps ")"
  159 literal-exp: . float-exp
  160            | . "angle"
  161            | . duration
  162            | . string
  163            | . "[" exps "]"
  164            | . "[<" tuple.exps ">]"
  165            | . "<" bitor-exps ">"
  166            | . dictionary
  167            | . tuple
  168 string: . "string"
  169       | . string "string"
  170 literal-exp: . "__HERE__"
  176 lvalue: . primary-exp "[" exps "]"
  177 literal-exp: . "this"
  178            | . "call"
  179 primary-exp: . literal-exp
  180            | . "(" exp ")"
  181            | . "(" error ")"
  182            | . primary-exp "**" primary-exp
  183 unary-exp: . primary-exp
  184          | . "--" lvalue
  185          | . "++" lvalue
  186          | . "+" unary-exp
  187          | . "-" unary-exp
  188          | . "!" unary-exp
  189          | . "compl" unary-exp
  190 bitor-exp: . unary-exp
  191          | . bitor-exp "+" bitor-exp
  192          | . bitor-exp "-" bitor-exp
  193          | . bitor-exp "*" bitor-exp
  194          | . bitor-exp "/" bitor-exp
  195          | . bitor-exp "%" bitor-exp
  196          | . bitor-exp "^" bitor-exp
  197          | . bitor-exp "<<" bitor-exp
  198          | . bitor-exp "bitand" bitor-exp
  199          | . bitor-exp "bitor" bitor-exp
  200          | . bitor-exp ">>" bitor-exp
  211 rel-exp: . bitor-exp rel-ops
  214 exp: . rel-exp
  215    | . exp "&&" exp
  216    | . exp "||" exp
  217    | . exp "in" exp
  218    | . exp "!" "in" exp
  222    | . "%unscope:" unsigned
  223 primary-exp: . "%exp:" unsigned
  224 lvalue: . "%lvalue:" unsigned
  225       | . "%id:" unsigned
  226       | . primary-exp "." "%id:" unsigned
  227 primary-exp: . lvalue "(" "%exps:" unsigned ")"

    "__HERE__"    shift, and go to state 7
    "break"       shift, and go to state 8
    "closure"     shift, and go to state 9
    "const"       shift, and go to state 10
    "continue"    shift, and go to state 11
    "freezeif"    shift, and go to state 12
    "function"    shift, and go to state 13
    "if"          shift, and go to state 14
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "[<"          shift, and go to state 19
    "return"      shift, and go to state 20
    "stopif"      shift, and go to state 21
    "switch"      shift, and go to state 22
    "throw"       shift, and go to state 23
    "timeout"     shift, and go to state 24
    "try"         shift, and go to state 25
    "var"         shift, and go to state 26
    "waituntil"   shift, and go to state 27
    "watch"       shift, and go to state 28
    "whenever"    shift, and go to state 29
    "&"           shift, and go to state 30
    "every"       shift, and go to state 31
    "for"         shift, and go to state 32
    "loop"        shift, and go to state 33
    "while"       shift, and go to state 34
    "at"          shift, and go to state 35
    "identifier"  shift, and go to state 36
    "class"       shift, and go to state 37
    "package"     shift, and go to state 38
    "enum"        shift, and go to state 39
    "external"    shift, and go to state 40
    "import"      shift, and go to state 41
    "--"          shift, and go to state 42
    "++"          shift, and go to state 43
    "do"          shift, and go to state 44
    "assert"      shift, and go to state 45
    "detach"      shift, and go to state 46
    "disown"      shift, and go to state 47
    "new"         shift, and go to state 48
    "angle"       shift, and go to state 49
    "duration"    shift, and go to state 50
    "float"       shift, and go to state 51
    "string"      shift, and go to state 52
    "call"        shift, and go to state 53
    "this"        shift, and go to state 54
    "!"           shift, and go to state 55
    "compl"       shift, and go to state 56
    "-"           shift, and go to state 57
    "+"           shift, and go to state 58
    "<"           shift, and go to state 59
    "%unscope:"   shift, and go to state 60
    "%exp:"       shift, and go to state 61
    "%lvalue:"    shift, and go to state 62
    "%id:"        shift, and go to state 63

    stmt         go to state 449
    block        go to state 68
    exp          go to state 69
    routine      go to state 70
    primary-exp  go to state 71
    detach       go to state 72
    lvalue       go to state 73
    id           go to state 74
    bitor-exp    go to state 75
    new          go to state 76
    float-exp    go to state 77
    duration     go to state 78
    dictionary   go to state 79
    tuple        go to state 80
    literal-exp  go to state 81
    string       go to state 82
    unary-exp    go to state 83
    rel-exp      go to state 84


state 413

   87 stmt: "whenever" "(" event_match ")" stmt . else.opt
   90 else.opt: .  ["end of command", "case", "catch", "default", "finally", "onleave", "}", ")", ",", ";", "&", "|"]
   91         | . "else" stmt

    "else"  shift, and go to state 341

    $default  reduce using rule 90 (else.opt)

    else.opt  go to state 450

    Conflict between rule 90 and token "else" resolved as shift (EMPTY < "else").


state 414

   75 stmt: "every" "(" exp ")" stmt .

    $default  reduce using rule 75 (stmt)


state 415

  117 in_or_colon: ":" .

    $default  reduce using rule 117 (in_or_colon)


state 416

  116 in_or_colon: "in" .

    $default  reduce using rule 116 (in_or_colon)


state 417

   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   37 exp: . "class" lvalue protos block
   38    | . "package" lvalue protos block
   52 routine: . "closure"
   53        | . "function"
   62 exp: . exp "=" exp
   63    | . exp "=" exp modifiers
   64    | . lvalue "+=" exp
   65    | . lvalue "-=" exp
   66    | . lvalue "*=" exp
   67    | . lvalue "/=" exp
   68    | . lvalue "^=" exp
   69    | . lvalue "%=" exp
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
  114 stmt: "for" "(" "var" "identifier" in_or_colon . exp ")" stmt
  118 primary-exp: . block
  119            | . "do" "(" exp ")" block
  120 detach: . "detach"
  121       | . "disown"
  122 primary-exp: . "assert" "(" exp ")"
  123            | . "assert" "{" claims "}"
  124            | . detach "(" exp ")"
  125            | . detach block
  126            | . "isdef" "(" k1_id ")"
  127            | . "watch" "(" exp ")"
  128 lvalue: . id
  129       | . primary-exp "." id
  130       | . primary-exp "." "*"
  131 primary-exp: . "&" id
  132            | . primary-exp "." "&" id
  133 id: . "identifier"
  134 bitor-exp: . "var" bitor-exp
  135          | . "const" "var" bitor-exp
  136 primary-exp: . lvalue
  137            | . lvalue args
  138 new: . "new" "identifier" args.opt
  139 bitor-exp: . new
  140 id: . "new"
  141 primary-exp: . routine formals block
  142 float-exp: . "float"
  143 duration: . "duration"
  144         | . duration "duration"
  150 dictionary: . "[" assocs "]"
  154 tuple: . "(" tuple.exps ")"
  159 literal-exp: . float-exp
  160            | . "angle"
  161            | . duration
  162            | . string
  163            | . "[" exps "]"
  164            | . "[<" tuple.exps ">]"
  165            | . "<" bitor-exps ">"
  166            | . dictionary
  167            | . tuple
  168 string: . "string"
  169       | . string "string"
  170 literal-exp: . "__HERE__"
  176 lvalue: . primary-exp "[" exps "]"
  177 literal-exp: . "this"
  178            | . "call"
  179 primary-exp: . literal-exp
  180            | . "(" exp ")"
  181            | . "(" error ")"
  182            | . primary-exp "**" primary-exp
  183 unary-exp: . primary-exp
  184          | . "--" lvalue
  185          | . "++" lvalue
  186          | . "+" unary-exp
  187          | . "-" unary-exp
  188          | . "!" unary-exp
  189          | . "compl" unary-exp
  190 bitor-exp: . unary-exp
  191          | . bitor-exp "+" bitor-exp
  192          | . bitor-exp "-" bitor-exp
  193          | . bitor-exp "*" bitor-exp
  194          | . bitor-exp "/" bitor-exp
  195          | . bitor-exp "%" bitor-exp
  196          | . bitor-exp "^" bitor-exp
  197          | . bitor-exp "<<" bitor-exp
  198          | . bitor-exp "bitand" bitor-exp
  199          | . bitor-exp "bitor" bitor-exp
  200          | . bitor-exp ">>" bitor-exp
  211 rel-exp: . bitor-exp rel-ops
  214 exp: . rel-exp
  215    | . exp "&&" exp
  216    | . exp "||" exp
  217    | . exp "in" exp
  218    | . exp "!" "in" exp
  222    | . "%unscope:" unsigned
  223 primary-exp: . "%exp:" unsigned
  224 lvalue: . "%lvalue:" unsigned
  225       | . "%id:" unsigned
  226       | . primary-exp "." "%id:" unsigned
  227 primary-exp: . lvalue "(" "%exps:" unsigned ")"

    "__HERE__"    shift, and go to state 7
    "closure"     shift, and go to state 9
    "const"       shift, and go to state 10
    "function"    shift, and go to state 13
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "[<"          shift, and go to state 19
    "var"         shift, and go to state 26
    "watch"       shift, and go to state 28
    "&"           shift, and go to state 30
    "identifier"  shift, and go to state 36
    "class"       shift, and go to state 37
    "package"     shift, and go to state 38
    "--"          shift, and go to state 42
    "++"          shift, and go to state 43
    "do"          shift, and go to state 44
    "assert"      shift, and go to state 45
    "detach"      shift, and go to state 46
    "disown"      shift, and go to state 47
    "new"         shift, and go to state 48
    "angle"       shift, and go to state 49
    "duration"    shift, and go to state 50
    "float"       shift, and go to state 51
    "string"      shift, and go to state 52
    "call"        shift, and go to state 53
    "this"        shift, and go to state 54
    "!"           shift, and go to state 55
    "compl"       shift, and go to state 56
    "-"           shift, and go to state 57
    "+"           shift, and go to state 58
    "<"           shift, and go to state 59
    "%unscope:"   shift, and go to state 60
    "%exp:"       shift, and go to state 61
    "%lvalue:"    shift, and go to state 62
    "%id:"        shift, and go to state 63

    block        go to state 68
    exp          go to state 451
    routine      go to state 101
    primary-exp  go to state 102
    detach       go to state 72
    lvalue       go to state 73
    id           go to state 103
    bitor-exp    go to state 75
    new          go to state 76
    float-exp    go to state 77
    duration     go to state 78
    dictionary   go to state 79
    tuple        go to state 80
    literal-exp  go to state 81
    string       go to state 82
    unary-exp    go to state 83
    rel-exp      go to state 84


state 418

   62 exp: exp . "=" exp
   63    | exp . "=" exp modifiers
  113 stmt: "for" "(" stmt.opt ";" exp . ";" stmt.opt ")" stmt
  215 exp: exp . "&&" exp
  216    | exp . "||" exp
  217    | exp . "in" exp
  218    | exp . "!" "in" exp

    "="   shift, and go to state 167
    "in"  shift, and go to state 168
    ";"   shift, and go to state 452
    "!"   shift, and go to state 218
    "&&"  shift, and go to state 170
    "||"  shift, and go to state 171


state 419

  112 stmt: "for" "(" exp ")" stmt .

    $default  reduce using rule 112 (stmt)


state 420

  115 stmt: "while" "(" exp ")" stmt .

    $default  reduce using rule 115 (stmt)


state 421

   73 stmt: "at" identifiers "(" exp tilda.opt . ")" stmt onleave.opt

    ")"  shift, and go to state 453


state 422

   23 stmt: . primary-exp ":" stmt
   24     | . exp
   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   37 exp: . "class" lvalue protos block
   38    | . "package" lvalue protos block
   43 stmt: . "enum" id "{" id.0 "}"
   47     | . "external" "identifier" "identifier"
   48     | . "external" "var" "identifier" "." "identifier" from "identifier"
   49     | . "external" event_or_function "(" unsigned ")" "identifier" "." "identifier" from "identifier"
   50     | . "import" lvalue
   51     | . exp "!" args.opt tilda.opt
   52 routine: . "closure"
   53        | . "function"
   54 stmt: . routine k1_id formals block
   55     | . id id formals block
   62 exp: . exp "=" exp
   63    | . exp "=" exp modifiers
   64    | . lvalue "+=" exp
   65    | . lvalue "-=" exp
   66    | . lvalue "*=" exp
   67    | . lvalue "/=" exp
   68    | . lvalue "^=" exp
   69    | . lvalue "%=" exp
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
   73 stmt: . "at" identifiers "(" exp tilda.opt ")" stmt onleave.opt
   74     | . "at" identifiers "(" event_match ")" stmt onleave.opt
   74     | "at" identifiers "(" event_match ")" . stmt onleave.opt
   75     | . "every" "(" exp ")" stmt
   76     | . "if" "(" stmts ")" stmt else.opt
   77     | . "freezeif" "(" exp ")" stmt
   78     | . "stopif" "(" exp ")" stmt
   79     | . "switch" "(" exp ")" "{" cases default.opt "}"
   80     | . "timeout" "(" exp ")" stmt catch.opt else.opt finally.opt
   81     | . "return" exp.opt
   82     | . "break"
   83     | . "continue"
   84     | . "waituntil" "(" exp tilda.opt ")"
   85     | . "waituntil" "(" event_match ")"
   86     | . "whenever" "(" exp tilda.opt ")" stmt else.opt
   87     | . "whenever" "(" event_match ")" stmt else.opt
  108     | . "try" block catches.1 else.opt finally.opt
  109     | . "try" block "finally" block
  110     | . "throw" exp.opt
  111     | . "loop" stmt
  112     | . "for" "(" exp ")" stmt
  113     | . "for" "(" stmt.opt ";" exp ";" stmt.opt ")" stmt
  114     | . "for" "(" "var" "identifier" in_or_colon exp ")" stmt
  115     | . "while" "(" exp ")" stmt
  118 primary-exp: . block
  119            | . "do" "(" exp ")" block
  120 detach: . "detach"
  121       | . "disown"
  122 primary-exp: . "assert" "(" exp ")"
  123            | . "assert" "{" claims "}"
  124            | . detach "(" exp ")"
  125            | . detach block
  126            | . "isdef" "(" k1_id ")"
  127            | . "watch" "(" exp ")"
  128 lvalue: . id
  129       | . primary-exp "." id
  130       | . primary-exp "." "*"
  131 primary-exp: . "&" id
  132            | . primary-exp "." "&" id
  133 id: . "identifier"
  134 bitor-exp: . "var" bitor-exp
  135          | . "const" "var" bitor-exp
  136 primary-exp: . lvalue
  137            | . lvalue args
  138 new: . "new" "identifier" args.opt
  139 bitor-exp: . new
  140 id: . "new"
  141 primary-exp: . routine formals block
  142 float-exp: . "float"
  143 duration: . "duration"
  144         | . duration "duration"
  150 dictionary: . "[" assocs "]"
  154 tuple: . "(" tuple.exps ")"
  159 literal-exp: . float-exp
  160            | . "angle"
  161            | . duration
  162            | . string
  163            | . "[" exps "]"
  164            | . "[<" tuple.exps ">]"
  165            | . "<" bitor-exps ">"
  166            | . dictionary
  167            | . tuple
  168 string: . "string"
  169       | . string "string"
  170 literal-exp: . "__HERE__"
  176 lvalue: . primary-exp "[" exps "]"
  177 literal-exp: . "this"
  178            | . "call"
  179 primary-exp: . literal-exp
  180            | . "(" exp ")"
  181            | . "(" error ")"
  182            | . primary-exp "**" primary-exp
  183 unary-exp: . primary-exp
  184          | . "--" lvalue
  185          | . "++" lvalue
  186          | . "+" unary-exp
  187          | . "-" unary-exp
  188          | . "!" unary-exp
  189          | . "compl" unary-exp
  190 bitor-exp: . unary-exp
  191          | . bitor-exp "+" bitor-exp
  192          | . bitor-exp "-" bitor-exp
  193          | . bitor-exp "*" bitor-exp
  194          | . bitor-exp "/" bitor-exp
  195          | . bitor-exp "%" bitor-exp
  196          | . bitor-exp "^" bitor-exp
  197          | . bitor-exp "<<" bitor-exp
  198          | . bitor-exp "bitand" bitor-exp
  199          | . bitor-exp "bitor" bitor-exp
  200          | . bitor-exp ">>" bitor-exp
  211 rel-exp: . bitor-exp rel-ops
  214 exp: . rel-exp
  215    | . exp "&&" exp
  216    | . exp "||" exp
  217    | . exp "in" exp
  218    | . exp "!" "in" exp
  222    | . "%unscope:" unsigned
  223 primary-exp: . "%exp:" unsigned
  224 lvalue: . "%lvalue:" unsigned
  225       | . "%id:" unsigned
  226       | . primary-exp "." "%id:" unsigned
  227 primary-exp: . lvalue "(" "%exps:" unsigned ")"

    "__HERE__"    shift, and go to state 7
    "break"       shift, and go to state 8
    "closure"     shift, and go to state 9
    "const"       shift, and go to state 10
    "continue"    shift, and go to state 11
    "freezeif"    shift, and go to state 12
    "function"    shift, and go to state 13
    "if"          shift, and go to state 14
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "[<"          shift, and go to state 19
    "return"      shift, and go to state 20
    "stopif"      shift, and go to state 21
    "switch"      shift, and go to state 22
    "throw"       shift, and go to state 23
    "timeout"     shift, and go to state 24
    "try"         shift, and go to state 25
    "var"         shift, and go to state 26
    "waituntil"   shift, and go to state 27
    "watch"       shift, and go to state 28
    "whenever"    shift, and go to state 29
    "&"           shift, and go to state 30
    "every"       shift, and go to state 31
    "for"         shift, and go to state 32
    "loop"        shift, and go to state 33
    "while"       shift, and go to state 34
    "at"          shift, and go to state 35
    "identifier"  shift, and go to state 36
    "class"       shift, and go to state 37
    "package"     shift, and go to state 38
    "enum"        shift, and go to state 39
    "external"    shift, and go to state 40
    "import"      shift, and go to state 41
    "--"          shift, and go to state 42
    "++"          shift, and go to state 43
    "do"          shift, and go to state 44
    "assert"      shift, and go to state 45
    "detach"      shift, and go to state 46
    "disown"      shift, and go to state 47
    "new"         shift, and go to state 48
    "angle"       shift, and go to state 49
    "duration"    shift, and go to state 50
    "float"       shift, and go to state 51
    "string"      shift, and go to state 52
    "call"        shift, and go to state 53
    "this"        shift, and go to state 54
    "!"           shift, and go to state 55
    "compl"       shift, and go to state 56
    "-"           shift, and go to state 57
    "+"           shift, and go to state 58
    "<"           shift, and go to state 59
    "%unscope:"   shift, and go to state 60
    "%exp:"       shift, and go to state 61
    "%lvalue:"    shift, and go to state 62
    "%id:"        shift, and go to state 63

    stmt         go to state 454
    block        go to state 68
    exp          go to state 69
    routine      go to state 70
    primary-exp  go to state 71
    detach       go to state 72
    lvalue       go to state 73
    id           go to state 74
    bitor-exp    go to state 75
    new          go to state 76
    float-exp    go to state 77
    duration     go to state 78
    dictionary   go to state 79
    tuple        go to state 80
    literal-exp  go to state 81
    string       go to state 82
    unary-exp    go to state 83
    rel-exp      go to state 84


state 423

   32 proto: visibility exp .  ["{", ","]
   62 exp: exp . "=" exp
   63    | exp . "=" exp modifiers
  215    | exp . "&&" exp
  216    | exp . "||" exp
  217    | exp . "in" exp
  218    | exp . "!" "in" exp

    "="   shift, and go to state 167
    "in"  shift, and go to state 168
    "!"   shift, and go to state 218
    "&&"  shift, and go to state 170
    "||"  shift, and go to state 171

    $default  reduce using rule 32 (proto)


state 424

   28 visibility: .  ["__HERE__", "closure", "const", "function", "isdef", "{", "[", "(", "[<", "var", "watch", "&", "identifier", "class", "package", "--", "++", "do", "assert", "detach", "disown", "new", "angle", "duration", "float", "string", "call", "this", "!", "compl", "-", "+", "<", "%unscope:", "%exp:", "%lvalue:", "%id:"]
   29           | . "private"
   30           | . "protected"
   31           | . "public"
   32 proto: . visibility exp
   34 protos.1: protos.1 "," . proto

    "private"    shift, and go to state 358
    "protected"  shift, and go to state 359
    "public"     shift, and go to state 360

    $default  reduce using rule 28 (visibility)

    visibility  go to state 361
    proto       go to state 455


state 425

   43 stmt: "enum" id "{" id.0 "}" .

    $default  reduce using rule 43 (stmt)


state 426

   42 id.1: id.1 "," . id
  133 id: . "identifier"
  140   | . "new"
  255 comma.opt: "," .  ["}"]

    "identifier"  shift, and go to state 36
    "new"         shift, and go to state 128

    $default  reduce using rule 255 (comma.opt)

    id  go to state 456


state 427

   40 id.0: id.1 comma.opt .

    $default  reduce using rule 40 (id.0)


state 428

   44 from: . "identifier"
   48 stmt: "external" "var" "identifier" "." "identifier" . from "identifier"

    "identifier"  shift, and go to state 457

    from  go to state 458


state 429

   49 stmt: "external" event_or_function "(" unsigned ")" . "identifier" "." "identifier" from "identifier"

    "identifier"  shift, and go to state 459


state 430

  119 primary-exp: "do" "(" exp ")" block .

    $default  reduce using rule 119 (primary-exp)


state 431

   62 exp: exp . "=" exp
   63    | exp . "=" exp modifiers
  215    | exp . "&&" exp
  216    | exp . "||" exp
  217    | exp . "in" exp
  218    | exp . "!" "in" exp
  231 claims.1: claims.1 ";" exp .  ["}", ";"]

    "="   shift, and go to state 167
    "in"  shift, and go to state 168
    "!"   shift, and go to state 218
    "&&"  shift, and go to state 170
    "||"  shift, and go to state 171

    $default  reduce using rule 231 (claims.1)


state 432

   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   37 exp: . "class" lvalue protos block
   38    | . "package" lvalue protos block
   52 routine: . "closure"
   53        | . "function"
   59 modifier: "identifier" ":" . exp
   62 exp: . exp "=" exp
   63    | . exp "=" exp modifiers
   64    | . lvalue "+=" exp
   65    | . lvalue "-=" exp
   66    | . lvalue "*=" exp
   67    | . lvalue "/=" exp
   68    | . lvalue "^=" exp
   69    | . lvalue "%=" exp
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
  118            | . block
  119            | . "do" "(" exp ")" block
  120 detach: . "detach"
  121       | . "disown"
  122 primary-exp: . "assert" "(" exp ")"
  123            | . "assert" "{" claims "}"
  124            | . detach "(" exp ")"
  125            | . detach block
  126            | . "isdef" "(" k1_id ")"
  127            | . "watch" "(" exp ")"
  128 lvalue: . id
  129       | . primary-exp "." id
  130       | . primary-exp "." "*"
  131 primary-exp: . "&" id
  132            | . primary-exp "." "&" id
  133 id: . "identifier"
  134 bitor-exp: . "var" bitor-exp
  135          | . "const" "var" bitor-exp
  136 primary-exp: . lvalue
  137            | . lvalue args
  138 new: . "new" "identifier" args.opt
  139 bitor-exp: . new
  140 id: . "new"
  141 primary-exp: . routine formals block
  142 float-exp: . "float"
  143 duration: . "duration"
  144         | . duration "duration"
  150 dictionary: . "[" assocs "]"
  154 tuple: . "(" tuple.exps ")"
  159 literal-exp: . float-exp
  160            | . "angle"
  161            | . duration
  162            | . string
  163            | . "[" exps "]"
  164            | . "[<" tuple.exps ">]"
  165            | . "<" bitor-exps ">"
  166            | . dictionary
  167            | . tuple
  168 string: . "string"
  169       | . string "string"
  170 literal-exp: . "__HERE__"
  176 lvalue: . primary-exp "[" exps "]"
  177 literal-exp: . "this"
  178            | . "call"
  179 primary-exp: . literal-exp
  180            | . "(" exp ")"
  181            | . "(" error ")"
  182            | . primary-exp "**" primary-exp
  183 unary-exp: . primary-exp
  184          | . "--" lvalue
  185          | . "++" lvalue
  186          | . "+" unary-exp
  187          | . "-" unary-exp
  188          | . "!" unary-exp
  189          | . "compl" unary-exp
  190 bitor-exp: . unary-exp
  191          | . bitor-exp "+" bitor-exp
  192          | . bitor-exp "-" bitor-exp
  193          | . bitor-exp "*" bitor-exp
  194          | . bitor-exp "/" bitor-exp
  195          | . bitor-exp "%" bitor-exp
  196          | . bitor-exp "^" bitor-exp
  197          | . bitor-exp "<<" bitor-exp
  198          | . bitor-exp "bitand" bitor-exp
  199          | . bitor-exp "bitor" bitor-exp
  200          | . bitor-exp ">>" bitor-exp
  211 rel-exp: . bitor-exp rel-ops
  214 exp: . rel-exp
  215    | . exp "&&" exp
  216    | . exp "||" exp
  217    | . exp "in" exp
  218    | . exp "!" "in" exp
  222    | . "%unscope:" unsigned
  223 primary-exp: . "%exp:" unsigned
  224 lvalue: . "%lvalue:" unsigned
  225       | . "%id:" unsigned
  226       | . primary-exp "." "%id:" unsigned
  227 primary-exp: . lvalue "(" "%exps:" unsigned ")"

    "__HERE__"    shift, and go to state 7
    "closure"     shift, and go to state 9
    "const"       shift, and go to state 10
    "function"    shift, and go to state 13
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "[<"          shift, and go to state 19
    "var"         shift, and go to state 26
    "watch"       shift, and go to state 28
    "&"           shift, and go to state 30
    "identifier"  shift, and go to state 36
    "class"       shift, and go to state 37
    "package"     shift, and go to state 38
    "--"          shift, and go to state 42
    "++"          shift, and go to state 43
    "do"          shift, and go to state 44
    "assert"      shift, and go to state 45
    "detach"      shift, and go to state 46
    "disown"      shift, and go to state 47
    "new"         shift, and go to state 48
    "angle"       shift, and go to state 49
    "duration"    shift, and go to state 50
    "float"       shift, and go to state 51
    "string"      shift, and go to state 52
    "call"        shift, and go to state 53
    "this"        shift, and go to state 54
    "!"           shift, and go to state 55
    "compl"       shift, and go to state 56
    "-"           shift, and go to state 57
    "+"           shift, and go to state 58
    "<"           shift, and go to state 59
    "%unscope:"   shift, and go to state 60
    "%exp:"       shift, and go to state 61
    "%lvalue:"    shift, and go to state 62
    "%id:"        shift, and go to state 63

    block        go to state 68
    exp          go to state 460
    routine      go to state 101
    primary-exp  go to state 102
    detach       go to state 72
    lvalue       go to state 73
    id           go to state 103
    bitor-exp    go to state 75
    new          go to state 76
    float-exp    go to state 77
    duration     go to state 78
    dictionary   go to state 79
    tuple        go to state 80
    literal-exp  go to state 81
    string       go to state 82
    unary-exp    go to state 83
    rel-exp      go to state 84


state 433

   61 modifiers: modifiers modifier .

    $default  reduce using rule 61 (modifiers)


state 434

  249 formals.1: formals.1 "," formal .

    $default  reduce using rule 249 (formals.1)


state 435

   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   37 exp: . "class" lvalue protos block
   38    | . "package" lvalue protos block
   52 routine: . "closure"
   53        | . "function"
   62 exp: . exp "=" exp
   63    | . exp "=" exp modifiers
   64    | . lvalue "+=" exp
   65    | . lvalue "-=" exp
   66    | . lvalue "*=" exp
   67    | . lvalue "/=" exp
   68    | . lvalue "^=" exp
   69    | . lvalue "%=" exp
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
  118            | . block
  119            | . "do" "(" exp ")" block
  120 detach: . "detach"
  121       | . "disown"
  122 primary-exp: . "assert" "(" exp ")"
  123            | . "assert" "{" claims "}"
  124            | . detach "(" exp ")"
  125            | . detach block
  126            | . "isdef" "(" k1_id ")"
  127            | . "watch" "(" exp ")"
  128 lvalue: . id
  129       | . primary-exp "." id
  130       | . primary-exp "." "*"
  131 primary-exp: . "&" id
  132            | . primary-exp "." "&" id
  133 id: . "identifier"
  134 bitor-exp: . "var" bitor-exp
  135          | . "const" "var" bitor-exp
  136 primary-exp: . lvalue
  137            | . lvalue args
  138 new: . "new" "identifier" args.opt
  139 bitor-exp: . new
  140 id: . "new"
  141 primary-exp: . routine formals block
  142 float-exp: . "float"
  143 duration: . "duration"
  144         | . duration "duration"
  150 dictionary: . "[" assocs "]"
  154 tuple: . "(" tuple.exps ")"
  159 literal-exp: . float-exp
  160            | . "angle"
  161            | . duration
  162            | . string
  163            | . "[" exps "]"
  164            | . "[<" tuple.exps ">]"
  165            | . "<" bitor-exps ">"
  166            | . dictionary
  167            | . tuple
  168 string: . "string"
  169       | . string "string"
  170 literal-exp: . "__HERE__"
  176 lvalue: . primary-exp "[" exps "]"
  177 literal-exp: . "this"
  178            | . "call"
  179 primary-exp: . literal-exp
  180            | . "(" exp ")"
  181            | . "(" error ")"
  182            | . primary-exp "**" primary-exp
  183 unary-exp: . primary-exp
  184          | . "--" lvalue
  185          | . "++" lvalue
  186          | . "+" unary-exp
  187          | . "-" unary-exp
  188          | . "!" unary-exp
  189          | . "compl" unary-exp
  190 bitor-exp: . unary-exp
  191          | . bitor-exp "+" bitor-exp
  192          | . bitor-exp "-" bitor-exp
  193          | . bitor-exp "*" bitor-exp
  194          | . bitor-exp "/" bitor-exp
  195          | . bitor-exp "%" bitor-exp
  196          | . bitor-exp "^" bitor-exp
  197          | . bitor-exp "<<" bitor-exp
  198          | . bitor-exp "bitand" bitor-exp
  199          | . bitor-exp "bitor" bitor-exp
  200          | . bitor-exp ">>" bitor-exp
  211 rel-exp: . bitor-exp rel-ops
  214 exp: . rel-exp
  215    | . exp "&&" exp
  216    | . exp "||" exp
  217    | . exp "in" exp
  218    | . exp "!" "in" exp
  222    | . "%unscope:" unsigned
  223 primary-exp: . "%exp:" unsigned
  224 lvalue: . "%lvalue:" unsigned
  225       | . "%id:" unsigned
  226       | . primary-exp "." "%id:" unsigned
  227 primary-exp: . lvalue "(" "%exps:" unsigned ")"
  246 formal: var.opt "identifier" "=" . exp typespec.opt

    "__HERE__"    shift, and go to state 7
    "closure"     shift, and go to state 9
    "const"       shift, and go to state 10
    "function"    shift, and go to state 13
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "[<"          shift, and go to state 19
    "var"         shift, and go to state 26
    "watch"       shift, and go to state 28
    "&"           shift, and go to state 30
    "identifier"  shift, and go to state 36
    "class"       shift, and go to state 37
    "package"     shift, and go to state 38
    "--"          shift, and go to state 42
    "++"          shift, and go to state 43
    "do"          shift, and go to state 44
    "assert"      shift, and go to state 45
    "detach"      shift, and go to state 46
    "disown"      shift, and go to state 47
    "new"         shift, and go to state 48
    "angle"       shift, and go to state 49
    "duration"    shift, and go to state 50
    "float"       shift, and go to state 51
    "string"      shift, and go to state 52
    "call"        shift, and go to state 53
    "this"        shift, and go to state 54
    "!"           shift, and go to state 55
    "compl"       shift, and go to state 56
    "-"           shift, and go to state 57
    "+"           shift, and go to state 58
    "<"           shift, and go to state 59
    "%unscope:"   shift, and go to state 60
    "%exp:"       shift, and go to state 61
    "%lvalue:"    shift, and go to state 62
    "%id:"        shift, and go to state 63

    block        go to state 68
    exp          go to state 461
    routine      go to state 101
    primary-exp  go to state 102
    detach       go to state 72
    lvalue       go to state 73
    id           go to state 103
    bitor-exp    go to state 75
    new          go to state 76
    float-exp    go to state 77
    duration     go to state 78
    dictionary   go to state 79
    tuple        go to state 80
    literal-exp  go to state 81
    string       go to state 82
    unary-exp    go to state 83
    rel-exp      go to state 84


state 436

   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   37 exp: . "class" lvalue protos block
   38    | . "package" lvalue protos block
   52 routine: . "closure"
   53        | . "function"
   62 exp: . exp "=" exp
   63    | . exp "=" exp modifiers
   64    | . lvalue "+=" exp
   65    | . lvalue "-=" exp
   66    | . lvalue "*=" exp
   67    | . lvalue "/=" exp
   68    | . lvalue "^=" exp
   69    | . lvalue "%=" exp
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
  118            | . block
  119            | . "do" "(" exp ")" block
  120 detach: . "detach"
  121       | . "disown"
  122 primary-exp: . "assert" "(" exp ")"
  123            | . "assert" "{" claims "}"
  124            | . detach "(" exp ")"
  125            | . detach block
  126            | . "isdef" "(" k1_id ")"
  127            | . "watch" "(" exp ")"
  128 lvalue: . id
  129       | . primary-exp "." id
  130       | . primary-exp "." "*"
  131 primary-exp: . "&" id
  132            | . primary-exp "." "&" id
  133 id: . "identifier"
  134 bitor-exp: . "var" bitor-exp
  135          | . "const" "var" bitor-exp
  136 primary-exp: . lvalue
  137            | . lvalue args
  138 new: . "new" "identifier" args.opt
  139 bitor-exp: . new
  140 id: . "new"
  141 primary-exp: . routine formals block
  142 float-exp: . "float"
  143 duration: . "duration"
  144         | . duration "duration"
  150 dictionary: . "[" assocs "]"
  154 tuple: . "(" tuple.exps ")"
  159 literal-exp: . float-exp
  160            | . "angle"
  161            | . duration
  162            | . string
  163            | . "[" exps "]"
  164            | . "[<" tuple.exps ">]"
  165            | . "<" bitor-exps ">"
  166            | . dictionary
  167            | . tuple
  168 string: . "string"
  169       | . string "string"
  170 literal-exp: . "__HERE__"
  176 lvalue: . primary-exp "[" exps "]"
  177 literal-exp: . "this"
  178            | . "call"
  179 primary-exp: . literal-exp
  180            | . "(" exp ")"
  181            | . "(" error ")"
  182            | . primary-exp "**" primary-exp
  183 unary-exp: . primary-exp
  184          | . "--" lvalue
  185          | . "++" lvalue
  186          | . "+" unary-exp
  187          | . "-" unary-exp
  188          | . "!" unary-exp
  189          | . "compl" unary-exp
  190 bitor-exp: . unary-exp
  191          | . bitor-exp "+" bitor-exp
  192          | . bitor-exp "-" bitor-exp
  193          | . bitor-exp "*" bitor-exp
  194          | . bitor-exp "/" bitor-exp
  195          | . bitor-exp "%" bitor-exp
  196          | . bitor-exp "^" bitor-exp
  197          | . bitor-exp "<<" bitor-exp
  198          | . bitor-exp "bitand" bitor-exp
  199          | . bitor-exp "bitor" bitor-exp
  200          | . bitor-exp ">>" bitor-exp
  211 rel-exp: . bitor-exp rel-ops
  214 exp: . rel-exp
  215    | . exp "&&" exp
  216    | . exp "||" exp
  217    | . exp "in" exp
  218    | . exp "!" "in" exp
  222    | . "%unscope:" unsigned
  223 primary-exp: . "%exp:" unsigned
  224 lvalue: . "%lvalue:" unsigned
  225       | . "%id:" unsigned
  226       | . primary-exp "." "%id:" unsigned
  227 primary-exp: . lvalue "(" "%exps:" unsigned ")"
  242 typespec: ":" . exp

    "__HERE__"    shift, and go to state 7
    "closure"     shift, and go to state 9
    "const"       shift, and go to state 10
    "function"    shift, and go to state 13
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "[<"          shift, and go to state 19
    "var"         shift, and go to state 26
    "watch"       shift, and go to state 28
    "&"           shift, and go to state 30
    "identifier"  shift, and go to state 36
    "class"       shift, and go to state 37
    "package"     shift, and go to state 38
    "--"          shift, and go to state 42
    "++"          shift, and go to state 43
    "do"          shift, and go to state 44
    "assert"      shift, and go to state 45
    "detach"      shift, and go to state 46
    "disown"      shift, and go to state 47
    "new"         shift, and go to state 48
    "angle"       shift, and go to state 49
    "duration"    shift, and go to state 50
    "float"       shift, and go to state 51
    "string"      shift, and go to state 52
    "call"        shift, and go to state 53
    "this"        shift, and go to state 54
    "!"           shift, and go to state 55
    "compl"       shift, and go to state 56
    "-"           shift, and go to state 57
    "+"           shift, and go to state 58
    "<"           shift, and go to state 59
    "%unscope:"   shift, and go to state 60
    "%exp:"       shift, and go to state 61
    "%lvalue:"    shift, and go to state 62
    "%id:"        shift, and go to state 63

    block        go to state 68
    exp          go to state 462
    routine      go to state 101
    primary-exp  go to state 102
    detach       go to state 72
    lvalue       go to state 73
    id           go to state 103
    bitor-exp    go to state 75
    new          go to state 76
    float-exp    go to state 77
    duration     go to state 78
    dictionary   go to state 79
    tuple        go to state 80
    literal-exp  go to state 81
    string       go to state 82
    unary-exp    go to state 83
    rel-exp      go to state 84


state 437

  247 formal: var.opt "identifier" "[" . "]"

    "]"  shift, and go to state 463


state 438

  244 typespec.opt: typespec .

    $default  reduce using rule 244 (typespec.opt)


state 439

  245 formal: var.opt "identifier" typespec.opt .

    $default  reduce using rule 245 (formal)


state 440

  227 primary-exp: lvalue "(" "%exps:" unsigned ")" .

    $default  reduce using rule 227 (primary-exp)


state 441

   76 stmt: "if" "(" stmts ")" stmt else.opt .

    $default  reduce using rule 76 (stmt)


state 442

   79 stmt: "switch" "(" exp ")" "{" cases . default.opt "}"
   88 default.opt: .  ["}"]
   89            | . "default" ":" stmts
   95 cases: cases . case
   96 case: . "case" match ":" stmts

    "case"     shift, and go to state 464
    "default"  shift, and go to state 465

    $default  reduce using rule 88 (default.opt)

    default.opt  go to state 466
    case         go to state 467


state 443

   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
  105 catch.opt: "catch" . block

    "{"  shift, and go to state 16

    block  go to state 468


state 444

   80 stmt: "timeout" "(" exp ")" stmt catch.opt . else.opt finally.opt
   90 else.opt: .  ["end of command", "case", "catch", "default", "finally", "onleave", "}", ")", ",", ";", "&", "|"]
   91         | . "else" stmt

    "else"  shift, and go to state 341

    $default  reduce using rule 90 (else.opt)

    else.opt  go to state 469

    Conflict between rule 90 and token "else" resolved as shift (EMPTY < "else").


state 445

   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   37 exp: . "class" lvalue protos block
   38    | . "package" lvalue protos block
   52 routine: . "closure"
   53        | . "function"
   62 exp: . exp "=" exp
   63    | . exp "=" exp modifiers
   64    | . lvalue "+=" exp
   65    | . lvalue "-=" exp
   66    | . lvalue "*=" exp
   67    | . lvalue "/=" exp
   68    | . lvalue "^=" exp
   69    | . lvalue "%=" exp
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
  100 match: exp "if" . exp
  118 primary-exp: . block
  119            | . "do" "(" exp ")" block
  120 detach: . "detach"
  121       | . "disown"
  122 primary-exp: . "assert" "(" exp ")"
  123            | . "assert" "{" claims "}"
  124            | . detach "(" exp ")"
  125            | . detach block
  126            | . "isdef" "(" k1_id ")"
  127            | . "watch" "(" exp ")"
  128 lvalue: . id
  129       | . primary-exp "." id
  130       | . primary-exp "." "*"
  131 primary-exp: . "&" id
  132            | . primary-exp "." "&" id
  133 id: . "identifier"
  134 bitor-exp: . "var" bitor-exp
  135          | . "const" "var" bitor-exp
  136 primary-exp: . lvalue
  137            | . lvalue args
  138 new: . "new" "identifier" args.opt
  139 bitor-exp: . new
  140 id: . "new"
  141 primary-exp: . routine formals block
  142 float-exp: . "float"
  143 duration: . "duration"
  144         | . duration "duration"
  150 dictionary: . "[" assocs "]"
  154 tuple: . "(" tuple.exps ")"
  159 literal-exp: . float-exp
  160            | . "angle"
  161            | . duration
  162            | . string
  163            | . "[" exps "]"
  164            | . "[<" tuple.exps ">]"
  165            | . "<" bitor-exps ">"
  166            | . dictionary
  167            | . tuple
  168 string: . "string"
  169       | . string "string"
  170 literal-exp: . "__HERE__"
  176 lvalue: . primary-exp "[" exps "]"
  177 literal-exp: . "this"
  178            | . "call"
  179 primary-exp: . literal-exp
  180            | . "(" exp ")"
  181            | . "(" error ")"
  182            | . primary-exp "**" primary-exp
  183 unary-exp: . primary-exp
  184          | . "--" lvalue
  185          | . "++" lvalue
  186          | . "+" unary-exp
  187          | . "-" unary-exp
  188          | . "!" unary-exp
  189          | . "compl" unary-exp
  190 bitor-exp: . unary-exp
  191          | . bitor-exp "+" bitor-exp
  192          | . bitor-exp "-" bitor-exp
  193          | . bitor-exp "*" bitor-exp
  194          | . bitor-exp "/" bitor-exp
  195          | . bitor-exp "%" bitor-exp
  196          | . bitor-exp "^" bitor-exp
  197          | . bitor-exp "<<" bitor-exp
  198          | . bitor-exp "bitand" bitor-exp
  199          | . bitor-exp "bitor" bitor-exp
  200          | . bitor-exp ">>" bitor-exp
  211 rel-exp: . bitor-exp rel-ops
  214 exp: . rel-exp
  215    | . exp "&&" exp
  216    | . exp "||" exp
  217    | . exp "in" exp
  218    | . exp "!" "in" exp
  222    | . "%unscope:" unsigned
  223 primary-exp: . "%exp:" unsigned
  224 lvalue: . "%lvalue:" unsigned
  225       | . "%id:" unsigned
  226       | . primary-exp "." "%id:" unsigned
  227 primary-exp: . lvalue "(" "%exps:" unsigned ")"

    "__HERE__"    shift, and go to state 7
    "closure"     shift, and go to state 9
    "const"       shift, and go to state 10
    "function"    shift, and go to state 13
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "[<"          shift, and go to state 19
    "var"         shift, and go to state 26
    "watch"       shift, and go to state 28
    "&"           shift, and go to state 30
    "identifier"  shift, and go to state 36
    "class"       shift, and go to state 37
    "package"     shift, and go to state 38
    "--"          shift, and go to state 42
    "++"          shift, and go to state 43
    "do"          shift, and go to state 44
    "assert"      shift, and go to state 45
    "detach"      shift, and go to state 46
    "disown"      shift, and go to state 47
    "new"         shift, and go to state 48
    "angle"       shift, and go to state 49
    "duration"    shift, and go to state 50
    "float"       shift, and go to state 51
    "string"      shift, and go to state 52
    "call"        shift, and go to state 53
    "this"        shift, and go to state 54
    "!"           shift, and go to state 55
    "compl"       shift, and go to state 56
    "-"           shift, and go to state 57
    "+"           shift, and go to state 58
    "<"           shift, and go to state 59
    "%unscope:"   shift, and go to state 60
    "%exp:"       shift, and go to state 61
    "%lvalue:"    shift, and go to state 62
    "%id:"        shift, and go to state 63

    block        go to state 68
    exp          go to state 470
    routine      go to state 101
    primary-exp  go to state 102
    detach       go to state 72
    lvalue       go to state 73
    id           go to state 103
    bitor-exp    go to state 75
    new          go to state 76
    float-exp    go to state 77
    duration     go to state 78
    dictionary   go to state 79
    tuple        go to state 80
    literal-exp  go to state 81
    string       go to state 82
    unary-exp    go to state 83
    rel-exp      go to state 84


state 446

  102 match.opt: "(" match ")" .

    $default  reduce using rule 102 (match.opt)


state 447

  107 finally.opt: "finally" block .

    $default  reduce using rule 107 (finally.opt)


state 448

  171 event_match: exp "?" args.opt tilda.opt . guard.opt
  172 guard.opt: .  [")"]
  173          | . "if" exp

    "if"  shift, and go to state 471

    $default  reduce using rule 172 (guard.opt)

    guard.opt  go to state 472


state 449

   86 stmt: "whenever" "(" exp tilda.opt ")" stmt . else.opt
   90 else.opt: .  ["end of command", "case", "catch", "default", "finally", "onleave", "}", ")", ",", ";", "&", "|"]
   91         | . "else" stmt

    "else"  shift, and go to state 341

    $default  reduce using rule 90 (else.opt)

    else.opt  go to state 473

    Conflict between rule 90 and token "else" resolved as shift (EMPTY < "else").


state 450

   87 stmt: "whenever" "(" event_match ")" stmt else.opt .

    $default  reduce using rule 87 (stmt)


state 451

   62 exp: exp . "=" exp
   63    | exp . "=" exp modifiers
  114 stmt: "for" "(" "var" "identifier" in_or_colon exp . ")" stmt
  215 exp: exp . "&&" exp
  216    | exp . "||" exp
  217    | exp . "in" exp
  218    | exp . "!" "in" exp

    "="   shift, and go to state 167
    "in"  shift, and go to state 168
    ")"   shift, and go to state 474
    "!"   shift, and go to state 218
    "&&"  shift, and go to state 170
    "||"  shift, and go to state 171


state 452

   21 stmt.opt: .  [")"]
   22         | . stmt
   23 stmt: . primary-exp ":" stmt
   24     | . exp
   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   37 exp: . "class" lvalue protos block
   38    | . "package" lvalue protos block
   43 stmt: . "enum" id "{" id.0 "}"
   47     | . "external" "identifier" "identifier"
   48     | . "external" "var" "identifier" "." "identifier" from "identifier"
   49     | . "external" event_or_function "(" unsigned ")" "identifier" "." "identifier" from "identifier"
   50     | . "import" lvalue
   51     | . exp "!" args.opt tilda.opt
   52 routine: . "closure"
   53        | . "function"
   54 stmt: . routine k1_id formals block
   55     | . id id formals block
   62 exp: . exp "=" exp
   63    | . exp "=" exp modifiers
   64    | . lvalue "+=" exp
   65    | . lvalue "-=" exp
   66    | . lvalue "*=" exp
   67    | . lvalue "/=" exp
   68    | . lvalue "^=" exp
   69    | . lvalue "%=" exp
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
   73 stmt: . "at" identifiers "(" exp tilda.opt ")" stmt onleave.opt
   74     | . "at" identifiers "(" event_match ")" stmt onleave.opt
   75     | . "every" "(" exp ")" stmt
   76     | . "if" "(" stmts ")" stmt else.opt
   77     | . "freezeif" "(" exp ")" stmt
   78     | . "stopif" "(" exp ")" stmt
   79     | . "switch" "(" exp ")" "{" cases default.opt "}"
   80     | . "timeout" "(" exp ")" stmt catch.opt else.opt finally.opt
   81     | . "return" exp.opt
   82     | . "break"
   83     | . "continue"
   84     | . "waituntil" "(" exp tilda.opt ")"
   85     | . "waituntil" "(" event_match ")"
   86     | . "whenever" "(" exp tilda.opt ")" stmt else.opt
   87     | . "whenever" "(" event_match ")" stmt else.opt
  108     | . "try" block catches.1 else.opt finally.opt
  109     | . "try" block "finally" block
  110     | . "throw" exp.opt
  111     | . "loop" stmt
  112     | . "for" "(" exp ")" stmt
  113     | . "for" "(" stmt.opt ";" exp ";" stmt.opt ")" stmt
  113     | "for" "(" stmt.opt ";" exp ";" . stmt.opt ")" stmt
  114     | . "for" "(" "var" "identifier" in_or_colon exp ")" stmt
  115     | . "while" "(" exp ")" stmt
  118 primary-exp: . block
  119            | . "do" "(" exp ")" block
  120 detach: . "detach"
  121       | . "disown"
  122 primary-exp: . "assert" "(" exp ")"
  123            | . "assert" "{" claims "}"
  124            | . detach "(" exp ")"
  125            | . detach block
  126            | . "isdef" "(" k1_id ")"
  127            | . "watch" "(" exp ")"
  128 lvalue: . id
  129       | . primary-exp "." id
  130       | . primary-exp "." "*"
  131 primary-exp: . "&" id
  132            | . primary-exp "." "&" id
  133 id: . "identifier"
  134 bitor-exp: . "var" bitor-exp
  135          | . "const" "var" bitor-exp
  136 primary-exp: . lvalue
  137            | . lvalue args
  138 new: . "new" "identifier" args.opt
  139 bitor-exp: . new
  140 id: . "new"
  141 primary-exp: . routine formals block
  142 float-exp: . "float"
  143 duration: . "duration"
  144         | . duration "duration"
  150 dictionary: . "[" assocs "]"
  154 tuple: . "(" tuple.exps ")"
  159 literal-exp: . float-exp
  160            | . "angle"
  161            | . duration
  162            | . string
  163            | . "[" exps "]"
  164            | . "[<" tuple.exps ">]"
  165            | . "<" bitor-exps ">"
  166            | . dictionary
  167            | . tuple
  168 string: . "string"
  169       | . string "string"
  170 literal-exp: . "__HERE__"
  176 lvalue: . primary-exp "[" exps "]"
  177 literal-exp: . "this"
  178            | . "call"
  179 primary-exp: . literal-exp
  180            | . "(" exp ")"
  181            | . "(" error ")"
  182            | . primary-exp "**" primary-exp
  183 unary-exp: . primary-exp
  184          | . "--" lvalue
  185          | . "++" lvalue
  186          | . "+" unary-exp
  187          | . "-" unary-exp
  188          | . "!" unary-exp
  189          | . "compl" unary-exp
  190 bitor-exp: . unary-exp
  191          | . bitor-exp "+" bitor-exp
  192          | . bitor-exp "-" bitor-exp
  193          | . bitor-exp "*" bitor-exp
  194          | . bitor-exp "/" bitor-exp
  195          | . bitor-exp "%" bitor-exp
  196          | . bitor-exp "^" bitor-exp
  197          | . bitor-exp "<<" bitor-exp
  198          | . bitor-exp "bitand" bitor-exp
  199          | . bitor-exp "bitor" bitor-exp
  200          | . bitor-exp ">>" bitor-exp
  211 rel-exp: . bitor-exp rel-ops
  214 exp: . rel-exp
  215    | . exp "&&" exp
  216    | . exp "||" exp
  217    | . exp "in" exp
  218    | . exp "!" "in" exp
  222    | . "%unscope:" unsigned
  223 primary-exp: . "%exp:" unsigned
  224 lvalue: . "%lvalue:" unsigned
  225       | . "%id:" unsigned
  226       | . primary-exp "." "%id:" unsigned
  227 primary-exp: . lvalue "(" "%exps:" unsigned ")"

    "__HERE__"    shift, and go to state 7
    "break"       shift, and go to state 8
    "closure"     shift, and go to state 9
    "const"       shift, and go to state 10
    "continue"    shift, and go to state 11
    "freezeif"    shift, and go to state 12
    "function"    shift, and go to state 13
    "if"          shift, and go to state 14
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "[<"          shift, and go to state 19
    "return"      shift, and go to state 20
    "stopif"      shift, and go to state 21
    "switch"      shift, and go to state 22
    "throw"       shift, and go to state 23
    "timeout"     shift, and go to state 24
    "try"         shift, and go to state 25
    "var"         shift, and go to state 26
    "waituntil"   shift, and go to state 27
    "watch"       shift, and go to state 28
    "whenever"    shift, and go to state 29
    "&"           shift, and go to state 30
    "every"       shift, and go to state 31
    "for"         shift, and go to state 32
    "loop"        shift, and go to state 33
    "while"       shift, and go to state 34
    "at"          shift, and go to state 35
    "identifier"  shift, and go to state 36
    "class"       shift, and go to state 37
    "package"     shift, and go to state 38
    "enum"        shift, and go to state 39
    "external"    shift, and go to state 40
    "import"      shift, and go to state 41
    "--"          shift, and go to state 42
    "++"          shift, and go to state 43
    "do"          shift, and go to state 44
    "assert"      shift, and go to state 45
    "detach"      shift, and go to state 46
    "disown"      shift, and go to state 47
    "new"         shift, and go to state 48
    "angle"       shift, and go to state 49
    "duration"    shift, and go to state 50
    "float"       shift, and go to state 51
    "string"      shift, and go to state 52
    "call"        shift, and go to state 53
    "this"        shift, and go to state 54
    "!"           shift, and go to state 55
    "compl"       shift, and go to state 56
    "-"           shift, and go to state 57
    "+"           shift, and go to state 58
    "<"           shift, and go to state 59
    "%unscope:"   shift, and go to state 60
    "%exp:"       shift, and go to state 61
    "%lvalue:"    shift, and go to state 62
    "%id:"        shift, and go to state 63

    $default  reduce using rule 21 (stmt.opt)

    stmt.opt     go to state 475
    stmt         go to state 245
    block        go to state 68
    exp          go to state 69
    routine      go to state 70
    primary-exp  go to state 71
    detach       go to state 72
    lvalue       go to state 73
    id           go to state 74
    bitor-exp    go to state 75
    new          go to state 76
    float-exp    go to state 77
    duration     go to state 78
    dictionary   go to state 79
    tuple        go to state 80
    literal-exp  go to state 81
    string       go to state 82
    unary-exp    go to state 83
    rel-exp      go to state 84


state 453

   23 stmt: . primary-exp ":" stmt
   24     | . exp
   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   37 exp: . "class" lvalue protos block
   38    | . "package" lvalue protos block
   43 stmt: . "enum" id "{" id.0 "}"
   47     | . "external" "identifier" "identifier"
   48     | . "external" "var" "identifier" "." "identifier" from "identifier"
   49     | . "external" event_or_function "(" unsigned ")" "identifier" "." "identifier" from "identifier"
   50     | . "import" lvalue
   51     | . exp "!" args.opt tilda.opt
   52 routine: . "closure"
   53        | . "function"
   54 stmt: . routine k1_id formals block
   55     | . id id formals block
   62 exp: . exp "=" exp
   63    | . exp "=" exp modifiers
   64    | . lvalue "+=" exp
   65    | . lvalue "-=" exp
   66    | . lvalue "*=" exp
   67    | . lvalue "/=" exp
   68    | . lvalue "^=" exp
   69    | . lvalue "%=" exp
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
   73 stmt: . "at" identifiers "(" exp tilda.opt ")" stmt onleave.opt
   73     | "at" identifiers "(" exp tilda.opt ")" . stmt onleave.opt
   74     | . "at" identifiers "(" event_match ")" stmt onleave.opt
   75     | . "every" "(" exp ")" stmt
   76     | . "if" "(" stmts ")" stmt else.opt
   77     | . "freezeif" "(" exp ")" stmt
   78     | . "stopif" "(" exp ")" stmt
   79     | . "switch" "(" exp ")" "{" cases default.opt "}"
   80     | . "timeout" "(" exp ")" stmt catch.opt else.opt finally.opt
   81     | . "return" exp.opt
   82     | . "break"
   83     | . "continue"
   84     | . "waituntil" "(" exp tilda.opt ")"
   85     | . "waituntil" "(" event_match ")"
   86     | . "whenever" "(" exp tilda.opt ")" stmt else.opt
   87     | . "whenever" "(" event_match ")" stmt else.opt
  108     | . "try" block catches.1 else.opt finally.opt
  109     | . "try" block "finally" block
  110     | . "throw" exp.opt
  111     | . "loop" stmt
  112     | . "for" "(" exp ")" stmt
  113     | . "for" "(" stmt.opt ";" exp ";" stmt.opt ")" stmt
  114     | . "for" "(" "var" "identifier" in_or_colon exp ")" stmt
  115     | . "while" "(" exp ")" stmt
  118 primary-exp: . block
  119            | . "do" "(" exp ")" block
  120 detach: . "detach"
  121       | . "disown"
  122 primary-exp: . "assert" "(" exp ")"
  123            | . "assert" "{" claims "}"
  124            | . detach "(" exp ")"
  125            | . detach block
  126            | . "isdef" "(" k1_id ")"
  127            | . "watch" "(" exp ")"
  128 lvalue: . id
  129       | . primary-exp "." id
  130       | . primary-exp "." "*"
  131 primary-exp: . "&" id
  132            | . primary-exp "." "&" id
  133 id: . "identifier"
  134 bitor-exp: . "var" bitor-exp
  135          | . "const" "var" bitor-exp
  136 primary-exp: . lvalue
  137            | . lvalue args
  138 new: . "new" "identifier" args.opt
  139 bitor-exp: . new
  140 id: . "new"
  141 primary-exp: . routine formals block
  142 float-exp: . "float"
  143 duration: . "duration"
  144         | . duration "duration"
  150 dictionary: . "[" assocs "]"
  154 tuple: . "(" tuple.exps ")"
  159 literal-exp: . float-exp
  160            | . "angle"
  161            | . duration
  162            | . string
  163            | . "[" exps "]"
  164            | . "[<" tuple.exps ">]"
  165            | . "<" bitor-exps ">"
  166            | . dictionary
  167            | . tuple
  168 string: . "string"
  169       | . string "string"
  170 literal-exp: . "__HERE__"
  176 lvalue: . primary-exp "[" exps "]"
  177 literal-exp: . "this"
  178            | . "call"
  179 primary-exp: . literal-exp
  180            | . "(" exp ")"
  181            | . "(" error ")"
  182            | . primary-exp "**" primary-exp
  183 unary-exp: . primary-exp
  184          | . "--" lvalue
  185          | . "++" lvalue
  186          | . "+" unary-exp
  187          | . "-" unary-exp
  188          | . "!" unary-exp
  189          | . "compl" unary-exp
  190 bitor-exp: . unary-exp
  191          | . bitor-exp "+" bitor-exp
  192          | . bitor-exp "-" bitor-exp
  193          | . bitor-exp "*" bitor-exp
  194          | . bitor-exp "/" bitor-exp
  195          | . bitor-exp "%" bitor-exp
  196          | . bitor-exp "^" bitor-exp
  197          | . bitor-exp "<<" bitor-exp
  198          | . bitor-exp "bitand" bitor-exp
  199          | . bitor-exp "bitor" bitor-exp
  200          | . bitor-exp ">>" bitor-exp
  211 rel-exp: . bitor-exp rel-ops
  214 exp: . rel-exp
  215    | . exp "&&" exp
  216    | . exp "||" exp
  217    | . exp "in" exp
  218    | . exp "!" "in" exp
  222    | . "%unscope:" unsigned
  223 primary-exp: . "%exp:" unsigned
  224 lvalue: . "%lvalue:" unsigned
  225       | . "%id:" unsigned
  226       | . primary-exp "." "%id:" unsigned
  227 primary-exp: . lvalue "(" "%exps:" unsigned ")"

    "__HERE__"    shift, and go to state 7
    "break"       shift, and go to state 8
    "closure"     shift, and go to state 9
    "const"       shift, and go to state 10
    "continue"    shift, and go to state 11
    "freezeif"    shift, and go to state 12
    "function"    shift, and go to state 13
    "if"          shift, and go to state 14
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "[<"          shift, and go to state 19
    "return"      shift, and go to state 20
    "stopif"      shift, and go to state 21
    "switch"      shift, and go to state 22
    "throw"       shift, and go to state 23
    "timeout"     shift, and go to state 24
    "try"         shift, and go to state 25
    "var"         shift, and go to state 26
    "waituntil"   shift, and go to state 27
    "watch"       shift, and go to state 28
    "whenever"    shift, and go to state 29
    "&"           shift, and go to state 30
    "every"       shift, and go to state 31
    "for"         shift, and go to state 32
    "loop"        shift, and go to state 33
    "while"       shift, and go to state 34
    "at"          shift, and go to state 35
    "identifier"  shift, and go to state 36
    "class"       shift, and go to state 37
    "package"     shift, and go to state 38
    "enum"        shift, and go to state 39
    "external"    shift, and go to state 40
    "import"      shift, and go to state 41
    "--"          shift, and go to state 42
    "++"          shift, and go to state 43
    "do"          shift, and go to state 44
    "assert"      shift, and go to state 45
    "detach"      shift, and go to state 46
    "disown"      shift, and go to state 47
    "new"         shift, and go to state 48
    "angle"       shift, and go to state 49
    "duration"    shift, and go to state 50
    "float"       shift, and go to state 51
    "string"      shift, and go to state 52
    "call"        shift, and go to state 53
    "this"        shift, and go to state 54
    "!"           shift, and go to state 55
    "compl"       shift, and go to state 56
    "-"           shift, and go to state 57
    "+"           shift, and go to state 58
    "<"           shift, and go to state 59
    "%unscope:"   shift, and go to state 60
    "%exp:"       shift, and go to state 61
    "%lvalue:"    shift, and go to state 62
    "%id:"        shift, and go to state 63

    stmt         go to state 476
    block        go to state 68
    exp          go to state 69
    routine      go to state 70
    primary-exp  go to state 71
    detach       go to state 72
    lvalue       go to state 73
    id           go to state 74
    bitor-exp    go to state 75
    new          go to state 76
    float-exp    go to state 77
    duration     go to state 78
    dictionary   go to state 79
    tuple        go to state 80
    literal-exp  go to state 81
    string       go to state 82
    unary-exp    go to state 83
    rel-exp      go to state 84


state 454

   74 stmt: "at" identifiers "(" event_match ")" stmt . onleave.opt
   92 onleave.opt: .  ["end of command", "case", "catch", "default", "else", "finally", "}", ")", ",", ";", "&", "|"]
   93            | . "onleave" stmt

    "onleave"  shift, and go to state 477

    $default  reduce using rule 92 (onleave.opt)

    onleave.opt  go to state 478

    Conflict between rule 92 and token "onleave" resolved as shift (EMPTY < "onleave").


state 455

   34 protos.1: protos.1 "," proto .

    $default  reduce using rule 34 (protos.1)


state 456

   42 id.1: id.1 "," id .

    $default  reduce using rule 42 (id.1)


state 457

   44 from: "identifier" .

    $default  reduce using rule 44 (from)


state 458

   48 stmt: "external" "var" "identifier" "." "identifier" from . "identifier"

    "identifier"  shift, and go to state 479


state 459

   49 stmt: "external" event_or_function "(" unsigned ")" "identifier" . "." "identifier" from "identifier"

    "."  shift, and go to state 480


state 460

   59 modifier: "identifier" ":" exp .  ["end of command", "case", "catch", ":", "default", "else", "finally", "if", "{", ">]", "onleave", "}", "]", ")", "~", ",", ";", "&", "|", "identifier", "=>", "?"]
   62 exp: exp . "=" exp
   63    | exp . "=" exp modifiers
  215    | exp . "&&" exp
  216    | exp . "||" exp
  217    | exp . "in" exp
  218    | exp . "!" "in" exp

    "="   shift, and go to state 167
    "in"  shift, and go to state 168
    "!"   shift, and go to state 218
    "&&"  shift, and go to state 170
    "||"  shift, and go to state 171

    $default  reduce using rule 59 (modifier)

    Conflict between rule 59 and token "=" resolved as shift (":" < "=").
    Conflict between rule 59 and token "in" resolved as shift (":" < "in").
    Conflict between rule 59 and token "!" resolved as shift (":" < "!").
    Conflict between rule 59 and token "&&" resolved as shift (":" < "&&").
    Conflict between rule 59 and token "||" resolved as shift (":" < "||").


state 461

   62 exp: exp . "=" exp
   63    | exp . "=" exp modifiers
  215    | exp . "&&" exp
  216    | exp . "||" exp
  217    | exp . "in" exp
  218    | exp . "!" "in" exp
  242 typespec: . ":" exp
  243 typespec.opt: .  [")", ","]
  244             | . typespec
  246 formal: var.opt "identifier" "=" exp . typespec.opt

    "="   shift, and go to state 167
    ":"   shift, and go to state 436
    "in"  shift, and go to state 168
    "!"   shift, and go to state 218
    "&&"  shift, and go to state 170
    "||"  shift, and go to state 171

    $default  reduce using rule 243 (typespec.opt)

    typespec      go to state 438
    typespec.opt  go to state 481


state 462

   62 exp: exp . "=" exp
   63    | exp . "=" exp modifiers
  215    | exp . "&&" exp
  216    | exp . "||" exp
  217    | exp . "in" exp
  218    | exp . "!" "in" exp
  242 typespec: ":" exp .  [")", ","]

    "="   shift, and go to state 167
    "in"  shift, and go to state 168
    "!"   shift, and go to state 218
    "&&"  shift, and go to state 170
    "||"  shift, and go to state 171

    $default  reduce using rule 242 (typespec)


state 463

  247 formal: var.opt "identifier" "[" "]" .

    $default  reduce using rule 247 (formal)


state 464

   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   37 exp: . "class" lvalue protos block
   38    | . "package" lvalue protos block
   52 routine: . "closure"
   53        | . "function"
   62 exp: . exp "=" exp
   63    | . exp "=" exp modifiers
   64    | . lvalue "+=" exp
   65    | . lvalue "-=" exp
   66    | . lvalue "*=" exp
   67    | . lvalue "/=" exp
   68    | . lvalue "^=" exp
   69    | . lvalue "%=" exp
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
   96 case: "case" . match ":" stmts
   99 match: . exp
  100      | . exp "if" exp
  118 primary-exp: . block
  119            | . "do" "(" exp ")" block
  120 detach: . "detach"
  121       | . "disown"
  122 primary-exp: . "assert" "(" exp ")"
  123            | . "assert" "{" claims "}"
  124            | . detach "(" exp ")"
  125            | . detach block
  126            | . "isdef" "(" k1_id ")"
  127            | . "watch" "(" exp ")"
  128 lvalue: . id
  129       | . primary-exp "." id
  130       | . primary-exp "." "*"
  131 primary-exp: . "&" id
  132            | . primary-exp "." "&" id
  133 id: . "identifier"
  134 bitor-exp: . "var" bitor-exp
  135          | . "const" "var" bitor-exp
  136 primary-exp: . lvalue
  137            | . lvalue args
  138 new: . "new" "identifier" args.opt
  139 bitor-exp: . new
  140 id: . "new"
  141 primary-exp: . routine formals block
  142 float-exp: . "float"
  143 duration: . "duration"
  144         | . duration "duration"
  150 dictionary: . "[" assocs "]"
  154 tuple: . "(" tuple.exps ")"
  159 literal-exp: . float-exp
  160            | . "angle"
  161            | . duration
  162            | . string
  163            | . "[" exps "]"
  164            | . "[<" tuple.exps ">]"
  165            | . "<" bitor-exps ">"
  166            | . dictionary
  167            | . tuple
  168 string: . "string"
  169       | . string "string"
  170 literal-exp: . "__HERE__"
  176 lvalue: . primary-exp "[" exps "]"
  177 literal-exp: . "this"
  178            | . "call"
  179 primary-exp: . literal-exp
  180            | . "(" exp ")"
  181            | . "(" error ")"
  182            | . primary-exp "**" primary-exp
  183 unary-exp: . primary-exp
  184          | . "--" lvalue
  185          | . "++" lvalue
  186          | . "+" unary-exp
  187          | . "-" unary-exp
  188          | . "!" unary-exp
  189          | . "compl" unary-exp
  190 bitor-exp: . unary-exp
  191          | . bitor-exp "+" bitor-exp
  192          | . bitor-exp "-" bitor-exp
  193          | . bitor-exp "*" bitor-exp
  194          | . bitor-exp "/" bitor-exp
  195          | . bitor-exp "%" bitor-exp
  196          | . bitor-exp "^" bitor-exp
  197          | . bitor-exp "<<" bitor-exp
  198          | . bitor-exp "bitand" bitor-exp
  199          | . bitor-exp "bitor" bitor-exp
  200          | . bitor-exp ">>" bitor-exp
  211 rel-exp: . bitor-exp rel-ops
  214 exp: . rel-exp
  215    | . exp "&&" exp
  216    | . exp "||" exp
  217    | . exp "in" exp
  218    | . exp "!" "in" exp
  222    | . "%unscope:" unsigned
  223 primary-exp: . "%exp:" unsigned
  224 lvalue: . "%lvalue:" unsigned
  225       | . "%id:" unsigned
  226       | . primary-exp "." "%id:" unsigned
  227 primary-exp: . lvalue "(" "%exps:" unsigned ")"

    "__HERE__"    shift, and go to state 7
    "closure"     shift, and go to state 9
    "const"       shift, and go to state 10
    "function"    shift, and go to state 13
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "[<"          shift, and go to state 19
    "var"         shift, and go to state 26
    "watch"       shift, and go to state 28
    "&"           shift, and go to state 30
    "identifier"  shift, and go to state 36
    "class"       shift, and go to state 37
    "package"     shift, and go to state 38
    "--"          shift, and go to state 42
    "++"          shift, and go to state 43
    "do"          shift, and go to state 44
    "assert"      shift, and go to state 45
    "detach"      shift, and go to state 46
    "disown"      shift, and go to state 47
    "new"         shift, and go to state 48
    "angle"       shift, and go to state 49
    "duration"    shift, and go to state 50
    "float"       shift, and go to state 51
    "string"      shift, and go to state 52
    "call"        shift, and go to state 53
    "this"        shift, and go to state 54
    "!"           shift, and go to state 55
    "compl"       shift, and go to state 56
    "-"           shift, and go to state 57
    "+"           shift, and go to state 58
    "<"           shift, and go to state 59
    "%unscope:"   shift, and go to state 60
    "%exp:"       shift, and go to state 61
    "%lvalue:"    shift, and go to state 62
    "%id:"        shift, and go to state 63

    block        go to state 68
    exp          go to state 403
    routine      go to state 101
    primary-exp  go to state 102
    match        go to state 482
    detach       go to state 72
    lvalue       go to state 73
    id           go to state 103
    bitor-exp    go to state 75
    new          go to state 76
    float-exp    go to state 77
    duration     go to state 78
    dictionary   go to state 79
    tuple        go to state 80
    literal-exp  go to state 81
    string       go to state 82
    unary-exp    go to state 83
    rel-exp      go to state 84


state 465

   89 default.opt: "default" . ":" stmts

    ":"  shift, and go to state 483


state 466

   79 stmt: "switch" "(" exp ")" "{" cases default.opt . "}"

    "}"  shift, and go to state 484


state 467

   95 cases: cases case .

    $default  reduce using rule 95 (cases)


state 468

  105 catch.opt: "catch" block .

    $default  reduce using rule 105 (catch.opt)


state 469

   80 stmt: "timeout" "(" exp ")" stmt catch.opt else.opt . finally.opt
  106 finally.opt: .  ["end of command", "case", "catch", "default", "else", "onleave", "}", ")", ",", ";", "&", "|"]
  107            | . "finally" block

    "finally"  shift, and go to state 407

    $default  reduce using rule 106 (finally.opt)

    finally.opt  go to state 485

    Conflict between rule 106 and token "finally" resolved as shift (EMPTY < "finally").


state 470

   62 exp: exp . "=" exp
   63    | exp . "=" exp modifiers
  100 match: exp "if" exp .  [":", ")"]
  215 exp: exp . "&&" exp
  216    | exp . "||" exp
  217    | exp . "in" exp
  218    | exp . "!" "in" exp

    "="   shift, and go to state 167
    "in"  shift, and go to state 168
    "!"   shift, and go to state 218
    "&&"  shift, and go to state 170
    "||"  shift, and go to state 171

    $default  reduce using rule 100 (match)


state 471

   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   37 exp: . "class" lvalue protos block
   38    | . "package" lvalue protos block
   52 routine: . "closure"
   53        | . "function"
   62 exp: . exp "=" exp
   63    | . exp "=" exp modifiers
   64    | . lvalue "+=" exp
   65    | . lvalue "-=" exp
   66    | . lvalue "*=" exp
   67    | . lvalue "/=" exp
   68    | . lvalue "^=" exp
   69    | . lvalue "%=" exp
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
  118            | . block
  119            | . "do" "(" exp ")" block
  120 detach: . "detach"
  121       | . "disown"
  122 primary-exp: . "assert" "(" exp ")"
  123            | . "assert" "{" claims "}"
  124            | . detach "(" exp ")"
  125            | . detach block
  126            | . "isdef" "(" k1_id ")"
  127            | . "watch" "(" exp ")"
  128 lvalue: . id
  129       | . primary-exp "." id
  130       | . primary-exp "." "*"
  131 primary-exp: . "&" id
  132            | . primary-exp "." "&" id
  133 id: . "identifier"
  134 bitor-exp: . "var" bitor-exp
  135          | . "const" "var" bitor-exp
  136 primary-exp: . lvalue
  137            | . lvalue args
  138 new: . "new" "identifier" args.opt
  139 bitor-exp: . new
  140 id: . "new"
  141 primary-exp: . routine formals block
  142 float-exp: . "float"
  143 duration: . "duration"
  144         | . duration "duration"
  150 dictionary: . "[" assocs "]"
  154 tuple: . "(" tuple.exps ")"
  159 literal-exp: . float-exp
  160            | . "angle"
  161            | . duration
  162            | . string
  163            | . "[" exps "]"
  164            | . "[<" tuple.exps ">]"
  165            | . "<" bitor-exps ">"
  166            | . dictionary
  167            | . tuple
  168 string: . "string"
  169       | . string "string"
  170 literal-exp: . "__HERE__"
  173 guard.opt: "if" . exp
  176 lvalue: . primary-exp "[" exps "]"
  177 literal-exp: . "this"
  178            | . "call"
  179 primary-exp: . literal-exp
  180            | . "(" exp ")"
  181            | . "(" error ")"
  182            | . primary-exp "**" primary-exp
  183 unary-exp: . primary-exp
  184          | . "--" lvalue
  185          | . "++" lvalue
  186          | . "+" unary-exp
  187          | . "-" unary-exp
  188          | . "!" unary-exp
  189          | . "compl" unary-exp
  190 bitor-exp: . unary-exp
  191          | . bitor-exp "+" bitor-exp
  192          | . bitor-exp "-" bitor-exp
  193          | . bitor-exp "*" bitor-exp
  194          | . bitor-exp "/" bitor-exp
  195          | . bitor-exp "%" bitor-exp
  196          | . bitor-exp "^" bitor-exp
  197          | . bitor-exp "<<" bitor-exp
  198          | . bitor-exp "bitand" bitor-exp
  199          | . bitor-exp "bitor" bitor-exp
  200          | . bitor-exp ">>" bitor-exp
  211 rel-exp: . bitor-exp rel-ops
  214 exp: . rel-exp
  215    | . exp "&&" exp
  216    | . exp "||" exp
  217    | . exp "in" exp
  218    | . exp "!" "in" exp
  222    | . "%unscope:" unsigned
  223 primary-exp: . "%exp:" unsigned
  224 lvalue: . "%lvalue:" unsigned
  225       | . "%id:" unsigned
  226       | . primary-exp "." "%id:" unsigned
  227 primary-exp: . lvalue "(" "%exps:" unsigned ")"

    "__HERE__"    shift, and go to state 7
    "closure"     shift, and go to state 9
    "const"       shift, and go to state 10
    "function"    shift, and go to state 13
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "[<"          shift, and go to state 19
    "var"         shift, and go to state 26
    "watch"       shift, and go to state 28
    "&"           shift, and go to state 30
    "identifier"  shift, and go to state 36
    "class"       shift, and go to state 37
    "package"     shift, and go to state 38
    "--"          shift, and go to state 42
    "++"          shift, and go to state 43
    "do"          shift, and go to state 44
    "assert"      shift, and go to state 45
    "detach"      shift, and go to state 46
    "disown"      shift, and go to state 47
    "new"         shift, and go to state 48
    "angle"       shift, and go to state 49
    "duration"    shift, and go to state 50
    "float"       shift, and go to state 51
    "string"      shift, and go to state 52
    "call"        shift, and go to state 53
    "this"        shift, and go to state 54
    "!"           shift, and go to state 55
    "compl"       shift, and go to state 56
    "-"           shift, and go to state 57
    "+"           shift, and go to state 58
    "<"           shift, and go to state 59
    "%unscope:"   shift, and go to state 60
    "%exp:"       shift, and go to state 61
    "%lvalue:"    shift, and go to state 62
    "%id:"        shift, and go to state 63

    block        go to state 68
    exp          go to state 486
    routine      go to state 101
    primary-exp  go to state 102
    detach       go to state 72
    lvalue       go to state 73
    id           go to state 103
    bitor-exp    go to state 75
    new          go to state 76
    float-exp    go to state 77
    duration     go to state 78
    dictionary   go to state 79
    tuple        go to state 80
    literal-exp  go to state 81
    string       go to state 82
    unary-exp    go to state 83
    rel-exp      go to state 84


state 472

  171 event_match: exp "?" args.opt tilda.opt guard.opt .

    $default  reduce using rule 171 (event_match)


state 473

   86 stmt: "whenever" "(" exp tilda.opt ")" stmt else.opt .

    $default  reduce using rule 86 (stmt)


state 474

   23 stmt: . primary-exp ":" stmt
   24     | . exp
   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   37 exp: . "class" lvalue protos block
   38    | . "package" lvalue protos block
   43 stmt: . "enum" id "{" id.0 "}"
   47     | . "external" "identifier" "identifier"
   48     | . "external" "var" "identifier" "." "identifier" from "identifier"
   49     | . "external" event_or_function "(" unsigned ")" "identifier" "." "identifier" from "identifier"
   50     | . "import" lvalue
   51     | . exp "!" args.opt tilda.opt
   52 routine: . "closure"
   53        | . "function"
   54 stmt: . routine k1_id formals block
   55     | . id id formals block
   62 exp: . exp "=" exp
   63    | . exp "=" exp modifiers
   64    | . lvalue "+=" exp
   65    | . lvalue "-=" exp
   66    | . lvalue "*=" exp
   67    | . lvalue "/=" exp
   68    | . lvalue "^=" exp
   69    | . lvalue "%=" exp
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
   73 stmt: . "at" identifiers "(" exp tilda.opt ")" stmt onleave.opt
   74     | . "at" identifiers "(" event_match ")" stmt onleave.opt
   75     | . "every" "(" exp ")" stmt
   76     | . "if" "(" stmts ")" stmt else.opt
   77     | . "freezeif" "(" exp ")" stmt
   78     | . "stopif" "(" exp ")" stmt
   79     | . "switch" "(" exp ")" "{" cases default.opt "}"
   80     | . "timeout" "(" exp ")" stmt catch.opt else.opt finally.opt
   81     | . "return" exp.opt
   82     | . "break"
   83     | . "continue"
   84     | . "waituntil" "(" exp tilda.opt ")"
   85     | . "waituntil" "(" event_match ")"
   86     | . "whenever" "(" exp tilda.opt ")" stmt else.opt
   87     | . "whenever" "(" event_match ")" stmt else.opt
  108     | . "try" block catches.1 else.opt finally.opt
  109     | . "try" block "finally" block
  110     | . "throw" exp.opt
  111     | . "loop" stmt
  112     | . "for" "(" exp ")" stmt
  113     | . "for" "(" stmt.opt ";" exp ";" stmt.opt ")" stmt
  114     | . "for" "(" "var" "identifier" in_or_colon exp ")" stmt
  114     | "for" "(" "var" "identifier" in_or_colon exp ")" . stmt
  115     | . "while" "(" exp ")" stmt
  118 primary-exp: . block
  119            | . "do" "(" exp ")" block
  120 detach: . "detach"
  121       | . "disown"
  122 primary-exp: . "assert" "(" exp ")"
  123            | . "assert" "{" claims "}"
  124            | . detach "(" exp ")"
  125            | . detach block
  126            | . "isdef" "(" k1_id ")"
  127            | . "watch" "(" exp ")"
  128 lvalue: . id
  129       | . primary-exp "." id
  130       | . primary-exp "." "*"
  131 primary-exp: . "&" id
  132            | . primary-exp "." "&" id
  133 id: . "identifier"
  134 bitor-exp: . "var" bitor-exp
  135          | . "const" "var" bitor-exp
  136 primary-exp: . lvalue
  137            | . lvalue args
  138 new: . "new" "identifier" args.opt
  139 bitor-exp: . new
  140 id: . "new"
  141 primary-exp: . routine formals block
  142 float-exp: . "float"
  143 duration: . "duration"
  144         | . duration "duration"
  150 dictionary: . "[" assocs "]"
  154 tuple: . "(" tuple.exps ")"
  159 literal-exp: . float-exp
  160            | . "angle"
  161            | . duration
  162            | . string
  163            | . "[" exps "]"
  164            | . "[<" tuple.exps ">]"
  165            | . "<" bitor-exps ">"
  166            | . dictionary
  167            | . tuple
  168 string: . "string"
  169       | . string "string"
  170 literal-exp: . "__HERE__"
  176 lvalue: . primary-exp "[" exps "]"
  177 literal-exp: . "this"
  178            | . "call"
  179 primary-exp: . literal-exp
  180            | . "(" exp ")"
  181            | . "(" error ")"
  182            | . primary-exp "**" primary-exp
  183 unary-exp: . primary-exp
  184          | . "--" lvalue
  185          | . "++" lvalue
  186          | . "+" unary-exp
  187          | . "-" unary-exp
  188          | . "!" unary-exp
  189          | . "compl" unary-exp
  190 bitor-exp: . unary-exp
  191          | . bitor-exp "+" bitor-exp
  192          | . bitor-exp "-" bitor-exp
  193          | . bitor-exp "*" bitor-exp
  194          | . bitor-exp "/" bitor-exp
  195          | . bitor-exp "%" bitor-exp
  196          | . bitor-exp "^" bitor-exp
  197          | . bitor-exp "<<" bitor-exp
  198          | . bitor-exp "bitand" bitor-exp
  199          | . bitor-exp "bitor" bitor-exp
  200          | . bitor-exp ">>" bitor-exp
  211 rel-exp: . bitor-exp rel-ops
  214 exp: . rel-exp
  215    | . exp "&&" exp
  216    | . exp "||" exp
  217    | . exp "in" exp
  218    | . exp "!" "in" exp
  222    | . "%unscope:" unsigned
  223 primary-exp: . "%exp:" unsigned
  224 lvalue: . "%lvalue:" unsigned
  225       | . "%id:" unsigned
  226       | . primary-exp "." "%id:" unsigned
  227 primary-exp: . lvalue "(" "%exps:" unsigned ")"

    "__HERE__"    shift, and go to state 7
    "break"       shift, and go to state 8
    "closure"     shift, and go to state 9
    "const"       shift, and go to state 10
    "continue"    shift, and go to state 11
    "freezeif"    shift, and go to state 12
    "function"    shift, and go to state 13
    "if"          shift, and go to state 14
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "[<"          shift, and go to state 19
    "return"      shift, and go to state 20
    "stopif"      shift, and go to state 21
    "switch"      shift, and go to state 22
    "throw"       shift, and go to state 23
    "timeout"     shift, and go to state 24
    "try"         shift, and go to state 25
    "var"         shift, and go to state 26
    "waituntil"   shift, and go to state 27
    "watch"       shift, and go to state 28
    "whenever"    shift, and go to state 29
    "&"           shift, and go to state 30
    "every"       shift, and go to state 31
    "for"         shift, and go to state 32
    "loop"        shift, and go to state 33
    "while"       shift, and go to state 34
    "at"          shift, and go to state 35
    "identifier"  shift, and go to state 36
    "class"       shift, and go to state 37
    "package"     shift, and go to state 38
    "enum"        shift, and go to state 39
    "external"    shift, and go to state 40
    "import"      shift, and go to state 41
    "--"          shift, and go to state 42
    "++"          shift, and go to state 43
    "do"          shift, and go to state 44
    "assert"      shift, and go to state 45
    "detach"      shift, and go to state 46
    "disown"      shift, and go to state 47
    "new"         shift, and go to state 48
    "angle"       shift, and go to state 49
    "duration"    shift, and go to state 50
    "float"       shift, and go to state 51
    "string"      shift, and go to state 52
    "call"        shift, and go to state 53
    "this"        shift, and go to state 54
    "!"           shift, and go to state 55
    "compl"       shift, and go to state 56
    "-"           shift, and go to state 57
    "+"           shift, and go to state 58
    "<"           shift, and go to state 59
    "%unscope:"   shift, and go to state 60
    "%exp:"       shift, and go to state 61
    "%lvalue:"    shift, and go to state 62
    "%id:"        shift, and go to state 63

    stmt         go to state 487
    block        go to state 68
    exp          go to state 69
    routine      go to state 70
    primary-exp  go to state 71
    detach       go to state 72
    lvalue       go to state 73
    id           go to state 74
    bitor-exp    go to state 75
    new          go to state 76
    float-exp    go to state 77
    duration     go to state 78
    dictionary   go to state 79
    tuple        go to state 80
    literal-exp  go to state 81
    string       go to state 82
    unary-exp    go to state 83
    rel-exp      go to state 84


state 475

  113 stmt: "for" "(" stmt.opt ";" exp ";" stmt.opt . ")" stmt

    ")"  shift, and go to state 488


state 476

   73 stmt: "at" identifiers "(" exp tilda.opt ")" stmt . onleave.opt
   92 onleave.opt: .  ["end of command", "case", "catch", "default", "else", "finally", "}", ")", ",", ";", "&", "|"]
   93            | . "onleave" stmt

    "onleave"  shift, and go to state 477

    $default  reduce using rule 92 (onleave.opt)

    onleave.opt  go to state 489

    Conflict between rule 92 and token "onleave" resolved as shift (EMPTY < "onleave").


state 477

   23 stmt: . primary-exp ":" stmt
   24     | . exp
   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   37 exp: . "class" lvalue protos block
   38    | . "package" lvalue protos block
   43 stmt: . "enum" id "{" id.0 "}"
   47     | . "external" "identifier" "identifier"
   48     | . "external" "var" "identifier" "." "identifier" from "identifier"
   49     | . "external" event_or_function "(" unsigned ")" "identifier" "." "identifier" from "identifier"
   50     | . "import" lvalue
   51     | . exp "!" args.opt tilda.opt
   52 routine: . "closure"
   53        | . "function"
   54 stmt: . routine k1_id formals block
   55     | . id id formals block
   62 exp: . exp "=" exp
   63    | . exp "=" exp modifiers
   64    | . lvalue "+=" exp
   65    | . lvalue "-=" exp
   66    | . lvalue "*=" exp
   67    | . lvalue "/=" exp
   68    | . lvalue "^=" exp
   69    | . lvalue "%=" exp
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
   73 stmt: . "at" identifiers "(" exp tilda.opt ")" stmt onleave.opt
   74     | . "at" identifiers "(" event_match ")" stmt onleave.opt
   75     | . "every" "(" exp ")" stmt
   76     | . "if" "(" stmts ")" stmt else.opt
   77     | . "freezeif" "(" exp ")" stmt
   78     | . "stopif" "(" exp ")" stmt
   79     | . "switch" "(" exp ")" "{" cases default.opt "}"
   80     | . "timeout" "(" exp ")" stmt catch.opt else.opt finally.opt
   81     | . "return" exp.opt
   82     | . "break"
   83     | . "continue"
   84     | . "waituntil" "(" exp tilda.opt ")"
   85     | . "waituntil" "(" event_match ")"
   86     | . "whenever" "(" exp tilda.opt ")" stmt else.opt
   87     | . "whenever" "(" event_match ")" stmt else.opt
   93 onleave.opt: "onleave" . stmt
  108 stmt: . "try" block catches.1 else.opt finally.opt
  109     | . "try" block "finally" block
  110     | . "throw" exp.opt
  111     | . "loop" stmt
  112     | . "for" "(" exp ")" stmt
  113     | . "for" "(" stmt.opt ";" exp ";" stmt.opt ")" stmt
  114     | . "for" "(" "var" "identifier" in_or_colon exp ")" stmt
  115     | . "while" "(" exp ")" stmt
  118 primary-exp: . block
  119            | . "do" "(" exp ")" block
  120 detach: . "detach"
  121       | . "disown"
  122 primary-exp: . "assert" "(" exp ")"
  123            | . "assert" "{" claims "}"
  124            | . detach "(" exp ")"
  125            | . detach block
  126            | . "isdef" "(" k1_id ")"
  127            | . "watch" "(" exp ")"
  128 lvalue: . id
  129       | . primary-exp "." id
  130       | . primary-exp "." "*"
  131 primary-exp: . "&" id
  132            | . primary-exp "." "&" id
  133 id: . "identifier"
  134 bitor-exp: . "var" bitor-exp
  135          | . "const" "var" bitor-exp
  136 primary-exp: . lvalue
  137            | . lvalue args
  138 new: . "new" "identifier" args.opt
  139 bitor-exp: . new
  140 id: . "new"
  141 primary-exp: . routine formals block
  142 float-exp: . "float"
  143 duration: . "duration"
  144         | . duration "duration"
  150 dictionary: . "[" assocs "]"
  154 tuple: . "(" tuple.exps ")"
  159 literal-exp: . float-exp
  160            | . "angle"
  161            | . duration
  162            | . string
  163            | . "[" exps "]"
  164            | . "[<" tuple.exps ">]"
  165            | . "<" bitor-exps ">"
  166            | . dictionary
  167            | . tuple
  168 string: . "string"
  169       | . string "string"
  170 literal-exp: . "__HERE__"
  176 lvalue: . primary-exp "[" exps "]"
  177 literal-exp: . "this"
  178            | . "call"
  179 primary-exp: . literal-exp
  180            | . "(" exp ")"
  181            | . "(" error ")"
  182            | . primary-exp "**" primary-exp
  183 unary-exp: . primary-exp
  184          | . "--" lvalue
  185          | . "++" lvalue
  186          | . "+" unary-exp
  187          | . "-" unary-exp
  188          | . "!" unary-exp
  189          | . "compl" unary-exp
  190 bitor-exp: . unary-exp
  191          | . bitor-exp "+" bitor-exp
  192          | . bitor-exp "-" bitor-exp
  193          | . bitor-exp "*" bitor-exp
  194          | . bitor-exp "/" bitor-exp
  195          | . bitor-exp "%" bitor-exp
  196          | . bitor-exp "^" bitor-exp
  197          | . bitor-exp "<<" bitor-exp
  198          | . bitor-exp "bitand" bitor-exp
  199          | . bitor-exp "bitor" bitor-exp
  200          | . bitor-exp ">>" bitor-exp
  211 rel-exp: . bitor-exp rel-ops
  214 exp: . rel-exp
  215    | . exp "&&" exp
  216    | . exp "||" exp
  217    | . exp "in" exp
  218    | . exp "!" "in" exp
  222    | . "%unscope:" unsigned
  223 primary-exp: . "%exp:" unsigned
  224 lvalue: . "%lvalue:" unsigned
  225       | . "%id:" unsigned
  226       | . primary-exp "." "%id:" unsigned
  227 primary-exp: . lvalue "(" "%exps:" unsigned ")"

    "__HERE__"    shift, and go to state 7
    "break"       shift, and go to state 8
    "closure"     shift, and go to state 9
    "const"       shift, and go to state 10
    "continue"    shift, and go to state 11
    "freezeif"    shift, and go to state 12
    "function"    shift, and go to state 13
    "if"          shift, and go to state 14
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "[<"          shift, and go to state 19
    "return"      shift, and go to state 20
    "stopif"      shift, and go to state 21
    "switch"      shift, and go to state 22
    "throw"       shift, and go to state 23
    "timeout"     shift, and go to state 24
    "try"         shift, and go to state 25
    "var"         shift, and go to state 26
    "waituntil"   shift, and go to state 27
    "watch"       shift, and go to state 28
    "whenever"    shift, and go to state 29
    "&"           shift, and go to state 30
    "every"       shift, and go to state 31
    "for"         shift, and go to state 32
    "loop"        shift, and go to state 33
    "while"       shift, and go to state 34
    "at"          shift, and go to state 35
    "identifier"  shift, and go to state 36
    "class"       shift, and go to state 37
    "package"     shift, and go to state 38
    "enum"        shift, and go to state 39
    "external"    shift, and go to state 40
    "import"      shift, and go to state 41
    "--"          shift, and go to state 42
    "++"          shift, and go to state 43
    "do"          shift, and go to state 44
    "assert"      shift, and go to state 45
    "detach"      shift, and go to state 46
    "disown"      shift, and go to state 47
    "new"         shift, and go to state 48
    "angle"       shift, and go to state 49
    "duration"    shift, and go to state 50
    "float"       shift, and go to state 51
    "string"      shift, and go to state 52
    "call"        shift, and go to state 53
    "this"        shift, and go to state 54
    "!"           shift, and go to state 55
    "compl"       shift, and go to state 56
    "-"           shift, and go to state 57
    "+"           shift, and go to state 58
    "<"           shift, and go to state 59
    "%unscope:"   shift, and go to state 60
    "%exp:"       shift, and go to state 61
    "%lvalue:"    shift, and go to state 62
    "%id:"        shift, and go to state 63

    stmt         go to state 490
    block        go to state 68
    exp          go to state 69
    routine      go to state 70
    primary-exp  go to state 71
    detach       go to state 72
    lvalue       go to state 73
    id           go to state 74
    bitor-exp    go to state 75
    new          go to state 76
    float-exp    go to state 77
    duration     go to state 78
    dictionary   go to state 79
    tuple        go to state 80
    literal-exp  go to state 81
    string       go to state 82
    unary-exp    go to state 83
    rel-exp      go to state 84


state 478

   74 stmt: "at" identifiers "(" event_match ")" stmt onleave.opt .

    $default  reduce using rule 74 (stmt)


state 479

   48 stmt: "external" "var" "identifier" "." "identifier" from "identifier" .

    $default  reduce using rule 48 (stmt)


state 480

   49 stmt: "external" event_or_function "(" unsigned ")" "identifier" "." . "identifier" from "identifier"

    "identifier"  shift, and go to state 491


state 481

  246 formal: var.opt "identifier" "=" exp typespec.opt .

    $default  reduce using rule 246 (formal)


state 482

   96 case: "case" match . ":" stmts

    ":"  shift, and go to state 492


state 483

   12 stmts: . cstmt.opt
   13      | . stmts ";" cstmt.opt
   14      | . stmts "," cstmt.opt
   15 cstmt.opt: .  ["}", ",", ";"]
   16          | . cstmt
   17          | . cstmt "|"
   18 cstmt: . stmt
   19      | . cstmt "|" cstmt
   20      | . cstmt "&" cstmt
   23 stmt: . primary-exp ":" stmt
   24     | . exp
   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   37 exp: . "class" lvalue protos block
   38    | . "package" lvalue protos block
   43 stmt: . "enum" id "{" id.0 "}"
   47     | . "external" "identifier" "identifier"
   48     | . "external" "var" "identifier" "." "identifier" from "identifier"
   49     | . "external" event_or_function "(" unsigned ")" "identifier" "." "identifier" from "identifier"
   50     | . "import" lvalue
   51     | . exp "!" args.opt tilda.opt
   52 routine: . "closure"
   53        | . "function"
   54 stmt: . routine k1_id formals block
   55     | . id id formals block
   62 exp: . exp "=" exp
   63    | . exp "=" exp modifiers
   64    | . lvalue "+=" exp
   65    | . lvalue "-=" exp
   66    | . lvalue "*=" exp
   67    | . lvalue "/=" exp
   68    | . lvalue "^=" exp
   69    | . lvalue "%=" exp
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
   73 stmt: . "at" identifiers "(" exp tilda.opt ")" stmt onleave.opt
   74     | . "at" identifiers "(" event_match ")" stmt onleave.opt
   75     | . "every" "(" exp ")" stmt
   76     | . "if" "(" stmts ")" stmt else.opt
   77     | . "freezeif" "(" exp ")" stmt
   78     | . "stopif" "(" exp ")" stmt
   79     | . "switch" "(" exp ")" "{" cases default.opt "}"
   80     | . "timeout" "(" exp ")" stmt catch.opt else.opt finally.opt
   81     | . "return" exp.opt
   82     | . "break"
   83     | . "continue"
   84     | . "waituntil" "(" exp tilda.opt ")"
   85     | . "waituntil" "(" event_match ")"
   86     | . "whenever" "(" exp tilda.opt ")" stmt else.opt
   87     | . "whenever" "(" event_match ")" stmt else.opt
   89 default.opt: "default" ":" . stmts
  108 stmt: . "try" block catches.1 else.opt finally.opt
  109     | . "try" block "finally" block
  110     | . "throw" exp.opt
  111     | . "loop" stmt
  112     | . "for" "(" exp ")" stmt
  113     | . "for" "(" stmt.opt ";" exp ";" stmt.opt ")" stmt
  114     | . "for" "(" "var" "identifier" in_or_colon exp ")" stmt
  115     | . "while" "(" exp ")" stmt
  118 primary-exp: . block
  119            | . "do" "(" exp ")" block
  120 detach: . "detach"
  121       | . "disown"
  122 primary-exp: . "assert" "(" exp ")"
  123            | . "assert" "{" claims "}"
  124            | . detach "(" exp ")"
  125            | . detach block
  126            | . "isdef" "(" k1_id ")"
  127            | . "watch" "(" exp ")"
  128 lvalue: . id
  129       | . primary-exp "." id
  130       | . primary-exp "." "*"
  131 primary-exp: . "&" id
  132            | . primary-exp "." "&" id
  133 id: . "identifier"
  134 bitor-exp: . "var" bitor-exp
  135          | . "const" "var" bitor-exp
  136 primary-exp: . lvalue
  137            | . lvalue args
  138 new: . "new" "identifier" args.opt
  139 bitor-exp: . new
  140 id: . "new"
  141 primary-exp: . routine formals block
  142 float-exp: . "float"
  143 duration: . "duration"
  144         | . duration "duration"
  150 dictionary: . "[" assocs "]"
  154 tuple: . "(" tuple.exps ")"
  159 literal-exp: . float-exp
  160            | . "angle"
  161            | . duration
  162            | . string
  163            | . "[" exps "]"
  164            | . "[<" tuple.exps ">]"
  165            | . "<" bitor-exps ">"
  166            | . dictionary
  167            | . tuple
  168 string: . "string"
  169       | . string "string"
  170 literal-exp: . "__HERE__"
  176 lvalue: . primary-exp "[" exps "]"
  177 literal-exp: . "this"
  178            | . "call"
  179 primary-exp: . literal-exp
  180            | . "(" exp ")"
  181            | . "(" error ")"
  182            | . primary-exp "**" primary-exp
  183 unary-exp: . primary-exp
  184          | . "--" lvalue
  185          | . "++" lvalue
  186          | . "+" unary-exp
  187          | . "-" unary-exp
  188          | . "!" unary-exp
  189          | . "compl" unary-exp
  190 bitor-exp: . unary-exp
  191          | . bitor-exp "+" bitor-exp
  192          | . bitor-exp "-" bitor-exp
  193          | . bitor-exp "*" bitor-exp
  194          | . bitor-exp "/" bitor-exp
  195          | . bitor-exp "%" bitor-exp
  196          | . bitor-exp "^" bitor-exp
  197          | . bitor-exp "<<" bitor-exp
  198          | . bitor-exp "bitand" bitor-exp
  199          | . bitor-exp "bitor" bitor-exp
  200          | . bitor-exp ">>" bitor-exp
  211 rel-exp: . bitor-exp rel-ops
  214 exp: . rel-exp
  215    | . exp "&&" exp
  216    | . exp "||" exp
  217    | . exp "in" exp
  218    | . exp "!" "in" exp
  222    | . "%unscope:" unsigned
  223 primary-exp: . "%exp:" unsigned
  224 lvalue: . "%lvalue:" unsigned
  225       | . "%id:" unsigned
  226       | . primary-exp "." "%id:" unsigned
  227 primary-exp: . lvalue "(" "%exps:" unsigned ")"

    "__HERE__"    shift, and go to state 7
    "break"       shift, and go to state 8
    "closure"     shift, and go to state 9
    "const"       shift, and go to state 10
    "continue"    shift, and go to state 11
    "freezeif"    shift, and go to state 12
    "function"    shift, and go to state 13
    "if"          shift, and go to state 14
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "[<"          shift, and go to state 19
    "return"      shift, and go to state 20
    "stopif"      shift, and go to state 21
    "switch"      shift, and go to state 22
    "throw"       shift, and go to state 23
    "timeout"     shift, and go to state 24
    "try"         shift, and go to state 25
    "var"         shift, and go to state 26
    "waituntil"   shift, and go to state 27
    "watch"       shift, and go to state 28
    "whenever"    shift, and go to state 29
    "&"           shift, and go to state 30
    "every"       shift, and go to state 31
    "for"         shift, and go to state 32
    "loop"        shift, and go to state 33
    "while"       shift, and go to state 34
    "at"          shift, and go to state 35
    "identifier"  shift, and go to state 36
    "class"       shift, and go to state 37
    "package"     shift, and go to state 38
    "enum"        shift, and go to state 39
    "external"    shift, and go to state 40
    "import"      shift, and go to state 41
    "--"          shift, and go to state 42
    "++"          shift, and go to state 43
    "do"          shift, and go to state 44
    "assert"      shift, and go to state 45
    "detach"      shift, and go to state 46
    "disown"      shift, and go to state 47
    "new"         shift, and go to state 48
    "angle"       shift, and go to state 49
    "duration"    shift, and go to state 50
    "float"       shift, and go to state 51
    "string"      shift, and go to state 52
    "call"        shift, and go to state 53
    "this"        shift, and go to state 54
    "!"           shift, and go to state 55
    "compl"       shift, and go to state 56
    "-"           shift, and go to state 57
    "+"           shift, and go to state 58
    "<"           shift, and go to state 59
    "%unscope:"   shift, and go to state 60
    "%exp:"       shift, and go to state 61
    "%lvalue:"    shift, and go to state 62
    "%id:"        shift, and go to state 63

    $default  reduce using rule 15 (cstmt.opt)

    stmts        go to state 493
    cstmt.opt    go to state 87
    cstmt        go to state 66
    stmt         go to state 67
    block        go to state 68
    exp          go to state 69
    routine      go to state 70
    primary-exp  go to state 71
    detach       go to state 72
    lvalue       go to state 73
    id           go to state 74
    bitor-exp    go to state 75
    new          go to state 76
    float-exp    go to state 77
    duration     go to state 78
    dictionary   go to state 79
    tuple        go to state 80
    literal-exp  go to state 81
    string       go to state 82
    unary-exp    go to state 83
    rel-exp      go to state 84


state 484

   79 stmt: "switch" "(" exp ")" "{" cases default.opt "}" .

    $default  reduce using rule 79 (stmt)


state 485

   80 stmt: "timeout" "(" exp ")" stmt catch.opt else.opt finally.opt .

    $default  reduce using rule 80 (stmt)


state 486

   62 exp: exp . "=" exp
   63    | exp . "=" exp modifiers
  173 guard.opt: "if" exp .  [")"]
  215 exp: exp . "&&" exp
  216    | exp . "||" exp
  217    | exp . "in" exp
  218    | exp . "!" "in" exp

    "="   shift, and go to state 167
    "in"  shift, and go to state 168
    "!"   shift, and go to state 218
    "&&"  shift, and go to state 170
    "||"  shift, and go to state 171

    $default  reduce using rule 173 (guard.opt)


state 487

  114 stmt: "for" "(" "var" "identifier" in_or_colon exp ")" stmt .

    $default  reduce using rule 114 (stmt)


state 488

   23 stmt: . primary-exp ":" stmt
   24     | . exp
   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   37 exp: . "class" lvalue protos block
   38    | . "package" lvalue protos block
   43 stmt: . "enum" id "{" id.0 "}"
   47     | . "external" "identifier" "identifier"
   48     | . "external" "var" "identifier" "." "identifier" from "identifier"
   49     | . "external" event_or_function "(" unsigned ")" "identifier" "." "identifier" from "identifier"
   50     | . "import" lvalue
   51     | . exp "!" args.opt tilda.opt
   52 routine: . "closure"
   53        | . "function"
   54 stmt: . routine k1_id formals block
   55     | . id id formals block
   62 exp: . exp "=" exp
   63    | . exp "=" exp modifiers
   64    | . lvalue "+=" exp
   65    | . lvalue "-=" exp
   66    | . lvalue "*=" exp
   67    | . lvalue "/=" exp
   68    | . lvalue "^=" exp
   69    | . lvalue "%=" exp
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
   73 stmt: . "at" identifiers "(" exp tilda.opt ")" stmt onleave.opt
   74     | . "at" identifiers "(" event_match ")" stmt onleave.opt
   75     | . "every" "(" exp ")" stmt
   76     | . "if" "(" stmts ")" stmt else.opt
   77     | . "freezeif" "(" exp ")" stmt
   78     | . "stopif" "(" exp ")" stmt
   79     | . "switch" "(" exp ")" "{" cases default.opt "}"
   80     | . "timeout" "(" exp ")" stmt catch.opt else.opt finally.opt
   81     | . "return" exp.opt
   82     | . "break"
   83     | . "continue"
   84     | . "waituntil" "(" exp tilda.opt ")"
   85     | . "waituntil" "(" event_match ")"
   86     | . "whenever" "(" exp tilda.opt ")" stmt else.opt
   87     | . "whenever" "(" event_match ")" stmt else.opt
  108     | . "try" block catches.1 else.opt finally.opt
  109     | . "try" block "finally" block
  110     | . "throw" exp.opt
  111     | . "loop" stmt
  112     | . "for" "(" exp ")" stmt
  113     | . "for" "(" stmt.opt ";" exp ";" stmt.opt ")" stmt
  113     | "for" "(" stmt.opt ";" exp ";" stmt.opt ")" . stmt
  114     | . "for" "(" "var" "identifier" in_or_colon exp ")" stmt
  115     | . "while" "(" exp ")" stmt
  118 primary-exp: . block
  119            | . "do" "(" exp ")" block
  120 detach: . "detach"
  121       | . "disown"
  122 primary-exp: . "assert" "(" exp ")"
  123            | . "assert" "{" claims "}"
  124            | . detach "(" exp ")"
  125            | . detach block
  126            | . "isdef" "(" k1_id ")"
  127            | . "watch" "(" exp ")"
  128 lvalue: . id
  129       | . primary-exp "." id
  130       | . primary-exp "." "*"
  131 primary-exp: . "&" id
  132            | . primary-exp "." "&" id
  133 id: . "identifier"
  134 bitor-exp: . "var" bitor-exp
  135          | . "const" "var" bitor-exp
  136 primary-exp: . lvalue
  137            | . lvalue args
  138 new: . "new" "identifier" args.opt
  139 bitor-exp: . new
  140 id: . "new"
  141 primary-exp: . routine formals block
  142 float-exp: . "float"
  143 duration: . "duration"
  144         | . duration "duration"
  150 dictionary: . "[" assocs "]"
  154 tuple: . "(" tuple.exps ")"
  159 literal-exp: . float-exp
  160            | . "angle"
  161            | . duration
  162            | . string
  163            | . "[" exps "]"
  164            | . "[<" tuple.exps ">]"
  165            | . "<" bitor-exps ">"
  166            | . dictionary
  167            | . tuple
  168 string: . "string"
  169       | . string "string"
  170 literal-exp: . "__HERE__"
  176 lvalue: . primary-exp "[" exps "]"
  177 literal-exp: . "this"
  178            | . "call"
  179 primary-exp: . literal-exp
  180            | . "(" exp ")"
  181            | . "(" error ")"
  182            | . primary-exp "**" primary-exp
  183 unary-exp: . primary-exp
  184          | . "--" lvalue
  185          | . "++" lvalue
  186          | . "+" unary-exp
  187          | . "-" unary-exp
  188          | . "!" unary-exp
  189          | . "compl" unary-exp
  190 bitor-exp: . unary-exp
  191          | . bitor-exp "+" bitor-exp
  192          | . bitor-exp "-" bitor-exp
  193          | . bitor-exp "*" bitor-exp
  194          | . bitor-exp "/" bitor-exp
  195          | . bitor-exp "%" bitor-exp
  196          | . bitor-exp "^" bitor-exp
  197          | . bitor-exp "<<" bitor-exp
  198          | . bitor-exp "bitand" bitor-exp
  199          | . bitor-exp "bitor" bitor-exp
  200          | . bitor-exp ">>" bitor-exp
  211 rel-exp: . bitor-exp rel-ops
  214 exp: . rel-exp
  215    | . exp "&&" exp
  216    | . exp "||" exp
  217    | . exp "in" exp
  218    | . exp "!" "in" exp
  222    | . "%unscope:" unsigned
  223 primary-exp: . "%exp:" unsigned
  224 lvalue: . "%lvalue:" unsigned
  225       | . "%id:" unsigned
  226       | . primary-exp "." "%id:" unsigned
  227 primary-exp: . lvalue "(" "%exps:" unsigned ")"

    "__HERE__"    shift, and go to state 7
    "break"       shift, and go to state 8
    "closure"     shift, and go to state 9
    "const"       shift, and go to state 10
    "continue"    shift, and go to state 11
    "freezeif"    shift, and go to state 12
    "function"    shift, and go to state 13
    "if"          shift, and go to state 14
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "[<"          shift, and go to state 19
    "return"      shift, and go to state 20
    "stopif"      shift, and go to state 21
    "switch"      shift, and go to state 22
    "throw"       shift, and go to state 23
    "timeout"     shift, and go to state 24
    "try"         shift, and go to state 25
    "var"         shift, and go to state 26
    "waituntil"   shift, and go to state 27
    "watch"       shift, and go to state 28
    "whenever"    shift, and go to state 29
    "&"           shift, and go to state 30
    "every"       shift, and go to state 31
    "for"         shift, and go to state 32
    "loop"        shift, and go to state 33
    "while"       shift, and go to state 34
    "at"          shift, and go to state 35
    "identifier"  shift, and go to state 36
    "class"       shift, and go to state 37
    "package"     shift, and go to state 38
    "enum"        shift, and go to state 39
    "external"    shift, and go to state 40
    "import"      shift, and go to state 41
    "--"          shift, and go to state 42
    "++"          shift, and go to state 43
    "do"          shift, and go to state 44
    "assert"      shift, and go to state 45
    "detach"      shift, and go to state 46
    "disown"      shift, and go to state 47
    "new"         shift, and go to state 48
    "angle"       shift, and go to state 49
    "duration"    shift, and go to state 50
    "float"       shift, and go to state 51
    "string"      shift, and go to state 52
    "call"        shift, and go to state 53
    "this"        shift, and go to state 54
    "!"           shift, and go to state 55
    "compl"       shift, and go to state 56
    "-"           shift, and go to state 57
    "+"           shift, and go to state 58
    "<"           shift, and go to state 59
    "%unscope:"   shift, and go to state 60
    "%exp:"       shift, and go to state 61
    "%lvalue:"    shift, and go to state 62
    "%id:"        shift, and go to state 63

    stmt         go to state 494
    block        go to state 68
    exp          go to state 69
    routine      go to state 70
    primary-exp  go to state 71
    detach       go to state 72
    lvalue       go to state 73
    id           go to state 74
    bitor-exp    go to state 75
    new          go to state 76
    float-exp    go to state 77
    duration     go to state 78
    dictionary   go to state 79
    tuple        go to state 80
    literal-exp  go to state 81
    string       go to state 82
    unary-exp    go to state 83
    rel-exp      go to state 84


state 489

   73 stmt: "at" identifiers "(" exp tilda.opt ")" stmt onleave.opt .

    $default  reduce using rule 73 (stmt)


state 490

   93 onleave.opt: "onleave" stmt .

    $default  reduce using rule 93 (onleave.opt)


state 491

   44 from: . "identifier"
   49 stmt: "external" event_or_function "(" unsigned ")" "identifier" "." "identifier" . from "identifier"

    "identifier"  shift, and go to state 457

    from  go to state 495


state 492

   12 stmts: . cstmt.opt
   13      | . stmts ";" cstmt.opt
   14      | . stmts "," cstmt.opt
   15 cstmt.opt: .  ["case", "default", "}", ",", ";"]
   16          | . cstmt
   17          | . cstmt "|"
   18 cstmt: . stmt
   19      | . cstmt "|" cstmt
   20      | . cstmt "&" cstmt
   23 stmt: . primary-exp ":" stmt
   24     | . exp
   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   37 exp: . "class" lvalue protos block
   38    | . "package" lvalue protos block
   43 stmt: . "enum" id "{" id.0 "}"
   47     | . "external" "identifier" "identifier"
   48     | . "external" "var" "identifier" "." "identifier" from "identifier"
   49     | . "external" event_or_function "(" unsigned ")" "identifier" "." "identifier" from "identifier"
   50     | . "import" lvalue
   51     | . exp "!" args.opt tilda.opt
   52 routine: . "closure"
   53        | . "function"
   54 stmt: . routine k1_id formals block
   55     | . id id formals block
   62 exp: . exp "=" exp
   63    | . exp "=" exp modifiers
   64    | . lvalue "+=" exp
   65    | . lvalue "-=" exp
   66    | . lvalue "*=" exp
   67    | . lvalue "/=" exp
   68    | . lvalue "^=" exp
   69    | . lvalue "%=" exp
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
   73 stmt: . "at" identifiers "(" exp tilda.opt ")" stmt onleave.opt
   74     | . "at" identifiers "(" event_match ")" stmt onleave.opt
   75     | . "every" "(" exp ")" stmt
   76     | . "if" "(" stmts ")" stmt else.opt
   77     | . "freezeif" "(" exp ")" stmt
   78     | . "stopif" "(" exp ")" stmt
   79     | . "switch" "(" exp ")" "{" cases default.opt "}"
   80     | . "timeout" "(" exp ")" stmt catch.opt else.opt finally.opt
   81     | . "return" exp.opt
   82     | . "break"
   83     | . "continue"
   84     | . "waituntil" "(" exp tilda.opt ")"
   85     | . "waituntil" "(" event_match ")"
   86     | . "whenever" "(" exp tilda.opt ")" stmt else.opt
   87     | . "whenever" "(" event_match ")" stmt else.opt
   96 case: "case" match ":" . stmts
  108 stmt: . "try" block catches.1 else.opt finally.opt
  109     | . "try" block "finally" block
  110     | . "throw" exp.opt
  111     | . "loop" stmt
  112     | . "for" "(" exp ")" stmt
  113     | . "for" "(" stmt.opt ";" exp ";" stmt.opt ")" stmt
  114     | . "for" "(" "var" "identifier" in_or_colon exp ")" stmt
  115     | . "while" "(" exp ")" stmt
  118 primary-exp: . block
  119            | . "do" "(" exp ")" block
  120 detach: . "detach"
  121       | . "disown"
  122 primary-exp: . "assert" "(" exp ")"
  123            | . "assert" "{" claims "}"
  124            | . detach "(" exp ")"
  125            | . detach block
  126            | . "isdef" "(" k1_id ")"
  127            | . "watch" "(" exp ")"
  128 lvalue: . id
  129       | . primary-exp "." id
  130       | . primary-exp "." "*"
  131 primary-exp: . "&" id
  132            | . primary-exp "." "&" id
  133 id: . "identifier"
  134 bitor-exp: . "var" bitor-exp
  135          | . "const" "var" bitor-exp
  136 primary-exp: . lvalue
  137            | . lvalue args
  138 new: . "new" "identifier" args.opt
  139 bitor-exp: . new
  140 id: . "new"
  141 primary-exp: . routine formals block
  142 float-exp: . "float"
  143 duration: . "duration"
  144         | . duration "duration"
  150 dictionary: . "[" assocs "]"
  154 tuple: . "(" tuple.exps ")"
  159 literal-exp: . float-exp
  160            | . "angle"
  161            | . duration
  162            | . string
  163            | . "[" exps "]"
  164            | . "[<" tuple.exps ">]"
  165            | . "<" bitor-exps ">"
  166            | . dictionary
  167            | . tuple
  168 string: . "string"
  169       | . string "string"
  170 literal-exp: . "__HERE__"
  176 lvalue: . primary-exp "[" exps "]"
  177 literal-exp: . "this"
  178            | . "call"
  179 primary-exp: . literal-exp
  180            | . "(" exp ")"
  181            | . "(" error ")"
  182            | . primary-exp "**" primary-exp
  183 unary-exp: . primary-exp
  184          | . "--" lvalue
  185          | . "++" lvalue
  186          | . "+" unary-exp
  187          | . "-" unary-exp
  188          | . "!" unary-exp
  189          | . "compl" unary-exp
  190 bitor-exp: . unary-exp
  191          | . bitor-exp "+" bitor-exp
  192          | . bitor-exp "-" bitor-exp
  193          | . bitor-exp "*" bitor-exp
  194          | . bitor-exp "/" bitor-exp
  195          | . bitor-exp "%" bitor-exp
  196          | . bitor-exp "^" bitor-exp
  197          | . bitor-exp "<<" bitor-exp
  198          | . bitor-exp "bitand" bitor-exp
  199          | . bitor-exp "bitor" bitor-exp
  200          | . bitor-exp ">>" bitor-exp
  211 rel-exp: . bitor-exp rel-ops
  214 exp: . rel-exp
  215    | . exp "&&" exp
  216    | . exp "||" exp
  217    | . exp "in" exp
  218    | . exp "!" "in" exp
  222    | . "%unscope:" unsigned
  223 primary-exp: . "%exp:" unsigned
  224 lvalue: . "%lvalue:" unsigned
  225       | . "%id:" unsigned
  226       | . primary-exp "." "%id:" unsigned
  227 primary-exp: . lvalue "(" "%exps:" unsigned ")"

    "__HERE__"    shift, and go to state 7
    "break"       shift, and go to state 8
    "closure"     shift, and go to state 9
    "const"       shift, and go to state 10
    "continue"    shift, and go to state 11
    "freezeif"    shift, and go to state 12
    "function"    shift, and go to state 13
    "if"          shift, and go to state 14
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "[<"          shift, and go to state 19
    "return"      shift, and go to state 20
    "stopif"      shift, and go to state 21
    "switch"      shift, and go to state 22
    "throw"       shift, and go to state 23
    "timeout"     shift, and go to state 24
    "try"         shift, and go to state 25
    "var"         shift, and go to state 26
    "waituntil"   shift, and go to state 27
    "watch"       shift, and go to state 28
    "whenever"    shift, and go to state 29
    "&"           shift, and go to state 30
    "every"       shift, and go to state 31
    "for"         shift, and go to state 32
    "loop"        shift, and go to state 33
    "while"       shift, and go to state 34
    "at"          shift, and go to state 35
    "identifier"  shift, and go to state 36
    "class"       shift, and go to state 37
    "package"     shift, and go to state 38
    "enum"        shift, and go to state 39
    "external"    shift, and go to state 40
    "import"      shift, and go to state 41
    "--"          shift, and go to state 42
    "++"          shift, and go to state 43
    "do"          shift, and go to state 44
    "assert"      shift, and go to state 45
    "detach"      shift, and go to state 46
    "disown"      shift, and go to state 47
    "new"         shift, and go to state 48
    "angle"       shift, and go to state 49
    "duration"    shift, and go to state 50
    "float"       shift, and go to state 51
    "string"      shift, and go to state 52
    "call"        shift, and go to state 53
    "this"        shift, and go to state 54
    "!"           shift, and go to state 55
    "compl"       shift, and go to state 56
    "-"           shift, and go to state 57
    "+"           shift, and go to state 58
    "<"           shift, and go to state 59
    "%unscope:"   shift, and go to state 60
    "%exp:"       shift, and go to state 61
    "%lvalue:"    shift, and go to state 62
    "%id:"        shift, and go to state 63

    $default  reduce using rule 15 (cstmt.opt)

    stmts        go to state 496
    cstmt.opt    go to state 87
    cstmt        go to state 66
    stmt         go to state 67
    block        go to state 68
    exp          go to state 69
    routine      go to state 70
    primary-exp  go to state 71
    detach       go to state 72
    lvalue       go to state 73
    id           go to state 74
    bitor-exp    go to state 75
    new          go to state 76
    float-exp    go to state 77
    duration     go to state 78
    dictionary   go to state 79
    tuple        go to state 80
    literal-exp  go to state 81
    string       go to state 82
    unary-exp    go to state 83
    rel-exp      go to state 84


state 493

   13 stmts: stmts . ";" cstmt.opt
   14      | stmts . "," cstmt.opt
   89 default.opt: "default" ":" stmts .  ["}"]

    ","  shift, and go to state 208
    ";"  shift, and go to state 209

    $default  reduce using rule 89 (default.opt)


state 494

  113 stmt: "for" "(" stmt.opt ";" exp ";" stmt.opt ")" stmt .

    $default  reduce using rule 113 (stmt)


state 495

   49 stmt: "external" event_or_function "(" unsigned ")" "identifier" "." "identifier" from . "identifier"

    "identifier"  shift, and go to state 497


state 496

   13 stmts: stmts . ";" cstmt.opt
   14      | stmts . "," cstmt.opt
   96 case: "case" match ":" stmts .  ["case", "default", "}"]

    ","  shift, and go to state 208
    ";"  shift, and go to state 209

    $default  reduce using rule 96 (case)


state 497

   49 stmt: "external" event_or_function "(" unsigned ")" "identifier" "." "identifier" from "identifier" .

    $default  reduce using rule 49 (stmt)
