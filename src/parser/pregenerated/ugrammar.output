Terminals unused in grammar

   UNARY


Grammar

    0 $accept: start "end of command"

    1 start: root

    2 root: error
    3     | MODE_EXP root_exp
    4     | MODE_EXPS root_exps

    5 root_exp: cstmt.opt ";"
    6         | cstmt.opt ","
    7         | cstmt.opt "end of command"
    8         | error ";"
    9         | error ","
   10         | error "end of command"

   11 root_exps: stmts

   12 stmts: cstmt.opt
   13      | stmts ";" cstmt.opt
   14      | stmts "," cstmt.opt

   15 cstmt.opt: /* empty */
   16          | cstmt
   17          | cstmt "|"

   18 cstmt: stmt
   19      | cstmt "|" cstmt
   20      | cstmt "&" cstmt

   21 stmt.opt: /* empty */
   22         | stmt

   23 stmt: primary-exp ":" stmt
   24     | exp

   25 block: "{" stmts "}"
   26      | "{" error "}"
   27      | "{" id "~" id "}"

   28 visibility: /* empty */
   29           | "private"
   30           | "protected"
   31           | "public"

   32 proto: visibility exp

   33 protos.1: proto
   34         | protos.1 "," proto

   35 protos: /* empty */
   36       | ":" protos.1

   37 exp: "class" lvalue protos block
   38    | "package" lvalue protos block

   39 id.0: /* empty */
   40     | id.1 comma.opt

   41 id.1: id
   42     | id.1 "," id

   43 stmt: "enum" id "{" id.0 "}"

   44 from: "identifier"

   45 event_or_function: "function"
   46                  | "identifier"

   47 stmt: "external" "identifier" "identifier"
   48     | "external" "var" "identifier" "." "identifier" from "identifier"
   49     | "external" event_or_function "(" unsigned ")" "identifier" "." "identifier" from "identifier"
   50     | "import" lvalue
   51     | exp "!" args.opt tilda.opt

   52 routine: "closure"
   53        | "function"

   54 stmt: routine k1_id formals block
   55     | id id formals block

   56 k1_id: "identifier"
   57      | "this" "." "identifier"
   58      | k1_id "." "identifier"

   59 modifier: "identifier" ":" exp

   60 modifiers: modifier
   61          | modifiers modifier

   62 exp: exp "=" exp
   63    | exp "=" exp modifiers
   64    | lvalue "+=" exp
   65    | lvalue "-=" exp
   66    | lvalue "*=" exp
   67    | lvalue "/=" exp
   68    | lvalue "^=" exp
   69    | lvalue "%=" exp

   70 primary-exp: lvalue "--"
   71            | lvalue "++"
   72            | lvalue "->" id

   73 stmt: "at" identifiers "(" exp tilda.opt ")" stmt onleave.opt
   74     | "at" identifiers "(" event_match ")" stmt onleave.opt
   75     | "every" "(" exp ")" stmt
   76     | "if" "(" stmts ")" stmt else.opt
   77     | "freezeif" "(" exp ")" stmt
   78     | "stopif" "(" exp ")" stmt
   79     | "switch" "(" exp ")" "{" cases default.opt "}"
   80     | "timeout" "(" exp ")" stmt catch.opt else.opt finally.opt
   81     | "return" exp.opt
   82     | "break"
   83     | "continue"
   84     | "waituntil" "(" exp tilda.opt ")"
   85     | "waituntil" "(" event_match ")"
   86     | "whenever" "(" exp tilda.opt ")" stmt else.opt
   87     | "whenever" "(" event_match ")" stmt else.opt

   88 default.opt: /* empty */
   89            | "default" ":" stmts

   90 else.opt: /* empty */
   91         | "else" stmt

   92 onleave.opt: /* empty */
   93            | "onleave" stmt

   94 cases: /* empty */
   95      | cases case

   96 case: "case" match ":" stmts

   97 catches.1: catch
   98          | catches.1 catch

   99 match: exp
  100      | exp "if" exp

  101 match.opt: /* empty */
  102          | "(" match ")"

  103 catch: "catch" match.opt block

  104 catch.opt: /* empty */
  105          | "catch" block

  106 finally.opt: /* empty */
  107            | "finally" block

  108 stmt: "try" block catches.1 else.opt finally.opt
  109     | "try" block "finally" block
  110     | "throw" exp.opt
  111     | "loop" stmt
  112     | "for" "(" exp ")" stmt
  113     | "for" "(" stmt.opt ";" exp ";" stmt.opt ")" stmt
  114     | "for" "(" "var" "identifier" in_or_colon exp ")" stmt
  115     | "while" "(" exp ")" stmt

  116 in_or_colon: "in"
  117            | ":"

  118 primary-exp: block
  119            | "do" "(" exp ")" block

  120 detach: "detach"
  121       | "disown"

  122 primary-exp: "assert" "(" exp ")"
  123            | "assert" "{" claims "}"
  124            | detach "(" exp ")"
  125            | detach block
  126            | "isdef" "(" k1_id ")"
  127            | "watch" "(" exp ")"

  128 lvalue: id
  129       | primary-exp "." id
  130       | primary-exp "." "*"

  131 primary-exp: "&" id
  132            | primary-exp "." "&" id

  133 id: "identifier"

  134 bitor-exp: "var" bitor-exp
  135          | "const" "var" bitor-exp

  136 primary-exp: lvalue
  137            | lvalue args

  138 new: "new" "identifier" args.opt

  139 bitor-exp: new

  140 id: "new"

  141 primary-exp: routine formals block

  142 float-exp: "float"

  143 duration: "duration"
  144         | duration "duration"

  145 assoc: exp "=>" exp

  146 assocs.1: assoc
  147         | assocs.1 "," assoc

  148 assocs: "=>"
  149       | assocs.1 comma.opt

  150 dictionary: "[" assocs "]"

  151 tuple.exps: /* empty */
  152           | exps.1 ","
  153           | exps.2

  154 tuple: "(" tuple.exps ")"

  155 literal-exp: float-exp
  156            | "angle"
  157            | duration
  158            | string
  159            | "[" exps "]"
  160            | dictionary
  161            | tuple

  162 string: "string"
  163       | string "string"

  164 literal-exp: "__HERE__"

  165 event_match: exp "?" args.opt tilda.opt guard.opt

  166 guard.opt: /* empty */
  167          | "if" exp

  168 tilda.opt: /* empty */
  169          | "~" exp

  170 lvalue: primary-exp "[" exps "]"

  171 literal-exp: "this"
  172            | "call"

  173 primary-exp: literal-exp
  174            | "(" exp ")"
  175            | "(" error ")"
  176            | primary-exp "**" primary-exp

  177 unary-exp: primary-exp
  178          | "--" lvalue
  179          | "++" lvalue
  180          | "+" unary-exp
  181          | "-" unary-exp
  182          | "!" unary-exp
  183          | "compl" unary-exp

  184 bitor-exp: unary-exp
  185          | bitor-exp "+" bitor-exp
  186          | bitor-exp "-" bitor-exp
  187          | bitor-exp "*" bitor-exp
  188          | bitor-exp "/" bitor-exp
  189          | bitor-exp "%" bitor-exp
  190          | bitor-exp "^" bitor-exp
  191          | bitor-exp "<<" bitor-exp
  192          | bitor-exp "bitand" bitor-exp
  193          | bitor-exp "bitor" bitor-exp
  194          | bitor-exp ">>" bitor-exp

  195 rel-op: "!="
  196       | "!=="
  197       | "<"
  198       | "<="
  199       | "=="
  200       | "==="
  201       | "=~="
  202       | ">"
  203       | ">="
  204       | "~="

  205 rel-exp: bitor-exp rel-ops

  206 rel-ops: /* empty */
  207        | rel-ops rel-op bitor-exp

  208 exp: rel-exp
  209    | exp "&&" exp
  210    | exp "||" exp
  211    | exp "in" exp
  212    | exp "!" "in" exp

  213 exp.opt: /* empty */
  214        | exp

  215 unsigned: "float"

  216 exp: "%unscope:" unsigned

  217 primary-exp: "%exp:" unsigned

  218 lvalue: "%lvalue:" unsigned
  219       | "%id:" unsigned
  220       | primary-exp "." "%id:" unsigned

  221 primary-exp: lvalue "(" "%exps:" unsigned ")"

  222 claims: /* empty */
  223       | claims.1 semi.opt

  224 claims.1: exp
  225         | claims.1 ";" exp

  226 exps: /* empty */
  227     | exps.1 comma.opt

  228 exps.1: exp
  229       | exps.1 "," exp

  230 exps.2: exps.1 "," exp

  231 args: "(" exps ")"

  232 args.opt: /* empty */
  233         | args

  234 identifiers: /* empty */
  235            | identifiers "identifier"

  236 typespec: ":" exp

  237 typespec.opt: /* empty */
  238             | typespec

  239 formal: var.opt "identifier" typespec.opt
  240       | var.opt "identifier" "=" exp typespec.opt
  241       | var.opt "identifier" "[" "]"

  242 formals.1: formal
  243          | formals.1 "," formal

  244 formals.0: /* empty */
  245          | formals.1 comma.opt

  246 formals: /* empty */
  247        | "(" formals.0 ")"

  248 comma.opt: /* empty */
  249          | ","

  250 semi.opt: /* empty */
  251         | ";"

  252 var.opt: /* empty */
  253        | "var"


Terminals, with rules where they appear

"end of command" (0) 0 7 10
error (256) 2 8 9 10 26 175
MODE_EXP (258) 3
MODE_EXPS (259) 4
"__HERE__" (260) 164
"=" (261) 62 63 240
"break" (262) 82
"case" (263) 96
"catch" (264) 103 105
"closure" (265) 52
"const" (266) 135
"continue" (267) 83
":" (268) 23 36 59 89 96 117 236
"default" (269) 89
"else" (270) 91
"finally" (271) 107 109
"freezeif" (272) 77
"function" (273) 45 53
"if" (274) 76 100 167
"in" (275) 116 211 212
"isdef" (276) 126
"{" (277) 25 26 27 43 79 123
"[" (278) 150 159 170 241
"(" (279) 49 73 74 75 76 77 78 79 80 84 85 86 87 102 112 113 114 115
    119 122 124 126 127 154 174 175 221 231 247
"onleave" (280) 93
"." (281) 48 49 57 58 129 130 132 220
"}" (282) 25 26 27 43 79 123
"]" (283) 150 159 170 241
"return" (284) 81
")" (285) 49 73 74 75 76 77 78 79 80 84 85 86 87 102 112 113 114 115
    119 122 124 126 127 154 174 175 221 231 247
"stopif" (286) 78
"switch" (287) 79
"throw" (288) 110
"~" (289) 27 169
"timeout" (290) 80
"try" (291) 108 109
"var" (292) 48 114 134 135 253
"waituntil" (293) 84 85
"watch" (294) 127
"whenever" (295) 86 87
"," (296) 6 9 14 34 42 147 152 229 230 243 249
";" (297) 5 8 13 113 225 251
"&" (298) 20 131 132
"|" (299) 17 19
"every" (300) 75
"for" (301) 112 113 114
"loop" (302) 111
"while" (303) 115
"at" (304) 73 74
"identifier" (305) 44 46 47 48 49 56 57 58 59 114 133 138 235 239 240
    241
ASSIGN (306)
EMPTY (307)
UNARY (308)
"private" (309) 29
"protected" (310) 30
"public" (311) 31
"class" (312) 37
"package" (313) 38
"enum" (314) 43
"external" (315) 47 48 49
"import" (316) 50
"^=" (317) 68
"-=" (318) 65
"%=" (319) 69
"+=" (320) 64
"/=" (321) 67
"*=" (322) 66
"--" (323) 70 178
"++" (324) 71 179
"->" (325) 72
"do" (326) 119
"assert" (327) 122 123
"detach" (328) 120
"disown" (329) 121
"new" (330) 138 140
"angle" (331) 156
"duration" (332) 143 144
"float" (333) 142 215
"=>" (334) 145 148
"string" (335) 162 163
"?" (336) 165
"call" (337) 172
"this" (338) 57 171
"!" (339) 51 182 212
"bitand" (340) 192
"bitor" (341) 193
"^" (342) 190
"compl" (343) 183
">>" (344) 194
"<<" (345) 191
"-" (346) 181 186
"%" (347) 189
"+" (348) 180 185
"/" (349) 188
"*" (350) 130 187
"**" (351) 176
"=~=" (352) 201
"==" (353) 199
"===" (354) 200
">=" (355) 203
">" (356) 202
"<=" (357) 198
"<" (358) 197
"!=" (359) 195
"!==" (360) 196
"~=" (361) 204
"&&" (362) 209
"||" (363) 210
"%unscope:" (364) 216
"%exp:" (365) 217
"%lvalue:" (366) 218
"%id:" (367) 219 220
"%exps:" (368) 221


Nonterminals, with rules where they appear

$accept (114)
    on left: 0
start (115)
    on left: 1, on right: 0
root (116)
    on left: 2 3 4, on right: 1
root_exp (117)
    on left: 5 6 7 8 9 10, on right: 3
root_exps (118)
    on left: 11, on right: 4
stmts (119)
    on left: 12 13 14, on right: 11 13 14 25 76 89 96
cstmt.opt (120)
    on left: 15 16 17, on right: 5 6 7 12 13 14
cstmt (121)
    on left: 18 19 20, on right: 16 17 19 20
stmt.opt (122)
    on left: 21 22, on right: 113
stmt (123)
    on left: 23 24 43 47 48 49 50 51 54 55 73 74 75 76 77 78 79 80
    81 82 83 84 85 86 87 108 109 110 111 112 113 114 115, on right:
    18 22 23 73 74 75 76 77 78 80 86 87 91 93 111 112 113 114 115
block (124)
    on left: 25 26 27, on right: 37 38 54 55 103 105 107 108 109 118
    119 125 141
visibility (125)
    on left: 28 29 30 31, on right: 32
proto (126)
    on left: 32, on right: 33 34
protos.1 (127)
    on left: 33 34, on right: 34 36
protos (128)
    on left: 35 36, on right: 37 38
exp (129)
    on left: 37 38 62 63 64 65 66 67 68 69 208 209 210 211 212 216,
    on right: 24 32 51 59 62 63 64 65 66 67 68 69 73 75 77 78 79 80
    84 86 99 100 112 113 114 115 119 122 124 127 145 165 167 169 174
    209 210 211 212 214 224 225 228 229 230 236 240
id.0 (130)
    on left: 39 40, on right: 43
id.1 (131)
    on left: 41 42, on right: 40 42
from (132)
    on left: 44, on right: 48 49
event_or_function (133)
    on left: 45 46, on right: 49
routine (134)
    on left: 52 53, on right: 54 141
k1_id (135)
    on left: 56 57 58, on right: 54 58 126
modifier (136)
    on left: 59, on right: 60 61
modifiers (137)
    on left: 60 61, on right: 61 63
primary-exp (138)
    on left: 70 71 72 118 119 122 123 124 125 126 127 131 132 136 137
    141 173 174 175 176 217 221, on right: 23 129 130 132 170 176 177
    220
default.opt (139)
    on left: 88 89, on right: 79
else.opt (140)
    on left: 90 91, on right: 76 80 86 87 108
onleave.opt (141)
    on left: 92 93, on right: 73 74
cases (142)
    on left: 94 95, on right: 79 95
case (143)
    on left: 96, on right: 95
catches.1 (144)
    on left: 97 98, on right: 98 108
match (145)
    on left: 99 100, on right: 96 102
match.opt (146)
    on left: 101 102, on right: 103
catch (147)
    on left: 103, on right: 97 98
catch.opt (148)
    on left: 104 105, on right: 80
finally.opt (149)
    on left: 106 107, on right: 80 108
in_or_colon (150)
    on left: 116 117, on right: 114
detach (151)
    on left: 120 121, on right: 124 125
lvalue (152)
    on left: 128 129 130 170 218 219 220, on right: 37 38 50 64 65
    66 67 68 69 70 71 72 136 137 178 179 221
id (153)
    on left: 133 140, on right: 27 41 42 43 55 72 128 129 131 132
bitor-exp (154)
    on left: 134 135 139 184 185 186 187 188 189 190 191 192 193 194,
    on right: 134 135 185 186 187 188 189 190 191 192 193 194 205 207
new (155)
    on left: 138, on right: 139
float-exp (156)
    on left: 142, on right: 155
duration (157)
    on left: 143 144, on right: 144 157
assoc (158)
    on left: 145, on right: 146 147
assocs.1 (159)
    on left: 146 147, on right: 147 149
assocs (160)
    on left: 148 149, on right: 150
dictionary (161)
    on left: 150, on right: 160
tuple.exps (162)
    on left: 151 152 153, on right: 154
tuple (163)
    on left: 154, on right: 161
literal-exp (164)
    on left: 155 156 157 158 159 160 161 164 171 172, on right: 173
string (165)
    on left: 162 163, on right: 158 163
event_match (166)
    on left: 165, on right: 74 85 87
guard.opt (167)
    on left: 166 167, on right: 165
tilda.opt (168)
    on left: 168 169, on right: 51 73 84 86 165
unary-exp (169)
    on left: 177 178 179 180 181 182 183, on right: 180 181 182 183
    184
rel-op (170)
    on left: 195 196 197 198 199 200 201 202 203 204, on right: 207
rel-exp (171)
    on left: 205, on right: 208
rel-ops (172)
    on left: 206 207, on right: 205 207
exp.opt (173)
    on left: 213 214, on right: 81 110
unsigned (174)
    on left: 215, on right: 49 216 217 218 219 220 221
claims (175)
    on left: 222 223, on right: 123
claims.1 (176)
    on left: 224 225, on right: 223 225
exps (177)
    on left: 226 227, on right: 159 170 231
exps.1 (178)
    on left: 228 229, on right: 152 227 229 230
exps.2 (179)
    on left: 230, on right: 153
args (180)
    on left: 231, on right: 137 233
args.opt (181)
    on left: 232 233, on right: 51 138 165
identifiers (182)
    on left: 234 235, on right: 73 74 235
typespec (183)
    on left: 236, on right: 238
typespec.opt (184)
    on left: 237 238, on right: 239 240
formal (185)
    on left: 239 240 241, on right: 242 243
formals.1 (186)
    on left: 242 243, on right: 243 245
formals.0 (187)
    on left: 244 245, on right: 247
formals (188)
    on left: 246 247, on right: 54 55 141
comma.opt (189)
    on left: 248 249, on right: 40 149 227 245
semi.opt (190)
    on left: 250 251, on right: 223
var.opt (191)
    on left: 252 253, on right: 239 240 241


state 0

    0 $accept: . start "end of command"
    1 start: . root
    2 root: . error
    3     | . MODE_EXP root_exp
    4     | . MODE_EXPS root_exps

    error      shift, and go to state 1
    MODE_EXP   shift, and go to state 2
    MODE_EXPS  shift, and go to state 3

    start  go to state 4
    root   go to state 5


state 1

    2 root: error .

    $default  reduce using rule 2 (root)


state 2

    3 root: MODE_EXP . root_exp
    5 root_exp: . cstmt.opt ";"
    6         | . cstmt.opt ","
    7         | . cstmt.opt "end of command"
    8         | . error ";"
    9         | . error ","
   10         | . error "end of command"
   15 cstmt.opt: .  ["end of command", ",", ";"]
   16          | . cstmt
   17          | . cstmt "|"
   18 cstmt: . stmt
   19      | . cstmt "|" cstmt
   20      | . cstmt "&" cstmt
   23 stmt: . primary-exp ":" stmt
   24     | . exp
   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   37 exp: . "class" lvalue protos block
   38    | . "package" lvalue protos block
   43 stmt: . "enum" id "{" id.0 "}"
   47     | . "external" "identifier" "identifier"
   48     | . "external" "var" "identifier" "." "identifier" from "identifier"
   49     | . "external" event_or_function "(" unsigned ")" "identifier" "." "identifier" from "identifier"
   50     | . "import" lvalue
   51     | . exp "!" args.opt tilda.opt
   52 routine: . "closure"
   53        | . "function"
   54 stmt: . routine k1_id formals block
   55     | . id id formals block
   62 exp: . exp "=" exp
   63    | . exp "=" exp modifiers
   64    | . lvalue "+=" exp
   65    | . lvalue "-=" exp
   66    | . lvalue "*=" exp
   67    | . lvalue "/=" exp
   68    | . lvalue "^=" exp
   69    | . lvalue "%=" exp
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
   73 stmt: . "at" identifiers "(" exp tilda.opt ")" stmt onleave.opt
   74     | . "at" identifiers "(" event_match ")" stmt onleave.opt
   75     | . "every" "(" exp ")" stmt
   76     | . "if" "(" stmts ")" stmt else.opt
   77     | . "freezeif" "(" exp ")" stmt
   78     | . "stopif" "(" exp ")" stmt
   79     | . "switch" "(" exp ")" "{" cases default.opt "}"
   80     | . "timeout" "(" exp ")" stmt catch.opt else.opt finally.opt
   81     | . "return" exp.opt
   82     | . "break"
   83     | . "continue"
   84     | . "waituntil" "(" exp tilda.opt ")"
   85     | . "waituntil" "(" event_match ")"
   86     | . "whenever" "(" exp tilda.opt ")" stmt else.opt
   87     | . "whenever" "(" event_match ")" stmt else.opt
  108     | . "try" block catches.1 else.opt finally.opt
  109     | . "try" block "finally" block
  110     | . "throw" exp.opt
  111     | . "loop" stmt
  112     | . "for" "(" exp ")" stmt
  113     | . "for" "(" stmt.opt ";" exp ";" stmt.opt ")" stmt
  114     | . "for" "(" "var" "identifier" in_or_colon exp ")" stmt
  115     | . "while" "(" exp ")" stmt
  118 primary-exp: . block
  119            | . "do" "(" exp ")" block
  120 detach: . "detach"
  121       | . "disown"
  122 primary-exp: . "assert" "(" exp ")"
  123            | . "assert" "{" claims "}"
  124            | . detach "(" exp ")"
  125            | . detach block
  126            | . "isdef" "(" k1_id ")"
  127            | . "watch" "(" exp ")"
  128 lvalue: . id
  129       | . primary-exp "." id
  130       | . primary-exp "." "*"
  131 primary-exp: . "&" id
  132            | . primary-exp "." "&" id
  133 id: . "identifier"
  134 bitor-exp: . "var" bitor-exp
  135          | . "const" "var" bitor-exp
  136 primary-exp: . lvalue
  137            | . lvalue args
  138 new: . "new" "identifier" args.opt
  139 bitor-exp: . new
  140 id: . "new"
  141 primary-exp: . routine formals block
  142 float-exp: . "float"
  143 duration: . "duration"
  144         | . duration "duration"
  150 dictionary: . "[" assocs "]"
  154 tuple: . "(" tuple.exps ")"
  155 literal-exp: . float-exp
  156            | . "angle"
  157            | . duration
  158            | . string
  159            | . "[" exps "]"
  160            | . dictionary
  161            | . tuple
  162 string: . "string"
  163       | . string "string"
  164 literal-exp: . "__HERE__"
  170 lvalue: . primary-exp "[" exps "]"
  171 literal-exp: . "this"
  172            | . "call"
  173 primary-exp: . literal-exp
  174            | . "(" exp ")"
  175            | . "(" error ")"
  176            | . primary-exp "**" primary-exp
  177 unary-exp: . primary-exp
  178          | . "--" lvalue
  179          | . "++" lvalue
  180          | . "+" unary-exp
  181          | . "-" unary-exp
  182          | . "!" unary-exp
  183          | . "compl" unary-exp
  184 bitor-exp: . unary-exp
  185          | . bitor-exp "+" bitor-exp
  186          | . bitor-exp "-" bitor-exp
  187          | . bitor-exp "*" bitor-exp
  188          | . bitor-exp "/" bitor-exp
  189          | . bitor-exp "%" bitor-exp
  190          | . bitor-exp "^" bitor-exp
  191          | . bitor-exp "<<" bitor-exp
  192          | . bitor-exp "bitand" bitor-exp
  193          | . bitor-exp "bitor" bitor-exp
  194          | . bitor-exp ">>" bitor-exp
  205 rel-exp: . bitor-exp rel-ops
  208 exp: . rel-exp
  209    | . exp "&&" exp
  210    | . exp "||" exp
  211    | . exp "in" exp
  212    | . exp "!" "in" exp
  216    | . "%unscope:" unsigned
  217 primary-exp: . "%exp:" unsigned
  218 lvalue: . "%lvalue:" unsigned
  219       | . "%id:" unsigned
  220       | . primary-exp "." "%id:" unsigned
  221 primary-exp: . lvalue "(" "%exps:" unsigned ")"

    error         shift, and go to state 6
    "__HERE__"    shift, and go to state 7
    "break"       shift, and go to state 8
    "closure"     shift, and go to state 9
    "const"       shift, and go to state 10
    "continue"    shift, and go to state 11
    "freezeif"    shift, and go to state 12
    "function"    shift, and go to state 13
    "if"          shift, and go to state 14
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "return"      shift, and go to state 19
    "stopif"      shift, and go to state 20
    "switch"      shift, and go to state 21
    "throw"       shift, and go to state 22
    "timeout"     shift, and go to state 23
    "try"         shift, and go to state 24
    "var"         shift, and go to state 25
    "waituntil"   shift, and go to state 26
    "watch"       shift, and go to state 27
    "whenever"    shift, and go to state 28
    "&"           shift, and go to state 29
    "every"       shift, and go to state 30
    "for"         shift, and go to state 31
    "loop"        shift, and go to state 32
    "while"       shift, and go to state 33
    "at"          shift, and go to state 34
    "identifier"  shift, and go to state 35
    "class"       shift, and go to state 36
    "package"     shift, and go to state 37
    "enum"        shift, and go to state 38
    "external"    shift, and go to state 39
    "import"      shift, and go to state 40
    "--"          shift, and go to state 41
    "++"          shift, and go to state 42
    "do"          shift, and go to state 43
    "assert"      shift, and go to state 44
    "detach"      shift, and go to state 45
    "disown"      shift, and go to state 46
    "new"         shift, and go to state 47
    "angle"       shift, and go to state 48
    "duration"    shift, and go to state 49
    "float"       shift, and go to state 50
    "string"      shift, and go to state 51
    "call"        shift, and go to state 52
    "this"        shift, and go to state 53
    "!"           shift, and go to state 54
    "compl"       shift, and go to state 55
    "-"           shift, and go to state 56
    "+"           shift, and go to state 57
    "%unscope:"   shift, and go to state 58
    "%exp:"       shift, and go to state 59
    "%lvalue:"    shift, and go to state 60
    "%id:"        shift, and go to state 61

    "end of command"  reduce using rule 15 (cstmt.opt)
    ","               reduce using rule 15 (cstmt.opt)
    ";"               reduce using rule 15 (cstmt.opt)

    root_exp     go to state 62
    cstmt.opt    go to state 63
    cstmt        go to state 64
    stmt         go to state 65
    block        go to state 66
    exp          go to state 67
    routine      go to state 68
    primary-exp  go to state 69
    detach       go to state 70
    lvalue       go to state 71
    id           go to state 72
    bitor-exp    go to state 73
    new          go to state 74
    float-exp    go to state 75
    duration     go to state 76
    dictionary   go to state 77
    tuple        go to state 78
    literal-exp  go to state 79
    string       go to state 80
    unary-exp    go to state 81
    rel-exp      go to state 82


state 3

    4 root: MODE_EXPS . root_exps
   11 root_exps: . stmts
   12 stmts: . cstmt.opt
   13      | . stmts ";" cstmt.opt
   14      | . stmts "," cstmt.opt
   15 cstmt.opt: .  ["end of command", ",", ";"]
   16          | . cstmt
   17          | . cstmt "|"
   18 cstmt: . stmt
   19      | . cstmt "|" cstmt
   20      | . cstmt "&" cstmt
   23 stmt: . primary-exp ":" stmt
   24     | . exp
   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   37 exp: . "class" lvalue protos block
   38    | . "package" lvalue protos block
   43 stmt: . "enum" id "{" id.0 "}"
   47     | . "external" "identifier" "identifier"
   48     | . "external" "var" "identifier" "." "identifier" from "identifier"
   49     | . "external" event_or_function "(" unsigned ")" "identifier" "." "identifier" from "identifier"
   50     | . "import" lvalue
   51     | . exp "!" args.opt tilda.opt
   52 routine: . "closure"
   53        | . "function"
   54 stmt: . routine k1_id formals block
   55     | . id id formals block
   62 exp: . exp "=" exp
   63    | . exp "=" exp modifiers
   64    | . lvalue "+=" exp
   65    | . lvalue "-=" exp
   66    | . lvalue "*=" exp
   67    | . lvalue "/=" exp
   68    | . lvalue "^=" exp
   69    | . lvalue "%=" exp
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
   73 stmt: . "at" identifiers "(" exp tilda.opt ")" stmt onleave.opt
   74     | . "at" identifiers "(" event_match ")" stmt onleave.opt
   75     | . "every" "(" exp ")" stmt
   76     | . "if" "(" stmts ")" stmt else.opt
   77     | . "freezeif" "(" exp ")" stmt
   78     | . "stopif" "(" exp ")" stmt
   79     | . "switch" "(" exp ")" "{" cases default.opt "}"
   80     | . "timeout" "(" exp ")" stmt catch.opt else.opt finally.opt
   81     | . "return" exp.opt
   82     | . "break"
   83     | . "continue"
   84     | . "waituntil" "(" exp tilda.opt ")"
   85     | . "waituntil" "(" event_match ")"
   86     | . "whenever" "(" exp tilda.opt ")" stmt else.opt
   87     | . "whenever" "(" event_match ")" stmt else.opt
  108     | . "try" block catches.1 else.opt finally.opt
  109     | . "try" block "finally" block
  110     | . "throw" exp.opt
  111     | . "loop" stmt
  112     | . "for" "(" exp ")" stmt
  113     | . "for" "(" stmt.opt ";" exp ";" stmt.opt ")" stmt
  114     | . "for" "(" "var" "identifier" in_or_colon exp ")" stmt
  115     | . "while" "(" exp ")" stmt
  118 primary-exp: . block
  119            | . "do" "(" exp ")" block
  120 detach: . "detach"
  121       | . "disown"
  122 primary-exp: . "assert" "(" exp ")"
  123            | . "assert" "{" claims "}"
  124            | . detach "(" exp ")"
  125            | . detach block
  126            | . "isdef" "(" k1_id ")"
  127            | . "watch" "(" exp ")"
  128 lvalue: . id
  129       | . primary-exp "." id
  130       | . primary-exp "." "*"
  131 primary-exp: . "&" id
  132            | . primary-exp "." "&" id
  133 id: . "identifier"
  134 bitor-exp: . "var" bitor-exp
  135          | . "const" "var" bitor-exp
  136 primary-exp: . lvalue
  137            | . lvalue args
  138 new: . "new" "identifier" args.opt
  139 bitor-exp: . new
  140 id: . "new"
  141 primary-exp: . routine formals block
  142 float-exp: . "float"
  143 duration: . "duration"
  144         | . duration "duration"
  150 dictionary: . "[" assocs "]"
  154 tuple: . "(" tuple.exps ")"
  155 literal-exp: . float-exp
  156            | . "angle"
  157            | . duration
  158            | . string
  159            | . "[" exps "]"
  160            | . dictionary
  161            | . tuple
  162 string: . "string"
  163       | . string "string"
  164 literal-exp: . "__HERE__"
  170 lvalue: . primary-exp "[" exps "]"
  171 literal-exp: . "this"
  172            | . "call"
  173 primary-exp: . literal-exp
  174            | . "(" exp ")"
  175            | . "(" error ")"
  176            | . primary-exp "**" primary-exp
  177 unary-exp: . primary-exp
  178          | . "--" lvalue
  179          | . "++" lvalue
  180          | . "+" unary-exp
  181          | . "-" unary-exp
  182          | . "!" unary-exp
  183          | . "compl" unary-exp
  184 bitor-exp: . unary-exp
  185          | . bitor-exp "+" bitor-exp
  186          | . bitor-exp "-" bitor-exp
  187          | . bitor-exp "*" bitor-exp
  188          | . bitor-exp "/" bitor-exp
  189          | . bitor-exp "%" bitor-exp
  190          | . bitor-exp "^" bitor-exp
  191          | . bitor-exp "<<" bitor-exp
  192          | . bitor-exp "bitand" bitor-exp
  193          | . bitor-exp "bitor" bitor-exp
  194          | . bitor-exp ">>" bitor-exp
  205 rel-exp: . bitor-exp rel-ops
  208 exp: . rel-exp
  209    | . exp "&&" exp
  210    | . exp "||" exp
  211    | . exp "in" exp
  212    | . exp "!" "in" exp
  216    | . "%unscope:" unsigned
  217 primary-exp: . "%exp:" unsigned
  218 lvalue: . "%lvalue:" unsigned
  219       | . "%id:" unsigned
  220       | . primary-exp "." "%id:" unsigned
  221 primary-exp: . lvalue "(" "%exps:" unsigned ")"

    "__HERE__"    shift, and go to state 7
    "break"       shift, and go to state 8
    "closure"     shift, and go to state 9
    "const"       shift, and go to state 10
    "continue"    shift, and go to state 11
    "freezeif"    shift, and go to state 12
    "function"    shift, and go to state 13
    "if"          shift, and go to state 14
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "return"      shift, and go to state 19
    "stopif"      shift, and go to state 20
    "switch"      shift, and go to state 21
    "throw"       shift, and go to state 22
    "timeout"     shift, and go to state 23
    "try"         shift, and go to state 24
    "var"         shift, and go to state 25
    "waituntil"   shift, and go to state 26
    "watch"       shift, and go to state 27
    "whenever"    shift, and go to state 28
    "&"           shift, and go to state 29
    "every"       shift, and go to state 30
    "for"         shift, and go to state 31
    "loop"        shift, and go to state 32
    "while"       shift, and go to state 33
    "at"          shift, and go to state 34
    "identifier"  shift, and go to state 35
    "class"       shift, and go to state 36
    "package"     shift, and go to state 37
    "enum"        shift, and go to state 38
    "external"    shift, and go to state 39
    "import"      shift, and go to state 40
    "--"          shift, and go to state 41
    "++"          shift, and go to state 42
    "do"          shift, and go to state 43
    "assert"      shift, and go to state 44
    "detach"      shift, and go to state 45
    "disown"      shift, and go to state 46
    "new"         shift, and go to state 47
    "angle"       shift, and go to state 48
    "duration"    shift, and go to state 49
    "float"       shift, and go to state 50
    "string"      shift, and go to state 51
    "call"        shift, and go to state 52
    "this"        shift, and go to state 53
    "!"           shift, and go to state 54
    "compl"       shift, and go to state 55
    "-"           shift, and go to state 56
    "+"           shift, and go to state 57
    "%unscope:"   shift, and go to state 58
    "%exp:"       shift, and go to state 59
    "%lvalue:"    shift, and go to state 60
    "%id:"        shift, and go to state 61

    $default  reduce using rule 15 (cstmt.opt)

    root_exps    go to state 83
    stmts        go to state 84
    cstmt.opt    go to state 85
    cstmt        go to state 64
    stmt         go to state 65
    block        go to state 66
    exp          go to state 67
    routine      go to state 68
    primary-exp  go to state 69
    detach       go to state 70
    lvalue       go to state 71
    id           go to state 72
    bitor-exp    go to state 73
    new          go to state 74
    float-exp    go to state 75
    duration     go to state 76
    dictionary   go to state 77
    tuple        go to state 78
    literal-exp  go to state 79
    string       go to state 80
    unary-exp    go to state 81
    rel-exp      go to state 82


state 4

    0 $accept: start . "end of command"

    "end of command"  shift, and go to state 86


state 5

    1 start: root .

    $default  reduce using rule 1 (start)


state 6

    8 root_exp: error . ";"
    9         | error . ","
   10         | error . "end of command"

    "end of command"  shift, and go to state 87
    ","               shift, and go to state 88
    ";"               shift, and go to state 89


state 7

  164 literal-exp: "__HERE__" .

    $default  reduce using rule 164 (literal-exp)


state 8

   82 stmt: "break" .

    $default  reduce using rule 82 (stmt)


state 9

   52 routine: "closure" .

    $default  reduce using rule 52 (routine)


state 10

  135 bitor-exp: "const" . "var" bitor-exp

    "var"  shift, and go to state 90


state 11

   83 stmt: "continue" .

    $default  reduce using rule 83 (stmt)


state 12

   77 stmt: "freezeif" . "(" exp ")" stmt

    "("  shift, and go to state 91


state 13

   53 routine: "function" .

    $default  reduce using rule 53 (routine)


state 14

   76 stmt: "if" . "(" stmts ")" stmt else.opt

    "("  shift, and go to state 92


state 15

  126 primary-exp: "isdef" . "(" k1_id ")"

    "("  shift, and go to state 93


state 16

   12 stmts: . cstmt.opt
   13      | . stmts ";" cstmt.opt
   14      | . stmts "," cstmt.opt
   15 cstmt.opt: .  ["}", ",", ";"]
   16          | . cstmt
   17          | . cstmt "|"
   18 cstmt: . stmt
   19      | . cstmt "|" cstmt
   20      | . cstmt "&" cstmt
   23 stmt: . primary-exp ":" stmt
   24     | . exp
   25 block: . "{" stmts "}"
   25      | "{" . stmts "}"
   26      | . "{" error "}"
   26      | "{" . error "}"
   27      | . "{" id "~" id "}"
   27      | "{" . id "~" id "}"
   37 exp: . "class" lvalue protos block
   38    | . "package" lvalue protos block
   43 stmt: . "enum" id "{" id.0 "}"
   47     | . "external" "identifier" "identifier"
   48     | . "external" "var" "identifier" "." "identifier" from "identifier"
   49     | . "external" event_or_function "(" unsigned ")" "identifier" "." "identifier" from "identifier"
   50     | . "import" lvalue
   51     | . exp "!" args.opt tilda.opt
   52 routine: . "closure"
   53        | . "function"
   54 stmt: . routine k1_id formals block
   55     | . id id formals block
   62 exp: . exp "=" exp
   63    | . exp "=" exp modifiers
   64    | . lvalue "+=" exp
   65    | . lvalue "-=" exp
   66    | . lvalue "*=" exp
   67    | . lvalue "/=" exp
   68    | . lvalue "^=" exp
   69    | . lvalue "%=" exp
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
   73 stmt: . "at" identifiers "(" exp tilda.opt ")" stmt onleave.opt
   74     | . "at" identifiers "(" event_match ")" stmt onleave.opt
   75     | . "every" "(" exp ")" stmt
   76     | . "if" "(" stmts ")" stmt else.opt
   77     | . "freezeif" "(" exp ")" stmt
   78     | . "stopif" "(" exp ")" stmt
   79     | . "switch" "(" exp ")" "{" cases default.opt "}"
   80     | . "timeout" "(" exp ")" stmt catch.opt else.opt finally.opt
   81     | . "return" exp.opt
   82     | . "break"
   83     | . "continue"
   84     | . "waituntil" "(" exp tilda.opt ")"
   85     | . "waituntil" "(" event_match ")"
   86     | . "whenever" "(" exp tilda.opt ")" stmt else.opt
   87     | . "whenever" "(" event_match ")" stmt else.opt
  108     | . "try" block catches.1 else.opt finally.opt
  109     | . "try" block "finally" block
  110     | . "throw" exp.opt
  111     | . "loop" stmt
  112     | . "for" "(" exp ")" stmt
  113     | . "for" "(" stmt.opt ";" exp ";" stmt.opt ")" stmt
  114     | . "for" "(" "var" "identifier" in_or_colon exp ")" stmt
  115     | . "while" "(" exp ")" stmt
  118 primary-exp: . block
  119            | . "do" "(" exp ")" block
  120 detach: . "detach"
  121       | . "disown"
  122 primary-exp: . "assert" "(" exp ")"
  123            | . "assert" "{" claims "}"
  124            | . detach "(" exp ")"
  125            | . detach block
  126            | . "isdef" "(" k1_id ")"
  127            | . "watch" "(" exp ")"
  128 lvalue: . id
  129       | . primary-exp "." id
  130       | . primary-exp "." "*"
  131 primary-exp: . "&" id
  132            | . primary-exp "." "&" id
  133 id: . "identifier"
  134 bitor-exp: . "var" bitor-exp
  135          | . "const" "var" bitor-exp
  136 primary-exp: . lvalue
  137            | . lvalue args
  138 new: . "new" "identifier" args.opt
  139 bitor-exp: . new
  140 id: . "new"
  141 primary-exp: . routine formals block
  142 float-exp: . "float"
  143 duration: . "duration"
  144         | . duration "duration"
  150 dictionary: . "[" assocs "]"
  154 tuple: . "(" tuple.exps ")"
  155 literal-exp: . float-exp
  156            | . "angle"
  157            | . duration
  158            | . string
  159            | . "[" exps "]"
  160            | . dictionary
  161            | . tuple
  162 string: . "string"
  163       | . string "string"
  164 literal-exp: . "__HERE__"
  170 lvalue: . primary-exp "[" exps "]"
  171 literal-exp: . "this"
  172            | . "call"
  173 primary-exp: . literal-exp
  174            | . "(" exp ")"
  175            | . "(" error ")"
  176            | . primary-exp "**" primary-exp
  177 unary-exp: . primary-exp
  178          | . "--" lvalue
  179          | . "++" lvalue
  180          | . "+" unary-exp
  181          | . "-" unary-exp
  182          | . "!" unary-exp
  183          | . "compl" unary-exp
  184 bitor-exp: . unary-exp
  185          | . bitor-exp "+" bitor-exp
  186          | . bitor-exp "-" bitor-exp
  187          | . bitor-exp "*" bitor-exp
  188          | . bitor-exp "/" bitor-exp
  189          | . bitor-exp "%" bitor-exp
  190          | . bitor-exp "^" bitor-exp
  191          | . bitor-exp "<<" bitor-exp
  192          | . bitor-exp "bitand" bitor-exp
  193          | . bitor-exp "bitor" bitor-exp
  194          | . bitor-exp ">>" bitor-exp
  205 rel-exp: . bitor-exp rel-ops
  208 exp: . rel-exp
  209    | . exp "&&" exp
  210    | . exp "||" exp
  211    | . exp "in" exp
  212    | . exp "!" "in" exp
  216    | . "%unscope:" unsigned
  217 primary-exp: . "%exp:" unsigned
  218 lvalue: . "%lvalue:" unsigned
  219       | . "%id:" unsigned
  220       | . primary-exp "." "%id:" unsigned
  221 primary-exp: . lvalue "(" "%exps:" unsigned ")"

    error         shift, and go to state 94
    "__HERE__"    shift, and go to state 7
    "break"       shift, and go to state 8
    "closure"     shift, and go to state 9
    "const"       shift, and go to state 10
    "continue"    shift, and go to state 11
    "freezeif"    shift, and go to state 12
    "function"    shift, and go to state 13
    "if"          shift, and go to state 14
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "return"      shift, and go to state 19
    "stopif"      shift, and go to state 20
    "switch"      shift, and go to state 21
    "throw"       shift, and go to state 22
    "timeout"     shift, and go to state 23
    "try"         shift, and go to state 24
    "var"         shift, and go to state 25
    "waituntil"   shift, and go to state 26
    "watch"       shift, and go to state 27
    "whenever"    shift, and go to state 28
    "&"           shift, and go to state 29
    "every"       shift, and go to state 30
    "for"         shift, and go to state 31
    "loop"        shift, and go to state 32
    "while"       shift, and go to state 33
    "at"          shift, and go to state 34
    "identifier"  shift, and go to state 35
    "class"       shift, and go to state 36
    "package"     shift, and go to state 37
    "enum"        shift, and go to state 38
    "external"    shift, and go to state 39
    "import"      shift, and go to state 40
    "--"          shift, and go to state 41
    "++"          shift, and go to state 42
    "do"          shift, and go to state 43
    "assert"      shift, and go to state 44
    "detach"      shift, and go to state 45
    "disown"      shift, and go to state 46
    "new"         shift, and go to state 47
    "angle"       shift, and go to state 48
    "duration"    shift, and go to state 49
    "float"       shift, and go to state 50
    "string"      shift, and go to state 51
    "call"        shift, and go to state 52
    "this"        shift, and go to state 53
    "!"           shift, and go to state 54
    "compl"       shift, and go to state 55
    "-"           shift, and go to state 56
    "+"           shift, and go to state 57
    "%unscope:"   shift, and go to state 58
    "%exp:"       shift, and go to state 59
    "%lvalue:"    shift, and go to state 60
    "%id:"        shift, and go to state 61

    "}"  reduce using rule 15 (cstmt.opt)
    ","  reduce using rule 15 (cstmt.opt)
    ";"  reduce using rule 15 (cstmt.opt)

    stmts        go to state 95
    cstmt.opt    go to state 85
    cstmt        go to state 64
    stmt         go to state 65
    block        go to state 66
    exp          go to state 67
    routine      go to state 68
    primary-exp  go to state 69
    detach       go to state 70
    lvalue       go to state 71
    id           go to state 96
    bitor-exp    go to state 73
    new          go to state 74
    float-exp    go to state 75
    duration     go to state 76
    dictionary   go to state 77
    tuple        go to state 78
    literal-exp  go to state 79
    string       go to state 80
    unary-exp    go to state 81
    rel-exp      go to state 82


state 17

   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   37 exp: . "class" lvalue protos block
   38    | . "package" lvalue protos block
   52 routine: . "closure"
   53        | . "function"
   62 exp: . exp "=" exp
   63    | . exp "=" exp modifiers
   64    | . lvalue "+=" exp
   65    | . lvalue "-=" exp
   66    | . lvalue "*=" exp
   67    | . lvalue "/=" exp
   68    | . lvalue "^=" exp
   69    | . lvalue "%=" exp
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
  118            | . block
  119            | . "do" "(" exp ")" block
  120 detach: . "detach"
  121       | . "disown"
  122 primary-exp: . "assert" "(" exp ")"
  123            | . "assert" "{" claims "}"
  124            | . detach "(" exp ")"
  125            | . detach block
  126            | . "isdef" "(" k1_id ")"
  127            | . "watch" "(" exp ")"
  128 lvalue: . id
  129       | . primary-exp "." id
  130       | . primary-exp "." "*"
  131 primary-exp: . "&" id
  132            | . primary-exp "." "&" id
  133 id: . "identifier"
  134 bitor-exp: . "var" bitor-exp
  135          | . "const" "var" bitor-exp
  136 primary-exp: . lvalue
  137            | . lvalue args
  138 new: . "new" "identifier" args.opt
  139 bitor-exp: . new
  140 id: . "new"
  141 primary-exp: . routine formals block
  142 float-exp: . "float"
  143 duration: . "duration"
  144         | . duration "duration"
  145 assoc: . exp "=>" exp
  146 assocs.1: . assoc
  147         | . assocs.1 "," assoc
  148 assocs: . "=>"
  149       | . assocs.1 comma.opt
  150 dictionary: . "[" assocs "]"
  150           | "[" . assocs "]"
  154 tuple: . "(" tuple.exps ")"
  155 literal-exp: . float-exp
  156            | . "angle"
  157            | . duration
  158            | . string
  159            | . "[" exps "]"
  159            | "[" . exps "]"
  160            | . dictionary
  161            | . tuple
  162 string: . "string"
  163       | . string "string"
  164 literal-exp: . "__HERE__"
  170 lvalue: . primary-exp "[" exps "]"
  171 literal-exp: . "this"
  172            | . "call"
  173 primary-exp: . literal-exp
  174            | . "(" exp ")"
  175            | . "(" error ")"
  176            | . primary-exp "**" primary-exp
  177 unary-exp: . primary-exp
  178          | . "--" lvalue
  179          | . "++" lvalue
  180          | . "+" unary-exp
  181          | . "-" unary-exp
  182          | . "!" unary-exp
  183          | . "compl" unary-exp
  184 bitor-exp: . unary-exp
  185          | . bitor-exp "+" bitor-exp
  186          | . bitor-exp "-" bitor-exp
  187          | . bitor-exp "*" bitor-exp
  188          | . bitor-exp "/" bitor-exp
  189          | . bitor-exp "%" bitor-exp
  190          | . bitor-exp "^" bitor-exp
  191          | . bitor-exp "<<" bitor-exp
  192          | . bitor-exp "bitand" bitor-exp
  193          | . bitor-exp "bitor" bitor-exp
  194          | . bitor-exp ">>" bitor-exp
  205 rel-exp: . bitor-exp rel-ops
  208 exp: . rel-exp
  209    | . exp "&&" exp
  210    | . exp "||" exp
  211    | . exp "in" exp
  212    | . exp "!" "in" exp
  216    | . "%unscope:" unsigned
  217 primary-exp: . "%exp:" unsigned
  218 lvalue: . "%lvalue:" unsigned
  219       | . "%id:" unsigned
  220       | . primary-exp "." "%id:" unsigned
  221 primary-exp: . lvalue "(" "%exps:" unsigned ")"
  226 exps: .  ["]"]
  227     | . exps.1 comma.opt
  228 exps.1: . exp
  229       | . exps.1 "," exp

    "__HERE__"    shift, and go to state 7
    "closure"     shift, and go to state 9
    "const"       shift, and go to state 10
    "function"    shift, and go to state 13
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "var"         shift, and go to state 25
    "watch"       shift, and go to state 27
    "&"           shift, and go to state 29
    "identifier"  shift, and go to state 35
    "class"       shift, and go to state 36
    "package"     shift, and go to state 37
    "--"          shift, and go to state 41
    "++"          shift, and go to state 42
    "do"          shift, and go to state 43
    "assert"      shift, and go to state 44
    "detach"      shift, and go to state 45
    "disown"      shift, and go to state 46
    "new"         shift, and go to state 47
    "angle"       shift, and go to state 48
    "duration"    shift, and go to state 49
    "float"       shift, and go to state 50
    "=>"          shift, and go to state 97
    "string"      shift, and go to state 51
    "call"        shift, and go to state 52
    "this"        shift, and go to state 53
    "!"           shift, and go to state 54
    "compl"       shift, and go to state 55
    "-"           shift, and go to state 56
    "+"           shift, and go to state 57
    "%unscope:"   shift, and go to state 58
    "%exp:"       shift, and go to state 59
    "%lvalue:"    shift, and go to state 60
    "%id:"        shift, and go to state 61

    $default  reduce using rule 226 (exps)

    block        go to state 66
    exp          go to state 98
    routine      go to state 99
    primary-exp  go to state 100
    detach       go to state 70
    lvalue       go to state 71
    id           go to state 101
    bitor-exp    go to state 73
    new          go to state 74
    float-exp    go to state 75
    duration     go to state 76
    assoc        go to state 102
    assocs.1     go to state 103
    assocs       go to state 104
    dictionary   go to state 77
    tuple        go to state 78
    literal-exp  go to state 79
    string       go to state 80
    unary-exp    go to state 81
    rel-exp      go to state 82
    exps         go to state 105
    exps.1       go to state 106


state 18

   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   37 exp: . "class" lvalue protos block
   38    | . "package" lvalue protos block
   52 routine: . "closure"
   53        | . "function"
   62 exp: . exp "=" exp
   63    | . exp "=" exp modifiers
   64    | . lvalue "+=" exp
   65    | . lvalue "-=" exp
   66    | . lvalue "*=" exp
   67    | . lvalue "/=" exp
   68    | . lvalue "^=" exp
   69    | . lvalue "%=" exp
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
  118            | . block
  119            | . "do" "(" exp ")" block
  120 detach: . "detach"
  121       | . "disown"
  122 primary-exp: . "assert" "(" exp ")"
  123            | . "assert" "{" claims "}"
  124            | . detach "(" exp ")"
  125            | . detach block
  126            | . "isdef" "(" k1_id ")"
  127            | . "watch" "(" exp ")"
  128 lvalue: . id
  129       | . primary-exp "." id
  130       | . primary-exp "." "*"
  131 primary-exp: . "&" id
  132            | . primary-exp "." "&" id
  133 id: . "identifier"
  134 bitor-exp: . "var" bitor-exp
  135          | . "const" "var" bitor-exp
  136 primary-exp: . lvalue
  137            | . lvalue args
  138 new: . "new" "identifier" args.opt
  139 bitor-exp: . new
  140 id: . "new"
  141 primary-exp: . routine formals block
  142 float-exp: . "float"
  143 duration: . "duration"
  144         | . duration "duration"
  150 dictionary: . "[" assocs "]"
  151 tuple.exps: .  [")"]
  152           | . exps.1 ","
  153           | . exps.2
  154 tuple: . "(" tuple.exps ")"
  154      | "(" . tuple.exps ")"
  155 literal-exp: . float-exp
  156            | . "angle"
  157            | . duration
  158            | . string
  159            | . "[" exps "]"
  160            | . dictionary
  161            | . tuple
  162 string: . "string"
  163       | . string "string"
  164 literal-exp: . "__HERE__"
  170 lvalue: . primary-exp "[" exps "]"
  171 literal-exp: . "this"
  172            | . "call"
  173 primary-exp: . literal-exp
  174            | . "(" exp ")"
  174            | "(" . exp ")"
  175            | . "(" error ")"
  175            | "(" . error ")"
  176            | . primary-exp "**" primary-exp
  177 unary-exp: . primary-exp
  178          | . "--" lvalue
  179          | . "++" lvalue
  180          | . "+" unary-exp
  181          | . "-" unary-exp
  182          | . "!" unary-exp
  183          | . "compl" unary-exp
  184 bitor-exp: . unary-exp
  185          | . bitor-exp "+" bitor-exp
  186          | . bitor-exp "-" bitor-exp
  187          | . bitor-exp "*" bitor-exp
  188          | . bitor-exp "/" bitor-exp
  189          | . bitor-exp "%" bitor-exp
  190          | . bitor-exp "^" bitor-exp
  191          | . bitor-exp "<<" bitor-exp
  192          | . bitor-exp "bitand" bitor-exp
  193          | . bitor-exp "bitor" bitor-exp
  194          | . bitor-exp ">>" bitor-exp
  205 rel-exp: . bitor-exp rel-ops
  208 exp: . rel-exp
  209    | . exp "&&" exp
  210    | . exp "||" exp
  211    | . exp "in" exp
  212    | . exp "!" "in" exp
  216    | . "%unscope:" unsigned
  217 primary-exp: . "%exp:" unsigned
  218 lvalue: . "%lvalue:" unsigned
  219       | . "%id:" unsigned
  220       | . primary-exp "." "%id:" unsigned
  221 primary-exp: . lvalue "(" "%exps:" unsigned ")"
  228 exps.1: . exp
  229       | . exps.1 "," exp
  230 exps.2: . exps.1 "," exp

    error         shift, and go to state 107
    "__HERE__"    shift, and go to state 7
    "closure"     shift, and go to state 9
    "const"       shift, and go to state 10
    "function"    shift, and go to state 13
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "var"         shift, and go to state 25
    "watch"       shift, and go to state 27
    "&"           shift, and go to state 29
    "identifier"  shift, and go to state 35
    "class"       shift, and go to state 36
    "package"     shift, and go to state 37
    "--"          shift, and go to state 41
    "++"          shift, and go to state 42
    "do"          shift, and go to state 43
    "assert"      shift, and go to state 44
    "detach"      shift, and go to state 45
    "disown"      shift, and go to state 46
    "new"         shift, and go to state 47
    "angle"       shift, and go to state 48
    "duration"    shift, and go to state 49
    "float"       shift, and go to state 50
    "string"      shift, and go to state 51
    "call"        shift, and go to state 52
    "this"        shift, and go to state 53
    "!"           shift, and go to state 54
    "compl"       shift, and go to state 55
    "-"           shift, and go to state 56
    "+"           shift, and go to state 57
    "%unscope:"   shift, and go to state 58
    "%exp:"       shift, and go to state 59
    "%lvalue:"    shift, and go to state 60
    "%id:"        shift, and go to state 61

    ")"  reduce using rule 151 (tuple.exps)

    block        go to state 66
    exp          go to state 108
    routine      go to state 99
    primary-exp  go to state 100
    detach       go to state 70
    lvalue       go to state 71
    id           go to state 101
    bitor-exp    go to state 73
    new          go to state 74
    float-exp    go to state 75
    duration     go to state 76
    dictionary   go to state 77
    tuple.exps   go to state 109
    tuple        go to state 78
    literal-exp  go to state 79
    string       go to state 80
    unary-exp    go to state 81
    rel-exp      go to state 82
    exps.1       go to state 110
    exps.2       go to state 111


state 19

   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   37 exp: . "class" lvalue protos block
   38    | . "package" lvalue protos block
   52 routine: . "closure"
   53        | . "function"
   62 exp: . exp "=" exp
   63    | . exp "=" exp modifiers
   64    | . lvalue "+=" exp
   65    | . lvalue "-=" exp
   66    | . lvalue "*=" exp
   67    | . lvalue "/=" exp
   68    | . lvalue "^=" exp
   69    | . lvalue "%=" exp
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
   81 stmt: "return" . exp.opt
  118 primary-exp: . block
  119            | . "do" "(" exp ")" block
  120 detach: . "detach"
  121       | . "disown"
  122 primary-exp: . "assert" "(" exp ")"
  123            | . "assert" "{" claims "}"
  124            | . detach "(" exp ")"
  125            | . detach block
  126            | . "isdef" "(" k1_id ")"
  127            | . "watch" "(" exp ")"
  128 lvalue: . id
  129       | . primary-exp "." id
  130       | . primary-exp "." "*"
  131 primary-exp: . "&" id
  132            | . primary-exp "." "&" id
  133 id: . "identifier"
  134 bitor-exp: . "var" bitor-exp
  135          | . "const" "var" bitor-exp
  136 primary-exp: . lvalue
  137            | . lvalue args
  138 new: . "new" "identifier" args.opt
  139 bitor-exp: . new
  140 id: . "new"
  141 primary-exp: . routine formals block
  142 float-exp: . "float"
  143 duration: . "duration"
  144         | . duration "duration"
  150 dictionary: . "[" assocs "]"
  154 tuple: . "(" tuple.exps ")"
  155 literal-exp: . float-exp
  156            | . "angle"
  157            | . duration
  158            | . string
  159            | . "[" exps "]"
  160            | . dictionary
  161            | . tuple
  162 string: . "string"
  163       | . string "string"
  164 literal-exp: . "__HERE__"
  170 lvalue: . primary-exp "[" exps "]"
  171 literal-exp: . "this"
  172            | . "call"
  173 primary-exp: . literal-exp
  174            | . "(" exp ")"
  175            | . "(" error ")"
  176            | . primary-exp "**" primary-exp
  177 unary-exp: . primary-exp
  178          | . "--" lvalue
  179          | . "++" lvalue
  180          | . "+" unary-exp
  181          | . "-" unary-exp
  182          | . "!" unary-exp
  183          | . "compl" unary-exp
  184 bitor-exp: . unary-exp
  185          | . bitor-exp "+" bitor-exp
  186          | . bitor-exp "-" bitor-exp
  187          | . bitor-exp "*" bitor-exp
  188          | . bitor-exp "/" bitor-exp
  189          | . bitor-exp "%" bitor-exp
  190          | . bitor-exp "^" bitor-exp
  191          | . bitor-exp "<<" bitor-exp
  192          | . bitor-exp "bitand" bitor-exp
  193          | . bitor-exp "bitor" bitor-exp
  194          | . bitor-exp ">>" bitor-exp
  205 rel-exp: . bitor-exp rel-ops
  208 exp: . rel-exp
  209    | . exp "&&" exp
  210    | . exp "||" exp
  211    | . exp "in" exp
  212    | . exp "!" "in" exp
  213 exp.opt: .  ["end of command", "case", "catch", "default", "else", "finally", "onleave", "}", ")", ",", ";", "&", "|"]
  214        | . exp
  216 exp: . "%unscope:" unsigned
  217 primary-exp: . "%exp:" unsigned
  218 lvalue: . "%lvalue:" unsigned
  219       | . "%id:" unsigned
  220       | . primary-exp "." "%id:" unsigned
  221 primary-exp: . lvalue "(" "%exps:" unsigned ")"

    "__HERE__"    shift, and go to state 7
    "closure"     shift, and go to state 9
    "const"       shift, and go to state 10
    "function"    shift, and go to state 13
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "var"         shift, and go to state 25
    "watch"       shift, and go to state 27
    "identifier"  shift, and go to state 35
    "class"       shift, and go to state 36
    "package"     shift, and go to state 37
    "--"          shift, and go to state 41
    "++"          shift, and go to state 42
    "do"          shift, and go to state 43
    "assert"      shift, and go to state 44
    "detach"      shift, and go to state 45
    "disown"      shift, and go to state 46
    "new"         shift, and go to state 47
    "angle"       shift, and go to state 48
    "duration"    shift, and go to state 49
    "float"       shift, and go to state 50
    "string"      shift, and go to state 51
    "call"        shift, and go to state 52
    "this"        shift, and go to state 53
    "!"           shift, and go to state 54
    "compl"       shift, and go to state 55
    "-"           shift, and go to state 56
    "+"           shift, and go to state 57
    "%unscope:"   shift, and go to state 58
    "%exp:"       shift, and go to state 59
    "%lvalue:"    shift, and go to state 60
    "%id:"        shift, and go to state 61

    $default  reduce using rule 213 (exp.opt)

    block        go to state 66
    exp          go to state 112
    routine      go to state 99
    primary-exp  go to state 100
    detach       go to state 70
    lvalue       go to state 71
    id           go to state 101
    bitor-exp    go to state 73
    new          go to state 74
    float-exp    go to state 75
    duration     go to state 76
    dictionary   go to state 77
    tuple        go to state 78
    literal-exp  go to state 79
    string       go to state 80
    unary-exp    go to state 81
    rel-exp      go to state 82
    exp.opt      go to state 113

    Conflict between rule 213 and token "&" resolved as reduce ("&" < EMPTY).


state 20

   78 stmt: "stopif" . "(" exp ")" stmt

    "("  shift, and go to state 114


state 21

   79 stmt: "switch" . "(" exp ")" "{" cases default.opt "}"

    "("  shift, and go to state 115


state 22

   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   37 exp: . "class" lvalue protos block
   38    | . "package" lvalue protos block
   52 routine: . "closure"
   53        | . "function"
   62 exp: . exp "=" exp
   63    | . exp "=" exp modifiers
   64    | . lvalue "+=" exp
   65    | . lvalue "-=" exp
   66    | . lvalue "*=" exp
   67    | . lvalue "/=" exp
   68    | . lvalue "^=" exp
   69    | . lvalue "%=" exp
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
  110 stmt: "throw" . exp.opt
  118 primary-exp: . block
  119            | . "do" "(" exp ")" block
  120 detach: . "detach"
  121       | . "disown"
  122 primary-exp: . "assert" "(" exp ")"
  123            | . "assert" "{" claims "}"
  124            | . detach "(" exp ")"
  125            | . detach block
  126            | . "isdef" "(" k1_id ")"
  127            | . "watch" "(" exp ")"
  128 lvalue: . id
  129       | . primary-exp "." id
  130       | . primary-exp "." "*"
  131 primary-exp: . "&" id
  132            | . primary-exp "." "&" id
  133 id: . "identifier"
  134 bitor-exp: . "var" bitor-exp
  135          | . "const" "var" bitor-exp
  136 primary-exp: . lvalue
  137            | . lvalue args
  138 new: . "new" "identifier" args.opt
  139 bitor-exp: . new
  140 id: . "new"
  141 primary-exp: . routine formals block
  142 float-exp: . "float"
  143 duration: . "duration"
  144         | . duration "duration"
  150 dictionary: . "[" assocs "]"
  154 tuple: . "(" tuple.exps ")"
  155 literal-exp: . float-exp
  156            | . "angle"
  157            | . duration
  158            | . string
  159            | . "[" exps "]"
  160            | . dictionary
  161            | . tuple
  162 string: . "string"
  163       | . string "string"
  164 literal-exp: . "__HERE__"
  170 lvalue: . primary-exp "[" exps "]"
  171 literal-exp: . "this"
  172            | . "call"
  173 primary-exp: . literal-exp
  174            | . "(" exp ")"
  175            | . "(" error ")"
  176            | . primary-exp "**" primary-exp
  177 unary-exp: . primary-exp
  178          | . "--" lvalue
  179          | . "++" lvalue
  180          | . "+" unary-exp
  181          | . "-" unary-exp
  182          | . "!" unary-exp
  183          | . "compl" unary-exp
  184 bitor-exp: . unary-exp
  185          | . bitor-exp "+" bitor-exp
  186          | . bitor-exp "-" bitor-exp
  187          | . bitor-exp "*" bitor-exp
  188          | . bitor-exp "/" bitor-exp
  189          | . bitor-exp "%" bitor-exp
  190          | . bitor-exp "^" bitor-exp
  191          | . bitor-exp "<<" bitor-exp
  192          | . bitor-exp "bitand" bitor-exp
  193          | . bitor-exp "bitor" bitor-exp
  194          | . bitor-exp ">>" bitor-exp
  205 rel-exp: . bitor-exp rel-ops
  208 exp: . rel-exp
  209    | . exp "&&" exp
  210    | . exp "||" exp
  211    | . exp "in" exp
  212    | . exp "!" "in" exp
  213 exp.opt: .  ["end of command", "case", "catch", "default", "else", "finally", "onleave", "}", ")", ",", ";", "&", "|"]
  214        | . exp
  216 exp: . "%unscope:" unsigned
  217 primary-exp: . "%exp:" unsigned
  218 lvalue: . "%lvalue:" unsigned
  219       | . "%id:" unsigned
  220       | . primary-exp "." "%id:" unsigned
  221 primary-exp: . lvalue "(" "%exps:" unsigned ")"

    "__HERE__"    shift, and go to state 7
    "closure"     shift, and go to state 9
    "const"       shift, and go to state 10
    "function"    shift, and go to state 13
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "var"         shift, and go to state 25
    "watch"       shift, and go to state 27
    "identifier"  shift, and go to state 35
    "class"       shift, and go to state 36
    "package"     shift, and go to state 37
    "--"          shift, and go to state 41
    "++"          shift, and go to state 42
    "do"          shift, and go to state 43
    "assert"      shift, and go to state 44
    "detach"      shift, and go to state 45
    "disown"      shift, and go to state 46
    "new"         shift, and go to state 47
    "angle"       shift, and go to state 48
    "duration"    shift, and go to state 49
    "float"       shift, and go to state 50
    "string"      shift, and go to state 51
    "call"        shift, and go to state 52
    "this"        shift, and go to state 53
    "!"           shift, and go to state 54
    "compl"       shift, and go to state 55
    "-"           shift, and go to state 56
    "+"           shift, and go to state 57
    "%unscope:"   shift, and go to state 58
    "%exp:"       shift, and go to state 59
    "%lvalue:"    shift, and go to state 60
    "%id:"        shift, and go to state 61

    $default  reduce using rule 213 (exp.opt)

    block        go to state 66
    exp          go to state 112
    routine      go to state 99
    primary-exp  go to state 100
    detach       go to state 70
    lvalue       go to state 71
    id           go to state 101
    bitor-exp    go to state 73
    new          go to state 74
    float-exp    go to state 75
    duration     go to state 76
    dictionary   go to state 77
    tuple        go to state 78
    literal-exp  go to state 79
    string       go to state 80
    unary-exp    go to state 81
    rel-exp      go to state 82
    exp.opt      go to state 116

    Conflict between rule 213 and token "&" resolved as reduce ("&" < EMPTY).


state 23

   80 stmt: "timeout" . "(" exp ")" stmt catch.opt else.opt finally.opt

    "("  shift, and go to state 117


state 24

   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
  108 stmt: "try" . block catches.1 else.opt finally.opt
  109     | "try" . block "finally" block

    "{"  shift, and go to state 16

    block  go to state 118


state 25

   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   52 routine: . "closure"
   53        | . "function"
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
  118            | . block
  119            | . "do" "(" exp ")" block
  120 detach: . "detach"
  121       | . "disown"
  122 primary-exp: . "assert" "(" exp ")"
  123            | . "assert" "{" claims "}"
  124            | . detach "(" exp ")"
  125            | . detach block
  126            | . "isdef" "(" k1_id ")"
  127            | . "watch" "(" exp ")"
  128 lvalue: . id
  129       | . primary-exp "." id
  130       | . primary-exp "." "*"
  131 primary-exp: . "&" id
  132            | . primary-exp "." "&" id
  133 id: . "identifier"
  134 bitor-exp: . "var" bitor-exp
  134          | "var" . bitor-exp
  135          | . "const" "var" bitor-exp
  136 primary-exp: . lvalue
  137            | . lvalue args
  138 new: . "new" "identifier" args.opt
  139 bitor-exp: . new
  140 id: . "new"
  141 primary-exp: . routine formals block
  142 float-exp: . "float"
  143 duration: . "duration"
  144         | . duration "duration"
  150 dictionary: . "[" assocs "]"
  154 tuple: . "(" tuple.exps ")"
  155 literal-exp: . float-exp
  156            | . "angle"
  157            | . duration
  158            | . string
  159            | . "[" exps "]"
  160            | . dictionary
  161            | . tuple
  162 string: . "string"
  163       | . string "string"
  164 literal-exp: . "__HERE__"
  170 lvalue: . primary-exp "[" exps "]"
  171 literal-exp: . "this"
  172            | . "call"
  173 primary-exp: . literal-exp
  174            | . "(" exp ")"
  175            | . "(" error ")"
  176            | . primary-exp "**" primary-exp
  177 unary-exp: . primary-exp
  178          | . "--" lvalue
  179          | . "++" lvalue
  180          | . "+" unary-exp
  181          | . "-" unary-exp
  182          | . "!" unary-exp
  183          | . "compl" unary-exp
  184 bitor-exp: . unary-exp
  185          | . bitor-exp "+" bitor-exp
  186          | . bitor-exp "-" bitor-exp
  187          | . bitor-exp "*" bitor-exp
  188          | . bitor-exp "/" bitor-exp
  189          | . bitor-exp "%" bitor-exp
  190          | . bitor-exp "^" bitor-exp
  191          | . bitor-exp "<<" bitor-exp
  192          | . bitor-exp "bitand" bitor-exp
  193          | . bitor-exp "bitor" bitor-exp
  194          | . bitor-exp ">>" bitor-exp
  217 primary-exp: . "%exp:" unsigned
  218 lvalue: . "%lvalue:" unsigned
  219       | . "%id:" unsigned
  220       | . primary-exp "." "%id:" unsigned
  221 primary-exp: . lvalue "(" "%exps:" unsigned ")"

    "__HERE__"    shift, and go to state 7
    "closure"     shift, and go to state 9
    "const"       shift, and go to state 10
    "function"    shift, and go to state 13
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "var"         shift, and go to state 25
    "watch"       shift, and go to state 27
    "&"           shift, and go to state 29
    "identifier"  shift, and go to state 35
    "--"          shift, and go to state 41
    "++"          shift, and go to state 42
    "do"          shift, and go to state 43
    "assert"      shift, and go to state 44
    "detach"      shift, and go to state 45
    "disown"      shift, and go to state 46
    "new"         shift, and go to state 47
    "angle"       shift, and go to state 48
    "duration"    shift, and go to state 49
    "float"       shift, and go to state 50
    "string"      shift, and go to state 51
    "call"        shift, and go to state 52
    "this"        shift, and go to state 53
    "!"           shift, and go to state 54
    "compl"       shift, and go to state 55
    "-"           shift, and go to state 56
    "+"           shift, and go to state 57
    "%exp:"       shift, and go to state 59
    "%lvalue:"    shift, and go to state 60
    "%id:"        shift, and go to state 61

    block        go to state 66
    routine      go to state 99
    primary-exp  go to state 100
    detach       go to state 70
    lvalue       go to state 119
    id           go to state 101
    bitor-exp    go to state 120
    new          go to state 74
    float-exp    go to state 75
    duration     go to state 76
    dictionary   go to state 77
    tuple        go to state 78
    literal-exp  go to state 79
    string       go to state 80
    unary-exp    go to state 81


state 26

   84 stmt: "waituntil" . "(" exp tilda.opt ")"
   85     | "waituntil" . "(" event_match ")"

    "("  shift, and go to state 121


state 27

  127 primary-exp: "watch" . "(" exp ")"

    "("  shift, and go to state 122


state 28

   86 stmt: "whenever" . "(" exp tilda.opt ")" stmt else.opt
   87     | "whenever" . "(" event_match ")" stmt else.opt

    "("  shift, and go to state 123


state 29

  131 primary-exp: "&" . id
  133 id: . "identifier"
  140   | . "new"

    "identifier"  shift, and go to state 35
    "new"         shift, and go to state 124

    id  go to state 125


state 30

   75 stmt: "every" . "(" exp ")" stmt

    "("  shift, and go to state 126


state 31

  112 stmt: "for" . "(" exp ")" stmt
  113     | "for" . "(" stmt.opt ";" exp ";" stmt.opt ")" stmt
  114     | "for" . "(" "var" "identifier" in_or_colon exp ")" stmt

    "("  shift, and go to state 127


state 32

   23 stmt: . primary-exp ":" stmt
   24     | . exp
   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   37 exp: . "class" lvalue protos block
   38    | . "package" lvalue protos block
   43 stmt: . "enum" id "{" id.0 "}"
   47     | . "external" "identifier" "identifier"
   48     | . "external" "var" "identifier" "." "identifier" from "identifier"
   49     | . "external" event_or_function "(" unsigned ")" "identifier" "." "identifier" from "identifier"
   50     | . "import" lvalue
   51     | . exp "!" args.opt tilda.opt
   52 routine: . "closure"
   53        | . "function"
   54 stmt: . routine k1_id formals block
   55     | . id id formals block
   62 exp: . exp "=" exp
   63    | . exp "=" exp modifiers
   64    | . lvalue "+=" exp
   65    | . lvalue "-=" exp
   66    | . lvalue "*=" exp
   67    | . lvalue "/=" exp
   68    | . lvalue "^=" exp
   69    | . lvalue "%=" exp
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
   73 stmt: . "at" identifiers "(" exp tilda.opt ")" stmt onleave.opt
   74     | . "at" identifiers "(" event_match ")" stmt onleave.opt
   75     | . "every" "(" exp ")" stmt
   76     | . "if" "(" stmts ")" stmt else.opt
   77     | . "freezeif" "(" exp ")" stmt
   78     | . "stopif" "(" exp ")" stmt
   79     | . "switch" "(" exp ")" "{" cases default.opt "}"
   80     | . "timeout" "(" exp ")" stmt catch.opt else.opt finally.opt
   81     | . "return" exp.opt
   82     | . "break"
   83     | . "continue"
   84     | . "waituntil" "(" exp tilda.opt ")"
   85     | . "waituntil" "(" event_match ")"
   86     | . "whenever" "(" exp tilda.opt ")" stmt else.opt
   87     | . "whenever" "(" event_match ")" stmt else.opt
  108     | . "try" block catches.1 else.opt finally.opt
  109     | . "try" block "finally" block
  110     | . "throw" exp.opt
  111     | . "loop" stmt
  111     | "loop" . stmt
  112     | . "for" "(" exp ")" stmt
  113     | . "for" "(" stmt.opt ";" exp ";" stmt.opt ")" stmt
  114     | . "for" "(" "var" "identifier" in_or_colon exp ")" stmt
  115     | . "while" "(" exp ")" stmt
  118 primary-exp: . block
  119            | . "do" "(" exp ")" block
  120 detach: . "detach"
  121       | . "disown"
  122 primary-exp: . "assert" "(" exp ")"
  123            | . "assert" "{" claims "}"
  124            | . detach "(" exp ")"
  125            | . detach block
  126            | . "isdef" "(" k1_id ")"
  127            | . "watch" "(" exp ")"
  128 lvalue: . id
  129       | . primary-exp "." id
  130       | . primary-exp "." "*"
  131 primary-exp: . "&" id
  132            | . primary-exp "." "&" id
  133 id: . "identifier"
  134 bitor-exp: . "var" bitor-exp
  135          | . "const" "var" bitor-exp
  136 primary-exp: . lvalue
  137            | . lvalue args
  138 new: . "new" "identifier" args.opt
  139 bitor-exp: . new
  140 id: . "new"
  141 primary-exp: . routine formals block
  142 float-exp: . "float"
  143 duration: . "duration"
  144         | . duration "duration"
  150 dictionary: . "[" assocs "]"
  154 tuple: . "(" tuple.exps ")"
  155 literal-exp: . float-exp
  156            | . "angle"
  157            | . duration
  158            | . string
  159            | . "[" exps "]"
  160            | . dictionary
  161            | . tuple
  162 string: . "string"
  163       | . string "string"
  164 literal-exp: . "__HERE__"
  170 lvalue: . primary-exp "[" exps "]"
  171 literal-exp: . "this"
  172            | . "call"
  173 primary-exp: . literal-exp
  174            | . "(" exp ")"
  175            | . "(" error ")"
  176            | . primary-exp "**" primary-exp
  177 unary-exp: . primary-exp
  178          | . "--" lvalue
  179          | . "++" lvalue
  180          | . "+" unary-exp
  181          | . "-" unary-exp
  182          | . "!" unary-exp
  183          | . "compl" unary-exp
  184 bitor-exp: . unary-exp
  185          | . bitor-exp "+" bitor-exp
  186          | . bitor-exp "-" bitor-exp
  187          | . bitor-exp "*" bitor-exp
  188          | . bitor-exp "/" bitor-exp
  189          | . bitor-exp "%" bitor-exp
  190          | . bitor-exp "^" bitor-exp
  191          | . bitor-exp "<<" bitor-exp
  192          | . bitor-exp "bitand" bitor-exp
  193          | . bitor-exp "bitor" bitor-exp
  194          | . bitor-exp ">>" bitor-exp
  205 rel-exp: . bitor-exp rel-ops
  208 exp: . rel-exp
  209    | . exp "&&" exp
  210    | . exp "||" exp
  211    | . exp "in" exp
  212    | . exp "!" "in" exp
  216    | . "%unscope:" unsigned
  217 primary-exp: . "%exp:" unsigned
  218 lvalue: . "%lvalue:" unsigned
  219       | . "%id:" unsigned
  220       | . primary-exp "." "%id:" unsigned
  221 primary-exp: . lvalue "(" "%exps:" unsigned ")"

    "__HERE__"    shift, and go to state 7
    "break"       shift, and go to state 8
    "closure"     shift, and go to state 9
    "const"       shift, and go to state 10
    "continue"    shift, and go to state 11
    "freezeif"    shift, and go to state 12
    "function"    shift, and go to state 13
    "if"          shift, and go to state 14
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "return"      shift, and go to state 19
    "stopif"      shift, and go to state 20
    "switch"      shift, and go to state 21
    "throw"       shift, and go to state 22
    "timeout"     shift, and go to state 23
    "try"         shift, and go to state 24
    "var"         shift, and go to state 25
    "waituntil"   shift, and go to state 26
    "watch"       shift, and go to state 27
    "whenever"    shift, and go to state 28
    "&"           shift, and go to state 29
    "every"       shift, and go to state 30
    "for"         shift, and go to state 31
    "loop"        shift, and go to state 32
    "while"       shift, and go to state 33
    "at"          shift, and go to state 34
    "identifier"  shift, and go to state 35
    "class"       shift, and go to state 36
    "package"     shift, and go to state 37
    "enum"        shift, and go to state 38
    "external"    shift, and go to state 39
    "import"      shift, and go to state 40
    "--"          shift, and go to state 41
    "++"          shift, and go to state 42
    "do"          shift, and go to state 43
    "assert"      shift, and go to state 44
    "detach"      shift, and go to state 45
    "disown"      shift, and go to state 46
    "new"         shift, and go to state 47
    "angle"       shift, and go to state 48
    "duration"    shift, and go to state 49
    "float"       shift, and go to state 50
    "string"      shift, and go to state 51
    "call"        shift, and go to state 52
    "this"        shift, and go to state 53
    "!"           shift, and go to state 54
    "compl"       shift, and go to state 55
    "-"           shift, and go to state 56
    "+"           shift, and go to state 57
    "%unscope:"   shift, and go to state 58
    "%exp:"       shift, and go to state 59
    "%lvalue:"    shift, and go to state 60
    "%id:"        shift, and go to state 61

    stmt         go to state 128
    block        go to state 66
    exp          go to state 67
    routine      go to state 68
    primary-exp  go to state 69
    detach       go to state 70
    lvalue       go to state 71
    id           go to state 72
    bitor-exp    go to state 73
    new          go to state 74
    float-exp    go to state 75
    duration     go to state 76
    dictionary   go to state 77
    tuple        go to state 78
    literal-exp  go to state 79
    string       go to state 80
    unary-exp    go to state 81
    rel-exp      go to state 82


state 33

  115 stmt: "while" . "(" exp ")" stmt

    "("  shift, and go to state 129


state 34

   73 stmt: "at" . identifiers "(" exp tilda.opt ")" stmt onleave.opt
   74     | "at" . identifiers "(" event_match ")" stmt onleave.opt
  234 identifiers: .
  235            | . identifiers "identifier"

    $default  reduce using rule 234 (identifiers)

    identifiers  go to state 130


state 35

  133 id: "identifier" .

    $default  reduce using rule 133 (id)


state 36

   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   37 exp: "class" . lvalue protos block
   52 routine: . "closure"
   53        | . "function"
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
  118            | . block
  119            | . "do" "(" exp ")" block
  120 detach: . "detach"
  121       | . "disown"
  122 primary-exp: . "assert" "(" exp ")"
  123            | . "assert" "{" claims "}"
  124            | . detach "(" exp ")"
  125            | . detach block
  126            | . "isdef" "(" k1_id ")"
  127            | . "watch" "(" exp ")"
  128 lvalue: . id
  129       | . primary-exp "." id
  130       | . primary-exp "." "*"
  131 primary-exp: . "&" id
  132            | . primary-exp "." "&" id
  133 id: . "identifier"
  136 primary-exp: . lvalue
  137            | . lvalue args
  140 id: . "new"
  141 primary-exp: . routine formals block
  142 float-exp: . "float"
  143 duration: . "duration"
  144         | . duration "duration"
  150 dictionary: . "[" assocs "]"
  154 tuple: . "(" tuple.exps ")"
  155 literal-exp: . float-exp
  156            | . "angle"
  157            | . duration
  158            | . string
  159            | . "[" exps "]"
  160            | . dictionary
  161            | . tuple
  162 string: . "string"
  163       | . string "string"
  164 literal-exp: . "__HERE__"
  170 lvalue: . primary-exp "[" exps "]"
  171 literal-exp: . "this"
  172            | . "call"
  173 primary-exp: . literal-exp
  174            | . "(" exp ")"
  175            | . "(" error ")"
  176            | . primary-exp "**" primary-exp
  217            | . "%exp:" unsigned
  218 lvalue: . "%lvalue:" unsigned
  219       | . "%id:" unsigned
  220       | . primary-exp "." "%id:" unsigned
  221 primary-exp: . lvalue "(" "%exps:" unsigned ")"

    "__HERE__"    shift, and go to state 7
    "closure"     shift, and go to state 9
    "function"    shift, and go to state 13
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "watch"       shift, and go to state 27
    "&"           shift, and go to state 29
    "identifier"  shift, and go to state 35
    "do"          shift, and go to state 43
    "assert"      shift, and go to state 44
    "detach"      shift, and go to state 45
    "disown"      shift, and go to state 46
    "new"         shift, and go to state 124
    "angle"       shift, and go to state 48
    "duration"    shift, and go to state 49
    "float"       shift, and go to state 50
    "string"      shift, and go to state 51
    "call"        shift, and go to state 52
    "this"        shift, and go to state 53
    "%exp:"       shift, and go to state 59
    "%lvalue:"    shift, and go to state 60
    "%id:"        shift, and go to state 61

    block        go to state 66
    routine      go to state 99
    primary-exp  go to state 131
    detach       go to state 70
    lvalue       go to state 132
    id           go to state 101
    float-exp    go to state 75
    duration     go to state 76
    dictionary   go to state 77
    tuple        go to state 78
    literal-exp  go to state 79
    string       go to state 80


state 37

   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   38 exp: "package" . lvalue protos block
   52 routine: . "closure"
   53        | . "function"
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
  118            | . block
  119            | . "do" "(" exp ")" block
  120 detach: . "detach"
  121       | . "disown"
  122 primary-exp: . "assert" "(" exp ")"
  123            | . "assert" "{" claims "}"
  124            | . detach "(" exp ")"
  125            | . detach block
  126            | . "isdef" "(" k1_id ")"
  127            | . "watch" "(" exp ")"
  128 lvalue: . id
  129       | . primary-exp "." id
  130       | . primary-exp "." "*"
  131 primary-exp: . "&" id
  132            | . primary-exp "." "&" id
  133 id: . "identifier"
  136 primary-exp: . lvalue
  137            | . lvalue args
  140 id: . "new"
  141 primary-exp: . routine formals block
  142 float-exp: . "float"
  143 duration: . "duration"
  144         | . duration "duration"
  150 dictionary: . "[" assocs "]"
  154 tuple: . "(" tuple.exps ")"
  155 literal-exp: . float-exp
  156            | . "angle"
  157            | . duration
  158            | . string
  159            | . "[" exps "]"
  160            | . dictionary
  161            | . tuple
  162 string: . "string"
  163       | . string "string"
  164 literal-exp: . "__HERE__"
  170 lvalue: . primary-exp "[" exps "]"
  171 literal-exp: . "this"
  172            | . "call"
  173 primary-exp: . literal-exp
  174            | . "(" exp ")"
  175            | . "(" error ")"
  176            | . primary-exp "**" primary-exp
  217            | . "%exp:" unsigned
  218 lvalue: . "%lvalue:" unsigned
  219       | . "%id:" unsigned
  220       | . primary-exp "." "%id:" unsigned
  221 primary-exp: . lvalue "(" "%exps:" unsigned ")"

    "__HERE__"    shift, and go to state 7
    "closure"     shift, and go to state 9
    "function"    shift, and go to state 13
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "watch"       shift, and go to state 27
    "&"           shift, and go to state 29
    "identifier"  shift, and go to state 35
    "do"          shift, and go to state 43
    "assert"      shift, and go to state 44
    "detach"      shift, and go to state 45
    "disown"      shift, and go to state 46
    "new"         shift, and go to state 124
    "angle"       shift, and go to state 48
    "duration"    shift, and go to state 49
    "float"       shift, and go to state 50
    "string"      shift, and go to state 51
    "call"        shift, and go to state 52
    "this"        shift, and go to state 53
    "%exp:"       shift, and go to state 59
    "%lvalue:"    shift, and go to state 60
    "%id:"        shift, and go to state 61

    block        go to state 66
    routine      go to state 99
    primary-exp  go to state 131
    detach       go to state 70
    lvalue       go to state 133
    id           go to state 101
    float-exp    go to state 75
    duration     go to state 76
    dictionary   go to state 77
    tuple        go to state 78
    literal-exp  go to state 79
    string       go to state 80


state 38

   43 stmt: "enum" . id "{" id.0 "}"
  133 id: . "identifier"
  140   | . "new"

    "identifier"  shift, and go to state 35
    "new"         shift, and go to state 124

    id  go to state 134


state 39

   45 event_or_function: . "function"
   46                  | . "identifier"
   47 stmt: "external" . "identifier" "identifier"
   48     | "external" . "var" "identifier" "." "identifier" from "identifier"
   49     | "external" . event_or_function "(" unsigned ")" "identifier" "." "identifier" from "identifier"

    "function"    shift, and go to state 135
    "var"         shift, and go to state 136
    "identifier"  shift, and go to state 137

    event_or_function  go to state 138


state 40

   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   50 stmt: "import" . lvalue
   52 routine: . "closure"
   53        | . "function"
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
  118            | . block
  119            | . "do" "(" exp ")" block
  120 detach: . "detach"
  121       | . "disown"
  122 primary-exp: . "assert" "(" exp ")"
  123            | . "assert" "{" claims "}"
  124            | . detach "(" exp ")"
  125            | . detach block
  126            | . "isdef" "(" k1_id ")"
  127            | . "watch" "(" exp ")"
  128 lvalue: . id
  129       | . primary-exp "." id
  130       | . primary-exp "." "*"
  131 primary-exp: . "&" id
  132            | . primary-exp "." "&" id
  133 id: . "identifier"
  136 primary-exp: . lvalue
  137            | . lvalue args
  140 id: . "new"
  141 primary-exp: . routine formals block
  142 float-exp: . "float"
  143 duration: . "duration"
  144         | . duration "duration"
  150 dictionary: . "[" assocs "]"
  154 tuple: . "(" tuple.exps ")"
  155 literal-exp: . float-exp
  156            | . "angle"
  157            | . duration
  158            | . string
  159            | . "[" exps "]"
  160            | . dictionary
  161            | . tuple
  162 string: . "string"
  163       | . string "string"
  164 literal-exp: . "__HERE__"
  170 lvalue: . primary-exp "[" exps "]"
  171 literal-exp: . "this"
  172            | . "call"
  173 primary-exp: . literal-exp
  174            | . "(" exp ")"
  175            | . "(" error ")"
  176            | . primary-exp "**" primary-exp
  217            | . "%exp:" unsigned
  218 lvalue: . "%lvalue:" unsigned
  219       | . "%id:" unsigned
  220       | . primary-exp "." "%id:" unsigned
  221 primary-exp: . lvalue "(" "%exps:" unsigned ")"

    "__HERE__"    shift, and go to state 7
    "closure"     shift, and go to state 9
    "function"    shift, and go to state 13
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "watch"       shift, and go to state 27
    "&"           shift, and go to state 29
    "identifier"  shift, and go to state 35
    "do"          shift, and go to state 43
    "assert"      shift, and go to state 44
    "detach"      shift, and go to state 45
    "disown"      shift, and go to state 46
    "new"         shift, and go to state 124
    "angle"       shift, and go to state 48
    "duration"    shift, and go to state 49
    "float"       shift, and go to state 50
    "string"      shift, and go to state 51
    "call"        shift, and go to state 52
    "this"        shift, and go to state 53
    "%exp:"       shift, and go to state 59
    "%lvalue:"    shift, and go to state 60
    "%id:"        shift, and go to state 61

    block        go to state 66
    routine      go to state 99
    primary-exp  go to state 131
    detach       go to state 70
    lvalue       go to state 139
    id           go to state 101
    float-exp    go to state 75
    duration     go to state 76
    dictionary   go to state 77
    tuple        go to state 78
    literal-exp  go to state 79
    string       go to state 80


state 41

   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   52 routine: . "closure"
   53        | . "function"
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
  118            | . block
  119            | . "do" "(" exp ")" block
  120 detach: . "detach"
  121       | . "disown"
  122 primary-exp: . "assert" "(" exp ")"
  123            | . "assert" "{" claims "}"
  124            | . detach "(" exp ")"
  125            | . detach block
  126            | . "isdef" "(" k1_id ")"
  127            | . "watch" "(" exp ")"
  128 lvalue: . id
  129       | . primary-exp "." id
  130       | . primary-exp "." "*"
  131 primary-exp: . "&" id
  132            | . primary-exp "." "&" id
  133 id: . "identifier"
  136 primary-exp: . lvalue
  137            | . lvalue args
  140 id: . "new"
  141 primary-exp: . routine formals block
  142 float-exp: . "float"
  143 duration: . "duration"
  144         | . duration "duration"
  150 dictionary: . "[" assocs "]"
  154 tuple: . "(" tuple.exps ")"
  155 literal-exp: . float-exp
  156            | . "angle"
  157            | . duration
  158            | . string
  159            | . "[" exps "]"
  160            | . dictionary
  161            | . tuple
  162 string: . "string"
  163       | . string "string"
  164 literal-exp: . "__HERE__"
  170 lvalue: . primary-exp "[" exps "]"
  171 literal-exp: . "this"
  172            | . "call"
  173 primary-exp: . literal-exp
  174            | . "(" exp ")"
  175            | . "(" error ")"
  176            | . primary-exp "**" primary-exp
  178 unary-exp: "--" . lvalue
  217 primary-exp: . "%exp:" unsigned
  218 lvalue: . "%lvalue:" unsigned
  219       | . "%id:" unsigned
  220       | . primary-exp "." "%id:" unsigned
  221 primary-exp: . lvalue "(" "%exps:" unsigned ")"

    "__HERE__"    shift, and go to state 7
    "closure"     shift, and go to state 9
    "function"    shift, and go to state 13
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "watch"       shift, and go to state 27
    "&"           shift, and go to state 29
    "identifier"  shift, and go to state 35
    "do"          shift, and go to state 43
    "assert"      shift, and go to state 44
    "detach"      shift, and go to state 45
    "disown"      shift, and go to state 46
    "new"         shift, and go to state 124
    "angle"       shift, and go to state 48
    "duration"    shift, and go to state 49
    "float"       shift, and go to state 50
    "string"      shift, and go to state 51
    "call"        shift, and go to state 52
    "this"        shift, and go to state 53
    "%exp:"       shift, and go to state 59
    "%lvalue:"    shift, and go to state 60
    "%id:"        shift, and go to state 61

    block        go to state 66
    routine      go to state 99
    primary-exp  go to state 131
    detach       go to state 70
    lvalue       go to state 140
    id           go to state 101
    float-exp    go to state 75
    duration     go to state 76
    dictionary   go to state 77
    tuple        go to state 78
    literal-exp  go to state 79
    string       go to state 80


state 42

   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   52 routine: . "closure"
   53        | . "function"
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
  118            | . block
  119            | . "do" "(" exp ")" block
  120 detach: . "detach"
  121       | . "disown"
  122 primary-exp: . "assert" "(" exp ")"
  123            | . "assert" "{" claims "}"
  124            | . detach "(" exp ")"
  125            | . detach block
  126            | . "isdef" "(" k1_id ")"
  127            | . "watch" "(" exp ")"
  128 lvalue: . id
  129       | . primary-exp "." id
  130       | . primary-exp "." "*"
  131 primary-exp: . "&" id
  132            | . primary-exp "." "&" id
  133 id: . "identifier"
  136 primary-exp: . lvalue
  137            | . lvalue args
  140 id: . "new"
  141 primary-exp: . routine formals block
  142 float-exp: . "float"
  143 duration: . "duration"
  144         | . duration "duration"
  150 dictionary: . "[" assocs "]"
  154 tuple: . "(" tuple.exps ")"
  155 literal-exp: . float-exp
  156            | . "angle"
  157            | . duration
  158            | . string
  159            | . "[" exps "]"
  160            | . dictionary
  161            | . tuple
  162 string: . "string"
  163       | . string "string"
  164 literal-exp: . "__HERE__"
  170 lvalue: . primary-exp "[" exps "]"
  171 literal-exp: . "this"
  172            | . "call"
  173 primary-exp: . literal-exp
  174            | . "(" exp ")"
  175            | . "(" error ")"
  176            | . primary-exp "**" primary-exp
  179 unary-exp: "++" . lvalue
  217 primary-exp: . "%exp:" unsigned
  218 lvalue: . "%lvalue:" unsigned
  219       | . "%id:" unsigned
  220       | . primary-exp "." "%id:" unsigned
  221 primary-exp: . lvalue "(" "%exps:" unsigned ")"

    "__HERE__"    shift, and go to state 7
    "closure"     shift, and go to state 9
    "function"    shift, and go to state 13
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "watch"       shift, and go to state 27
    "&"           shift, and go to state 29
    "identifier"  shift, and go to state 35
    "do"          shift, and go to state 43
    "assert"      shift, and go to state 44
    "detach"      shift, and go to state 45
    "disown"      shift, and go to state 46
    "new"         shift, and go to state 124
    "angle"       shift, and go to state 48
    "duration"    shift, and go to state 49
    "float"       shift, and go to state 50
    "string"      shift, and go to state 51
    "call"        shift, and go to state 52
    "this"        shift, and go to state 53
    "%exp:"       shift, and go to state 59
    "%lvalue:"    shift, and go to state 60
    "%id:"        shift, and go to state 61

    block        go to state 66
    routine      go to state 99
    primary-exp  go to state 131
    detach       go to state 70
    lvalue       go to state 141
    id           go to state 101
    float-exp    go to state 75
    duration     go to state 76
    dictionary   go to state 77
    tuple        go to state 78
    literal-exp  go to state 79
    string       go to state 80


state 43

  119 primary-exp: "do" . "(" exp ")" block

    "("  shift, and go to state 142


state 44

  122 primary-exp: "assert" . "(" exp ")"
  123            | "assert" . "{" claims "}"

    "{"  shift, and go to state 143
    "("  shift, and go to state 144


state 45

  120 detach: "detach" .

    $default  reduce using rule 120 (detach)


state 46

  121 detach: "disown" .

    $default  reduce using rule 121 (detach)


state 47

  138 new: "new" . "identifier" args.opt
  140 id: "new" .  ["end of command", "=", "case", "catch", ":", "default", "else", "finally", "if", "in", "{", "[", "(", "onleave", ".", "}", "]", ")", "~", ",", ";", "&", "|", "^=", "-=", "%=", "+=", "/=", "*=", "--", "++", "->", "new", "=>", "?", "!", "bitand", "bitor", "^", ">>", "<<", "-", "%", "+", "/", "*", "**", "=~=", "==", "===", ">=", ">", "<=", "<", "!=", "!==", "~=", "&&", "||"]

    "identifier"  shift, and go to state 145

    $default  reduce using rule 140 (id)

    Conflict between rule 140 and token "identifier" resolved as shift ("new" < "identifier").


state 48

  156 literal-exp: "angle" .

    $default  reduce using rule 156 (literal-exp)


state 49

  143 duration: "duration" .

    $default  reduce using rule 143 (duration)


state 50

  142 float-exp: "float" .

    $default  reduce using rule 142 (float-exp)


state 51

  162 string: "string" .

    $default  reduce using rule 162 (string)


state 52

  172 literal-exp: "call" .

    $default  reduce using rule 172 (literal-exp)


state 53

  171 literal-exp: "this" .

    $default  reduce using rule 171 (literal-exp)


state 54

   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   52 routine: . "closure"
   53        | . "function"
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
  118            | . block
  119            | . "do" "(" exp ")" block
  120 detach: . "detach"
  121       | . "disown"
  122 primary-exp: . "assert" "(" exp ")"
  123            | . "assert" "{" claims "}"
  124            | . detach "(" exp ")"
  125            | . detach block
  126            | . "isdef" "(" k1_id ")"
  127            | . "watch" "(" exp ")"
  128 lvalue: . id
  129       | . primary-exp "." id
  130       | . primary-exp "." "*"
  131 primary-exp: . "&" id
  132            | . primary-exp "." "&" id
  133 id: . "identifier"
  136 primary-exp: . lvalue
  137            | . lvalue args
  140 id: . "new"
  141 primary-exp: . routine formals block
  142 float-exp: . "float"
  143 duration: . "duration"
  144         | . duration "duration"
  150 dictionary: . "[" assocs "]"
  154 tuple: . "(" tuple.exps ")"
  155 literal-exp: . float-exp
  156            | . "angle"
  157            | . duration
  158            | . string
  159            | . "[" exps "]"
  160            | . dictionary
  161            | . tuple
  162 string: . "string"
  163       | . string "string"
  164 literal-exp: . "__HERE__"
  170 lvalue: . primary-exp "[" exps "]"
  171 literal-exp: . "this"
  172            | . "call"
  173 primary-exp: . literal-exp
  174            | . "(" exp ")"
  175            | . "(" error ")"
  176            | . primary-exp "**" primary-exp
  177 unary-exp: . primary-exp
  178          | . "--" lvalue
  179          | . "++" lvalue
  180          | . "+" unary-exp
  181          | . "-" unary-exp
  182          | . "!" unary-exp
  182          | "!" . unary-exp
  183          | . "compl" unary-exp
  217 primary-exp: . "%exp:" unsigned
  218 lvalue: . "%lvalue:" unsigned
  219       | . "%id:" unsigned
  220       | . primary-exp "." "%id:" unsigned
  221 primary-exp: . lvalue "(" "%exps:" unsigned ")"

    "__HERE__"    shift, and go to state 7
    "closure"     shift, and go to state 9
    "function"    shift, and go to state 13
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "watch"       shift, and go to state 27
    "&"           shift, and go to state 29
    "identifier"  shift, and go to state 35
    "--"          shift, and go to state 41
    "++"          shift, and go to state 42
    "do"          shift, and go to state 43
    "assert"      shift, and go to state 44
    "detach"      shift, and go to state 45
    "disown"      shift, and go to state 46
    "new"         shift, and go to state 124
    "angle"       shift, and go to state 48
    "duration"    shift, and go to state 49
    "float"       shift, and go to state 50
    "string"      shift, and go to state 51
    "call"        shift, and go to state 52
    "this"        shift, and go to state 53
    "!"           shift, and go to state 54
    "compl"       shift, and go to state 55
    "-"           shift, and go to state 56
    "+"           shift, and go to state 57
    "%exp:"       shift, and go to state 59
    "%lvalue:"    shift, and go to state 60
    "%id:"        shift, and go to state 61

    block        go to state 66
    routine      go to state 99
    primary-exp  go to state 100
    detach       go to state 70
    lvalue       go to state 119
    id           go to state 101
    float-exp    go to state 75
    duration     go to state 76
    dictionary   go to state 77
    tuple        go to state 78
    literal-exp  go to state 79
    string       go to state 80
    unary-exp    go to state 146


state 55

   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   52 routine: . "closure"
   53        | . "function"
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
  118            | . block
  119            | . "do" "(" exp ")" block
  120 detach: . "detach"
  121       | . "disown"
  122 primary-exp: . "assert" "(" exp ")"
  123            | . "assert" "{" claims "}"
  124            | . detach "(" exp ")"
  125            | . detach block
  126            | . "isdef" "(" k1_id ")"
  127            | . "watch" "(" exp ")"
  128 lvalue: . id
  129       | . primary-exp "." id
  130       | . primary-exp "." "*"
  131 primary-exp: . "&" id
  132            | . primary-exp "." "&" id
  133 id: . "identifier"
  136 primary-exp: . lvalue
  137            | . lvalue args
  140 id: . "new"
  141 primary-exp: . routine formals block
  142 float-exp: . "float"
  143 duration: . "duration"
  144         | . duration "duration"
  150 dictionary: . "[" assocs "]"
  154 tuple: . "(" tuple.exps ")"
  155 literal-exp: . float-exp
  156            | . "angle"
  157            | . duration
  158            | . string
  159            | . "[" exps "]"
  160            | . dictionary
  161            | . tuple
  162 string: . "string"
  163       | . string "string"
  164 literal-exp: . "__HERE__"
  170 lvalue: . primary-exp "[" exps "]"
  171 literal-exp: . "this"
  172            | . "call"
  173 primary-exp: . literal-exp
  174            | . "(" exp ")"
  175            | . "(" error ")"
  176            | . primary-exp "**" primary-exp
  177 unary-exp: . primary-exp
  178          | . "--" lvalue
  179          | . "++" lvalue
  180          | . "+" unary-exp
  181          | . "-" unary-exp
  182          | . "!" unary-exp
  183          | . "compl" unary-exp
  183          | "compl" . unary-exp
  217 primary-exp: . "%exp:" unsigned
  218 lvalue: . "%lvalue:" unsigned
  219       | . "%id:" unsigned
  220       | . primary-exp "." "%id:" unsigned
  221 primary-exp: . lvalue "(" "%exps:" unsigned ")"

    "__HERE__"    shift, and go to state 7
    "closure"     shift, and go to state 9
    "function"    shift, and go to state 13
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "watch"       shift, and go to state 27
    "&"           shift, and go to state 29
    "identifier"  shift, and go to state 35
    "--"          shift, and go to state 41
    "++"          shift, and go to state 42
    "do"          shift, and go to state 43
    "assert"      shift, and go to state 44
    "detach"      shift, and go to state 45
    "disown"      shift, and go to state 46
    "new"         shift, and go to state 124
    "angle"       shift, and go to state 48
    "duration"    shift, and go to state 49
    "float"       shift, and go to state 50
    "string"      shift, and go to state 51
    "call"        shift, and go to state 52
    "this"        shift, and go to state 53
    "!"           shift, and go to state 54
    "compl"       shift, and go to state 55
    "-"           shift, and go to state 56
    "+"           shift, and go to state 57
    "%exp:"       shift, and go to state 59
    "%lvalue:"    shift, and go to state 60
    "%id:"        shift, and go to state 61

    block        go to state 66
    routine      go to state 99
    primary-exp  go to state 100
    detach       go to state 70
    lvalue       go to state 119
    id           go to state 101
    float-exp    go to state 75
    duration     go to state 76
    dictionary   go to state 77
    tuple        go to state 78
    literal-exp  go to state 79
    string       go to state 80
    unary-exp    go to state 147


state 56

   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   52 routine: . "closure"
   53        | . "function"
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
  118            | . block
  119            | . "do" "(" exp ")" block
  120 detach: . "detach"
  121       | . "disown"
  122 primary-exp: . "assert" "(" exp ")"
  123            | . "assert" "{" claims "}"
  124            | . detach "(" exp ")"
  125            | . detach block
  126            | . "isdef" "(" k1_id ")"
  127            | . "watch" "(" exp ")"
  128 lvalue: . id
  129       | . primary-exp "." id
  130       | . primary-exp "." "*"
  131 primary-exp: . "&" id
  132            | . primary-exp "." "&" id
  133 id: . "identifier"
  136 primary-exp: . lvalue
  137            | . lvalue args
  140 id: . "new"
  141 primary-exp: . routine formals block
  142 float-exp: . "float"
  143 duration: . "duration"
  144         | . duration "duration"
  150 dictionary: . "[" assocs "]"
  154 tuple: . "(" tuple.exps ")"
  155 literal-exp: . float-exp
  156            | . "angle"
  157            | . duration
  158            | . string
  159            | . "[" exps "]"
  160            | . dictionary
  161            | . tuple
  162 string: . "string"
  163       | . string "string"
  164 literal-exp: . "__HERE__"
  170 lvalue: . primary-exp "[" exps "]"
  171 literal-exp: . "this"
  172            | . "call"
  173 primary-exp: . literal-exp
  174            | . "(" exp ")"
  175            | . "(" error ")"
  176            | . primary-exp "**" primary-exp
  177 unary-exp: . primary-exp
  178          | . "--" lvalue
  179          | . "++" lvalue
  180          | . "+" unary-exp
  181          | . "-" unary-exp
  181          | "-" . unary-exp
  182          | . "!" unary-exp
  183          | . "compl" unary-exp
  217 primary-exp: . "%exp:" unsigned
  218 lvalue: . "%lvalue:" unsigned
  219       | . "%id:" unsigned
  220       | . primary-exp "." "%id:" unsigned
  221 primary-exp: . lvalue "(" "%exps:" unsigned ")"

    "__HERE__"    shift, and go to state 7
    "closure"     shift, and go to state 9
    "function"    shift, and go to state 13
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "watch"       shift, and go to state 27
    "&"           shift, and go to state 29
    "identifier"  shift, and go to state 35
    "--"          shift, and go to state 41
    "++"          shift, and go to state 42
    "do"          shift, and go to state 43
    "assert"      shift, and go to state 44
    "detach"      shift, and go to state 45
    "disown"      shift, and go to state 46
    "new"         shift, and go to state 124
    "angle"       shift, and go to state 48
    "duration"    shift, and go to state 49
    "float"       shift, and go to state 50
    "string"      shift, and go to state 51
    "call"        shift, and go to state 52
    "this"        shift, and go to state 53
    "!"           shift, and go to state 54
    "compl"       shift, and go to state 55
    "-"           shift, and go to state 56
    "+"           shift, and go to state 57
    "%exp:"       shift, and go to state 59
    "%lvalue:"    shift, and go to state 60
    "%id:"        shift, and go to state 61

    block        go to state 66
    routine      go to state 99
    primary-exp  go to state 100
    detach       go to state 70
    lvalue       go to state 119
    id           go to state 101
    float-exp    go to state 75
    duration     go to state 76
    dictionary   go to state 77
    tuple        go to state 78
    literal-exp  go to state 79
    string       go to state 80
    unary-exp    go to state 148


state 57

   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   52 routine: . "closure"
   53        | . "function"
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
  118            | . block
  119            | . "do" "(" exp ")" block
  120 detach: . "detach"
  121       | . "disown"
  122 primary-exp: . "assert" "(" exp ")"
  123            | . "assert" "{" claims "}"
  124            | . detach "(" exp ")"
  125            | . detach block
  126            | . "isdef" "(" k1_id ")"
  127            | . "watch" "(" exp ")"
  128 lvalue: . id
  129       | . primary-exp "." id
  130       | . primary-exp "." "*"
  131 primary-exp: . "&" id
  132            | . primary-exp "." "&" id
  133 id: . "identifier"
  136 primary-exp: . lvalue
  137            | . lvalue args
  140 id: . "new"
  141 primary-exp: . routine formals block
  142 float-exp: . "float"
  143 duration: . "duration"
  144         | . duration "duration"
  150 dictionary: . "[" assocs "]"
  154 tuple: . "(" tuple.exps ")"
  155 literal-exp: . float-exp
  156            | . "angle"
  157            | . duration
  158            | . string
  159            | . "[" exps "]"
  160            | . dictionary
  161            | . tuple
  162 string: . "string"
  163       | . string "string"
  164 literal-exp: . "__HERE__"
  170 lvalue: . primary-exp "[" exps "]"
  171 literal-exp: . "this"
  172            | . "call"
  173 primary-exp: . literal-exp
  174            | . "(" exp ")"
  175            | . "(" error ")"
  176            | . primary-exp "**" primary-exp
  177 unary-exp: . primary-exp
  178          | . "--" lvalue
  179          | . "++" lvalue
  180          | . "+" unary-exp
  180          | "+" . unary-exp
  181          | . "-" unary-exp
  182          | . "!" unary-exp
  183          | . "compl" unary-exp
  217 primary-exp: . "%exp:" unsigned
  218 lvalue: . "%lvalue:" unsigned
  219       | . "%id:" unsigned
  220       | . primary-exp "." "%id:" unsigned
  221 primary-exp: . lvalue "(" "%exps:" unsigned ")"

    "__HERE__"    shift, and go to state 7
    "closure"     shift, and go to state 9
    "function"    shift, and go to state 13
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "watch"       shift, and go to state 27
    "&"           shift, and go to state 29
    "identifier"  shift, and go to state 35
    "--"          shift, and go to state 41
    "++"          shift, and go to state 42
    "do"          shift, and go to state 43
    "assert"      shift, and go to state 44
    "detach"      shift, and go to state 45
    "disown"      shift, and go to state 46
    "new"         shift, and go to state 124
    "angle"       shift, and go to state 48
    "duration"    shift, and go to state 49
    "float"       shift, and go to state 50
    "string"      shift, and go to state 51
    "call"        shift, and go to state 52
    "this"        shift, and go to state 53
    "!"           shift, and go to state 54
    "compl"       shift, and go to state 55
    "-"           shift, and go to state 56
    "+"           shift, and go to state 57
    "%exp:"       shift, and go to state 59
    "%lvalue:"    shift, and go to state 60
    "%id:"        shift, and go to state 61

    block        go to state 66
    routine      go to state 99
    primary-exp  go to state 100
    detach       go to state 70
    lvalue       go to state 119
    id           go to state 101
    float-exp    go to state 75
    duration     go to state 76
    dictionary   go to state 77
    tuple        go to state 78
    literal-exp  go to state 79
    string       go to state 80
    unary-exp    go to state 149


state 58

  215 unsigned: . "float"
  216 exp: "%unscope:" . unsigned

    "float"  shift, and go to state 150

    unsigned  go to state 151


state 59

  215 unsigned: . "float"
  217 primary-exp: "%exp:" . unsigned

    "float"  shift, and go to state 150

    unsigned  go to state 152


state 60

  215 unsigned: . "float"
  218 lvalue: "%lvalue:" . unsigned

    "float"  shift, and go to state 150

    unsigned  go to state 153


state 61

  215 unsigned: . "float"
  219 lvalue: "%id:" . unsigned

    "float"  shift, and go to state 150

    unsigned  go to state 154


state 62

    3 root: MODE_EXP root_exp .

    $default  reduce using rule 3 (root)


state 63

    5 root_exp: cstmt.opt . ";"
    6         | cstmt.opt . ","
    7         | cstmt.opt . "end of command"

    "end of command"  shift, and go to state 155
    ","               shift, and go to state 156
    ";"               shift, and go to state 157


state 64

   16 cstmt.opt: cstmt .  ["end of command", "case", "default", "}", ")", ",", ";"]
   17          | cstmt . "|"
   19 cstmt: cstmt . "|" cstmt
   20      | cstmt . "&" cstmt

    "&"  shift, and go to state 158
    "|"  shift, and go to state 159

    $default  reduce using rule 16 (cstmt.opt)


state 65

   18 cstmt: stmt .

    $default  reduce using rule 18 (cstmt)


state 66

  118 primary-exp: block .

    $default  reduce using rule 118 (primary-exp)


state 67

   24 stmt: exp .  ["end of command", "case", "catch", "default", "else", "finally", "onleave", "}", ")", ",", ";", "&", "|"]
   51     | exp . "!" args.opt tilda.opt
   62 exp: exp . "=" exp
   63    | exp . "=" exp modifiers
  209    | exp . "&&" exp
  210    | exp . "||" exp
  211    | exp . "in" exp
  212    | exp . "!" "in" exp

    "="   shift, and go to state 160
    "in"  shift, and go to state 161
    "!"   shift, and go to state 162
    "&&"  shift, and go to state 163
    "||"  shift, and go to state 164

    $default  reduce using rule 24 (stmt)


state 68

   54 stmt: routine . k1_id formals block
   56 k1_id: . "identifier"
   57      | . "this" "." "identifier"
   58      | . k1_id "." "identifier"
  141 primary-exp: routine . formals block
  246 formals: .  ["{"]
  247        | . "(" formals.0 ")"

    "("           shift, and go to state 165
    "identifier"  shift, and go to state 166
    "this"        shift, and go to state 167

    $default  reduce using rule 246 (formals)

    k1_id    go to state 168
    formals  go to state 169


state 69

   23 stmt: primary-exp . ":" stmt
  129 lvalue: primary-exp . "." id
  130       | primary-exp . "." "*"
  132 primary-exp: primary-exp . "." "&" id
  170 lvalue: primary-exp . "[" exps "]"
  176 primary-exp: primary-exp . "**" primary-exp
  177 unary-exp: primary-exp .  ["end of command", "=", "case", "catch", "default", "else", "finally", "in", "onleave", "}", ")", ",", ";", "&", "|", "!", "bitand", "bitor", "^", ">>", "<<", "-", "%", "+", "/", "*", "=~=", "==", "===", ">=", ">", "<=", "<", "!=", "!==", "~=", "&&", "||"]
  220 lvalue: primary-exp . "." "%id:" unsigned

    ":"   shift, and go to state 170
    "["   shift, and go to state 171
    "."   shift, and go to state 172
    "**"  shift, and go to state 173

    $default  reduce using rule 177 (unary-exp)


state 70

   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
  124 primary-exp: detach . "(" exp ")"
  125            | detach . block

    "{"  shift, and go to state 16
    "("  shift, and go to state 174

    block  go to state 175


state 71

   64 exp: lvalue . "+=" exp
   65    | lvalue . "-=" exp
   66    | lvalue . "*=" exp
   67    | lvalue . "/=" exp
   68    | lvalue . "^=" exp
   69    | lvalue . "%=" exp
   70 primary-exp: lvalue . "--"
   71            | lvalue . "++"
   72            | lvalue . "->" id
  136            | lvalue .  ["end of command", "=", "case", "catch", ":", "default", "else", "finally", "if", "in", "{", "[", "onleave", ".", "}", "]", ")", "~", ",", ";", "&", "|", "identifier", "=>", "?", "!", "bitand", "bitor", "^", ">>", "<<", "-", "%", "+", "/", "*", "**", "=~=", "==", "===", ">=", ">", "<=", "<", "!=", "!==", "~=", "&&", "||"]
  137            | lvalue . args
  221            | lvalue . "(" "%exps:" unsigned ")"
  231 args: . "(" exps ")"

    "("   shift, and go to state 176
    "^="  shift, and go to state 177
    "-="  shift, and go to state 178
    "%="  shift, and go to state 179
    "+="  shift, and go to state 180
    "/="  shift, and go to state 181
    "*="  shift, and go to state 182
    "--"  shift, and go to state 183
    "++"  shift, and go to state 184
    "->"  shift, and go to state 185

    $default  reduce using rule 136 (primary-exp)

    args  go to state 186


state 72

   55 stmt: id . id formals block
  128 lvalue: id .  ["end of command", "=", "case", "catch", ":", "default", "else", "finally", "in", "[", "(", "onleave", ".", "}", ")", ",", ";", "&", "|", "^=", "-=", "%=", "+=", "/=", "*=", "--", "++", "->", "!", "bitand", "bitor", "^", ">>", "<<", "-", "%", "+", "/", "*", "**", "=~=", "==", "===", ">=", ">", "<=", "<", "!=", "!==", "~=", "&&", "||"]
  133 id: . "identifier"
  140   | . "new"

    "identifier"  shift, and go to state 35
    "new"         shift, and go to state 124

    $default  reduce using rule 128 (lvalue)

    id  go to state 187


state 73

  185 bitor-exp: bitor-exp . "+" bitor-exp
  186          | bitor-exp . "-" bitor-exp
  187          | bitor-exp . "*" bitor-exp
  188          | bitor-exp . "/" bitor-exp
  189          | bitor-exp . "%" bitor-exp
  190          | bitor-exp . "^" bitor-exp
  191          | bitor-exp . "<<" bitor-exp
  192          | bitor-exp . "bitand" bitor-exp
  193          | bitor-exp . "bitor" bitor-exp
  194          | bitor-exp . ">>" bitor-exp
  205 rel-exp: bitor-exp . rel-ops
  206 rel-ops: .  ["end of command", "=", "case", "catch", ":", "default", "else", "finally", "if", "in", "{", "onleave", "}", "]", ")", "~", ",", ";", "&", "|", "identifier", "=>", "?", "!", "=~=", "==", "===", ">=", ">", "<=", "<", "!=", "!==", "~=", "&&", "||"]
  207        | . rel-ops rel-op bitor-exp

    "bitand"  shift, and go to state 188
    "bitor"   shift, and go to state 189
    "^"       shift, and go to state 190
    ">>"      shift, and go to state 191
    "<<"      shift, and go to state 192
    "-"       shift, and go to state 193
    "%"       shift, and go to state 194
    "+"       shift, and go to state 195
    "/"       shift, and go to state 196
    "*"       shift, and go to state 197

    $default  reduce using rule 206 (rel-ops)

    rel-ops  go to state 198


state 74

  139 bitor-exp: new .

    $default  reduce using rule 139 (bitor-exp)


state 75

  155 literal-exp: float-exp .

    $default  reduce using rule 155 (literal-exp)


state 76

  144 duration: duration . "duration"
  157 literal-exp: duration .  ["end of command", "=", "case", "catch", ":", "default", "else", "finally", "if", "in", "{", "[", "onleave", ".", "}", "]", ")", "~", ",", ";", "&", "|", "identifier", "=>", "?", "!", "bitand", "bitor", "^", ">>", "<<", "-", "%", "+", "/", "*", "**", "=~=", "==", "===", ">=", ">", "<=", "<", "!=", "!==", "~=", "&&", "||"]

    "duration"  shift, and go to state 199

    $default  reduce using rule 157 (literal-exp)


state 77

  160 literal-exp: dictionary .

    $default  reduce using rule 160 (literal-exp)


state 78

  161 literal-exp: tuple .

    $default  reduce using rule 161 (literal-exp)


state 79

  173 primary-exp: literal-exp .

    $default  reduce using rule 173 (primary-exp)


state 80

  158 literal-exp: string .  ["end of command", "=", "case", "catch", ":", "default", "else", "finally", "if", "in", "{", "[", "onleave", ".", "}", "]", ")", "~", ",", ";", "&", "|", "identifier", "=>", "?", "!", "bitand", "bitor", "^", ">>", "<<", "-", "%", "+", "/", "*", "**", "=~=", "==", "===", ">=", ">", "<=", "<", "!=", "!==", "~=", "&&", "||"]
  163 string: string . "string"

    "string"  shift, and go to state 200

    $default  reduce using rule 158 (literal-exp)


state 81

  184 bitor-exp: unary-exp .

    $default  reduce using rule 184 (bitor-exp)


state 82

  208 exp: rel-exp .

    $default  reduce using rule 208 (exp)


state 83

    4 root: MODE_EXPS root_exps .

    $default  reduce using rule 4 (root)


state 84

   11 root_exps: stmts .  ["end of command"]
   13 stmts: stmts . ";" cstmt.opt
   14      | stmts . "," cstmt.opt

    ","  shift, and go to state 201
    ";"  shift, and go to state 202

    $default  reduce using rule 11 (root_exps)


state 85

   12 stmts: cstmt.opt .

    $default  reduce using rule 12 (stmts)


state 86

    0 $accept: start "end of command" .

    $default  accept


state 87

   10 root_exp: error "end of command" .

    $default  reduce using rule 10 (root_exp)


state 88

    9 root_exp: error "," .

    $default  reduce using rule 9 (root_exp)


state 89

    8 root_exp: error ";" .

    $default  reduce using rule 8 (root_exp)


state 90

   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   52 routine: . "closure"
   53        | . "function"
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
  118            | . block
  119            | . "do" "(" exp ")" block
  120 detach: . "detach"
  121       | . "disown"
  122 primary-exp: . "assert" "(" exp ")"
  123            | . "assert" "{" claims "}"
  124            | . detach "(" exp ")"
  125            | . detach block
  126            | . "isdef" "(" k1_id ")"
  127            | . "watch" "(" exp ")"
  128 lvalue: . id
  129       | . primary-exp "." id
  130       | . primary-exp "." "*"
  131 primary-exp: . "&" id
  132            | . primary-exp "." "&" id
  133 id: . "identifier"
  134 bitor-exp: . "var" bitor-exp
  135          | . "const" "var" bitor-exp
  135          | "const" "var" . bitor-exp
  136 primary-exp: . lvalue
  137            | . lvalue args
  138 new: . "new" "identifier" args.opt
  139 bitor-exp: . new
  140 id: . "new"
  141 primary-exp: . routine formals block
  142 float-exp: . "float"
  143 duration: . "duration"
  144         | . duration "duration"
  150 dictionary: . "[" assocs "]"
  154 tuple: . "(" tuple.exps ")"
  155 literal-exp: . float-exp
  156            | . "angle"
  157            | . duration
  158            | . string
  159            | . "[" exps "]"
  160            | . dictionary
  161            | . tuple
  162 string: . "string"
  163       | . string "string"
  164 literal-exp: . "__HERE__"
  170 lvalue: . primary-exp "[" exps "]"
  171 literal-exp: . "this"
  172            | . "call"
  173 primary-exp: . literal-exp
  174            | . "(" exp ")"
  175            | . "(" error ")"
  176            | . primary-exp "**" primary-exp
  177 unary-exp: . primary-exp
  178          | . "--" lvalue
  179          | . "++" lvalue
  180          | . "+" unary-exp
  181          | . "-" unary-exp
  182          | . "!" unary-exp
  183          | . "compl" unary-exp
  184 bitor-exp: . unary-exp
  185          | . bitor-exp "+" bitor-exp
  186          | . bitor-exp "-" bitor-exp
  187          | . bitor-exp "*" bitor-exp
  188          | . bitor-exp "/" bitor-exp
  189          | . bitor-exp "%" bitor-exp
  190          | . bitor-exp "^" bitor-exp
  191          | . bitor-exp "<<" bitor-exp
  192          | . bitor-exp "bitand" bitor-exp
  193          | . bitor-exp "bitor" bitor-exp
  194          | . bitor-exp ">>" bitor-exp
  217 primary-exp: . "%exp:" unsigned
  218 lvalue: . "%lvalue:" unsigned
  219       | . "%id:" unsigned
  220       | . primary-exp "." "%id:" unsigned
  221 primary-exp: . lvalue "(" "%exps:" unsigned ")"

    "__HERE__"    shift, and go to state 7
    "closure"     shift, and go to state 9
    "const"       shift, and go to state 10
    "function"    shift, and go to state 13
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "var"         shift, and go to state 25
    "watch"       shift, and go to state 27
    "&"           shift, and go to state 29
    "identifier"  shift, and go to state 35
    "--"          shift, and go to state 41
    "++"          shift, and go to state 42
    "do"          shift, and go to state 43
    "assert"      shift, and go to state 44
    "detach"      shift, and go to state 45
    "disown"      shift, and go to state 46
    "new"         shift, and go to state 47
    "angle"       shift, and go to state 48
    "duration"    shift, and go to state 49
    "float"       shift, and go to state 50
    "string"      shift, and go to state 51
    "call"        shift, and go to state 52
    "this"        shift, and go to state 53
    "!"           shift, and go to state 54
    "compl"       shift, and go to state 55
    "-"           shift, and go to state 56
    "+"           shift, and go to state 57
    "%exp:"       shift, and go to state 59
    "%lvalue:"    shift, and go to state 60
    "%id:"        shift, and go to state 61

    block        go to state 66
    routine      go to state 99
    primary-exp  go to state 100
    detach       go to state 70
    lvalue       go to state 119
    id           go to state 101
    bitor-exp    go to state 203
    new          go to state 74
    float-exp    go to state 75
    duration     go to state 76
    dictionary   go to state 77
    tuple        go to state 78
    literal-exp  go to state 79
    string       go to state 80
    unary-exp    go to state 81


state 91

   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   37 exp: . "class" lvalue protos block
   38    | . "package" lvalue protos block
   52 routine: . "closure"
   53        | . "function"
   62 exp: . exp "=" exp
   63    | . exp "=" exp modifiers
   64    | . lvalue "+=" exp
   65    | . lvalue "-=" exp
   66    | . lvalue "*=" exp
   67    | . lvalue "/=" exp
   68    | . lvalue "^=" exp
   69    | . lvalue "%=" exp
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
   77 stmt: "freezeif" "(" . exp ")" stmt
  118 primary-exp: . block
  119            | . "do" "(" exp ")" block
  120 detach: . "detach"
  121       | . "disown"
  122 primary-exp: . "assert" "(" exp ")"
  123            | . "assert" "{" claims "}"
  124            | . detach "(" exp ")"
  125            | . detach block
  126            | . "isdef" "(" k1_id ")"
  127            | . "watch" "(" exp ")"
  128 lvalue: . id
  129       | . primary-exp "." id
  130       | . primary-exp "." "*"
  131 primary-exp: . "&" id
  132            | . primary-exp "." "&" id
  133 id: . "identifier"
  134 bitor-exp: . "var" bitor-exp
  135          | . "const" "var" bitor-exp
  136 primary-exp: . lvalue
  137            | . lvalue args
  138 new: . "new" "identifier" args.opt
  139 bitor-exp: . new
  140 id: . "new"
  141 primary-exp: . routine formals block
  142 float-exp: . "float"
  143 duration: . "duration"
  144         | . duration "duration"
  150 dictionary: . "[" assocs "]"
  154 tuple: . "(" tuple.exps ")"
  155 literal-exp: . float-exp
  156            | . "angle"
  157            | . duration
  158            | . string
  159            | . "[" exps "]"
  160            | . dictionary
  161            | . tuple
  162 string: . "string"
  163       | . string "string"
  164 literal-exp: . "__HERE__"
  170 lvalue: . primary-exp "[" exps "]"
  171 literal-exp: . "this"
  172            | . "call"
  173 primary-exp: . literal-exp
  174            | . "(" exp ")"
  175            | . "(" error ")"
  176            | . primary-exp "**" primary-exp
  177 unary-exp: . primary-exp
  178          | . "--" lvalue
  179          | . "++" lvalue
  180          | . "+" unary-exp
  181          | . "-" unary-exp
  182          | . "!" unary-exp
  183          | . "compl" unary-exp
  184 bitor-exp: . unary-exp
  185          | . bitor-exp "+" bitor-exp
  186          | . bitor-exp "-" bitor-exp
  187          | . bitor-exp "*" bitor-exp
  188          | . bitor-exp "/" bitor-exp
  189          | . bitor-exp "%" bitor-exp
  190          | . bitor-exp "^" bitor-exp
  191          | . bitor-exp "<<" bitor-exp
  192          | . bitor-exp "bitand" bitor-exp
  193          | . bitor-exp "bitor" bitor-exp
  194          | . bitor-exp ">>" bitor-exp
  205 rel-exp: . bitor-exp rel-ops
  208 exp: . rel-exp
  209    | . exp "&&" exp
  210    | . exp "||" exp
  211    | . exp "in" exp
  212    | . exp "!" "in" exp
  216    | . "%unscope:" unsigned
  217 primary-exp: . "%exp:" unsigned
  218 lvalue: . "%lvalue:" unsigned
  219       | . "%id:" unsigned
  220       | . primary-exp "." "%id:" unsigned
  221 primary-exp: . lvalue "(" "%exps:" unsigned ")"

    "__HERE__"    shift, and go to state 7
    "closure"     shift, and go to state 9
    "const"       shift, and go to state 10
    "function"    shift, and go to state 13
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "var"         shift, and go to state 25
    "watch"       shift, and go to state 27
    "&"           shift, and go to state 29
    "identifier"  shift, and go to state 35
    "class"       shift, and go to state 36
    "package"     shift, and go to state 37
    "--"          shift, and go to state 41
    "++"          shift, and go to state 42
    "do"          shift, and go to state 43
    "assert"      shift, and go to state 44
    "detach"      shift, and go to state 45
    "disown"      shift, and go to state 46
    "new"         shift, and go to state 47
    "angle"       shift, and go to state 48
    "duration"    shift, and go to state 49
    "float"       shift, and go to state 50
    "string"      shift, and go to state 51
    "call"        shift, and go to state 52
    "this"        shift, and go to state 53
    "!"           shift, and go to state 54
    "compl"       shift, and go to state 55
    "-"           shift, and go to state 56
    "+"           shift, and go to state 57
    "%unscope:"   shift, and go to state 58
    "%exp:"       shift, and go to state 59
    "%lvalue:"    shift, and go to state 60
    "%id:"        shift, and go to state 61

    block        go to state 66
    exp          go to state 204
    routine      go to state 99
    primary-exp  go to state 100
    detach       go to state 70
    lvalue       go to state 71
    id           go to state 101
    bitor-exp    go to state 73
    new          go to state 74
    float-exp    go to state 75
    duration     go to state 76
    dictionary   go to state 77
    tuple        go to state 78
    literal-exp  go to state 79
    string       go to state 80
    unary-exp    go to state 81
    rel-exp      go to state 82


state 92

   12 stmts: . cstmt.opt
   13      | . stmts ";" cstmt.opt
   14      | . stmts "," cstmt.opt
   15 cstmt.opt: .  [")", ",", ";"]
   16          | . cstmt
   17          | . cstmt "|"
   18 cstmt: . stmt
   19      | . cstmt "|" cstmt
   20      | . cstmt "&" cstmt
   23 stmt: . primary-exp ":" stmt
   24     | . exp
   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   37 exp: . "class" lvalue protos block
   38    | . "package" lvalue protos block
   43 stmt: . "enum" id "{" id.0 "}"
   47     | . "external" "identifier" "identifier"
   48     | . "external" "var" "identifier" "." "identifier" from "identifier"
   49     | . "external" event_or_function "(" unsigned ")" "identifier" "." "identifier" from "identifier"
   50     | . "import" lvalue
   51     | . exp "!" args.opt tilda.opt
   52 routine: . "closure"
   53        | . "function"
   54 stmt: . routine k1_id formals block
   55     | . id id formals block
   62 exp: . exp "=" exp
   63    | . exp "=" exp modifiers
   64    | . lvalue "+=" exp
   65    | . lvalue "-=" exp
   66    | . lvalue "*=" exp
   67    | . lvalue "/=" exp
   68    | . lvalue "^=" exp
   69    | . lvalue "%=" exp
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
   73 stmt: . "at" identifiers "(" exp tilda.opt ")" stmt onleave.opt
   74     | . "at" identifiers "(" event_match ")" stmt onleave.opt
   75     | . "every" "(" exp ")" stmt
   76     | . "if" "(" stmts ")" stmt else.opt
   76     | "if" "(" . stmts ")" stmt else.opt
   77     | . "freezeif" "(" exp ")" stmt
   78     | . "stopif" "(" exp ")" stmt
   79     | . "switch" "(" exp ")" "{" cases default.opt "}"
   80     | . "timeout" "(" exp ")" stmt catch.opt else.opt finally.opt
   81     | . "return" exp.opt
   82     | . "break"
   83     | . "continue"
   84     | . "waituntil" "(" exp tilda.opt ")"
   85     | . "waituntil" "(" event_match ")"
   86     | . "whenever" "(" exp tilda.opt ")" stmt else.opt
   87     | . "whenever" "(" event_match ")" stmt else.opt
  108     | . "try" block catches.1 else.opt finally.opt
  109     | . "try" block "finally" block
  110     | . "throw" exp.opt
  111     | . "loop" stmt
  112     | . "for" "(" exp ")" stmt
  113     | . "for" "(" stmt.opt ";" exp ";" stmt.opt ")" stmt
  114     | . "for" "(" "var" "identifier" in_or_colon exp ")" stmt
  115     | . "while" "(" exp ")" stmt
  118 primary-exp: . block
  119            | . "do" "(" exp ")" block
  120 detach: . "detach"
  121       | . "disown"
  122 primary-exp: . "assert" "(" exp ")"
  123            | . "assert" "{" claims "}"
  124            | . detach "(" exp ")"
  125            | . detach block
  126            | . "isdef" "(" k1_id ")"
  127            | . "watch" "(" exp ")"
  128 lvalue: . id
  129       | . primary-exp "." id
  130       | . primary-exp "." "*"
  131 primary-exp: . "&" id
  132            | . primary-exp "." "&" id
  133 id: . "identifier"
  134 bitor-exp: . "var" bitor-exp
  135          | . "const" "var" bitor-exp
  136 primary-exp: . lvalue
  137            | . lvalue args
  138 new: . "new" "identifier" args.opt
  139 bitor-exp: . new
  140 id: . "new"
  141 primary-exp: . routine formals block
  142 float-exp: . "float"
  143 duration: . "duration"
  144         | . duration "duration"
  150 dictionary: . "[" assocs "]"
  154 tuple: . "(" tuple.exps ")"
  155 literal-exp: . float-exp
  156            | . "angle"
  157            | . duration
  158            | . string
  159            | . "[" exps "]"
  160            | . dictionary
  161            | . tuple
  162 string: . "string"
  163       | . string "string"
  164 literal-exp: . "__HERE__"
  170 lvalue: . primary-exp "[" exps "]"
  171 literal-exp: . "this"
  172            | . "call"
  173 primary-exp: . literal-exp
  174            | . "(" exp ")"
  175            | . "(" error ")"
  176            | . primary-exp "**" primary-exp
  177 unary-exp: . primary-exp
  178          | . "--" lvalue
  179          | . "++" lvalue
  180          | . "+" unary-exp
  181          | . "-" unary-exp
  182          | . "!" unary-exp
  183          | . "compl" unary-exp
  184 bitor-exp: . unary-exp
  185          | . bitor-exp "+" bitor-exp
  186          | . bitor-exp "-" bitor-exp
  187          | . bitor-exp "*" bitor-exp
  188          | . bitor-exp "/" bitor-exp
  189          | . bitor-exp "%" bitor-exp
  190          | . bitor-exp "^" bitor-exp
  191          | . bitor-exp "<<" bitor-exp
  192          | . bitor-exp "bitand" bitor-exp
  193          | . bitor-exp "bitor" bitor-exp
  194          | . bitor-exp ">>" bitor-exp
  205 rel-exp: . bitor-exp rel-ops
  208 exp: . rel-exp
  209    | . exp "&&" exp
  210    | . exp "||" exp
  211    | . exp "in" exp
  212    | . exp "!" "in" exp
  216    | . "%unscope:" unsigned
  217 primary-exp: . "%exp:" unsigned
  218 lvalue: . "%lvalue:" unsigned
  219       | . "%id:" unsigned
  220       | . primary-exp "." "%id:" unsigned
  221 primary-exp: . lvalue "(" "%exps:" unsigned ")"

    "__HERE__"    shift, and go to state 7
    "break"       shift, and go to state 8
    "closure"     shift, and go to state 9
    "const"       shift, and go to state 10
    "continue"    shift, and go to state 11
    "freezeif"    shift, and go to state 12
    "function"    shift, and go to state 13
    "if"          shift, and go to state 14
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "return"      shift, and go to state 19
    "stopif"      shift, and go to state 20
    "switch"      shift, and go to state 21
    "throw"       shift, and go to state 22
    "timeout"     shift, and go to state 23
    "try"         shift, and go to state 24
    "var"         shift, and go to state 25
    "waituntil"   shift, and go to state 26
    "watch"       shift, and go to state 27
    "whenever"    shift, and go to state 28
    "&"           shift, and go to state 29
    "every"       shift, and go to state 30
    "for"         shift, and go to state 31
    "loop"        shift, and go to state 32
    "while"       shift, and go to state 33
    "at"          shift, and go to state 34
    "identifier"  shift, and go to state 35
    "class"       shift, and go to state 36
    "package"     shift, and go to state 37
    "enum"        shift, and go to state 38
    "external"    shift, and go to state 39
    "import"      shift, and go to state 40
    "--"          shift, and go to state 41
    "++"          shift, and go to state 42
    "do"          shift, and go to state 43
    "assert"      shift, and go to state 44
    "detach"      shift, and go to state 45
    "disown"      shift, and go to state 46
    "new"         shift, and go to state 47
    "angle"       shift, and go to state 48
    "duration"    shift, and go to state 49
    "float"       shift, and go to state 50
    "string"      shift, and go to state 51
    "call"        shift, and go to state 52
    "this"        shift, and go to state 53
    "!"           shift, and go to state 54
    "compl"       shift, and go to state 55
    "-"           shift, and go to state 56
    "+"           shift, and go to state 57
    "%unscope:"   shift, and go to state 58
    "%exp:"       shift, and go to state 59
    "%lvalue:"    shift, and go to state 60
    "%id:"        shift, and go to state 61

    $default  reduce using rule 15 (cstmt.opt)

    stmts        go to state 205
    cstmt.opt    go to state 85
    cstmt        go to state 64
    stmt         go to state 65
    block        go to state 66
    exp          go to state 67
    routine      go to state 68
    primary-exp  go to state 69
    detach       go to state 70
    lvalue       go to state 71
    id           go to state 72
    bitor-exp    go to state 73
    new          go to state 74
    float-exp    go to state 75
    duration     go to state 76
    dictionary   go to state 77
    tuple        go to state 78
    literal-exp  go to state 79
    string       go to state 80
    unary-exp    go to state 81
    rel-exp      go to state 82


state 93

   56 k1_id: . "identifier"
   57      | . "this" "." "identifier"
   58      | . k1_id "." "identifier"
  126 primary-exp: "isdef" "(" . k1_id ")"

    "identifier"  shift, and go to state 166
    "this"        shift, and go to state 167

    k1_id  go to state 206


state 94

   26 block: "{" error . "}"

    "}"  shift, and go to state 207


state 95

   13 stmts: stmts . ";" cstmt.opt
   14      | stmts . "," cstmt.opt
   25 block: "{" stmts . "}"

    "}"  shift, and go to state 208
    ","  shift, and go to state 201
    ";"  shift, and go to state 202


state 96

   27 block: "{" id . "~" id "}"
   55 stmt: id . id formals block
  128 lvalue: id .  ["=", ":", "in", "[", "(", ".", "}", ",", ";", "&", "|", "^=", "-=", "%=", "+=", "/=", "*=", "--", "++", "->", "!", "bitand", "bitor", "^", ">>", "<<", "-", "%", "+", "/", "*", "**", "=~=", "==", "===", ">=", ">", "<=", "<", "!=", "!==", "~=", "&&", "||"]
  133 id: . "identifier"
  140   | . "new"

    "~"           shift, and go to state 209
    "identifier"  shift, and go to state 35
    "new"         shift, and go to state 124

    $default  reduce using rule 128 (lvalue)

    id  go to state 187


state 97

  148 assocs: "=>" .

    $default  reduce using rule 148 (assocs)


state 98

   62 exp: exp . "=" exp
   63    | exp . "=" exp modifiers
  145 assoc: exp . "=>" exp
  209 exp: exp . "&&" exp
  210    | exp . "||" exp
  211    | exp . "in" exp
  212    | exp . "!" "in" exp
  228 exps.1: exp .  ["]", ","]

    "="   shift, and go to state 160
    "in"  shift, and go to state 161
    "=>"  shift, and go to state 210
    "!"   shift, and go to state 211
    "&&"  shift, and go to state 163
    "||"  shift, and go to state 164

    $default  reduce using rule 228 (exps.1)


state 99

  141 primary-exp: routine . formals block
  246 formals: .  ["{"]
  247        | . "(" formals.0 ")"

    "("  shift, and go to state 165

    $default  reduce using rule 246 (formals)

    formals  go to state 169


state 100

  129 lvalue: primary-exp . "." id
  130       | primary-exp . "." "*"
  132 primary-exp: primary-exp . "." "&" id
  170 lvalue: primary-exp . "[" exps "]"
  176 primary-exp: primary-exp . "**" primary-exp
  177 unary-exp: primary-exp .  ["end of command", "=", "case", "catch", ":", "default", "else", "finally", "if", "in", "{", "onleave", "}", "]", ")", "~", ",", ";", "&", "|", "identifier", "=>", "?", "!", "bitand", "bitor", "^", ">>", "<<", "-", "%", "+", "/", "*", "=~=", "==", "===", ">=", ">", "<=", "<", "!=", "!==", "~=", "&&", "||"]
  220 lvalue: primary-exp . "." "%id:" unsigned

    "["   shift, and go to state 171
    "."   shift, and go to state 172
    "**"  shift, and go to state 173

    $default  reduce using rule 177 (unary-exp)


state 101

  128 lvalue: id .

    $default  reduce using rule 128 (lvalue)


state 102

  146 assocs.1: assoc .

    $default  reduce using rule 146 (assocs.1)


state 103

  147 assocs.1: assocs.1 . "," assoc
  149 assocs: assocs.1 . comma.opt
  248 comma.opt: .  ["]"]
  249          | . ","

    ","  shift, and go to state 212

    $default  reduce using rule 248 (comma.opt)

    comma.opt  go to state 213


state 104

  150 dictionary: "[" assocs . "]"

    "]"  shift, and go to state 214


state 105

  159 literal-exp: "[" exps . "]"

    "]"  shift, and go to state 215


state 106

  227 exps: exps.1 . comma.opt
  229 exps.1: exps.1 . "," exp
  248 comma.opt: .  ["]", ")"]
  249          | . ","

    ","  shift, and go to state 216

    $default  reduce using rule 248 (comma.opt)

    comma.opt  go to state 217


state 107

  175 primary-exp: "(" error . ")"

    ")"  shift, and go to state 218


state 108

   62 exp: exp . "=" exp
   63    | exp . "=" exp modifiers
  174 primary-exp: "(" exp . ")"
  209 exp: exp . "&&" exp
  210    | exp . "||" exp
  211    | exp . "in" exp
  212    | exp . "!" "in" exp
  228 exps.1: exp .  [","]

    "="   shift, and go to state 160
    "in"  shift, and go to state 161
    ")"   shift, and go to state 219
    "!"   shift, and go to state 211
    "&&"  shift, and go to state 163
    "||"  shift, and go to state 164

    $default  reduce using rule 228 (exps.1)


state 109

  154 tuple: "(" tuple.exps . ")"

    ")"  shift, and go to state 220


state 110

  152 tuple.exps: exps.1 . ","
  229 exps.1: exps.1 . "," exp
  230 exps.2: exps.1 . "," exp

    ","  shift, and go to state 221


state 111

  153 tuple.exps: exps.2 .

    $default  reduce using rule 153 (tuple.exps)


state 112

   62 exp: exp . "=" exp
   63    | exp . "=" exp modifiers
  209    | exp . "&&" exp
  210    | exp . "||" exp
  211    | exp . "in" exp
  212    | exp . "!" "in" exp
  214 exp.opt: exp .  ["end of command", "case", "catch", "default", "else", "finally", "onleave", "}", ")", ",", ";", "&", "|"]

    "="   shift, and go to state 160
    "in"  shift, and go to state 161
    "!"   shift, and go to state 211
    "&&"  shift, and go to state 163
    "||"  shift, and go to state 164

    $default  reduce using rule 214 (exp.opt)


state 113

   81 stmt: "return" exp.opt .

    $default  reduce using rule 81 (stmt)


state 114

   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   37 exp: . "class" lvalue protos block
   38    | . "package" lvalue protos block
   52 routine: . "closure"
   53        | . "function"
   62 exp: . exp "=" exp
   63    | . exp "=" exp modifiers
   64    | . lvalue "+=" exp
   65    | . lvalue "-=" exp
   66    | . lvalue "*=" exp
   67    | . lvalue "/=" exp
   68    | . lvalue "^=" exp
   69    | . lvalue "%=" exp
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
   78 stmt: "stopif" "(" . exp ")" stmt
  118 primary-exp: . block
  119            | . "do" "(" exp ")" block
  120 detach: . "detach"
  121       | . "disown"
  122 primary-exp: . "assert" "(" exp ")"
  123            | . "assert" "{" claims "}"
  124            | . detach "(" exp ")"
  125            | . detach block
  126            | . "isdef" "(" k1_id ")"
  127            | . "watch" "(" exp ")"
  128 lvalue: . id
  129       | . primary-exp "." id
  130       | . primary-exp "." "*"
  131 primary-exp: . "&" id
  132            | . primary-exp "." "&" id
  133 id: . "identifier"
  134 bitor-exp: . "var" bitor-exp
  135          | . "const" "var" bitor-exp
  136 primary-exp: . lvalue
  137            | . lvalue args
  138 new: . "new" "identifier" args.opt
  139 bitor-exp: . new
  140 id: . "new"
  141 primary-exp: . routine formals block
  142 float-exp: . "float"
  143 duration: . "duration"
  144         | . duration "duration"
  150 dictionary: . "[" assocs "]"
  154 tuple: . "(" tuple.exps ")"
  155 literal-exp: . float-exp
  156            | . "angle"
  157            | . duration
  158            | . string
  159            | . "[" exps "]"
  160            | . dictionary
  161            | . tuple
  162 string: . "string"
  163       | . string "string"
  164 literal-exp: . "__HERE__"
  170 lvalue: . primary-exp "[" exps "]"
  171 literal-exp: . "this"
  172            | . "call"
  173 primary-exp: . literal-exp
  174            | . "(" exp ")"
  175            | . "(" error ")"
  176            | . primary-exp "**" primary-exp
  177 unary-exp: . primary-exp
  178          | . "--" lvalue
  179          | . "++" lvalue
  180          | . "+" unary-exp
  181          | . "-" unary-exp
  182          | . "!" unary-exp
  183          | . "compl" unary-exp
  184 bitor-exp: . unary-exp
  185          | . bitor-exp "+" bitor-exp
  186          | . bitor-exp "-" bitor-exp
  187          | . bitor-exp "*" bitor-exp
  188          | . bitor-exp "/" bitor-exp
  189          | . bitor-exp "%" bitor-exp
  190          | . bitor-exp "^" bitor-exp
  191          | . bitor-exp "<<" bitor-exp
  192          | . bitor-exp "bitand" bitor-exp
  193          | . bitor-exp "bitor" bitor-exp
  194          | . bitor-exp ">>" bitor-exp
  205 rel-exp: . bitor-exp rel-ops
  208 exp: . rel-exp
  209    | . exp "&&" exp
  210    | . exp "||" exp
  211    | . exp "in" exp
  212    | . exp "!" "in" exp
  216    | . "%unscope:" unsigned
  217 primary-exp: . "%exp:" unsigned
  218 lvalue: . "%lvalue:" unsigned
  219       | . "%id:" unsigned
  220       | . primary-exp "." "%id:" unsigned
  221 primary-exp: . lvalue "(" "%exps:" unsigned ")"

    "__HERE__"    shift, and go to state 7
    "closure"     shift, and go to state 9
    "const"       shift, and go to state 10
    "function"    shift, and go to state 13
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "var"         shift, and go to state 25
    "watch"       shift, and go to state 27
    "&"           shift, and go to state 29
    "identifier"  shift, and go to state 35
    "class"       shift, and go to state 36
    "package"     shift, and go to state 37
    "--"          shift, and go to state 41
    "++"          shift, and go to state 42
    "do"          shift, and go to state 43
    "assert"      shift, and go to state 44
    "detach"      shift, and go to state 45
    "disown"      shift, and go to state 46
    "new"         shift, and go to state 47
    "angle"       shift, and go to state 48
    "duration"    shift, and go to state 49
    "float"       shift, and go to state 50
    "string"      shift, and go to state 51
    "call"        shift, and go to state 52
    "this"        shift, and go to state 53
    "!"           shift, and go to state 54
    "compl"       shift, and go to state 55
    "-"           shift, and go to state 56
    "+"           shift, and go to state 57
    "%unscope:"   shift, and go to state 58
    "%exp:"       shift, and go to state 59
    "%lvalue:"    shift, and go to state 60
    "%id:"        shift, and go to state 61

    block        go to state 66
    exp          go to state 222
    routine      go to state 99
    primary-exp  go to state 100
    detach       go to state 70
    lvalue       go to state 71
    id           go to state 101
    bitor-exp    go to state 73
    new          go to state 74
    float-exp    go to state 75
    duration     go to state 76
    dictionary   go to state 77
    tuple        go to state 78
    literal-exp  go to state 79
    string       go to state 80
    unary-exp    go to state 81
    rel-exp      go to state 82


state 115

   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   37 exp: . "class" lvalue protos block
   38    | . "package" lvalue protos block
   52 routine: . "closure"
   53        | . "function"
   62 exp: . exp "=" exp
   63    | . exp "=" exp modifiers
   64    | . lvalue "+=" exp
   65    | . lvalue "-=" exp
   66    | . lvalue "*=" exp
   67    | . lvalue "/=" exp
   68    | . lvalue "^=" exp
   69    | . lvalue "%=" exp
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
   79 stmt: "switch" "(" . exp ")" "{" cases default.opt "}"
  118 primary-exp: . block
  119            | . "do" "(" exp ")" block
  120 detach: . "detach"
  121       | . "disown"
  122 primary-exp: . "assert" "(" exp ")"
  123            | . "assert" "{" claims "}"
  124            | . detach "(" exp ")"
  125            | . detach block
  126            | . "isdef" "(" k1_id ")"
  127            | . "watch" "(" exp ")"
  128 lvalue: . id
  129       | . primary-exp "." id
  130       | . primary-exp "." "*"
  131 primary-exp: . "&" id
  132            | . primary-exp "." "&" id
  133 id: . "identifier"
  134 bitor-exp: . "var" bitor-exp
  135          | . "const" "var" bitor-exp
  136 primary-exp: . lvalue
  137            | . lvalue args
  138 new: . "new" "identifier" args.opt
  139 bitor-exp: . new
  140 id: . "new"
  141 primary-exp: . routine formals block
  142 float-exp: . "float"
  143 duration: . "duration"
  144         | . duration "duration"
  150 dictionary: . "[" assocs "]"
  154 tuple: . "(" tuple.exps ")"
  155 literal-exp: . float-exp
  156            | . "angle"
  157            | . duration
  158            | . string
  159            | . "[" exps "]"
  160            | . dictionary
  161            | . tuple
  162 string: . "string"
  163       | . string "string"
  164 literal-exp: . "__HERE__"
  170 lvalue: . primary-exp "[" exps "]"
  171 literal-exp: . "this"
  172            | . "call"
  173 primary-exp: . literal-exp
  174            | . "(" exp ")"
  175            | . "(" error ")"
  176            | . primary-exp "**" primary-exp
  177 unary-exp: . primary-exp
  178          | . "--" lvalue
  179          | . "++" lvalue
  180          | . "+" unary-exp
  181          | . "-" unary-exp
  182          | . "!" unary-exp
  183          | . "compl" unary-exp
  184 bitor-exp: . unary-exp
  185          | . bitor-exp "+" bitor-exp
  186          | . bitor-exp "-" bitor-exp
  187          | . bitor-exp "*" bitor-exp
  188          | . bitor-exp "/" bitor-exp
  189          | . bitor-exp "%" bitor-exp
  190          | . bitor-exp "^" bitor-exp
  191          | . bitor-exp "<<" bitor-exp
  192          | . bitor-exp "bitand" bitor-exp
  193          | . bitor-exp "bitor" bitor-exp
  194          | . bitor-exp ">>" bitor-exp
  205 rel-exp: . bitor-exp rel-ops
  208 exp: . rel-exp
  209    | . exp "&&" exp
  210    | . exp "||" exp
  211    | . exp "in" exp
  212    | . exp "!" "in" exp
  216    | . "%unscope:" unsigned
  217 primary-exp: . "%exp:" unsigned
  218 lvalue: . "%lvalue:" unsigned
  219       | . "%id:" unsigned
  220       | . primary-exp "." "%id:" unsigned
  221 primary-exp: . lvalue "(" "%exps:" unsigned ")"

    "__HERE__"    shift, and go to state 7
    "closure"     shift, and go to state 9
    "const"       shift, and go to state 10
    "function"    shift, and go to state 13
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "var"         shift, and go to state 25
    "watch"       shift, and go to state 27
    "&"           shift, and go to state 29
    "identifier"  shift, and go to state 35
    "class"       shift, and go to state 36
    "package"     shift, and go to state 37
    "--"          shift, and go to state 41
    "++"          shift, and go to state 42
    "do"          shift, and go to state 43
    "assert"      shift, and go to state 44
    "detach"      shift, and go to state 45
    "disown"      shift, and go to state 46
    "new"         shift, and go to state 47
    "angle"       shift, and go to state 48
    "duration"    shift, and go to state 49
    "float"       shift, and go to state 50
    "string"      shift, and go to state 51
    "call"        shift, and go to state 52
    "this"        shift, and go to state 53
    "!"           shift, and go to state 54
    "compl"       shift, and go to state 55
    "-"           shift, and go to state 56
    "+"           shift, and go to state 57
    "%unscope:"   shift, and go to state 58
    "%exp:"       shift, and go to state 59
    "%lvalue:"    shift, and go to state 60
    "%id:"        shift, and go to state 61

    block        go to state 66
    exp          go to state 223
    routine      go to state 99
    primary-exp  go to state 100
    detach       go to state 70
    lvalue       go to state 71
    id           go to state 101
    bitor-exp    go to state 73
    new          go to state 74
    float-exp    go to state 75
    duration     go to state 76
    dictionary   go to state 77
    tuple        go to state 78
    literal-exp  go to state 79
    string       go to state 80
    unary-exp    go to state 81
    rel-exp      go to state 82


state 116

  110 stmt: "throw" exp.opt .

    $default  reduce using rule 110 (stmt)


state 117

   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   37 exp: . "class" lvalue protos block
   38    | . "package" lvalue protos block
   52 routine: . "closure"
   53        | . "function"
   62 exp: . exp "=" exp
   63    | . exp "=" exp modifiers
   64    | . lvalue "+=" exp
   65    | . lvalue "-=" exp
   66    | . lvalue "*=" exp
   67    | . lvalue "/=" exp
   68    | . lvalue "^=" exp
   69    | . lvalue "%=" exp
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
   80 stmt: "timeout" "(" . exp ")" stmt catch.opt else.opt finally.opt
  118 primary-exp: . block
  119            | . "do" "(" exp ")" block
  120 detach: . "detach"
  121       | . "disown"
  122 primary-exp: . "assert" "(" exp ")"
  123            | . "assert" "{" claims "}"
  124            | . detach "(" exp ")"
  125            | . detach block
  126            | . "isdef" "(" k1_id ")"
  127            | . "watch" "(" exp ")"
  128 lvalue: . id
  129       | . primary-exp "." id
  130       | . primary-exp "." "*"
  131 primary-exp: . "&" id
  132            | . primary-exp "." "&" id
  133 id: . "identifier"
  134 bitor-exp: . "var" bitor-exp
  135          | . "const" "var" bitor-exp
  136 primary-exp: . lvalue
  137            | . lvalue args
  138 new: . "new" "identifier" args.opt
  139 bitor-exp: . new
  140 id: . "new"
  141 primary-exp: . routine formals block
  142 float-exp: . "float"
  143 duration: . "duration"
  144         | . duration "duration"
  150 dictionary: . "[" assocs "]"
  154 tuple: . "(" tuple.exps ")"
  155 literal-exp: . float-exp
  156            | . "angle"
  157            | . duration
  158            | . string
  159            | . "[" exps "]"
  160            | . dictionary
  161            | . tuple
  162 string: . "string"
  163       | . string "string"
  164 literal-exp: . "__HERE__"
  170 lvalue: . primary-exp "[" exps "]"
  171 literal-exp: . "this"
  172            | . "call"
  173 primary-exp: . literal-exp
  174            | . "(" exp ")"
  175            | . "(" error ")"
  176            | . primary-exp "**" primary-exp
  177 unary-exp: . primary-exp
  178          | . "--" lvalue
  179          | . "++" lvalue
  180          | . "+" unary-exp
  181          | . "-" unary-exp
  182          | . "!" unary-exp
  183          | . "compl" unary-exp
  184 bitor-exp: . unary-exp
  185          | . bitor-exp "+" bitor-exp
  186          | . bitor-exp "-" bitor-exp
  187          | . bitor-exp "*" bitor-exp
  188          | . bitor-exp "/" bitor-exp
  189          | . bitor-exp "%" bitor-exp
  190          | . bitor-exp "^" bitor-exp
  191          | . bitor-exp "<<" bitor-exp
  192          | . bitor-exp "bitand" bitor-exp
  193          | . bitor-exp "bitor" bitor-exp
  194          | . bitor-exp ">>" bitor-exp
  205 rel-exp: . bitor-exp rel-ops
  208 exp: . rel-exp
  209    | . exp "&&" exp
  210    | . exp "||" exp
  211    | . exp "in" exp
  212    | . exp "!" "in" exp
  216    | . "%unscope:" unsigned
  217 primary-exp: . "%exp:" unsigned
  218 lvalue: . "%lvalue:" unsigned
  219       | . "%id:" unsigned
  220       | . primary-exp "." "%id:" unsigned
  221 primary-exp: . lvalue "(" "%exps:" unsigned ")"

    "__HERE__"    shift, and go to state 7
    "closure"     shift, and go to state 9
    "const"       shift, and go to state 10
    "function"    shift, and go to state 13
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "var"         shift, and go to state 25
    "watch"       shift, and go to state 27
    "&"           shift, and go to state 29
    "identifier"  shift, and go to state 35
    "class"       shift, and go to state 36
    "package"     shift, and go to state 37
    "--"          shift, and go to state 41
    "++"          shift, and go to state 42
    "do"          shift, and go to state 43
    "assert"      shift, and go to state 44
    "detach"      shift, and go to state 45
    "disown"      shift, and go to state 46
    "new"         shift, and go to state 47
    "angle"       shift, and go to state 48
    "duration"    shift, and go to state 49
    "float"       shift, and go to state 50
    "string"      shift, and go to state 51
    "call"        shift, and go to state 52
    "this"        shift, and go to state 53
    "!"           shift, and go to state 54
    "compl"       shift, and go to state 55
    "-"           shift, and go to state 56
    "+"           shift, and go to state 57
    "%unscope:"   shift, and go to state 58
    "%exp:"       shift, and go to state 59
    "%lvalue:"    shift, and go to state 60
    "%id:"        shift, and go to state 61

    block        go to state 66
    exp          go to state 224
    routine      go to state 99
    primary-exp  go to state 100
    detach       go to state 70
    lvalue       go to state 71
    id           go to state 101
    bitor-exp    go to state 73
    new          go to state 74
    float-exp    go to state 75
    duration     go to state 76
    dictionary   go to state 77
    tuple        go to state 78
    literal-exp  go to state 79
    string       go to state 80
    unary-exp    go to state 81
    rel-exp      go to state 82


state 118

   97 catches.1: . catch
   98          | . catches.1 catch
  103 catch: . "catch" match.opt block
  108 stmt: "try" block . catches.1 else.opt finally.opt
  109     | "try" block . "finally" block

    "catch"    shift, and go to state 225
    "finally"  shift, and go to state 226

    catches.1  go to state 227
    catch      go to state 228


state 119

   70 primary-exp: lvalue . "--"
   71            | lvalue . "++"
   72            | lvalue . "->" id
  136            | lvalue .  ["end of command", "=", "case", "catch", ":", "default", "else", "finally", "if", "in", "{", "[", "onleave", ".", "}", "]", ")", "~", ",", ";", "&", "|", "identifier", "=>", "?", "!", "bitand", "bitor", "^", ">>", "<<", "-", "%", "+", "/", "*", "**", "=~=", "==", "===", ">=", ">", "<=", "<", "!=", "!==", "~=", "&&", "||"]
  137            | lvalue . args
  221            | lvalue . "(" "%exps:" unsigned ")"
  231 args: . "(" exps ")"

    "("   shift, and go to state 176
    "--"  shift, and go to state 183
    "++"  shift, and go to state 184
    "->"  shift, and go to state 185

    $default  reduce using rule 136 (primary-exp)

    args  go to state 186


state 120

  134 bitor-exp: "var" bitor-exp .  ["end of command", "=", "case", "catch", ":", "default", "else", "finally", "if", "in", "{", "onleave", "}", "]", ")", "~", ",", ";", "&", "|", "identifier", "=>", "?", "!", "=~=", "==", "===", ">=", ">", "<=", "<", "!=", "!==", "~=", "&&", "||"]
  185          | bitor-exp . "+" bitor-exp
  186          | bitor-exp . "-" bitor-exp
  187          | bitor-exp . "*" bitor-exp
  188          | bitor-exp . "/" bitor-exp
  189          | bitor-exp . "%" bitor-exp
  190          | bitor-exp . "^" bitor-exp
  191          | bitor-exp . "<<" bitor-exp
  192          | bitor-exp . "bitand" bitor-exp
  193          | bitor-exp . "bitor" bitor-exp
  194          | bitor-exp . ">>" bitor-exp

    "bitand"  shift, and go to state 188
    "bitor"   shift, and go to state 189
    "^"       shift, and go to state 190
    ">>"      shift, and go to state 191
    "<<"      shift, and go to state 192
    "-"       shift, and go to state 193
    "%"       shift, and go to state 194
    "+"       shift, and go to state 195
    "/"       shift, and go to state 196
    "*"       shift, and go to state 197

    $default  reduce using rule 134 (bitor-exp)

    Conflict between rule 134 and token "bitand" resolved as shift ("var" < "bitand").
    Conflict between rule 134 and token "bitor" resolved as shift ("var" < "bitor").
    Conflict between rule 134 and token "^" resolved as shift ("var" < "^").
    Conflict between rule 134 and token ">>" resolved as shift ("var" < ">>").
    Conflict between rule 134 and token "<<" resolved as shift ("var" < "<<").
    Conflict between rule 134 and token "-" resolved as shift ("var" < "-").
    Conflict between rule 134 and token "%" resolved as shift ("var" < "%").
    Conflict between rule 134 and token "+" resolved as shift ("var" < "+").
    Conflict between rule 134 and token "/" resolved as shift ("var" < "/").
    Conflict between rule 134 and token "*" resolved as shift ("var" < "*").


state 121

   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   37 exp: . "class" lvalue protos block
   38    | . "package" lvalue protos block
   52 routine: . "closure"
   53        | . "function"
   62 exp: . exp "=" exp
   63    | . exp "=" exp modifiers
   64    | . lvalue "+=" exp
   65    | . lvalue "-=" exp
   66    | . lvalue "*=" exp
   67    | . lvalue "/=" exp
   68    | . lvalue "^=" exp
   69    | . lvalue "%=" exp
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
   84 stmt: "waituntil" "(" . exp tilda.opt ")"
   85     | "waituntil" "(" . event_match ")"
  118 primary-exp: . block
  119            | . "do" "(" exp ")" block
  120 detach: . "detach"
  121       | . "disown"
  122 primary-exp: . "assert" "(" exp ")"
  123            | . "assert" "{" claims "}"
  124            | . detach "(" exp ")"
  125            | . detach block
  126            | . "isdef" "(" k1_id ")"
  127            | . "watch" "(" exp ")"
  128 lvalue: . id
  129       | . primary-exp "." id
  130       | . primary-exp "." "*"
  131 primary-exp: . "&" id
  132            | . primary-exp "." "&" id
  133 id: . "identifier"
  134 bitor-exp: . "var" bitor-exp
  135          | . "const" "var" bitor-exp
  136 primary-exp: . lvalue
  137            | . lvalue args
  138 new: . "new" "identifier" args.opt
  139 bitor-exp: . new
  140 id: . "new"
  141 primary-exp: . routine formals block
  142 float-exp: . "float"
  143 duration: . "duration"
  144         | . duration "duration"
  150 dictionary: . "[" assocs "]"
  154 tuple: . "(" tuple.exps ")"
  155 literal-exp: . float-exp
  156            | . "angle"
  157            | . duration
  158            | . string
  159            | . "[" exps "]"
  160            | . dictionary
  161            | . tuple
  162 string: . "string"
  163       | . string "string"
  164 literal-exp: . "__HERE__"
  165 event_match: . exp "?" args.opt tilda.opt guard.opt
  170 lvalue: . primary-exp "[" exps "]"
  171 literal-exp: . "this"
  172            | . "call"
  173 primary-exp: . literal-exp
  174            | . "(" exp ")"
  175            | . "(" error ")"
  176            | . primary-exp "**" primary-exp
  177 unary-exp: . primary-exp
  178          | . "--" lvalue
  179          | . "++" lvalue
  180          | . "+" unary-exp
  181          | . "-" unary-exp
  182          | . "!" unary-exp
  183          | . "compl" unary-exp
  184 bitor-exp: . unary-exp
  185          | . bitor-exp "+" bitor-exp
  186          | . bitor-exp "-" bitor-exp
  187          | . bitor-exp "*" bitor-exp
  188          | . bitor-exp "/" bitor-exp
  189          | . bitor-exp "%" bitor-exp
  190          | . bitor-exp "^" bitor-exp
  191          | . bitor-exp "<<" bitor-exp
  192          | . bitor-exp "bitand" bitor-exp
  193          | . bitor-exp "bitor" bitor-exp
  194          | . bitor-exp ">>" bitor-exp
  205 rel-exp: . bitor-exp rel-ops
  208 exp: . rel-exp
  209    | . exp "&&" exp
  210    | . exp "||" exp
  211    | . exp "in" exp
  212    | . exp "!" "in" exp
  216    | . "%unscope:" unsigned
  217 primary-exp: . "%exp:" unsigned
  218 lvalue: . "%lvalue:" unsigned
  219       | . "%id:" unsigned
  220       | . primary-exp "." "%id:" unsigned
  221 primary-exp: . lvalue "(" "%exps:" unsigned ")"

    "__HERE__"    shift, and go to state 7
    "closure"     shift, and go to state 9
    "const"       shift, and go to state 10
    "function"    shift, and go to state 13
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "var"         shift, and go to state 25
    "watch"       shift, and go to state 27
    "&"           shift, and go to state 29
    "identifier"  shift, and go to state 35
    "class"       shift, and go to state 36
    "package"     shift, and go to state 37
    "--"          shift, and go to state 41
    "++"          shift, and go to state 42
    "do"          shift, and go to state 43
    "assert"      shift, and go to state 44
    "detach"      shift, and go to state 45
    "disown"      shift, and go to state 46
    "new"         shift, and go to state 47
    "angle"       shift, and go to state 48
    "duration"    shift, and go to state 49
    "float"       shift, and go to state 50
    "string"      shift, and go to state 51
    "call"        shift, and go to state 52
    "this"        shift, and go to state 53
    "!"           shift, and go to state 54
    "compl"       shift, and go to state 55
    "-"           shift, and go to state 56
    "+"           shift, and go to state 57
    "%unscope:"   shift, and go to state 58
    "%exp:"       shift, and go to state 59
    "%lvalue:"    shift, and go to state 60
    "%id:"        shift, and go to state 61

    block        go to state 66
    exp          go to state 229
    routine      go to state 99
    primary-exp  go to state 100
    detach       go to state 70
    lvalue       go to state 71
    id           go to state 101
    bitor-exp    go to state 73
    new          go to state 74
    float-exp    go to state 75
    duration     go to state 76
    dictionary   go to state 77
    tuple        go to state 78
    literal-exp  go to state 79
    string       go to state 80
    event_match  go to state 230
    unary-exp    go to state 81
    rel-exp      go to state 82


state 122

   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   37 exp: . "class" lvalue protos block
   38    | . "package" lvalue protos block
   52 routine: . "closure"
   53        | . "function"
   62 exp: . exp "=" exp
   63    | . exp "=" exp modifiers
   64    | . lvalue "+=" exp
   65    | . lvalue "-=" exp
   66    | . lvalue "*=" exp
   67    | . lvalue "/=" exp
   68    | . lvalue "^=" exp
   69    | . lvalue "%=" exp
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
  118            | . block
  119            | . "do" "(" exp ")" block
  120 detach: . "detach"
  121       | . "disown"
  122 primary-exp: . "assert" "(" exp ")"
  123            | . "assert" "{" claims "}"
  124            | . detach "(" exp ")"
  125            | . detach block
  126            | . "isdef" "(" k1_id ")"
  127            | . "watch" "(" exp ")"
  127            | "watch" "(" . exp ")"
  128 lvalue: . id
  129       | . primary-exp "." id
  130       | . primary-exp "." "*"
  131 primary-exp: . "&" id
  132            | . primary-exp "." "&" id
  133 id: . "identifier"
  134 bitor-exp: . "var" bitor-exp
  135          | . "const" "var" bitor-exp
  136 primary-exp: . lvalue
  137            | . lvalue args
  138 new: . "new" "identifier" args.opt
  139 bitor-exp: . new
  140 id: . "new"
  141 primary-exp: . routine formals block
  142 float-exp: . "float"
  143 duration: . "duration"
  144         | . duration "duration"
  150 dictionary: . "[" assocs "]"
  154 tuple: . "(" tuple.exps ")"
  155 literal-exp: . float-exp
  156            | . "angle"
  157            | . duration
  158            | . string
  159            | . "[" exps "]"
  160            | . dictionary
  161            | . tuple
  162 string: . "string"
  163       | . string "string"
  164 literal-exp: . "__HERE__"
  170 lvalue: . primary-exp "[" exps "]"
  171 literal-exp: . "this"
  172            | . "call"
  173 primary-exp: . literal-exp
  174            | . "(" exp ")"
  175            | . "(" error ")"
  176            | . primary-exp "**" primary-exp
  177 unary-exp: . primary-exp
  178          | . "--" lvalue
  179          | . "++" lvalue
  180          | . "+" unary-exp
  181          | . "-" unary-exp
  182          | . "!" unary-exp
  183          | . "compl" unary-exp
  184 bitor-exp: . unary-exp
  185          | . bitor-exp "+" bitor-exp
  186          | . bitor-exp "-" bitor-exp
  187          | . bitor-exp "*" bitor-exp
  188          | . bitor-exp "/" bitor-exp
  189          | . bitor-exp "%" bitor-exp
  190          | . bitor-exp "^" bitor-exp
  191          | . bitor-exp "<<" bitor-exp
  192          | . bitor-exp "bitand" bitor-exp
  193          | . bitor-exp "bitor" bitor-exp
  194          | . bitor-exp ">>" bitor-exp
  205 rel-exp: . bitor-exp rel-ops
  208 exp: . rel-exp
  209    | . exp "&&" exp
  210    | . exp "||" exp
  211    | . exp "in" exp
  212    | . exp "!" "in" exp
  216    | . "%unscope:" unsigned
  217 primary-exp: . "%exp:" unsigned
  218 lvalue: . "%lvalue:" unsigned
  219       | . "%id:" unsigned
  220       | . primary-exp "." "%id:" unsigned
  221 primary-exp: . lvalue "(" "%exps:" unsigned ")"

    "__HERE__"    shift, and go to state 7
    "closure"     shift, and go to state 9
    "const"       shift, and go to state 10
    "function"    shift, and go to state 13
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "var"         shift, and go to state 25
    "watch"       shift, and go to state 27
    "&"           shift, and go to state 29
    "identifier"  shift, and go to state 35
    "class"       shift, and go to state 36
    "package"     shift, and go to state 37
    "--"          shift, and go to state 41
    "++"          shift, and go to state 42
    "do"          shift, and go to state 43
    "assert"      shift, and go to state 44
    "detach"      shift, and go to state 45
    "disown"      shift, and go to state 46
    "new"         shift, and go to state 47
    "angle"       shift, and go to state 48
    "duration"    shift, and go to state 49
    "float"       shift, and go to state 50
    "string"      shift, and go to state 51
    "call"        shift, and go to state 52
    "this"        shift, and go to state 53
    "!"           shift, and go to state 54
    "compl"       shift, and go to state 55
    "-"           shift, and go to state 56
    "+"           shift, and go to state 57
    "%unscope:"   shift, and go to state 58
    "%exp:"       shift, and go to state 59
    "%lvalue:"    shift, and go to state 60
    "%id:"        shift, and go to state 61

    block        go to state 66
    exp          go to state 231
    routine      go to state 99
    primary-exp  go to state 100
    detach       go to state 70
    lvalue       go to state 71
    id           go to state 101
    bitor-exp    go to state 73
    new          go to state 74
    float-exp    go to state 75
    duration     go to state 76
    dictionary   go to state 77
    tuple        go to state 78
    literal-exp  go to state 79
    string       go to state 80
    unary-exp    go to state 81
    rel-exp      go to state 82


state 123

   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   37 exp: . "class" lvalue protos block
   38    | . "package" lvalue protos block
   52 routine: . "closure"
   53        | . "function"
   62 exp: . exp "=" exp
   63    | . exp "=" exp modifiers
   64    | . lvalue "+=" exp
   65    | . lvalue "-=" exp
   66    | . lvalue "*=" exp
   67    | . lvalue "/=" exp
   68    | . lvalue "^=" exp
   69    | . lvalue "%=" exp
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
   86 stmt: "whenever" "(" . exp tilda.opt ")" stmt else.opt
   87     | "whenever" "(" . event_match ")" stmt else.opt
  118 primary-exp: . block
  119            | . "do" "(" exp ")" block
  120 detach: . "detach"
  121       | . "disown"
  122 primary-exp: . "assert" "(" exp ")"
  123            | . "assert" "{" claims "}"
  124            | . detach "(" exp ")"
  125            | . detach block
  126            | . "isdef" "(" k1_id ")"
  127            | . "watch" "(" exp ")"
  128 lvalue: . id
  129       | . primary-exp "." id
  130       | . primary-exp "." "*"
  131 primary-exp: . "&" id
  132            | . primary-exp "." "&" id
  133 id: . "identifier"
  134 bitor-exp: . "var" bitor-exp
  135          | . "const" "var" bitor-exp
  136 primary-exp: . lvalue
  137            | . lvalue args
  138 new: . "new" "identifier" args.opt
  139 bitor-exp: . new
  140 id: . "new"
  141 primary-exp: . routine formals block
  142 float-exp: . "float"
  143 duration: . "duration"
  144         | . duration "duration"
  150 dictionary: . "[" assocs "]"
  154 tuple: . "(" tuple.exps ")"
  155 literal-exp: . float-exp
  156            | . "angle"
  157            | . duration
  158            | . string
  159            | . "[" exps "]"
  160            | . dictionary
  161            | . tuple
  162 string: . "string"
  163       | . string "string"
  164 literal-exp: . "__HERE__"
  165 event_match: . exp "?" args.opt tilda.opt guard.opt
  170 lvalue: . primary-exp "[" exps "]"
  171 literal-exp: . "this"
  172            | . "call"
  173 primary-exp: . literal-exp
  174            | . "(" exp ")"
  175            | . "(" error ")"
  176            | . primary-exp "**" primary-exp
  177 unary-exp: . primary-exp
  178          | . "--" lvalue
  179          | . "++" lvalue
  180          | . "+" unary-exp
  181          | . "-" unary-exp
  182          | . "!" unary-exp
  183          | . "compl" unary-exp
  184 bitor-exp: . unary-exp
  185          | . bitor-exp "+" bitor-exp
  186          | . bitor-exp "-" bitor-exp
  187          | . bitor-exp "*" bitor-exp
  188          | . bitor-exp "/" bitor-exp
  189          | . bitor-exp "%" bitor-exp
  190          | . bitor-exp "^" bitor-exp
  191          | . bitor-exp "<<" bitor-exp
  192          | . bitor-exp "bitand" bitor-exp
  193          | . bitor-exp "bitor" bitor-exp
  194          | . bitor-exp ">>" bitor-exp
  205 rel-exp: . bitor-exp rel-ops
  208 exp: . rel-exp
  209    | . exp "&&" exp
  210    | . exp "||" exp
  211    | . exp "in" exp
  212    | . exp "!" "in" exp
  216    | . "%unscope:" unsigned
  217 primary-exp: . "%exp:" unsigned
  218 lvalue: . "%lvalue:" unsigned
  219       | . "%id:" unsigned
  220       | . primary-exp "." "%id:" unsigned
  221 primary-exp: . lvalue "(" "%exps:" unsigned ")"

    "__HERE__"    shift, and go to state 7
    "closure"     shift, and go to state 9
    "const"       shift, and go to state 10
    "function"    shift, and go to state 13
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "var"         shift, and go to state 25
    "watch"       shift, and go to state 27
    "&"           shift, and go to state 29
    "identifier"  shift, and go to state 35
    "class"       shift, and go to state 36
    "package"     shift, and go to state 37
    "--"          shift, and go to state 41
    "++"          shift, and go to state 42
    "do"          shift, and go to state 43
    "assert"      shift, and go to state 44
    "detach"      shift, and go to state 45
    "disown"      shift, and go to state 46
    "new"         shift, and go to state 47
    "angle"       shift, and go to state 48
    "duration"    shift, and go to state 49
    "float"       shift, and go to state 50
    "string"      shift, and go to state 51
    "call"        shift, and go to state 52
    "this"        shift, and go to state 53
    "!"           shift, and go to state 54
    "compl"       shift, and go to state 55
    "-"           shift, and go to state 56
    "+"           shift, and go to state 57
    "%unscope:"   shift, and go to state 58
    "%exp:"       shift, and go to state 59
    "%lvalue:"    shift, and go to state 60
    "%id:"        shift, and go to state 61

    block        go to state 66
    exp          go to state 232
    routine      go to state 99
    primary-exp  go to state 100
    detach       go to state 70
    lvalue       go to state 71
    id           go to state 101
    bitor-exp    go to state 73
    new          go to state 74
    float-exp    go to state 75
    duration     go to state 76
    dictionary   go to state 77
    tuple        go to state 78
    literal-exp  go to state 79
    string       go to state 80
    event_match  go to state 233
    unary-exp    go to state 81
    rel-exp      go to state 82


state 124

  140 id: "new" .

    $default  reduce using rule 140 (id)


state 125

  131 primary-exp: "&" id .

    $default  reduce using rule 131 (primary-exp)


state 126

   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   37 exp: . "class" lvalue protos block
   38    | . "package" lvalue protos block
   52 routine: . "closure"
   53        | . "function"
   62 exp: . exp "=" exp
   63    | . exp "=" exp modifiers
   64    | . lvalue "+=" exp
   65    | . lvalue "-=" exp
   66    | . lvalue "*=" exp
   67    | . lvalue "/=" exp
   68    | . lvalue "^=" exp
   69    | . lvalue "%=" exp
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
   75 stmt: "every" "(" . exp ")" stmt
  118 primary-exp: . block
  119            | . "do" "(" exp ")" block
  120 detach: . "detach"
  121       | . "disown"
  122 primary-exp: . "assert" "(" exp ")"
  123            | . "assert" "{" claims "}"
  124            | . detach "(" exp ")"
  125            | . detach block
  126            | . "isdef" "(" k1_id ")"
  127            | . "watch" "(" exp ")"
  128 lvalue: . id
  129       | . primary-exp "." id
  130       | . primary-exp "." "*"
  131 primary-exp: . "&" id
  132            | . primary-exp "." "&" id
  133 id: . "identifier"
  134 bitor-exp: . "var" bitor-exp
  135          | . "const" "var" bitor-exp
  136 primary-exp: . lvalue
  137            | . lvalue args
  138 new: . "new" "identifier" args.opt
  139 bitor-exp: . new
  140 id: . "new"
  141 primary-exp: . routine formals block
  142 float-exp: . "float"
  143 duration: . "duration"
  144         | . duration "duration"
  150 dictionary: . "[" assocs "]"
  154 tuple: . "(" tuple.exps ")"
  155 literal-exp: . float-exp
  156            | . "angle"
  157            | . duration
  158            | . string
  159            | . "[" exps "]"
  160            | . dictionary
  161            | . tuple
  162 string: . "string"
  163       | . string "string"
  164 literal-exp: . "__HERE__"
  170 lvalue: . primary-exp "[" exps "]"
  171 literal-exp: . "this"
  172            | . "call"
  173 primary-exp: . literal-exp
  174            | . "(" exp ")"
  175            | . "(" error ")"
  176            | . primary-exp "**" primary-exp
  177 unary-exp: . primary-exp
  178          | . "--" lvalue
  179          | . "++" lvalue
  180          | . "+" unary-exp
  181          | . "-" unary-exp
  182          | . "!" unary-exp
  183          | . "compl" unary-exp
  184 bitor-exp: . unary-exp
  185          | . bitor-exp "+" bitor-exp
  186          | . bitor-exp "-" bitor-exp
  187          | . bitor-exp "*" bitor-exp
  188          | . bitor-exp "/" bitor-exp
  189          | . bitor-exp "%" bitor-exp
  190          | . bitor-exp "^" bitor-exp
  191          | . bitor-exp "<<" bitor-exp
  192          | . bitor-exp "bitand" bitor-exp
  193          | . bitor-exp "bitor" bitor-exp
  194          | . bitor-exp ">>" bitor-exp
  205 rel-exp: . bitor-exp rel-ops
  208 exp: . rel-exp
  209    | . exp "&&" exp
  210    | . exp "||" exp
  211    | . exp "in" exp
  212    | . exp "!" "in" exp
  216    | . "%unscope:" unsigned
  217 primary-exp: . "%exp:" unsigned
  218 lvalue: . "%lvalue:" unsigned
  219       | . "%id:" unsigned
  220       | . primary-exp "." "%id:" unsigned
  221 primary-exp: . lvalue "(" "%exps:" unsigned ")"

    "__HERE__"    shift, and go to state 7
    "closure"     shift, and go to state 9
    "const"       shift, and go to state 10
    "function"    shift, and go to state 13
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "var"         shift, and go to state 25
    "watch"       shift, and go to state 27
    "&"           shift, and go to state 29
    "identifier"  shift, and go to state 35
    "class"       shift, and go to state 36
    "package"     shift, and go to state 37
    "--"          shift, and go to state 41
    "++"          shift, and go to state 42
    "do"          shift, and go to state 43
    "assert"      shift, and go to state 44
    "detach"      shift, and go to state 45
    "disown"      shift, and go to state 46
    "new"         shift, and go to state 47
    "angle"       shift, and go to state 48
    "duration"    shift, and go to state 49
    "float"       shift, and go to state 50
    "string"      shift, and go to state 51
    "call"        shift, and go to state 52
    "this"        shift, and go to state 53
    "!"           shift, and go to state 54
    "compl"       shift, and go to state 55
    "-"           shift, and go to state 56
    "+"           shift, and go to state 57
    "%unscope:"   shift, and go to state 58
    "%exp:"       shift, and go to state 59
    "%lvalue:"    shift, and go to state 60
    "%id:"        shift, and go to state 61

    block        go to state 66
    exp          go to state 234
    routine      go to state 99
    primary-exp  go to state 100
    detach       go to state 70
    lvalue       go to state 71
    id           go to state 101
    bitor-exp    go to state 73
    new          go to state 74
    float-exp    go to state 75
    duration     go to state 76
    dictionary   go to state 77
    tuple        go to state 78
    literal-exp  go to state 79
    string       go to state 80
    unary-exp    go to state 81
    rel-exp      go to state 82


state 127

   21 stmt.opt: .  [";"]
   22         | . stmt
   23 stmt: . primary-exp ":" stmt
   24     | . exp
   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   37 exp: . "class" lvalue protos block
   38    | . "package" lvalue protos block
   43 stmt: . "enum" id "{" id.0 "}"
   47     | . "external" "identifier" "identifier"
   48     | . "external" "var" "identifier" "." "identifier" from "identifier"
   49     | . "external" event_or_function "(" unsigned ")" "identifier" "." "identifier" from "identifier"
   50     | . "import" lvalue
   51     | . exp "!" args.opt tilda.opt
   52 routine: . "closure"
   53        | . "function"
   54 stmt: . routine k1_id formals block
   55     | . id id formals block
   62 exp: . exp "=" exp
   63    | . exp "=" exp modifiers
   64    | . lvalue "+=" exp
   65    | . lvalue "-=" exp
   66    | . lvalue "*=" exp
   67    | . lvalue "/=" exp
   68    | . lvalue "^=" exp
   69    | . lvalue "%=" exp
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
   73 stmt: . "at" identifiers "(" exp tilda.opt ")" stmt onleave.opt
   74     | . "at" identifiers "(" event_match ")" stmt onleave.opt
   75     | . "every" "(" exp ")" stmt
   76     | . "if" "(" stmts ")" stmt else.opt
   77     | . "freezeif" "(" exp ")" stmt
   78     | . "stopif" "(" exp ")" stmt
   79     | . "switch" "(" exp ")" "{" cases default.opt "}"
   80     | . "timeout" "(" exp ")" stmt catch.opt else.opt finally.opt
   81     | . "return" exp.opt
   82     | . "break"
   83     | . "continue"
   84     | . "waituntil" "(" exp tilda.opt ")"
   85     | . "waituntil" "(" event_match ")"
   86     | . "whenever" "(" exp tilda.opt ")" stmt else.opt
   87     | . "whenever" "(" event_match ")" stmt else.opt
  108     | . "try" block catches.1 else.opt finally.opt
  109     | . "try" block "finally" block
  110     | . "throw" exp.opt
  111     | . "loop" stmt
  112     | . "for" "(" exp ")" stmt
  112     | "for" "(" . exp ")" stmt
  113     | . "for" "(" stmt.opt ";" exp ";" stmt.opt ")" stmt
  113     | "for" "(" . stmt.opt ";" exp ";" stmt.opt ")" stmt
  114     | . "for" "(" "var" "identifier" in_or_colon exp ")" stmt
  114     | "for" "(" . "var" "identifier" in_or_colon exp ")" stmt
  115     | . "while" "(" exp ")" stmt
  118 primary-exp: . block
  119            | . "do" "(" exp ")" block
  120 detach: . "detach"
  121       | . "disown"
  122 primary-exp: . "assert" "(" exp ")"
  123            | . "assert" "{" claims "}"
  124            | . detach "(" exp ")"
  125            | . detach block
  126            | . "isdef" "(" k1_id ")"
  127            | . "watch" "(" exp ")"
  128 lvalue: . id
  129       | . primary-exp "." id
  130       | . primary-exp "." "*"
  131 primary-exp: . "&" id
  132            | . primary-exp "." "&" id
  133 id: . "identifier"
  134 bitor-exp: . "var" bitor-exp
  135          | . "const" "var" bitor-exp
  136 primary-exp: . lvalue
  137            | . lvalue args
  138 new: . "new" "identifier" args.opt
  139 bitor-exp: . new
  140 id: . "new"
  141 primary-exp: . routine formals block
  142 float-exp: . "float"
  143 duration: . "duration"
  144         | . duration "duration"
  150 dictionary: . "[" assocs "]"
  154 tuple: . "(" tuple.exps ")"
  155 literal-exp: . float-exp
  156            | . "angle"
  157            | . duration
  158            | . string
  159            | . "[" exps "]"
  160            | . dictionary
  161            | . tuple
  162 string: . "string"
  163       | . string "string"
  164 literal-exp: . "__HERE__"
  170 lvalue: . primary-exp "[" exps "]"
  171 literal-exp: . "this"
  172            | . "call"
  173 primary-exp: . literal-exp
  174            | . "(" exp ")"
  175            | . "(" error ")"
  176            | . primary-exp "**" primary-exp
  177 unary-exp: . primary-exp
  178          | . "--" lvalue
  179          | . "++" lvalue
  180          | . "+" unary-exp
  181          | . "-" unary-exp
  182          | . "!" unary-exp
  183          | . "compl" unary-exp
  184 bitor-exp: . unary-exp
  185          | . bitor-exp "+" bitor-exp
  186          | . bitor-exp "-" bitor-exp
  187          | . bitor-exp "*" bitor-exp
  188          | . bitor-exp "/" bitor-exp
  189          | . bitor-exp "%" bitor-exp
  190          | . bitor-exp "^" bitor-exp
  191          | . bitor-exp "<<" bitor-exp
  192          | . bitor-exp "bitand" bitor-exp
  193          | . bitor-exp "bitor" bitor-exp
  194          | . bitor-exp ">>" bitor-exp
  205 rel-exp: . bitor-exp rel-ops
  208 exp: . rel-exp
  209    | . exp "&&" exp
  210    | . exp "||" exp
  211    | . exp "in" exp
  212    | . exp "!" "in" exp
  216    | . "%unscope:" unsigned
  217 primary-exp: . "%exp:" unsigned
  218 lvalue: . "%lvalue:" unsigned
  219       | . "%id:" unsigned
  220       | . primary-exp "." "%id:" unsigned
  221 primary-exp: . lvalue "(" "%exps:" unsigned ")"

    "__HERE__"    shift, and go to state 7
    "break"       shift, and go to state 8
    "closure"     shift, and go to state 9
    "const"       shift, and go to state 10
    "continue"    shift, and go to state 11
    "freezeif"    shift, and go to state 12
    "function"    shift, and go to state 13
    "if"          shift, and go to state 14
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "return"      shift, and go to state 19
    "stopif"      shift, and go to state 20
    "switch"      shift, and go to state 21
    "throw"       shift, and go to state 22
    "timeout"     shift, and go to state 23
    "try"         shift, and go to state 24
    "var"         shift, and go to state 235
    "waituntil"   shift, and go to state 26
    "watch"       shift, and go to state 27
    "whenever"    shift, and go to state 28
    "&"           shift, and go to state 29
    "every"       shift, and go to state 30
    "for"         shift, and go to state 31
    "loop"        shift, and go to state 32
    "while"       shift, and go to state 33
    "at"          shift, and go to state 34
    "identifier"  shift, and go to state 35
    "class"       shift, and go to state 36
    "package"     shift, and go to state 37
    "enum"        shift, and go to state 38
    "external"    shift, and go to state 39
    "import"      shift, and go to state 40
    "--"          shift, and go to state 41
    "++"          shift, and go to state 42
    "do"          shift, and go to state 43
    "assert"      shift, and go to state 44
    "detach"      shift, and go to state 45
    "disown"      shift, and go to state 46
    "new"         shift, and go to state 47
    "angle"       shift, and go to state 48
    "duration"    shift, and go to state 49
    "float"       shift, and go to state 50
    "string"      shift, and go to state 51
    "call"        shift, and go to state 52
    "this"        shift, and go to state 53
    "!"           shift, and go to state 54
    "compl"       shift, and go to state 55
    "-"           shift, and go to state 56
    "+"           shift, and go to state 57
    "%unscope:"   shift, and go to state 58
    "%exp:"       shift, and go to state 59
    "%lvalue:"    shift, and go to state 60
    "%id:"        shift, and go to state 61

    $default  reduce using rule 21 (stmt.opt)

    stmt.opt     go to state 236
    stmt         go to state 237
    block        go to state 66
    exp          go to state 238
    routine      go to state 68
    primary-exp  go to state 69
    detach       go to state 70
    lvalue       go to state 71
    id           go to state 72
    bitor-exp    go to state 73
    new          go to state 74
    float-exp    go to state 75
    duration     go to state 76
    dictionary   go to state 77
    tuple        go to state 78
    literal-exp  go to state 79
    string       go to state 80
    unary-exp    go to state 81
    rel-exp      go to state 82


state 128

  111 stmt: "loop" stmt .

    $default  reduce using rule 111 (stmt)


state 129

   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   37 exp: . "class" lvalue protos block
   38    | . "package" lvalue protos block
   52 routine: . "closure"
   53        | . "function"
   62 exp: . exp "=" exp
   63    | . exp "=" exp modifiers
   64    | . lvalue "+=" exp
   65    | . lvalue "-=" exp
   66    | . lvalue "*=" exp
   67    | . lvalue "/=" exp
   68    | . lvalue "^=" exp
   69    | . lvalue "%=" exp
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
  115 stmt: "while" "(" . exp ")" stmt
  118 primary-exp: . block
  119            | . "do" "(" exp ")" block
  120 detach: . "detach"
  121       | . "disown"
  122 primary-exp: . "assert" "(" exp ")"
  123            | . "assert" "{" claims "}"
  124            | . detach "(" exp ")"
  125            | . detach block
  126            | . "isdef" "(" k1_id ")"
  127            | . "watch" "(" exp ")"
  128 lvalue: . id
  129       | . primary-exp "." id
  130       | . primary-exp "." "*"
  131 primary-exp: . "&" id
  132            | . primary-exp "." "&" id
  133 id: . "identifier"
  134 bitor-exp: . "var" bitor-exp
  135          | . "const" "var" bitor-exp
  136 primary-exp: . lvalue
  137            | . lvalue args
  138 new: . "new" "identifier" args.opt
  139 bitor-exp: . new
  140 id: . "new"
  141 primary-exp: . routine formals block
  142 float-exp: . "float"
  143 duration: . "duration"
  144         | . duration "duration"
  150 dictionary: . "[" assocs "]"
  154 tuple: . "(" tuple.exps ")"
  155 literal-exp: . float-exp
  156            | . "angle"
  157            | . duration
  158            | . string
  159            | . "[" exps "]"
  160            | . dictionary
  161            | . tuple
  162 string: . "string"
  163       | . string "string"
  164 literal-exp: . "__HERE__"
  170 lvalue: . primary-exp "[" exps "]"
  171 literal-exp: . "this"
  172            | . "call"
  173 primary-exp: . literal-exp
  174            | . "(" exp ")"
  175            | . "(" error ")"
  176            | . primary-exp "**" primary-exp
  177 unary-exp: . primary-exp
  178          | . "--" lvalue
  179          | . "++" lvalue
  180          | . "+" unary-exp
  181          | . "-" unary-exp
  182          | . "!" unary-exp
  183          | . "compl" unary-exp
  184 bitor-exp: . unary-exp
  185          | . bitor-exp "+" bitor-exp
  186          | . bitor-exp "-" bitor-exp
  187          | . bitor-exp "*" bitor-exp
  188          | . bitor-exp "/" bitor-exp
  189          | . bitor-exp "%" bitor-exp
  190          | . bitor-exp "^" bitor-exp
  191          | . bitor-exp "<<" bitor-exp
  192          | . bitor-exp "bitand" bitor-exp
  193          | . bitor-exp "bitor" bitor-exp
  194          | . bitor-exp ">>" bitor-exp
  205 rel-exp: . bitor-exp rel-ops
  208 exp: . rel-exp
  209    | . exp "&&" exp
  210    | . exp "||" exp
  211    | . exp "in" exp
  212    | . exp "!" "in" exp
  216    | . "%unscope:" unsigned
  217 primary-exp: . "%exp:" unsigned
  218 lvalue: . "%lvalue:" unsigned
  219       | . "%id:" unsigned
  220       | . primary-exp "." "%id:" unsigned
  221 primary-exp: . lvalue "(" "%exps:" unsigned ")"

    "__HERE__"    shift, and go to state 7
    "closure"     shift, and go to state 9
    "const"       shift, and go to state 10
    "function"    shift, and go to state 13
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "var"         shift, and go to state 25
    "watch"       shift, and go to state 27
    "&"           shift, and go to state 29
    "identifier"  shift, and go to state 35
    "class"       shift, and go to state 36
    "package"     shift, and go to state 37
    "--"          shift, and go to state 41
    "++"          shift, and go to state 42
    "do"          shift, and go to state 43
    "assert"      shift, and go to state 44
    "detach"      shift, and go to state 45
    "disown"      shift, and go to state 46
    "new"         shift, and go to state 47
    "angle"       shift, and go to state 48
    "duration"    shift, and go to state 49
    "float"       shift, and go to state 50
    "string"      shift, and go to state 51
    "call"        shift, and go to state 52
    "this"        shift, and go to state 53
    "!"           shift, and go to state 54
    "compl"       shift, and go to state 55
    "-"           shift, and go to state 56
    "+"           shift, and go to state 57
    "%unscope:"   shift, and go to state 58
    "%exp:"       shift, and go to state 59
    "%lvalue:"    shift, and go to state 60
    "%id:"        shift, and go to state 61

    block        go to state 66
    exp          go to state 239
    routine      go to state 99
    primary-exp  go to state 100
    detach       go to state 70
    lvalue       go to state 71
    id           go to state 101
    bitor-exp    go to state 73
    new          go to state 74
    float-exp    go to state 75
    duration     go to state 76
    dictionary   go to state 77
    tuple        go to state 78
    literal-exp  go to state 79
    string       go to state 80
    unary-exp    go to state 81
    rel-exp      go to state 82


state 130

   73 stmt: "at" identifiers . "(" exp tilda.opt ")" stmt onleave.opt
   74     | "at" identifiers . "(" event_match ")" stmt onleave.opt
  235 identifiers: identifiers . "identifier"

    "("           shift, and go to state 240
    "identifier"  shift, and go to state 241


state 131

  129 lvalue: primary-exp . "." id
  130       | primary-exp . "." "*"
  132 primary-exp: primary-exp . "." "&" id
  170 lvalue: primary-exp . "[" exps "]"
  176 primary-exp: primary-exp . "**" primary-exp
  220 lvalue: primary-exp . "." "%id:" unsigned

    "["   shift, and go to state 171
    "."   shift, and go to state 172
    "**"  shift, and go to state 173


state 132

   35 protos: .  ["{"]
   36       | . ":" protos.1
   37 exp: "class" lvalue . protos block
   70 primary-exp: lvalue . "--"
   71            | lvalue . "++"
   72            | lvalue . "->" id
  136            | lvalue .  ["[", ".", "**"]
  137            | lvalue . args
  221            | lvalue . "(" "%exps:" unsigned ")"
  231 args: . "(" exps ")"

    ":"   shift, and go to state 242
    "("   shift, and go to state 176
    "--"  shift, and go to state 183
    "++"  shift, and go to state 184
    "->"  shift, and go to state 185

    "{"       reduce using rule 35 (protos)
    $default  reduce using rule 136 (primary-exp)

    protos  go to state 243
    args    go to state 186


state 133

   35 protos: .  ["{"]
   36       | . ":" protos.1
   38 exp: "package" lvalue . protos block
   70 primary-exp: lvalue . "--"
   71            | lvalue . "++"
   72            | lvalue . "->" id
  136            | lvalue .  ["[", ".", "**"]
  137            | lvalue . args
  221            | lvalue . "(" "%exps:" unsigned ")"
  231 args: . "(" exps ")"

    ":"   shift, and go to state 242
    "("   shift, and go to state 176
    "--"  shift, and go to state 183
    "++"  shift, and go to state 184
    "->"  shift, and go to state 185

    "{"       reduce using rule 35 (protos)
    $default  reduce using rule 136 (primary-exp)

    protos  go to state 244
    args    go to state 186


state 134

   43 stmt: "enum" id . "{" id.0 "}"

    "{"  shift, and go to state 245


state 135

   45 event_or_function: "function" .

    $default  reduce using rule 45 (event_or_function)


state 136

   48 stmt: "external" "var" . "identifier" "." "identifier" from "identifier"

    "identifier"  shift, and go to state 246


state 137

   46 event_or_function: "identifier" .  ["("]
   47 stmt: "external" "identifier" . "identifier"

    "identifier"  shift, and go to state 247

    $default  reduce using rule 46 (event_or_function)


state 138

   49 stmt: "external" event_or_function . "(" unsigned ")" "identifier" "." "identifier" from "identifier"

    "("  shift, and go to state 248


state 139

   50 stmt: "import" lvalue .  ["end of command", "case", "catch", "default", "else", "finally", "onleave", "}", ")", ",", ";", "&", "|"]
   70 primary-exp: lvalue . "--"
   71            | lvalue . "++"
   72            | lvalue . "->" id
  136            | lvalue .  ["[", ".", "**"]
  137            | lvalue . args
  221            | lvalue . "(" "%exps:" unsigned ")"
  231 args: . "(" exps ")"

    "("   shift, and go to state 176
    "--"  shift, and go to state 183
    "++"  shift, and go to state 184
    "->"  shift, and go to state 185

    "["       reduce using rule 136 (primary-exp)
    "."       reduce using rule 136 (primary-exp)
    "**"      reduce using rule 136 (primary-exp)
    $default  reduce using rule 50 (stmt)

    args  go to state 186


state 140

   70 primary-exp: lvalue . "--"
   71            | lvalue . "++"
   72            | lvalue . "->" id
  136            | lvalue .  ["[", ".", "**"]
  137            | lvalue . args
  178 unary-exp: "--" lvalue .  ["end of command", "=", "case", "catch", ":", "default", "else", "finally", "if", "in", "{", "onleave", "}", "]", ")", "~", ",", ";", "&", "|", "identifier", "=>", "?", "!", "bitand", "bitor", "^", ">>", "<<", "-", "%", "+", "/", "*", "=~=", "==", "===", ">=", ">", "<=", "<", "!=", "!==", "~=", "&&", "||"]
  221 primary-exp: lvalue . "(" "%exps:" unsigned ")"
  231 args: . "(" exps ")"

    "("   shift, and go to state 176
    "--"  shift, and go to state 183
    "++"  shift, and go to state 184
    "->"  shift, and go to state 185

    "["       reduce using rule 136 (primary-exp)
    "."       reduce using rule 136 (primary-exp)
    "**"      reduce using rule 136 (primary-exp)
    $default  reduce using rule 178 (unary-exp)

    args  go to state 186


state 141

   70 primary-exp: lvalue . "--"
   71            | lvalue . "++"
   72            | lvalue . "->" id
  136            | lvalue .  ["[", ".", "**"]
  137            | lvalue . args
  179 unary-exp: "++" lvalue .  ["end of command", "=", "case", "catch", ":", "default", "else", "finally", "if", "in", "{", "onleave", "}", "]", ")", "~", ",", ";", "&", "|", "identifier", "=>", "?", "!", "bitand", "bitor", "^", ">>", "<<", "-", "%", "+", "/", "*", "=~=", "==", "===", ">=", ">", "<=", "<", "!=", "!==", "~=", "&&", "||"]
  221 primary-exp: lvalue . "(" "%exps:" unsigned ")"
  231 args: . "(" exps ")"

    "("   shift, and go to state 176
    "--"  shift, and go to state 183
    "++"  shift, and go to state 184
    "->"  shift, and go to state 185

    "["       reduce using rule 136 (primary-exp)
    "."       reduce using rule 136 (primary-exp)
    "**"      reduce using rule 136 (primary-exp)
    $default  reduce using rule 179 (unary-exp)

    args  go to state 186


state 142

   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   37 exp: . "class" lvalue protos block
   38    | . "package" lvalue protos block
   52 routine: . "closure"
   53        | . "function"
   62 exp: . exp "=" exp
   63    | . exp "=" exp modifiers
   64    | . lvalue "+=" exp
   65    | . lvalue "-=" exp
   66    | . lvalue "*=" exp
   67    | . lvalue "/=" exp
   68    | . lvalue "^=" exp
   69    | . lvalue "%=" exp
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
  118            | . block
  119            | . "do" "(" exp ")" block
  119            | "do" "(" . exp ")" block
  120 detach: . "detach"
  121       | . "disown"
  122 primary-exp: . "assert" "(" exp ")"
  123            | . "assert" "{" claims "}"
  124            | . detach "(" exp ")"
  125            | . detach block
  126            | . "isdef" "(" k1_id ")"
  127            | . "watch" "(" exp ")"
  128 lvalue: . id
  129       | . primary-exp "." id
  130       | . primary-exp "." "*"
  131 primary-exp: . "&" id
  132            | . primary-exp "." "&" id
  133 id: . "identifier"
  134 bitor-exp: . "var" bitor-exp
  135          | . "const" "var" bitor-exp
  136 primary-exp: . lvalue
  137            | . lvalue args
  138 new: . "new" "identifier" args.opt
  139 bitor-exp: . new
  140 id: . "new"
  141 primary-exp: . routine formals block
  142 float-exp: . "float"
  143 duration: . "duration"
  144         | . duration "duration"
  150 dictionary: . "[" assocs "]"
  154 tuple: . "(" tuple.exps ")"
  155 literal-exp: . float-exp
  156            | . "angle"
  157            | . duration
  158            | . string
  159            | . "[" exps "]"
  160            | . dictionary
  161            | . tuple
  162 string: . "string"
  163       | . string "string"
  164 literal-exp: . "__HERE__"
  170 lvalue: . primary-exp "[" exps "]"
  171 literal-exp: . "this"
  172            | . "call"
  173 primary-exp: . literal-exp
  174            | . "(" exp ")"
  175            | . "(" error ")"
  176            | . primary-exp "**" primary-exp
  177 unary-exp: . primary-exp
  178          | . "--" lvalue
  179          | . "++" lvalue
  180          | . "+" unary-exp
  181          | . "-" unary-exp
  182          | . "!" unary-exp
  183          | . "compl" unary-exp
  184 bitor-exp: . unary-exp
  185          | . bitor-exp "+" bitor-exp
  186          | . bitor-exp "-" bitor-exp
  187          | . bitor-exp "*" bitor-exp
  188          | . bitor-exp "/" bitor-exp
  189          | . bitor-exp "%" bitor-exp
  190          | . bitor-exp "^" bitor-exp
  191          | . bitor-exp "<<" bitor-exp
  192          | . bitor-exp "bitand" bitor-exp
  193          | . bitor-exp "bitor" bitor-exp
  194          | . bitor-exp ">>" bitor-exp
  205 rel-exp: . bitor-exp rel-ops
  208 exp: . rel-exp
  209    | . exp "&&" exp
  210    | . exp "||" exp
  211    | . exp "in" exp
  212    | . exp "!" "in" exp
  216    | . "%unscope:" unsigned
  217 primary-exp: . "%exp:" unsigned
  218 lvalue: . "%lvalue:" unsigned
  219       | . "%id:" unsigned
  220       | . primary-exp "." "%id:" unsigned
  221 primary-exp: . lvalue "(" "%exps:" unsigned ")"

    "__HERE__"    shift, and go to state 7
    "closure"     shift, and go to state 9
    "const"       shift, and go to state 10
    "function"    shift, and go to state 13
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "var"         shift, and go to state 25
    "watch"       shift, and go to state 27
    "&"           shift, and go to state 29
    "identifier"  shift, and go to state 35
    "class"       shift, and go to state 36
    "package"     shift, and go to state 37
    "--"          shift, and go to state 41
    "++"          shift, and go to state 42
    "do"          shift, and go to state 43
    "assert"      shift, and go to state 44
    "detach"      shift, and go to state 45
    "disown"      shift, and go to state 46
    "new"         shift, and go to state 47
    "angle"       shift, and go to state 48
    "duration"    shift, and go to state 49
    "float"       shift, and go to state 50
    "string"      shift, and go to state 51
    "call"        shift, and go to state 52
    "this"        shift, and go to state 53
    "!"           shift, and go to state 54
    "compl"       shift, and go to state 55
    "-"           shift, and go to state 56
    "+"           shift, and go to state 57
    "%unscope:"   shift, and go to state 58
    "%exp:"       shift, and go to state 59
    "%lvalue:"    shift, and go to state 60
    "%id:"        shift, and go to state 61

    block        go to state 66
    exp          go to state 249
    routine      go to state 99
    primary-exp  go to state 100
    detach       go to state 70
    lvalue       go to state 71
    id           go to state 101
    bitor-exp    go to state 73
    new          go to state 74
    float-exp    go to state 75
    duration     go to state 76
    dictionary   go to state 77
    tuple        go to state 78
    literal-exp  go to state 79
    string       go to state 80
    unary-exp    go to state 81
    rel-exp      go to state 82


state 143

   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   37 exp: . "class" lvalue protos block
   38    | . "package" lvalue protos block
   52 routine: . "closure"
   53        | . "function"
   62 exp: . exp "=" exp
   63    | . exp "=" exp modifiers
   64    | . lvalue "+=" exp
   65    | . lvalue "-=" exp
   66    | . lvalue "*=" exp
   67    | . lvalue "/=" exp
   68    | . lvalue "^=" exp
   69    | . lvalue "%=" exp
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
  118            | . block
  119            | . "do" "(" exp ")" block
  120 detach: . "detach"
  121       | . "disown"
  122 primary-exp: . "assert" "(" exp ")"
  123            | . "assert" "{" claims "}"
  123            | "assert" "{" . claims "}"
  124            | . detach "(" exp ")"
  125            | . detach block
  126            | . "isdef" "(" k1_id ")"
  127            | . "watch" "(" exp ")"
  128 lvalue: . id
  129       | . primary-exp "." id
  130       | . primary-exp "." "*"
  131 primary-exp: . "&" id
  132            | . primary-exp "." "&" id
  133 id: . "identifier"
  134 bitor-exp: . "var" bitor-exp
  135          | . "const" "var" bitor-exp
  136 primary-exp: . lvalue
  137            | . lvalue args
  138 new: . "new" "identifier" args.opt
  139 bitor-exp: . new
  140 id: . "new"
  141 primary-exp: . routine formals block
  142 float-exp: . "float"
  143 duration: . "duration"
  144         | . duration "duration"
  150 dictionary: . "[" assocs "]"
  154 tuple: . "(" tuple.exps ")"
  155 literal-exp: . float-exp
  156            | . "angle"
  157            | . duration
  158            | . string
  159            | . "[" exps "]"
  160            | . dictionary
  161            | . tuple
  162 string: . "string"
  163       | . string "string"
  164 literal-exp: . "__HERE__"
  170 lvalue: . primary-exp "[" exps "]"
  171 literal-exp: . "this"
  172            | . "call"
  173 primary-exp: . literal-exp
  174            | . "(" exp ")"
  175            | . "(" error ")"
  176            | . primary-exp "**" primary-exp
  177 unary-exp: . primary-exp
  178          | . "--" lvalue
  179          | . "++" lvalue
  180          | . "+" unary-exp
  181          | . "-" unary-exp
  182          | . "!" unary-exp
  183          | . "compl" unary-exp
  184 bitor-exp: . unary-exp
  185          | . bitor-exp "+" bitor-exp
  186          | . bitor-exp "-" bitor-exp
  187          | . bitor-exp "*" bitor-exp
  188          | . bitor-exp "/" bitor-exp
  189          | . bitor-exp "%" bitor-exp
  190          | . bitor-exp "^" bitor-exp
  191          | . bitor-exp "<<" bitor-exp
  192          | . bitor-exp "bitand" bitor-exp
  193          | . bitor-exp "bitor" bitor-exp
  194          | . bitor-exp ">>" bitor-exp
  205 rel-exp: . bitor-exp rel-ops
  208 exp: . rel-exp
  209    | . exp "&&" exp
  210    | . exp "||" exp
  211    | . exp "in" exp
  212    | . exp "!" "in" exp
  216    | . "%unscope:" unsigned
  217 primary-exp: . "%exp:" unsigned
  218 lvalue: . "%lvalue:" unsigned
  219       | . "%id:" unsigned
  220       | . primary-exp "." "%id:" unsigned
  221 primary-exp: . lvalue "(" "%exps:" unsigned ")"
  222 claims: .  ["}"]
  223       | . claims.1 semi.opt
  224 claims.1: . exp
  225         | . claims.1 ";" exp

    "__HERE__"    shift, and go to state 7
    "closure"     shift, and go to state 9
    "const"       shift, and go to state 10
    "function"    shift, and go to state 13
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "var"         shift, and go to state 25
    "watch"       shift, and go to state 27
    "&"           shift, and go to state 29
    "identifier"  shift, and go to state 35
    "class"       shift, and go to state 36
    "package"     shift, and go to state 37
    "--"          shift, and go to state 41
    "++"          shift, and go to state 42
    "do"          shift, and go to state 43
    "assert"      shift, and go to state 44
    "detach"      shift, and go to state 45
    "disown"      shift, and go to state 46
    "new"         shift, and go to state 47
    "angle"       shift, and go to state 48
    "duration"    shift, and go to state 49
    "float"       shift, and go to state 50
    "string"      shift, and go to state 51
    "call"        shift, and go to state 52
    "this"        shift, and go to state 53
    "!"           shift, and go to state 54
    "compl"       shift, and go to state 55
    "-"           shift, and go to state 56
    "+"           shift, and go to state 57
    "%unscope:"   shift, and go to state 58
    "%exp:"       shift, and go to state 59
    "%lvalue:"    shift, and go to state 60
    "%id:"        shift, and go to state 61

    $default  reduce using rule 222 (claims)

    block        go to state 66
    exp          go to state 250
    routine      go to state 99
    primary-exp  go to state 100
    detach       go to state 70
    lvalue       go to state 71
    id           go to state 101
    bitor-exp    go to state 73
    new          go to state 74
    float-exp    go to state 75
    duration     go to state 76
    dictionary   go to state 77
    tuple        go to state 78
    literal-exp  go to state 79
    string       go to state 80
    unary-exp    go to state 81
    rel-exp      go to state 82
    claims       go to state 251
    claims.1     go to state 252


state 144

   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   37 exp: . "class" lvalue protos block
   38    | . "package" lvalue protos block
   52 routine: . "closure"
   53        | . "function"
   62 exp: . exp "=" exp
   63    | . exp "=" exp modifiers
   64    | . lvalue "+=" exp
   65    | . lvalue "-=" exp
   66    | . lvalue "*=" exp
   67    | . lvalue "/=" exp
   68    | . lvalue "^=" exp
   69    | . lvalue "%=" exp
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
  118            | . block
  119            | . "do" "(" exp ")" block
  120 detach: . "detach"
  121       | . "disown"
  122 primary-exp: . "assert" "(" exp ")"
  122            | "assert" "(" . exp ")"
  123            | . "assert" "{" claims "}"
  124            | . detach "(" exp ")"
  125            | . detach block
  126            | . "isdef" "(" k1_id ")"
  127            | . "watch" "(" exp ")"
  128 lvalue: . id
  129       | . primary-exp "." id
  130       | . primary-exp "." "*"
  131 primary-exp: . "&" id
  132            | . primary-exp "." "&" id
  133 id: . "identifier"
  134 bitor-exp: . "var" bitor-exp
  135          | . "const" "var" bitor-exp
  136 primary-exp: . lvalue
  137            | . lvalue args
  138 new: . "new" "identifier" args.opt
  139 bitor-exp: . new
  140 id: . "new"
  141 primary-exp: . routine formals block
  142 float-exp: . "float"
  143 duration: . "duration"
  144         | . duration "duration"
  150 dictionary: . "[" assocs "]"
  154 tuple: . "(" tuple.exps ")"
  155 literal-exp: . float-exp
  156            | . "angle"
  157            | . duration
  158            | . string
  159            | . "[" exps "]"
  160            | . dictionary
  161            | . tuple
  162 string: . "string"
  163       | . string "string"
  164 literal-exp: . "__HERE__"
  170 lvalue: . primary-exp "[" exps "]"
  171 literal-exp: . "this"
  172            | . "call"
  173 primary-exp: . literal-exp
  174            | . "(" exp ")"
  175            | . "(" error ")"
  176            | . primary-exp "**" primary-exp
  177 unary-exp: . primary-exp
  178          | . "--" lvalue
  179          | . "++" lvalue
  180          | . "+" unary-exp
  181          | . "-" unary-exp
  182          | . "!" unary-exp
  183          | . "compl" unary-exp
  184 bitor-exp: . unary-exp
  185          | . bitor-exp "+" bitor-exp
  186          | . bitor-exp "-" bitor-exp
  187          | . bitor-exp "*" bitor-exp
  188          | . bitor-exp "/" bitor-exp
  189          | . bitor-exp "%" bitor-exp
  190          | . bitor-exp "^" bitor-exp
  191          | . bitor-exp "<<" bitor-exp
  192          | . bitor-exp "bitand" bitor-exp
  193          | . bitor-exp "bitor" bitor-exp
  194          | . bitor-exp ">>" bitor-exp
  205 rel-exp: . bitor-exp rel-ops
  208 exp: . rel-exp
  209    | . exp "&&" exp
  210    | . exp "||" exp
  211    | . exp "in" exp
  212    | . exp "!" "in" exp
  216    | . "%unscope:" unsigned
  217 primary-exp: . "%exp:" unsigned
  218 lvalue: . "%lvalue:" unsigned
  219       | . "%id:" unsigned
  220       | . primary-exp "." "%id:" unsigned
  221 primary-exp: . lvalue "(" "%exps:" unsigned ")"

    "__HERE__"    shift, and go to state 7
    "closure"     shift, and go to state 9
    "const"       shift, and go to state 10
    "function"    shift, and go to state 13
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "var"         shift, and go to state 25
    "watch"       shift, and go to state 27
    "&"           shift, and go to state 29
    "identifier"  shift, and go to state 35
    "class"       shift, and go to state 36
    "package"     shift, and go to state 37
    "--"          shift, and go to state 41
    "++"          shift, and go to state 42
    "do"          shift, and go to state 43
    "assert"      shift, and go to state 44
    "detach"      shift, and go to state 45
    "disown"      shift, and go to state 46
    "new"         shift, and go to state 47
    "angle"       shift, and go to state 48
    "duration"    shift, and go to state 49
    "float"       shift, and go to state 50
    "string"      shift, and go to state 51
    "call"        shift, and go to state 52
    "this"        shift, and go to state 53
    "!"           shift, and go to state 54
    "compl"       shift, and go to state 55
    "-"           shift, and go to state 56
    "+"           shift, and go to state 57
    "%unscope:"   shift, and go to state 58
    "%exp:"       shift, and go to state 59
    "%lvalue:"    shift, and go to state 60
    "%id:"        shift, and go to state 61

    block        go to state 66
    exp          go to state 253
    routine      go to state 99
    primary-exp  go to state 100
    detach       go to state 70
    lvalue       go to state 71
    id           go to state 101
    bitor-exp    go to state 73
    new          go to state 74
    float-exp    go to state 75
    duration     go to state 76
    dictionary   go to state 77
    tuple        go to state 78
    literal-exp  go to state 79
    string       go to state 80
    unary-exp    go to state 81
    rel-exp      go to state 82


state 145

  138 new: "new" "identifier" . args.opt
  231 args: . "(" exps ")"
  232 args.opt: .  ["end of command", "=", "case", "catch", ":", "default", "else", "finally", "if", "in", "{", "onleave", "}", "]", ")", "~", ",", ";", "&", "|", "identifier", "=>", "?", "!", "bitand", "bitor", "^", ">>", "<<", "-", "%", "+", "/", "*", "=~=", "==", "===", ">=", ">", "<=", "<", "!=", "!==", "~=", "&&", "||"]
  233         | . args

    "("  shift, and go to state 254

    $default  reduce using rule 232 (args.opt)

    args      go to state 255
    args.opt  go to state 256


state 146

  182 unary-exp: "!" unary-exp .

    $default  reduce using rule 182 (unary-exp)


state 147

  183 unary-exp: "compl" unary-exp .

    $default  reduce using rule 183 (unary-exp)


state 148

  181 unary-exp: "-" unary-exp .

    $default  reduce using rule 181 (unary-exp)


state 149

  180 unary-exp: "+" unary-exp .

    $default  reduce using rule 180 (unary-exp)


state 150

  215 unsigned: "float" .

    $default  reduce using rule 215 (unsigned)


state 151

  216 exp: "%unscope:" unsigned .

    $default  reduce using rule 216 (exp)


state 152

  217 primary-exp: "%exp:" unsigned .

    $default  reduce using rule 217 (primary-exp)


state 153

  218 lvalue: "%lvalue:" unsigned .

    $default  reduce using rule 218 (lvalue)


state 154

  219 lvalue: "%id:" unsigned .

    $default  reduce using rule 219 (lvalue)


state 155

    7 root_exp: cstmt.opt "end of command" .

    $default  reduce using rule 7 (root_exp)


state 156

    6 root_exp: cstmt.opt "," .

    $default  reduce using rule 6 (root_exp)


state 157

    5 root_exp: cstmt.opt ";" .

    $default  reduce using rule 5 (root_exp)


state 158

   18 cstmt: . stmt
   19      | . cstmt "|" cstmt
   20      | . cstmt "&" cstmt
   20      | cstmt "&" . cstmt
   23 stmt: . primary-exp ":" stmt
   24     | . exp
   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   37 exp: . "class" lvalue protos block
   38    | . "package" lvalue protos block
   43 stmt: . "enum" id "{" id.0 "}"
   47     | . "external" "identifier" "identifier"
   48     | . "external" "var" "identifier" "." "identifier" from "identifier"
   49     | . "external" event_or_function "(" unsigned ")" "identifier" "." "identifier" from "identifier"
   50     | . "import" lvalue
   51     | . exp "!" args.opt tilda.opt
   52 routine: . "closure"
   53        | . "function"
   54 stmt: . routine k1_id formals block
   55     | . id id formals block
   62 exp: . exp "=" exp
   63    | . exp "=" exp modifiers
   64    | . lvalue "+=" exp
   65    | . lvalue "-=" exp
   66    | . lvalue "*=" exp
   67    | . lvalue "/=" exp
   68    | . lvalue "^=" exp
   69    | . lvalue "%=" exp
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
   73 stmt: . "at" identifiers "(" exp tilda.opt ")" stmt onleave.opt
   74     | . "at" identifiers "(" event_match ")" stmt onleave.opt
   75     | . "every" "(" exp ")" stmt
   76     | . "if" "(" stmts ")" stmt else.opt
   77     | . "freezeif" "(" exp ")" stmt
   78     | . "stopif" "(" exp ")" stmt
   79     | . "switch" "(" exp ")" "{" cases default.opt "}"
   80     | . "timeout" "(" exp ")" stmt catch.opt else.opt finally.opt
   81     | . "return" exp.opt
   82     | . "break"
   83     | . "continue"
   84     | . "waituntil" "(" exp tilda.opt ")"
   85     | . "waituntil" "(" event_match ")"
   86     | . "whenever" "(" exp tilda.opt ")" stmt else.opt
   87     | . "whenever" "(" event_match ")" stmt else.opt
  108     | . "try" block catches.1 else.opt finally.opt
  109     | . "try" block "finally" block
  110     | . "throw" exp.opt
  111     | . "loop" stmt
  112     | . "for" "(" exp ")" stmt
  113     | . "for" "(" stmt.opt ";" exp ";" stmt.opt ")" stmt
  114     | . "for" "(" "var" "identifier" in_or_colon exp ")" stmt
  115     | . "while" "(" exp ")" stmt
  118 primary-exp: . block
  119            | . "do" "(" exp ")" block
  120 detach: . "detach"
  121       | . "disown"
  122 primary-exp: . "assert" "(" exp ")"
  123            | . "assert" "{" claims "}"
  124            | . detach "(" exp ")"
  125            | . detach block
  126            | . "isdef" "(" k1_id ")"
  127            | . "watch" "(" exp ")"
  128 lvalue: . id
  129       | . primary-exp "." id
  130       | . primary-exp "." "*"
  131 primary-exp: . "&" id
  132            | . primary-exp "." "&" id
  133 id: . "identifier"
  134 bitor-exp: . "var" bitor-exp
  135          | . "const" "var" bitor-exp
  136 primary-exp: . lvalue
  137            | . lvalue args
  138 new: . "new" "identifier" args.opt
  139 bitor-exp: . new
  140 id: . "new"
  141 primary-exp: . routine formals block
  142 float-exp: . "float"
  143 duration: . "duration"
  144         | . duration "duration"
  150 dictionary: . "[" assocs "]"
  154 tuple: . "(" tuple.exps ")"
  155 literal-exp: . float-exp
  156            | . "angle"
  157            | . duration
  158            | . string
  159            | . "[" exps "]"
  160            | . dictionary
  161            | . tuple
  162 string: . "string"
  163       | . string "string"
  164 literal-exp: . "__HERE__"
  170 lvalue: . primary-exp "[" exps "]"
  171 literal-exp: . "this"
  172            | . "call"
  173 primary-exp: . literal-exp
  174            | . "(" exp ")"
  175            | . "(" error ")"
  176            | . primary-exp "**" primary-exp
  177 unary-exp: . primary-exp
  178          | . "--" lvalue
  179          | . "++" lvalue
  180          | . "+" unary-exp
  181          | . "-" unary-exp
  182          | . "!" unary-exp
  183          | . "compl" unary-exp
  184 bitor-exp: . unary-exp
  185          | . bitor-exp "+" bitor-exp
  186          | . bitor-exp "-" bitor-exp
  187          | . bitor-exp "*" bitor-exp
  188          | . bitor-exp "/" bitor-exp
  189          | . bitor-exp "%" bitor-exp
  190          | . bitor-exp "^" bitor-exp
  191          | . bitor-exp "<<" bitor-exp
  192          | . bitor-exp "bitand" bitor-exp
  193          | . bitor-exp "bitor" bitor-exp
  194          | . bitor-exp ">>" bitor-exp
  205 rel-exp: . bitor-exp rel-ops
  208 exp: . rel-exp
  209    | . exp "&&" exp
  210    | . exp "||" exp
  211    | . exp "in" exp
  212    | . exp "!" "in" exp
  216    | . "%unscope:" unsigned
  217 primary-exp: . "%exp:" unsigned
  218 lvalue: . "%lvalue:" unsigned
  219       | . "%id:" unsigned
  220       | . primary-exp "." "%id:" unsigned
  221 primary-exp: . lvalue "(" "%exps:" unsigned ")"

    "__HERE__"    shift, and go to state 7
    "break"       shift, and go to state 8
    "closure"     shift, and go to state 9
    "const"       shift, and go to state 10
    "continue"    shift, and go to state 11
    "freezeif"    shift, and go to state 12
    "function"    shift, and go to state 13
    "if"          shift, and go to state 14
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "return"      shift, and go to state 19
    "stopif"      shift, and go to state 20
    "switch"      shift, and go to state 21
    "throw"       shift, and go to state 22
    "timeout"     shift, and go to state 23
    "try"         shift, and go to state 24
    "var"         shift, and go to state 25
    "waituntil"   shift, and go to state 26
    "watch"       shift, and go to state 27
    "whenever"    shift, and go to state 28
    "&"           shift, and go to state 29
    "every"       shift, and go to state 30
    "for"         shift, and go to state 31
    "loop"        shift, and go to state 32
    "while"       shift, and go to state 33
    "at"          shift, and go to state 34
    "identifier"  shift, and go to state 35
    "class"       shift, and go to state 36
    "package"     shift, and go to state 37
    "enum"        shift, and go to state 38
    "external"    shift, and go to state 39
    "import"      shift, and go to state 40
    "--"          shift, and go to state 41
    "++"          shift, and go to state 42
    "do"          shift, and go to state 43
    "assert"      shift, and go to state 44
    "detach"      shift, and go to state 45
    "disown"      shift, and go to state 46
    "new"         shift, and go to state 47
    "angle"       shift, and go to state 48
    "duration"    shift, and go to state 49
    "float"       shift, and go to state 50
    "string"      shift, and go to state 51
    "call"        shift, and go to state 52
    "this"        shift, and go to state 53
    "!"           shift, and go to state 54
    "compl"       shift, and go to state 55
    "-"           shift, and go to state 56
    "+"           shift, and go to state 57
    "%unscope:"   shift, and go to state 58
    "%exp:"       shift, and go to state 59
    "%lvalue:"    shift, and go to state 60
    "%id:"        shift, and go to state 61

    cstmt        go to state 257
    stmt         go to state 65
    block        go to state 66
    exp          go to state 67
    routine      go to state 68
    primary-exp  go to state 69
    detach       go to state 70
    lvalue       go to state 71
    id           go to state 72
    bitor-exp    go to state 73
    new          go to state 74
    float-exp    go to state 75
    duration     go to state 76
    dictionary   go to state 77
    tuple        go to state 78
    literal-exp  go to state 79
    string       go to state 80
    unary-exp    go to state 81
    rel-exp      go to state 82


state 159

   17 cstmt.opt: cstmt "|" .  ["end of command", "case", "default", "}", ")", ",", ";"]
   18 cstmt: . stmt
   19      | . cstmt "|" cstmt
   19      | cstmt "|" . cstmt
   20      | . cstmt "&" cstmt
   23 stmt: . primary-exp ":" stmt
   24     | . exp
   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   37 exp: . "class" lvalue protos block
   38    | . "package" lvalue protos block
   43 stmt: . "enum" id "{" id.0 "}"
   47     | . "external" "identifier" "identifier"
   48     | . "external" "var" "identifier" "." "identifier" from "identifier"
   49     | . "external" event_or_function "(" unsigned ")" "identifier" "." "identifier" from "identifier"
   50     | . "import" lvalue
   51     | . exp "!" args.opt tilda.opt
   52 routine: . "closure"
   53        | . "function"
   54 stmt: . routine k1_id formals block
   55     | . id id formals block
   62 exp: . exp "=" exp
   63    | . exp "=" exp modifiers
   64    | . lvalue "+=" exp
   65    | . lvalue "-=" exp
   66    | . lvalue "*=" exp
   67    | . lvalue "/=" exp
   68    | . lvalue "^=" exp
   69    | . lvalue "%=" exp
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
   73 stmt: . "at" identifiers "(" exp tilda.opt ")" stmt onleave.opt
   74     | . "at" identifiers "(" event_match ")" stmt onleave.opt
   75     | . "every" "(" exp ")" stmt
   76     | . "if" "(" stmts ")" stmt else.opt
   77     | . "freezeif" "(" exp ")" stmt
   78     | . "stopif" "(" exp ")" stmt
   79     | . "switch" "(" exp ")" "{" cases default.opt "}"
   80     | . "timeout" "(" exp ")" stmt catch.opt else.opt finally.opt
   81     | . "return" exp.opt
   82     | . "break"
   83     | . "continue"
   84     | . "waituntil" "(" exp tilda.opt ")"
   85     | . "waituntil" "(" event_match ")"
   86     | . "whenever" "(" exp tilda.opt ")" stmt else.opt
   87     | . "whenever" "(" event_match ")" stmt else.opt
  108     | . "try" block catches.1 else.opt finally.opt
  109     | . "try" block "finally" block
  110     | . "throw" exp.opt
  111     | . "loop" stmt
  112     | . "for" "(" exp ")" stmt
  113     | . "for" "(" stmt.opt ";" exp ";" stmt.opt ")" stmt
  114     | . "for" "(" "var" "identifier" in_or_colon exp ")" stmt
  115     | . "while" "(" exp ")" stmt
  118 primary-exp: . block
  119            | . "do" "(" exp ")" block
  120 detach: . "detach"
  121       | . "disown"
  122 primary-exp: . "assert" "(" exp ")"
  123            | . "assert" "{" claims "}"
  124            | . detach "(" exp ")"
  125            | . detach block
  126            | . "isdef" "(" k1_id ")"
  127            | . "watch" "(" exp ")"
  128 lvalue: . id
  129       | . primary-exp "." id
  130       | . primary-exp "." "*"
  131 primary-exp: . "&" id
  132            | . primary-exp "." "&" id
  133 id: . "identifier"
  134 bitor-exp: . "var" bitor-exp
  135          | . "const" "var" bitor-exp
  136 primary-exp: . lvalue
  137            | . lvalue args
  138 new: . "new" "identifier" args.opt
  139 bitor-exp: . new
  140 id: . "new"
  141 primary-exp: . routine formals block
  142 float-exp: . "float"
  143 duration: . "duration"
  144         | . duration "duration"
  150 dictionary: . "[" assocs "]"
  154 tuple: . "(" tuple.exps ")"
  155 literal-exp: . float-exp
  156            | . "angle"
  157            | . duration
  158            | . string
  159            | . "[" exps "]"
  160            | . dictionary
  161            | . tuple
  162 string: . "string"
  163       | . string "string"
  164 literal-exp: . "__HERE__"
  170 lvalue: . primary-exp "[" exps "]"
  171 literal-exp: . "this"
  172            | . "call"
  173 primary-exp: . literal-exp
  174            | . "(" exp ")"
  175            | . "(" error ")"
  176            | . primary-exp "**" primary-exp
  177 unary-exp: . primary-exp
  178          | . "--" lvalue
  179          | . "++" lvalue
  180          | . "+" unary-exp
  181          | . "-" unary-exp
  182          | . "!" unary-exp
  183          | . "compl" unary-exp
  184 bitor-exp: . unary-exp
  185          | . bitor-exp "+" bitor-exp
  186          | . bitor-exp "-" bitor-exp
  187          | . bitor-exp "*" bitor-exp
  188          | . bitor-exp "/" bitor-exp
  189          | . bitor-exp "%" bitor-exp
  190          | . bitor-exp "^" bitor-exp
  191          | . bitor-exp "<<" bitor-exp
  192          | . bitor-exp "bitand" bitor-exp
  193          | . bitor-exp "bitor" bitor-exp
  194          | . bitor-exp ">>" bitor-exp
  205 rel-exp: . bitor-exp rel-ops
  208 exp: . rel-exp
  209    | . exp "&&" exp
  210    | . exp "||" exp
  211    | . exp "in" exp
  212    | . exp "!" "in" exp
  216    | . "%unscope:" unsigned
  217 primary-exp: . "%exp:" unsigned
  218 lvalue: . "%lvalue:" unsigned
  219       | . "%id:" unsigned
  220       | . primary-exp "." "%id:" unsigned
  221 primary-exp: . lvalue "(" "%exps:" unsigned ")"

    "__HERE__"    shift, and go to state 7
    "break"       shift, and go to state 8
    "closure"     shift, and go to state 9
    "const"       shift, and go to state 10
    "continue"    shift, and go to state 11
    "freezeif"    shift, and go to state 12
    "function"    shift, and go to state 13
    "if"          shift, and go to state 14
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "return"      shift, and go to state 19
    "stopif"      shift, and go to state 20
    "switch"      shift, and go to state 21
    "throw"       shift, and go to state 22
    "timeout"     shift, and go to state 23
    "try"         shift, and go to state 24
    "var"         shift, and go to state 25
    "waituntil"   shift, and go to state 26
    "watch"       shift, and go to state 27
    "whenever"    shift, and go to state 28
    "&"           shift, and go to state 29
    "every"       shift, and go to state 30
    "for"         shift, and go to state 31
    "loop"        shift, and go to state 32
    "while"       shift, and go to state 33
    "at"          shift, and go to state 34
    "identifier"  shift, and go to state 35
    "class"       shift, and go to state 36
    "package"     shift, and go to state 37
    "enum"        shift, and go to state 38
    "external"    shift, and go to state 39
    "import"      shift, and go to state 40
    "--"          shift, and go to state 41
    "++"          shift, and go to state 42
    "do"          shift, and go to state 43
    "assert"      shift, and go to state 44
    "detach"      shift, and go to state 45
    "disown"      shift, and go to state 46
    "new"         shift, and go to state 47
    "angle"       shift, and go to state 48
    "duration"    shift, and go to state 49
    "float"       shift, and go to state 50
    "string"      shift, and go to state 51
    "call"        shift, and go to state 52
    "this"        shift, and go to state 53
    "!"           shift, and go to state 54
    "compl"       shift, and go to state 55
    "-"           shift, and go to state 56
    "+"           shift, and go to state 57
    "%unscope:"   shift, and go to state 58
    "%exp:"       shift, and go to state 59
    "%lvalue:"    shift, and go to state 60
    "%id:"        shift, and go to state 61

    $default  reduce using rule 17 (cstmt.opt)

    cstmt        go to state 258
    stmt         go to state 65
    block        go to state 66
    exp          go to state 67
    routine      go to state 68
    primary-exp  go to state 69
    detach       go to state 70
    lvalue       go to state 71
    id           go to state 72
    bitor-exp    go to state 73
    new          go to state 74
    float-exp    go to state 75
    duration     go to state 76
    dictionary   go to state 77
    tuple        go to state 78
    literal-exp  go to state 79
    string       go to state 80
    unary-exp    go to state 81
    rel-exp      go to state 82


state 160

   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   37 exp: . "class" lvalue protos block
   38    | . "package" lvalue protos block
   52 routine: . "closure"
   53        | . "function"
   62 exp: . exp "=" exp
   62    | exp "=" . exp
   63    | . exp "=" exp modifiers
   63    | exp "=" . exp modifiers
   64    | . lvalue "+=" exp
   65    | . lvalue "-=" exp
   66    | . lvalue "*=" exp
   67    | . lvalue "/=" exp
   68    | . lvalue "^=" exp
   69    | . lvalue "%=" exp
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
  118            | . block
  119            | . "do" "(" exp ")" block
  120 detach: . "detach"
  121       | . "disown"
  122 primary-exp: . "assert" "(" exp ")"
  123            | . "assert" "{" claims "}"
  124            | . detach "(" exp ")"
  125            | . detach block
  126            | . "isdef" "(" k1_id ")"
  127            | . "watch" "(" exp ")"
  128 lvalue: . id
  129       | . primary-exp "." id
  130       | . primary-exp "." "*"
  131 primary-exp: . "&" id
  132            | . primary-exp "." "&" id
  133 id: . "identifier"
  134 bitor-exp: . "var" bitor-exp
  135          | . "const" "var" bitor-exp
  136 primary-exp: . lvalue
  137            | . lvalue args
  138 new: . "new" "identifier" args.opt
  139 bitor-exp: . new
  140 id: . "new"
  141 primary-exp: . routine formals block
  142 float-exp: . "float"
  143 duration: . "duration"
  144         | . duration "duration"
  150 dictionary: . "[" assocs "]"
  154 tuple: . "(" tuple.exps ")"
  155 literal-exp: . float-exp
  156            | . "angle"
  157            | . duration
  158            | . string
  159            | . "[" exps "]"
  160            | . dictionary
  161            | . tuple
  162 string: . "string"
  163       | . string "string"
  164 literal-exp: . "__HERE__"
  170 lvalue: . primary-exp "[" exps "]"
  171 literal-exp: . "this"
  172            | . "call"
  173 primary-exp: . literal-exp
  174            | . "(" exp ")"
  175            | . "(" error ")"
  176            | . primary-exp "**" primary-exp
  177 unary-exp: . primary-exp
  178          | . "--" lvalue
  179          | . "++" lvalue
  180          | . "+" unary-exp
  181          | . "-" unary-exp
  182          | . "!" unary-exp
  183          | . "compl" unary-exp
  184 bitor-exp: . unary-exp
  185          | . bitor-exp "+" bitor-exp
  186          | . bitor-exp "-" bitor-exp
  187          | . bitor-exp "*" bitor-exp
  188          | . bitor-exp "/" bitor-exp
  189          | . bitor-exp "%" bitor-exp
  190          | . bitor-exp "^" bitor-exp
  191          | . bitor-exp "<<" bitor-exp
  192          | . bitor-exp "bitand" bitor-exp
  193          | . bitor-exp "bitor" bitor-exp
  194          | . bitor-exp ">>" bitor-exp
  205 rel-exp: . bitor-exp rel-ops
  208 exp: . rel-exp
  209    | . exp "&&" exp
  210    | . exp "||" exp
  211    | . exp "in" exp
  212    | . exp "!" "in" exp
  216    | . "%unscope:" unsigned
  217 primary-exp: . "%exp:" unsigned
  218 lvalue: . "%lvalue:" unsigned
  219       | . "%id:" unsigned
  220       | . primary-exp "." "%id:" unsigned
  221 primary-exp: . lvalue "(" "%exps:" unsigned ")"

    "__HERE__"    shift, and go to state 7
    "closure"     shift, and go to state 9
    "const"       shift, and go to state 10
    "function"    shift, and go to state 13
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "var"         shift, and go to state 25
    "watch"       shift, and go to state 27
    "&"           shift, and go to state 29
    "identifier"  shift, and go to state 35
    "class"       shift, and go to state 36
    "package"     shift, and go to state 37
    "--"          shift, and go to state 41
    "++"          shift, and go to state 42
    "do"          shift, and go to state 43
    "assert"      shift, and go to state 44
    "detach"      shift, and go to state 45
    "disown"      shift, and go to state 46
    "new"         shift, and go to state 47
    "angle"       shift, and go to state 48
    "duration"    shift, and go to state 49
    "float"       shift, and go to state 50
    "string"      shift, and go to state 51
    "call"        shift, and go to state 52
    "this"        shift, and go to state 53
    "!"           shift, and go to state 54
    "compl"       shift, and go to state 55
    "-"           shift, and go to state 56
    "+"           shift, and go to state 57
    "%unscope:"   shift, and go to state 58
    "%exp:"       shift, and go to state 59
    "%lvalue:"    shift, and go to state 60
    "%id:"        shift, and go to state 61

    block        go to state 66
    exp          go to state 259
    routine      go to state 99
    primary-exp  go to state 100
    detach       go to state 70
    lvalue       go to state 71
    id           go to state 101
    bitor-exp    go to state 73
    new          go to state 74
    float-exp    go to state 75
    duration     go to state 76
    dictionary   go to state 77
    tuple        go to state 78
    literal-exp  go to state 79
    string       go to state 80
    unary-exp    go to state 81
    rel-exp      go to state 82


state 161

   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   37 exp: . "class" lvalue protos block
   38    | . "package" lvalue protos block
   52 routine: . "closure"
   53        | . "function"
   62 exp: . exp "=" exp
   63    | . exp "=" exp modifiers
   64    | . lvalue "+=" exp
   65    | . lvalue "-=" exp
   66    | . lvalue "*=" exp
   67    | . lvalue "/=" exp
   68    | . lvalue "^=" exp
   69    | . lvalue "%=" exp
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
  118            | . block
  119            | . "do" "(" exp ")" block
  120 detach: . "detach"
  121       | . "disown"
  122 primary-exp: . "assert" "(" exp ")"
  123            | . "assert" "{" claims "}"
  124            | . detach "(" exp ")"
  125            | . detach block
  126            | . "isdef" "(" k1_id ")"
  127            | . "watch" "(" exp ")"
  128 lvalue: . id
  129       | . primary-exp "." id
  130       | . primary-exp "." "*"
  131 primary-exp: . "&" id
  132            | . primary-exp "." "&" id
  133 id: . "identifier"
  134 bitor-exp: . "var" bitor-exp
  135          | . "const" "var" bitor-exp
  136 primary-exp: . lvalue
  137            | . lvalue args
  138 new: . "new" "identifier" args.opt
  139 bitor-exp: . new
  140 id: . "new"
  141 primary-exp: . routine formals block
  142 float-exp: . "float"
  143 duration: . "duration"
  144         | . duration "duration"
  150 dictionary: . "[" assocs "]"
  154 tuple: . "(" tuple.exps ")"
  155 literal-exp: . float-exp
  156            | . "angle"
  157            | . duration
  158            | . string
  159            | . "[" exps "]"
  160            | . dictionary
  161            | . tuple
  162 string: . "string"
  163       | . string "string"
  164 literal-exp: . "__HERE__"
  170 lvalue: . primary-exp "[" exps "]"
  171 literal-exp: . "this"
  172            | . "call"
  173 primary-exp: . literal-exp
  174            | . "(" exp ")"
  175            | . "(" error ")"
  176            | . primary-exp "**" primary-exp
  177 unary-exp: . primary-exp
  178          | . "--" lvalue
  179          | . "++" lvalue
  180          | . "+" unary-exp
  181          | . "-" unary-exp
  182          | . "!" unary-exp
  183          | . "compl" unary-exp
  184 bitor-exp: . unary-exp
  185          | . bitor-exp "+" bitor-exp
  186          | . bitor-exp "-" bitor-exp
  187          | . bitor-exp "*" bitor-exp
  188          | . bitor-exp "/" bitor-exp
  189          | . bitor-exp "%" bitor-exp
  190          | . bitor-exp "^" bitor-exp
  191          | . bitor-exp "<<" bitor-exp
  192          | . bitor-exp "bitand" bitor-exp
  193          | . bitor-exp "bitor" bitor-exp
  194          | . bitor-exp ">>" bitor-exp
  205 rel-exp: . bitor-exp rel-ops
  208 exp: . rel-exp
  209    | . exp "&&" exp
  210    | . exp "||" exp
  211    | . exp "in" exp
  211    | exp "in" . exp
  212    | . exp "!" "in" exp
  216    | . "%unscope:" unsigned
  217 primary-exp: . "%exp:" unsigned
  218 lvalue: . "%lvalue:" unsigned
  219       | . "%id:" unsigned
  220       | . primary-exp "." "%id:" unsigned
  221 primary-exp: . lvalue "(" "%exps:" unsigned ")"

    "__HERE__"    shift, and go to state 7
    "closure"     shift, and go to state 9
    "const"       shift, and go to state 10
    "function"    shift, and go to state 13
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "var"         shift, and go to state 25
    "watch"       shift, and go to state 27
    "&"           shift, and go to state 29
    "identifier"  shift, and go to state 35
    "class"       shift, and go to state 36
    "package"     shift, and go to state 37
    "--"          shift, and go to state 41
    "++"          shift, and go to state 42
    "do"          shift, and go to state 43
    "assert"      shift, and go to state 44
    "detach"      shift, and go to state 45
    "disown"      shift, and go to state 46
    "new"         shift, and go to state 47
    "angle"       shift, and go to state 48
    "duration"    shift, and go to state 49
    "float"       shift, and go to state 50
    "string"      shift, and go to state 51
    "call"        shift, and go to state 52
    "this"        shift, and go to state 53
    "!"           shift, and go to state 54
    "compl"       shift, and go to state 55
    "-"           shift, and go to state 56
    "+"           shift, and go to state 57
    "%unscope:"   shift, and go to state 58
    "%exp:"       shift, and go to state 59
    "%lvalue:"    shift, and go to state 60
    "%id:"        shift, and go to state 61

    block        go to state 66
    exp          go to state 260
    routine      go to state 99
    primary-exp  go to state 100
    detach       go to state 70
    lvalue       go to state 71
    id           go to state 101
    bitor-exp    go to state 73
    new          go to state 74
    float-exp    go to state 75
    duration     go to state 76
    dictionary   go to state 77
    tuple        go to state 78
    literal-exp  go to state 79
    string       go to state 80
    unary-exp    go to state 81
    rel-exp      go to state 82


state 162

   51 stmt: exp "!" . args.opt tilda.opt
  212 exp: exp "!" . "in" exp
  231 args: . "(" exps ")"
  232 args.opt: .  ["end of command", "case", "catch", "default", "else", "finally", "onleave", "}", ")", "~", ",", ";", "&", "|"]
  233         | . args

    "in"  shift, and go to state 261
    "("   shift, and go to state 254

    $default  reduce using rule 232 (args.opt)

    args      go to state 255
    args.opt  go to state 262


state 163

   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   37 exp: . "class" lvalue protos block
   38    | . "package" lvalue protos block
   52 routine: . "closure"
   53        | . "function"
   62 exp: . exp "=" exp
   63    | . exp "=" exp modifiers
   64    | . lvalue "+=" exp
   65    | . lvalue "-=" exp
   66    | . lvalue "*=" exp
   67    | . lvalue "/=" exp
   68    | . lvalue "^=" exp
   69    | . lvalue "%=" exp
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
  118            | . block
  119            | . "do" "(" exp ")" block
  120 detach: . "detach"
  121       | . "disown"
  122 primary-exp: . "assert" "(" exp ")"
  123            | . "assert" "{" claims "}"
  124            | . detach "(" exp ")"
  125            | . detach block
  126            | . "isdef" "(" k1_id ")"
  127            | . "watch" "(" exp ")"
  128 lvalue: . id
  129       | . primary-exp "." id
  130       | . primary-exp "." "*"
  131 primary-exp: . "&" id
  132            | . primary-exp "." "&" id
  133 id: . "identifier"
  134 bitor-exp: . "var" bitor-exp
  135          | . "const" "var" bitor-exp
  136 primary-exp: . lvalue
  137            | . lvalue args
  138 new: . "new" "identifier" args.opt
  139 bitor-exp: . new
  140 id: . "new"
  141 primary-exp: . routine formals block
  142 float-exp: . "float"
  143 duration: . "duration"
  144         | . duration "duration"
  150 dictionary: . "[" assocs "]"
  154 tuple: . "(" tuple.exps ")"
  155 literal-exp: . float-exp
  156            | . "angle"
  157            | . duration
  158            | . string
  159            | . "[" exps "]"
  160            | . dictionary
  161            | . tuple
  162 string: . "string"
  163       | . string "string"
  164 literal-exp: . "__HERE__"
  170 lvalue: . primary-exp "[" exps "]"
  171 literal-exp: . "this"
  172            | . "call"
  173 primary-exp: . literal-exp
  174            | . "(" exp ")"
  175            | . "(" error ")"
  176            | . primary-exp "**" primary-exp
  177 unary-exp: . primary-exp
  178          | . "--" lvalue
  179          | . "++" lvalue
  180          | . "+" unary-exp
  181          | . "-" unary-exp
  182          | . "!" unary-exp
  183          | . "compl" unary-exp
  184 bitor-exp: . unary-exp
  185          | . bitor-exp "+" bitor-exp
  186          | . bitor-exp "-" bitor-exp
  187          | . bitor-exp "*" bitor-exp
  188          | . bitor-exp "/" bitor-exp
  189          | . bitor-exp "%" bitor-exp
  190          | . bitor-exp "^" bitor-exp
  191          | . bitor-exp "<<" bitor-exp
  192          | . bitor-exp "bitand" bitor-exp
  193          | . bitor-exp "bitor" bitor-exp
  194          | . bitor-exp ">>" bitor-exp
  205 rel-exp: . bitor-exp rel-ops
  208 exp: . rel-exp
  209    | . exp "&&" exp
  209    | exp "&&" . exp
  210    | . exp "||" exp
  211    | . exp "in" exp
  212    | . exp "!" "in" exp
  216    | . "%unscope:" unsigned
  217 primary-exp: . "%exp:" unsigned
  218 lvalue: . "%lvalue:" unsigned
  219       | . "%id:" unsigned
  220       | . primary-exp "." "%id:" unsigned
  221 primary-exp: . lvalue "(" "%exps:" unsigned ")"

    "__HERE__"    shift, and go to state 7
    "closure"     shift, and go to state 9
    "const"       shift, and go to state 10
    "function"    shift, and go to state 13
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "var"         shift, and go to state 25
    "watch"       shift, and go to state 27
    "&"           shift, and go to state 29
    "identifier"  shift, and go to state 35
    "class"       shift, and go to state 36
    "package"     shift, and go to state 37
    "--"          shift, and go to state 41
    "++"          shift, and go to state 42
    "do"          shift, and go to state 43
    "assert"      shift, and go to state 44
    "detach"      shift, and go to state 45
    "disown"      shift, and go to state 46
    "new"         shift, and go to state 47
    "angle"       shift, and go to state 48
    "duration"    shift, and go to state 49
    "float"       shift, and go to state 50
    "string"      shift, and go to state 51
    "call"        shift, and go to state 52
    "this"        shift, and go to state 53
    "!"           shift, and go to state 54
    "compl"       shift, and go to state 55
    "-"           shift, and go to state 56
    "+"           shift, and go to state 57
    "%unscope:"   shift, and go to state 58
    "%exp:"       shift, and go to state 59
    "%lvalue:"    shift, and go to state 60
    "%id:"        shift, and go to state 61

    block        go to state 66
    exp          go to state 263
    routine      go to state 99
    primary-exp  go to state 100
    detach       go to state 70
    lvalue       go to state 71
    id           go to state 101
    bitor-exp    go to state 73
    new          go to state 74
    float-exp    go to state 75
    duration     go to state 76
    dictionary   go to state 77
    tuple        go to state 78
    literal-exp  go to state 79
    string       go to state 80
    unary-exp    go to state 81
    rel-exp      go to state 82


state 164

   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   37 exp: . "class" lvalue protos block
   38    | . "package" lvalue protos block
   52 routine: . "closure"
   53        | . "function"
   62 exp: . exp "=" exp
   63    | . exp "=" exp modifiers
   64    | . lvalue "+=" exp
   65    | . lvalue "-=" exp
   66    | . lvalue "*=" exp
   67    | . lvalue "/=" exp
   68    | . lvalue "^=" exp
   69    | . lvalue "%=" exp
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
  118            | . block
  119            | . "do" "(" exp ")" block
  120 detach: . "detach"
  121       | . "disown"
  122 primary-exp: . "assert" "(" exp ")"
  123            | . "assert" "{" claims "}"
  124            | . detach "(" exp ")"
  125            | . detach block
  126            | . "isdef" "(" k1_id ")"
  127            | . "watch" "(" exp ")"
  128 lvalue: . id
  129       | . primary-exp "." id
  130       | . primary-exp "." "*"
  131 primary-exp: . "&" id
  132            | . primary-exp "." "&" id
  133 id: . "identifier"
  134 bitor-exp: . "var" bitor-exp
  135          | . "const" "var" bitor-exp
  136 primary-exp: . lvalue
  137            | . lvalue args
  138 new: . "new" "identifier" args.opt
  139 bitor-exp: . new
  140 id: . "new"
  141 primary-exp: . routine formals block
  142 float-exp: . "float"
  143 duration: . "duration"
  144         | . duration "duration"
  150 dictionary: . "[" assocs "]"
  154 tuple: . "(" tuple.exps ")"
  155 literal-exp: . float-exp
  156            | . "angle"
  157            | . duration
  158            | . string
  159            | . "[" exps "]"
  160            | . dictionary
  161            | . tuple
  162 string: . "string"
  163       | . string "string"
  164 literal-exp: . "__HERE__"
  170 lvalue: . primary-exp "[" exps "]"
  171 literal-exp: . "this"
  172            | . "call"
  173 primary-exp: . literal-exp
  174            | . "(" exp ")"
  175            | . "(" error ")"
  176            | . primary-exp "**" primary-exp
  177 unary-exp: . primary-exp
  178          | . "--" lvalue
  179          | . "++" lvalue
  180          | . "+" unary-exp
  181          | . "-" unary-exp
  182          | . "!" unary-exp
  183          | . "compl" unary-exp
  184 bitor-exp: . unary-exp
  185          | . bitor-exp "+" bitor-exp
  186          | . bitor-exp "-" bitor-exp
  187          | . bitor-exp "*" bitor-exp
  188          | . bitor-exp "/" bitor-exp
  189          | . bitor-exp "%" bitor-exp
  190          | . bitor-exp "^" bitor-exp
  191          | . bitor-exp "<<" bitor-exp
  192          | . bitor-exp "bitand" bitor-exp
  193          | . bitor-exp "bitor" bitor-exp
  194          | . bitor-exp ">>" bitor-exp
  205 rel-exp: . bitor-exp rel-ops
  208 exp: . rel-exp
  209    | . exp "&&" exp
  210    | . exp "||" exp
  210    | exp "||" . exp
  211    | . exp "in" exp
  212    | . exp "!" "in" exp
  216    | . "%unscope:" unsigned
  217 primary-exp: . "%exp:" unsigned
  218 lvalue: . "%lvalue:" unsigned
  219       | . "%id:" unsigned
  220       | . primary-exp "." "%id:" unsigned
  221 primary-exp: . lvalue "(" "%exps:" unsigned ")"

    "__HERE__"    shift, and go to state 7
    "closure"     shift, and go to state 9
    "const"       shift, and go to state 10
    "function"    shift, and go to state 13
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "var"         shift, and go to state 25
    "watch"       shift, and go to state 27
    "&"           shift, and go to state 29
    "identifier"  shift, and go to state 35
    "class"       shift, and go to state 36
    "package"     shift, and go to state 37
    "--"          shift, and go to state 41
    "++"          shift, and go to state 42
    "do"          shift, and go to state 43
    "assert"      shift, and go to state 44
    "detach"      shift, and go to state 45
    "disown"      shift, and go to state 46
    "new"         shift, and go to state 47
    "angle"       shift, and go to state 48
    "duration"    shift, and go to state 49
    "float"       shift, and go to state 50
    "string"      shift, and go to state 51
    "call"        shift, and go to state 52
    "this"        shift, and go to state 53
    "!"           shift, and go to state 54
    "compl"       shift, and go to state 55
    "-"           shift, and go to state 56
    "+"           shift, and go to state 57
    "%unscope:"   shift, and go to state 58
    "%exp:"       shift, and go to state 59
    "%lvalue:"    shift, and go to state 60
    "%id:"        shift, and go to state 61

    block        go to state 66
    exp          go to state 264
    routine      go to state 99
    primary-exp  go to state 100
    detach       go to state 70
    lvalue       go to state 71
    id           go to state 101
    bitor-exp    go to state 73
    new          go to state 74
    float-exp    go to state 75
    duration     go to state 76
    dictionary   go to state 77
    tuple        go to state 78
    literal-exp  go to state 79
    string       go to state 80
    unary-exp    go to state 81
    rel-exp      go to state 82


state 165

  239 formal: . var.opt "identifier" typespec.opt
  240       | . var.opt "identifier" "=" exp typespec.opt
  241       | . var.opt "identifier" "[" "]"
  242 formals.1: . formal
  243          | . formals.1 "," formal
  244 formals.0: .  [")"]
  245          | . formals.1 comma.opt
  247 formals: "(" . formals.0 ")"
  252 var.opt: .  ["identifier"]
  253        | . "var"

    "var"  shift, and go to state 265

    "identifier"  reduce using rule 252 (var.opt)
    $default      reduce using rule 244 (formals.0)

    formal     go to state 266
    formals.1  go to state 267
    formals.0  go to state 268
    var.opt    go to state 269


state 166

   56 k1_id: "identifier" .

    $default  reduce using rule 56 (k1_id)


state 167

   57 k1_id: "this" . "." "identifier"

    "."  shift, and go to state 270


state 168

   54 stmt: routine k1_id . formals block
   58 k1_id: k1_id . "." "identifier"
  246 formals: .  ["{"]
  247        | . "(" formals.0 ")"

    "("  shift, and go to state 165
    "."  shift, and go to state 271

    $default  reduce using rule 246 (formals)

    formals  go to state 272


state 169

   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
  141 primary-exp: routine formals . block

    "{"  shift, and go to state 16

    block  go to state 273


state 170

   23 stmt: . primary-exp ":" stmt
   23     | primary-exp ":" . stmt
   24     | . exp
   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   37 exp: . "class" lvalue protos block
   38    | . "package" lvalue protos block
   43 stmt: . "enum" id "{" id.0 "}"
   47     | . "external" "identifier" "identifier"
   48     | . "external" "var" "identifier" "." "identifier" from "identifier"
   49     | . "external" event_or_function "(" unsigned ")" "identifier" "." "identifier" from "identifier"
   50     | . "import" lvalue
   51     | . exp "!" args.opt tilda.opt
   52 routine: . "closure"
   53        | . "function"
   54 stmt: . routine k1_id formals block
   55     | . id id formals block
   62 exp: . exp "=" exp
   63    | . exp "=" exp modifiers
   64    | . lvalue "+=" exp
   65    | . lvalue "-=" exp
   66    | . lvalue "*=" exp
   67    | . lvalue "/=" exp
   68    | . lvalue "^=" exp
   69    | . lvalue "%=" exp
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
   73 stmt: . "at" identifiers "(" exp tilda.opt ")" stmt onleave.opt
   74     | . "at" identifiers "(" event_match ")" stmt onleave.opt
   75     | . "every" "(" exp ")" stmt
   76     | . "if" "(" stmts ")" stmt else.opt
   77     | . "freezeif" "(" exp ")" stmt
   78     | . "stopif" "(" exp ")" stmt
   79     | . "switch" "(" exp ")" "{" cases default.opt "}"
   80     | . "timeout" "(" exp ")" stmt catch.opt else.opt finally.opt
   81     | . "return" exp.opt
   82     | . "break"
   83     | . "continue"
   84     | . "waituntil" "(" exp tilda.opt ")"
   85     | . "waituntil" "(" event_match ")"
   86     | . "whenever" "(" exp tilda.opt ")" stmt else.opt
   87     | . "whenever" "(" event_match ")" stmt else.opt
  108     | . "try" block catches.1 else.opt finally.opt
  109     | . "try" block "finally" block
  110     | . "throw" exp.opt
  111     | . "loop" stmt
  112     | . "for" "(" exp ")" stmt
  113     | . "for" "(" stmt.opt ";" exp ";" stmt.opt ")" stmt
  114     | . "for" "(" "var" "identifier" in_or_colon exp ")" stmt
  115     | . "while" "(" exp ")" stmt
  118 primary-exp: . block
  119            | . "do" "(" exp ")" block
  120 detach: . "detach"
  121       | . "disown"
  122 primary-exp: . "assert" "(" exp ")"
  123            | . "assert" "{" claims "}"
  124            | . detach "(" exp ")"
  125            | . detach block
  126            | . "isdef" "(" k1_id ")"
  127            | . "watch" "(" exp ")"
  128 lvalue: . id
  129       | . primary-exp "." id
  130       | . primary-exp "." "*"
  131 primary-exp: . "&" id
  132            | . primary-exp "." "&" id
  133 id: . "identifier"
  134 bitor-exp: . "var" bitor-exp
  135          | . "const" "var" bitor-exp
  136 primary-exp: . lvalue
  137            | . lvalue args
  138 new: . "new" "identifier" args.opt
  139 bitor-exp: . new
  140 id: . "new"
  141 primary-exp: . routine formals block
  142 float-exp: . "float"
  143 duration: . "duration"
  144         | . duration "duration"
  150 dictionary: . "[" assocs "]"
  154 tuple: . "(" tuple.exps ")"
  155 literal-exp: . float-exp
  156            | . "angle"
  157            | . duration
  158            | . string
  159            | . "[" exps "]"
  160            | . dictionary
  161            | . tuple
  162 string: . "string"
  163       | . string "string"
  164 literal-exp: . "__HERE__"
  170 lvalue: . primary-exp "[" exps "]"
  171 literal-exp: . "this"
  172            | . "call"
  173 primary-exp: . literal-exp
  174            | . "(" exp ")"
  175            | . "(" error ")"
  176            | . primary-exp "**" primary-exp
  177 unary-exp: . primary-exp
  178          | . "--" lvalue
  179          | . "++" lvalue
  180          | . "+" unary-exp
  181          | . "-" unary-exp
  182          | . "!" unary-exp
  183          | . "compl" unary-exp
  184 bitor-exp: . unary-exp
  185          | . bitor-exp "+" bitor-exp
  186          | . bitor-exp "-" bitor-exp
  187          | . bitor-exp "*" bitor-exp
  188          | . bitor-exp "/" bitor-exp
  189          | . bitor-exp "%" bitor-exp
  190          | . bitor-exp "^" bitor-exp
  191          | . bitor-exp "<<" bitor-exp
  192          | . bitor-exp "bitand" bitor-exp
  193          | . bitor-exp "bitor" bitor-exp
  194          | . bitor-exp ">>" bitor-exp
  205 rel-exp: . bitor-exp rel-ops
  208 exp: . rel-exp
  209    | . exp "&&" exp
  210    | . exp "||" exp
  211    | . exp "in" exp
  212    | . exp "!" "in" exp
  216    | . "%unscope:" unsigned
  217 primary-exp: . "%exp:" unsigned
  218 lvalue: . "%lvalue:" unsigned
  219       | . "%id:" unsigned
  220       | . primary-exp "." "%id:" unsigned
  221 primary-exp: . lvalue "(" "%exps:" unsigned ")"

    "__HERE__"    shift, and go to state 7
    "break"       shift, and go to state 8
    "closure"     shift, and go to state 9
    "const"       shift, and go to state 10
    "continue"    shift, and go to state 11
    "freezeif"    shift, and go to state 12
    "function"    shift, and go to state 13
    "if"          shift, and go to state 14
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "return"      shift, and go to state 19
    "stopif"      shift, and go to state 20
    "switch"      shift, and go to state 21
    "throw"       shift, and go to state 22
    "timeout"     shift, and go to state 23
    "try"         shift, and go to state 24
    "var"         shift, and go to state 25
    "waituntil"   shift, and go to state 26
    "watch"       shift, and go to state 27
    "whenever"    shift, and go to state 28
    "&"           shift, and go to state 29
    "every"       shift, and go to state 30
    "for"         shift, and go to state 31
    "loop"        shift, and go to state 32
    "while"       shift, and go to state 33
    "at"          shift, and go to state 34
    "identifier"  shift, and go to state 35
    "class"       shift, and go to state 36
    "package"     shift, and go to state 37
    "enum"        shift, and go to state 38
    "external"    shift, and go to state 39
    "import"      shift, and go to state 40
    "--"          shift, and go to state 41
    "++"          shift, and go to state 42
    "do"          shift, and go to state 43
    "assert"      shift, and go to state 44
    "detach"      shift, and go to state 45
    "disown"      shift, and go to state 46
    "new"         shift, and go to state 47
    "angle"       shift, and go to state 48
    "duration"    shift, and go to state 49
    "float"       shift, and go to state 50
    "string"      shift, and go to state 51
    "call"        shift, and go to state 52
    "this"        shift, and go to state 53
    "!"           shift, and go to state 54
    "compl"       shift, and go to state 55
    "-"           shift, and go to state 56
    "+"           shift, and go to state 57
    "%unscope:"   shift, and go to state 58
    "%exp:"       shift, and go to state 59
    "%lvalue:"    shift, and go to state 60
    "%id:"        shift, and go to state 61

    stmt         go to state 274
    block        go to state 66
    exp          go to state 67
    routine      go to state 68
    primary-exp  go to state 69
    detach       go to state 70
    lvalue       go to state 71
    id           go to state 72
    bitor-exp    go to state 73
    new          go to state 74
    float-exp    go to state 75
    duration     go to state 76
    dictionary   go to state 77
    tuple        go to state 78
    literal-exp  go to state 79
    string       go to state 80
    unary-exp    go to state 81
    rel-exp      go to state 82


state 171

   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   37 exp: . "class" lvalue protos block
   38    | . "package" lvalue protos block
   52 routine: . "closure"
   53        | . "function"
   62 exp: . exp "=" exp
   63    | . exp "=" exp modifiers
   64    | . lvalue "+=" exp
   65    | . lvalue "-=" exp
   66    | . lvalue "*=" exp
   67    | . lvalue "/=" exp
   68    | . lvalue "^=" exp
   69    | . lvalue "%=" exp
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
  118            | . block
  119            | . "do" "(" exp ")" block
  120 detach: . "detach"
  121       | . "disown"
  122 primary-exp: . "assert" "(" exp ")"
  123            | . "assert" "{" claims "}"
  124            | . detach "(" exp ")"
  125            | . detach block
  126            | . "isdef" "(" k1_id ")"
  127            | . "watch" "(" exp ")"
  128 lvalue: . id
  129       | . primary-exp "." id
  130       | . primary-exp "." "*"
  131 primary-exp: . "&" id
  132            | . primary-exp "." "&" id
  133 id: . "identifier"
  134 bitor-exp: . "var" bitor-exp
  135          | . "const" "var" bitor-exp
  136 primary-exp: . lvalue
  137            | . lvalue args
  138 new: . "new" "identifier" args.opt
  139 bitor-exp: . new
  140 id: . "new"
  141 primary-exp: . routine formals block
  142 float-exp: . "float"
  143 duration: . "duration"
  144         | . duration "duration"
  150 dictionary: . "[" assocs "]"
  154 tuple: . "(" tuple.exps ")"
  155 literal-exp: . float-exp
  156            | . "angle"
  157            | . duration
  158            | . string
  159            | . "[" exps "]"
  160            | . dictionary
  161            | . tuple
  162 string: . "string"
  163       | . string "string"
  164 literal-exp: . "__HERE__"
  170 lvalue: . primary-exp "[" exps "]"
  170       | primary-exp "[" . exps "]"
  171 literal-exp: . "this"
  172            | . "call"
  173 primary-exp: . literal-exp
  174            | . "(" exp ")"
  175            | . "(" error ")"
  176            | . primary-exp "**" primary-exp
  177 unary-exp: . primary-exp
  178          | . "--" lvalue
  179          | . "++" lvalue
  180          | . "+" unary-exp
  181          | . "-" unary-exp
  182          | . "!" unary-exp
  183          | . "compl" unary-exp
  184 bitor-exp: . unary-exp
  185          | . bitor-exp "+" bitor-exp
  186          | . bitor-exp "-" bitor-exp
  187          | . bitor-exp "*" bitor-exp
  188          | . bitor-exp "/" bitor-exp
  189          | . bitor-exp "%" bitor-exp
  190          | . bitor-exp "^" bitor-exp
  191          | . bitor-exp "<<" bitor-exp
  192          | . bitor-exp "bitand" bitor-exp
  193          | . bitor-exp "bitor" bitor-exp
  194          | . bitor-exp ">>" bitor-exp
  205 rel-exp: . bitor-exp rel-ops
  208 exp: . rel-exp
  209    | . exp "&&" exp
  210    | . exp "||" exp
  211    | . exp "in" exp
  212    | . exp "!" "in" exp
  216    | . "%unscope:" unsigned
  217 primary-exp: . "%exp:" unsigned
  218 lvalue: . "%lvalue:" unsigned
  219       | . "%id:" unsigned
  220       | . primary-exp "." "%id:" unsigned
  221 primary-exp: . lvalue "(" "%exps:" unsigned ")"
  226 exps: .  ["]"]
  227     | . exps.1 comma.opt
  228 exps.1: . exp
  229       | . exps.1 "," exp

    "__HERE__"    shift, and go to state 7
    "closure"     shift, and go to state 9
    "const"       shift, and go to state 10
    "function"    shift, and go to state 13
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "var"         shift, and go to state 25
    "watch"       shift, and go to state 27
    "&"           shift, and go to state 29
    "identifier"  shift, and go to state 35
    "class"       shift, and go to state 36
    "package"     shift, and go to state 37
    "--"          shift, and go to state 41
    "++"          shift, and go to state 42
    "do"          shift, and go to state 43
    "assert"      shift, and go to state 44
    "detach"      shift, and go to state 45
    "disown"      shift, and go to state 46
    "new"         shift, and go to state 47
    "angle"       shift, and go to state 48
    "duration"    shift, and go to state 49
    "float"       shift, and go to state 50
    "string"      shift, and go to state 51
    "call"        shift, and go to state 52
    "this"        shift, and go to state 53
    "!"           shift, and go to state 54
    "compl"       shift, and go to state 55
    "-"           shift, and go to state 56
    "+"           shift, and go to state 57
    "%unscope:"   shift, and go to state 58
    "%exp:"       shift, and go to state 59
    "%lvalue:"    shift, and go to state 60
    "%id:"        shift, and go to state 61

    $default  reduce using rule 226 (exps)

    block        go to state 66
    exp          go to state 275
    routine      go to state 99
    primary-exp  go to state 100
    detach       go to state 70
    lvalue       go to state 71
    id           go to state 101
    bitor-exp    go to state 73
    new          go to state 74
    float-exp    go to state 75
    duration     go to state 76
    dictionary   go to state 77
    tuple        go to state 78
    literal-exp  go to state 79
    string       go to state 80
    unary-exp    go to state 81
    rel-exp      go to state 82
    exps         go to state 276
    exps.1       go to state 106


state 172

  129 lvalue: primary-exp "." . id
  130       | primary-exp "." . "*"
  132 primary-exp: primary-exp "." . "&" id
  133 id: . "identifier"
  140   | . "new"
  220 lvalue: primary-exp "." . "%id:" unsigned

    "&"           shift, and go to state 277
    "identifier"  shift, and go to state 35
    "new"         shift, and go to state 124
    "*"           shift, and go to state 278
    "%id:"        shift, and go to state 279

    id  go to state 280


state 173

   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   52 routine: . "closure"
   53        | . "function"
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
  118            | . block
  119            | . "do" "(" exp ")" block
  120 detach: . "detach"
  121       | . "disown"
  122 primary-exp: . "assert" "(" exp ")"
  123            | . "assert" "{" claims "}"
  124            | . detach "(" exp ")"
  125            | . detach block
  126            | . "isdef" "(" k1_id ")"
  127            | . "watch" "(" exp ")"
  128 lvalue: . id
  129       | . primary-exp "." id
  130       | . primary-exp "." "*"
  131 primary-exp: . "&" id
  132            | . primary-exp "." "&" id
  133 id: . "identifier"
  136 primary-exp: . lvalue
  137            | . lvalue args
  140 id: . "new"
  141 primary-exp: . routine formals block
  142 float-exp: . "float"
  143 duration: . "duration"
  144         | . duration "duration"
  150 dictionary: . "[" assocs "]"
  154 tuple: . "(" tuple.exps ")"
  155 literal-exp: . float-exp
  156            | . "angle"
  157            | . duration
  158            | . string
  159            | . "[" exps "]"
  160            | . dictionary
  161            | . tuple
  162 string: . "string"
  163       | . string "string"
  164 literal-exp: . "__HERE__"
  170 lvalue: . primary-exp "[" exps "]"
  171 literal-exp: . "this"
  172            | . "call"
  173 primary-exp: . literal-exp
  174            | . "(" exp ")"
  175            | . "(" error ")"
  176            | . primary-exp "**" primary-exp
  176            | primary-exp "**" . primary-exp
  217            | . "%exp:" unsigned
  218 lvalue: . "%lvalue:" unsigned
  219       | . "%id:" unsigned
  220       | . primary-exp "." "%id:" unsigned
  221 primary-exp: . lvalue "(" "%exps:" unsigned ")"

    "__HERE__"    shift, and go to state 7
    "closure"     shift, and go to state 9
    "function"    shift, and go to state 13
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "watch"       shift, and go to state 27
    "&"           shift, and go to state 29
    "identifier"  shift, and go to state 35
    "do"          shift, and go to state 43
    "assert"      shift, and go to state 44
    "detach"      shift, and go to state 45
    "disown"      shift, and go to state 46
    "new"         shift, and go to state 124
    "angle"       shift, and go to state 48
    "duration"    shift, and go to state 49
    "float"       shift, and go to state 50
    "string"      shift, and go to state 51
    "call"        shift, and go to state 52
    "this"        shift, and go to state 53
    "%exp:"       shift, and go to state 59
    "%lvalue:"    shift, and go to state 60
    "%id:"        shift, and go to state 61

    block        go to state 66
    routine      go to state 99
    primary-exp  go to state 281
    detach       go to state 70
    lvalue       go to state 119
    id           go to state 101
    float-exp    go to state 75
    duration     go to state 76
    dictionary   go to state 77
    tuple        go to state 78
    literal-exp  go to state 79
    string       go to state 80


state 174

   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   37 exp: . "class" lvalue protos block
   38    | . "package" lvalue protos block
   52 routine: . "closure"
   53        | . "function"
   62 exp: . exp "=" exp
   63    | . exp "=" exp modifiers
   64    | . lvalue "+=" exp
   65    | . lvalue "-=" exp
   66    | . lvalue "*=" exp
   67    | . lvalue "/=" exp
   68    | . lvalue "^=" exp
   69    | . lvalue "%=" exp
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
  118            | . block
  119            | . "do" "(" exp ")" block
  120 detach: . "detach"
  121       | . "disown"
  122 primary-exp: . "assert" "(" exp ")"
  123            | . "assert" "{" claims "}"
  124            | . detach "(" exp ")"
  124            | detach "(" . exp ")"
  125            | . detach block
  126            | . "isdef" "(" k1_id ")"
  127            | . "watch" "(" exp ")"
  128 lvalue: . id
  129       | . primary-exp "." id
  130       | . primary-exp "." "*"
  131 primary-exp: . "&" id
  132            | . primary-exp "." "&" id
  133 id: . "identifier"
  134 bitor-exp: . "var" bitor-exp
  135          | . "const" "var" bitor-exp
  136 primary-exp: . lvalue
  137            | . lvalue args
  138 new: . "new" "identifier" args.opt
  139 bitor-exp: . new
  140 id: . "new"
  141 primary-exp: . routine formals block
  142 float-exp: . "float"
  143 duration: . "duration"
  144         | . duration "duration"
  150 dictionary: . "[" assocs "]"
  154 tuple: . "(" tuple.exps ")"
  155 literal-exp: . float-exp
  156            | . "angle"
  157            | . duration
  158            | . string
  159            | . "[" exps "]"
  160            | . dictionary
  161            | . tuple
  162 string: . "string"
  163       | . string "string"
  164 literal-exp: . "__HERE__"
  170 lvalue: . primary-exp "[" exps "]"
  171 literal-exp: . "this"
  172            | . "call"
  173 primary-exp: . literal-exp
  174            | . "(" exp ")"
  175            | . "(" error ")"
  176            | . primary-exp "**" primary-exp
  177 unary-exp: . primary-exp
  178          | . "--" lvalue
  179          | . "++" lvalue
  180          | . "+" unary-exp
  181          | . "-" unary-exp
  182          | . "!" unary-exp
  183          | . "compl" unary-exp
  184 bitor-exp: . unary-exp
  185          | . bitor-exp "+" bitor-exp
  186          | . bitor-exp "-" bitor-exp
  187          | . bitor-exp "*" bitor-exp
  188          | . bitor-exp "/" bitor-exp
  189          | . bitor-exp "%" bitor-exp
  190          | . bitor-exp "^" bitor-exp
  191          | . bitor-exp "<<" bitor-exp
  192          | . bitor-exp "bitand" bitor-exp
  193          | . bitor-exp "bitor" bitor-exp
  194          | . bitor-exp ">>" bitor-exp
  205 rel-exp: . bitor-exp rel-ops
  208 exp: . rel-exp
  209    | . exp "&&" exp
  210    | . exp "||" exp
  211    | . exp "in" exp
  212    | . exp "!" "in" exp
  216    | . "%unscope:" unsigned
  217 primary-exp: . "%exp:" unsigned
  218 lvalue: . "%lvalue:" unsigned
  219       | . "%id:" unsigned
  220       | . primary-exp "." "%id:" unsigned
  221 primary-exp: . lvalue "(" "%exps:" unsigned ")"

    "__HERE__"    shift, and go to state 7
    "closure"     shift, and go to state 9
    "const"       shift, and go to state 10
    "function"    shift, and go to state 13
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "var"         shift, and go to state 25
    "watch"       shift, and go to state 27
    "&"           shift, and go to state 29
    "identifier"  shift, and go to state 35
    "class"       shift, and go to state 36
    "package"     shift, and go to state 37
    "--"          shift, and go to state 41
    "++"          shift, and go to state 42
    "do"          shift, and go to state 43
    "assert"      shift, and go to state 44
    "detach"      shift, and go to state 45
    "disown"      shift, and go to state 46
    "new"         shift, and go to state 47
    "angle"       shift, and go to state 48
    "duration"    shift, and go to state 49
    "float"       shift, and go to state 50
    "string"      shift, and go to state 51
    "call"        shift, and go to state 52
    "this"        shift, and go to state 53
    "!"           shift, and go to state 54
    "compl"       shift, and go to state 55
    "-"           shift, and go to state 56
    "+"           shift, and go to state 57
    "%unscope:"   shift, and go to state 58
    "%exp:"       shift, and go to state 59
    "%lvalue:"    shift, and go to state 60
    "%id:"        shift, and go to state 61

    block        go to state 66
    exp          go to state 282
    routine      go to state 99
    primary-exp  go to state 100
    detach       go to state 70
    lvalue       go to state 71
    id           go to state 101
    bitor-exp    go to state 73
    new          go to state 74
    float-exp    go to state 75
    duration     go to state 76
    dictionary   go to state 77
    tuple        go to state 78
    literal-exp  go to state 79
    string       go to state 80
    unary-exp    go to state 81
    rel-exp      go to state 82


state 175

  125 primary-exp: detach block .

    $default  reduce using rule 125 (primary-exp)


state 176

   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   37 exp: . "class" lvalue protos block
   38    | . "package" lvalue protos block
   52 routine: . "closure"
   53        | . "function"
   62 exp: . exp "=" exp
   63    | . exp "=" exp modifiers
   64    | . lvalue "+=" exp
   65    | . lvalue "-=" exp
   66    | . lvalue "*=" exp
   67    | . lvalue "/=" exp
   68    | . lvalue "^=" exp
   69    | . lvalue "%=" exp
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
  118            | . block
  119            | . "do" "(" exp ")" block
  120 detach: . "detach"
  121       | . "disown"
  122 primary-exp: . "assert" "(" exp ")"
  123            | . "assert" "{" claims "}"
  124            | . detach "(" exp ")"
  125            | . detach block
  126            | . "isdef" "(" k1_id ")"
  127            | . "watch" "(" exp ")"
  128 lvalue: . id
  129       | . primary-exp "." id
  130       | . primary-exp "." "*"
  131 primary-exp: . "&" id
  132            | . primary-exp "." "&" id
  133 id: . "identifier"
  134 bitor-exp: . "var" bitor-exp
  135          | . "const" "var" bitor-exp
  136 primary-exp: . lvalue
  137            | . lvalue args
  138 new: . "new" "identifier" args.opt
  139 bitor-exp: . new
  140 id: . "new"
  141 primary-exp: . routine formals block
  142 float-exp: . "float"
  143 duration: . "duration"
  144         | . duration "duration"
  150 dictionary: . "[" assocs "]"
  154 tuple: . "(" tuple.exps ")"
  155 literal-exp: . float-exp
  156            | . "angle"
  157            | . duration
  158            | . string
  159            | . "[" exps "]"
  160            | . dictionary
  161            | . tuple
  162 string: . "string"
  163       | . string "string"
  164 literal-exp: . "__HERE__"
  170 lvalue: . primary-exp "[" exps "]"
  171 literal-exp: . "this"
  172            | . "call"
  173 primary-exp: . literal-exp
  174            | . "(" exp ")"
  175            | . "(" error ")"
  176            | . primary-exp "**" primary-exp
  177 unary-exp: . primary-exp
  178          | . "--" lvalue
  179          | . "++" lvalue
  180          | . "+" unary-exp
  181          | . "-" unary-exp
  182          | . "!" unary-exp
  183          | . "compl" unary-exp
  184 bitor-exp: . unary-exp
  185          | . bitor-exp "+" bitor-exp
  186          | . bitor-exp "-" bitor-exp
  187          | . bitor-exp "*" bitor-exp
  188          | . bitor-exp "/" bitor-exp
  189          | . bitor-exp "%" bitor-exp
  190          | . bitor-exp "^" bitor-exp
  191          | . bitor-exp "<<" bitor-exp
  192          | . bitor-exp "bitand" bitor-exp
  193          | . bitor-exp "bitor" bitor-exp
  194          | . bitor-exp ">>" bitor-exp
  205 rel-exp: . bitor-exp rel-ops
  208 exp: . rel-exp
  209    | . exp "&&" exp
  210    | . exp "||" exp
  211    | . exp "in" exp
  212    | . exp "!" "in" exp
  216    | . "%unscope:" unsigned
  217 primary-exp: . "%exp:" unsigned
  218 lvalue: . "%lvalue:" unsigned
  219       | . "%id:" unsigned
  220       | . primary-exp "." "%id:" unsigned
  221 primary-exp: . lvalue "(" "%exps:" unsigned ")"
  221            | lvalue "(" . "%exps:" unsigned ")"
  226 exps: .  [")"]
  227     | . exps.1 comma.opt
  228 exps.1: . exp
  229       | . exps.1 "," exp
  231 args: "(" . exps ")"

    "__HERE__"    shift, and go to state 7
    "closure"     shift, and go to state 9
    "const"       shift, and go to state 10
    "function"    shift, and go to state 13
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "var"         shift, and go to state 25
    "watch"       shift, and go to state 27
    "&"           shift, and go to state 29
    "identifier"  shift, and go to state 35
    "class"       shift, and go to state 36
    "package"     shift, and go to state 37
    "--"          shift, and go to state 41
    "++"          shift, and go to state 42
    "do"          shift, and go to state 43
    "assert"      shift, and go to state 44
    "detach"      shift, and go to state 45
    "disown"      shift, and go to state 46
    "new"         shift, and go to state 47
    "angle"       shift, and go to state 48
    "duration"    shift, and go to state 49
    "float"       shift, and go to state 50
    "string"      shift, and go to state 51
    "call"        shift, and go to state 52
    "this"        shift, and go to state 53
    "!"           shift, and go to state 54
    "compl"       shift, and go to state 55
    "-"           shift, and go to state 56
    "+"           shift, and go to state 57
    "%unscope:"   shift, and go to state 58
    "%exp:"       shift, and go to state 59
    "%lvalue:"    shift, and go to state 60
    "%id:"        shift, and go to state 61
    "%exps:"      shift, and go to state 283

    $default  reduce using rule 226 (exps)

    block        go to state 66
    exp          go to state 275
    routine      go to state 99
    primary-exp  go to state 100
    detach       go to state 70
    lvalue       go to state 71
    id           go to state 101
    bitor-exp    go to state 73
    new          go to state 74
    float-exp    go to state 75
    duration     go to state 76
    dictionary   go to state 77
    tuple        go to state 78
    literal-exp  go to state 79
    string       go to state 80
    unary-exp    go to state 81
    rel-exp      go to state 82
    exps         go to state 284
    exps.1       go to state 106


state 177

   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   37 exp: . "class" lvalue protos block
   38    | . "package" lvalue protos block
   52 routine: . "closure"
   53        | . "function"
   62 exp: . exp "=" exp
   63    | . exp "=" exp modifiers
   64    | . lvalue "+=" exp
   65    | . lvalue "-=" exp
   66    | . lvalue "*=" exp
   67    | . lvalue "/=" exp
   68    | . lvalue "^=" exp
   68    | lvalue "^=" . exp
   69    | . lvalue "%=" exp
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
  118            | . block
  119            | . "do" "(" exp ")" block
  120 detach: . "detach"
  121       | . "disown"
  122 primary-exp: . "assert" "(" exp ")"
  123            | . "assert" "{" claims "}"
  124            | . detach "(" exp ")"
  125            | . detach block
  126            | . "isdef" "(" k1_id ")"
  127            | . "watch" "(" exp ")"
  128 lvalue: . id
  129       | . primary-exp "." id
  130       | . primary-exp "." "*"
  131 primary-exp: . "&" id
  132            | . primary-exp "." "&" id
  133 id: . "identifier"
  134 bitor-exp: . "var" bitor-exp
  135          | . "const" "var" bitor-exp
  136 primary-exp: . lvalue
  137            | . lvalue args
  138 new: . "new" "identifier" args.opt
  139 bitor-exp: . new
  140 id: . "new"
  141 primary-exp: . routine formals block
  142 float-exp: . "float"
  143 duration: . "duration"
  144         | . duration "duration"
  150 dictionary: . "[" assocs "]"
  154 tuple: . "(" tuple.exps ")"
  155 literal-exp: . float-exp
  156            | . "angle"
  157            | . duration
  158            | . string
  159            | . "[" exps "]"
  160            | . dictionary
  161            | . tuple
  162 string: . "string"
  163       | . string "string"
  164 literal-exp: . "__HERE__"
  170 lvalue: . primary-exp "[" exps "]"
  171 literal-exp: . "this"
  172            | . "call"
  173 primary-exp: . literal-exp
  174            | . "(" exp ")"
  175            | . "(" error ")"
  176            | . primary-exp "**" primary-exp
  177 unary-exp: . primary-exp
  178          | . "--" lvalue
  179          | . "++" lvalue
  180          | . "+" unary-exp
  181          | . "-" unary-exp
  182          | . "!" unary-exp
  183          | . "compl" unary-exp
  184 bitor-exp: . unary-exp
  185          | . bitor-exp "+" bitor-exp
  186          | . bitor-exp "-" bitor-exp
  187          | . bitor-exp "*" bitor-exp
  188          | . bitor-exp "/" bitor-exp
  189          | . bitor-exp "%" bitor-exp
  190          | . bitor-exp "^" bitor-exp
  191          | . bitor-exp "<<" bitor-exp
  192          | . bitor-exp "bitand" bitor-exp
  193          | . bitor-exp "bitor" bitor-exp
  194          | . bitor-exp ">>" bitor-exp
  205 rel-exp: . bitor-exp rel-ops
  208 exp: . rel-exp
  209    | . exp "&&" exp
  210    | . exp "||" exp
  211    | . exp "in" exp
  212    | . exp "!" "in" exp
  216    | . "%unscope:" unsigned
  217 primary-exp: . "%exp:" unsigned
  218 lvalue: . "%lvalue:" unsigned
  219       | . "%id:" unsigned
  220       | . primary-exp "." "%id:" unsigned
  221 primary-exp: . lvalue "(" "%exps:" unsigned ")"

    "__HERE__"    shift, and go to state 7
    "closure"     shift, and go to state 9
    "const"       shift, and go to state 10
    "function"    shift, and go to state 13
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "var"         shift, and go to state 25
    "watch"       shift, and go to state 27
    "&"           shift, and go to state 29
    "identifier"  shift, and go to state 35
    "class"       shift, and go to state 36
    "package"     shift, and go to state 37
    "--"          shift, and go to state 41
    "++"          shift, and go to state 42
    "do"          shift, and go to state 43
    "assert"      shift, and go to state 44
    "detach"      shift, and go to state 45
    "disown"      shift, and go to state 46
    "new"         shift, and go to state 47
    "angle"       shift, and go to state 48
    "duration"    shift, and go to state 49
    "float"       shift, and go to state 50
    "string"      shift, and go to state 51
    "call"        shift, and go to state 52
    "this"        shift, and go to state 53
    "!"           shift, and go to state 54
    "compl"       shift, and go to state 55
    "-"           shift, and go to state 56
    "+"           shift, and go to state 57
    "%unscope:"   shift, and go to state 58
    "%exp:"       shift, and go to state 59
    "%lvalue:"    shift, and go to state 60
    "%id:"        shift, and go to state 61

    block        go to state 66
    exp          go to state 285
    routine      go to state 99
    primary-exp  go to state 100
    detach       go to state 70
    lvalue       go to state 71
    id           go to state 101
    bitor-exp    go to state 73
    new          go to state 74
    float-exp    go to state 75
    duration     go to state 76
    dictionary   go to state 77
    tuple        go to state 78
    literal-exp  go to state 79
    string       go to state 80
    unary-exp    go to state 81
    rel-exp      go to state 82


state 178

   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   37 exp: . "class" lvalue protos block
   38    | . "package" lvalue protos block
   52 routine: . "closure"
   53        | . "function"
   62 exp: . exp "=" exp
   63    | . exp "=" exp modifiers
   64    | . lvalue "+=" exp
   65    | . lvalue "-=" exp
   65    | lvalue "-=" . exp
   66    | . lvalue "*=" exp
   67    | . lvalue "/=" exp
   68    | . lvalue "^=" exp
   69    | . lvalue "%=" exp
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
  118            | . block
  119            | . "do" "(" exp ")" block
  120 detach: . "detach"
  121       | . "disown"
  122 primary-exp: . "assert" "(" exp ")"
  123            | . "assert" "{" claims "}"
  124            | . detach "(" exp ")"
  125            | . detach block
  126            | . "isdef" "(" k1_id ")"
  127            | . "watch" "(" exp ")"
  128 lvalue: . id
  129       | . primary-exp "." id
  130       | . primary-exp "." "*"
  131 primary-exp: . "&" id
  132            | . primary-exp "." "&" id
  133 id: . "identifier"
  134 bitor-exp: . "var" bitor-exp
  135          | . "const" "var" bitor-exp
  136 primary-exp: . lvalue
  137            | . lvalue args
  138 new: . "new" "identifier" args.opt
  139 bitor-exp: . new
  140 id: . "new"
  141 primary-exp: . routine formals block
  142 float-exp: . "float"
  143 duration: . "duration"
  144         | . duration "duration"
  150 dictionary: . "[" assocs "]"
  154 tuple: . "(" tuple.exps ")"
  155 literal-exp: . float-exp
  156            | . "angle"
  157            | . duration
  158            | . string
  159            | . "[" exps "]"
  160            | . dictionary
  161            | . tuple
  162 string: . "string"
  163       | . string "string"
  164 literal-exp: . "__HERE__"
  170 lvalue: . primary-exp "[" exps "]"
  171 literal-exp: . "this"
  172            | . "call"
  173 primary-exp: . literal-exp
  174            | . "(" exp ")"
  175            | . "(" error ")"
  176            | . primary-exp "**" primary-exp
  177 unary-exp: . primary-exp
  178          | . "--" lvalue
  179          | . "++" lvalue
  180          | . "+" unary-exp
  181          | . "-" unary-exp
  182          | . "!" unary-exp
  183          | . "compl" unary-exp
  184 bitor-exp: . unary-exp
  185          | . bitor-exp "+" bitor-exp
  186          | . bitor-exp "-" bitor-exp
  187          | . bitor-exp "*" bitor-exp
  188          | . bitor-exp "/" bitor-exp
  189          | . bitor-exp "%" bitor-exp
  190          | . bitor-exp "^" bitor-exp
  191          | . bitor-exp "<<" bitor-exp
  192          | . bitor-exp "bitand" bitor-exp
  193          | . bitor-exp "bitor" bitor-exp
  194          | . bitor-exp ">>" bitor-exp
  205 rel-exp: . bitor-exp rel-ops
  208 exp: . rel-exp
  209    | . exp "&&" exp
  210    | . exp "||" exp
  211    | . exp "in" exp
  212    | . exp "!" "in" exp
  216    | . "%unscope:" unsigned
  217 primary-exp: . "%exp:" unsigned
  218 lvalue: . "%lvalue:" unsigned
  219       | . "%id:" unsigned
  220       | . primary-exp "." "%id:" unsigned
  221 primary-exp: . lvalue "(" "%exps:" unsigned ")"

    "__HERE__"    shift, and go to state 7
    "closure"     shift, and go to state 9
    "const"       shift, and go to state 10
    "function"    shift, and go to state 13
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "var"         shift, and go to state 25
    "watch"       shift, and go to state 27
    "&"           shift, and go to state 29
    "identifier"  shift, and go to state 35
    "class"       shift, and go to state 36
    "package"     shift, and go to state 37
    "--"          shift, and go to state 41
    "++"          shift, and go to state 42
    "do"          shift, and go to state 43
    "assert"      shift, and go to state 44
    "detach"      shift, and go to state 45
    "disown"      shift, and go to state 46
    "new"         shift, and go to state 47
    "angle"       shift, and go to state 48
    "duration"    shift, and go to state 49
    "float"       shift, and go to state 50
    "string"      shift, and go to state 51
    "call"        shift, and go to state 52
    "this"        shift, and go to state 53
    "!"           shift, and go to state 54
    "compl"       shift, and go to state 55
    "-"           shift, and go to state 56
    "+"           shift, and go to state 57
    "%unscope:"   shift, and go to state 58
    "%exp:"       shift, and go to state 59
    "%lvalue:"    shift, and go to state 60
    "%id:"        shift, and go to state 61

    block        go to state 66
    exp          go to state 286
    routine      go to state 99
    primary-exp  go to state 100
    detach       go to state 70
    lvalue       go to state 71
    id           go to state 101
    bitor-exp    go to state 73
    new          go to state 74
    float-exp    go to state 75
    duration     go to state 76
    dictionary   go to state 77
    tuple        go to state 78
    literal-exp  go to state 79
    string       go to state 80
    unary-exp    go to state 81
    rel-exp      go to state 82


state 179

   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   37 exp: . "class" lvalue protos block
   38    | . "package" lvalue protos block
   52 routine: . "closure"
   53        | . "function"
   62 exp: . exp "=" exp
   63    | . exp "=" exp modifiers
   64    | . lvalue "+=" exp
   65    | . lvalue "-=" exp
   66    | . lvalue "*=" exp
   67    | . lvalue "/=" exp
   68    | . lvalue "^=" exp
   69    | . lvalue "%=" exp
   69    | lvalue "%=" . exp
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
  118            | . block
  119            | . "do" "(" exp ")" block
  120 detach: . "detach"
  121       | . "disown"
  122 primary-exp: . "assert" "(" exp ")"
  123            | . "assert" "{" claims "}"
  124            | . detach "(" exp ")"
  125            | . detach block
  126            | . "isdef" "(" k1_id ")"
  127            | . "watch" "(" exp ")"
  128 lvalue: . id
  129       | . primary-exp "." id
  130       | . primary-exp "." "*"
  131 primary-exp: . "&" id
  132            | . primary-exp "." "&" id
  133 id: . "identifier"
  134 bitor-exp: . "var" bitor-exp
  135          | . "const" "var" bitor-exp
  136 primary-exp: . lvalue
  137            | . lvalue args
  138 new: . "new" "identifier" args.opt
  139 bitor-exp: . new
  140 id: . "new"
  141 primary-exp: . routine formals block
  142 float-exp: . "float"
  143 duration: . "duration"
  144         | . duration "duration"
  150 dictionary: . "[" assocs "]"
  154 tuple: . "(" tuple.exps ")"
  155 literal-exp: . float-exp
  156            | . "angle"
  157            | . duration
  158            | . string
  159            | . "[" exps "]"
  160            | . dictionary
  161            | . tuple
  162 string: . "string"
  163       | . string "string"
  164 literal-exp: . "__HERE__"
  170 lvalue: . primary-exp "[" exps "]"
  171 literal-exp: . "this"
  172            | . "call"
  173 primary-exp: . literal-exp
  174            | . "(" exp ")"
  175            | . "(" error ")"
  176            | . primary-exp "**" primary-exp
  177 unary-exp: . primary-exp
  178          | . "--" lvalue
  179          | . "++" lvalue
  180          | . "+" unary-exp
  181          | . "-" unary-exp
  182          | . "!" unary-exp
  183          | . "compl" unary-exp
  184 bitor-exp: . unary-exp
  185          | . bitor-exp "+" bitor-exp
  186          | . bitor-exp "-" bitor-exp
  187          | . bitor-exp "*" bitor-exp
  188          | . bitor-exp "/" bitor-exp
  189          | . bitor-exp "%" bitor-exp
  190          | . bitor-exp "^" bitor-exp
  191          | . bitor-exp "<<" bitor-exp
  192          | . bitor-exp "bitand" bitor-exp
  193          | . bitor-exp "bitor" bitor-exp
  194          | . bitor-exp ">>" bitor-exp
  205 rel-exp: . bitor-exp rel-ops
  208 exp: . rel-exp
  209    | . exp "&&" exp
  210    | . exp "||" exp
  211    | . exp "in" exp
  212    | . exp "!" "in" exp
  216    | . "%unscope:" unsigned
  217 primary-exp: . "%exp:" unsigned
  218 lvalue: . "%lvalue:" unsigned
  219       | . "%id:" unsigned
  220       | . primary-exp "." "%id:" unsigned
  221 primary-exp: . lvalue "(" "%exps:" unsigned ")"

    "__HERE__"    shift, and go to state 7
    "closure"     shift, and go to state 9
    "const"       shift, and go to state 10
    "function"    shift, and go to state 13
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "var"         shift, and go to state 25
    "watch"       shift, and go to state 27
    "&"           shift, and go to state 29
    "identifier"  shift, and go to state 35
    "class"       shift, and go to state 36
    "package"     shift, and go to state 37
    "--"          shift, and go to state 41
    "++"          shift, and go to state 42
    "do"          shift, and go to state 43
    "assert"      shift, and go to state 44
    "detach"      shift, and go to state 45
    "disown"      shift, and go to state 46
    "new"         shift, and go to state 47
    "angle"       shift, and go to state 48
    "duration"    shift, and go to state 49
    "float"       shift, and go to state 50
    "string"      shift, and go to state 51
    "call"        shift, and go to state 52
    "this"        shift, and go to state 53
    "!"           shift, and go to state 54
    "compl"       shift, and go to state 55
    "-"           shift, and go to state 56
    "+"           shift, and go to state 57
    "%unscope:"   shift, and go to state 58
    "%exp:"       shift, and go to state 59
    "%lvalue:"    shift, and go to state 60
    "%id:"        shift, and go to state 61

    block        go to state 66
    exp          go to state 287
    routine      go to state 99
    primary-exp  go to state 100
    detach       go to state 70
    lvalue       go to state 71
    id           go to state 101
    bitor-exp    go to state 73
    new          go to state 74
    float-exp    go to state 75
    duration     go to state 76
    dictionary   go to state 77
    tuple        go to state 78
    literal-exp  go to state 79
    string       go to state 80
    unary-exp    go to state 81
    rel-exp      go to state 82


state 180

   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   37 exp: . "class" lvalue protos block
   38    | . "package" lvalue protos block
   52 routine: . "closure"
   53        | . "function"
   62 exp: . exp "=" exp
   63    | . exp "=" exp modifiers
   64    | . lvalue "+=" exp
   64    | lvalue "+=" . exp
   65    | . lvalue "-=" exp
   66    | . lvalue "*=" exp
   67    | . lvalue "/=" exp
   68    | . lvalue "^=" exp
   69    | . lvalue "%=" exp
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
  118            | . block
  119            | . "do" "(" exp ")" block
  120 detach: . "detach"
  121       | . "disown"
  122 primary-exp: . "assert" "(" exp ")"
  123            | . "assert" "{" claims "}"
  124            | . detach "(" exp ")"
  125            | . detach block
  126            | . "isdef" "(" k1_id ")"
  127            | . "watch" "(" exp ")"
  128 lvalue: . id
  129       | . primary-exp "." id
  130       | . primary-exp "." "*"
  131 primary-exp: . "&" id
  132            | . primary-exp "." "&" id
  133 id: . "identifier"
  134 bitor-exp: . "var" bitor-exp
  135          | . "const" "var" bitor-exp
  136 primary-exp: . lvalue
  137            | . lvalue args
  138 new: . "new" "identifier" args.opt
  139 bitor-exp: . new
  140 id: . "new"
  141 primary-exp: . routine formals block
  142 float-exp: . "float"
  143 duration: . "duration"
  144         | . duration "duration"
  150 dictionary: . "[" assocs "]"
  154 tuple: . "(" tuple.exps ")"
  155 literal-exp: . float-exp
  156            | . "angle"
  157            | . duration
  158            | . string
  159            | . "[" exps "]"
  160            | . dictionary
  161            | . tuple
  162 string: . "string"
  163       | . string "string"
  164 literal-exp: . "__HERE__"
  170 lvalue: . primary-exp "[" exps "]"
  171 literal-exp: . "this"
  172            | . "call"
  173 primary-exp: . literal-exp
  174            | . "(" exp ")"
  175            | . "(" error ")"
  176            | . primary-exp "**" primary-exp
  177 unary-exp: . primary-exp
  178          | . "--" lvalue
  179          | . "++" lvalue
  180          | . "+" unary-exp
  181          | . "-" unary-exp
  182          | . "!" unary-exp
  183          | . "compl" unary-exp
  184 bitor-exp: . unary-exp
  185          | . bitor-exp "+" bitor-exp
  186          | . bitor-exp "-" bitor-exp
  187          | . bitor-exp "*" bitor-exp
  188          | . bitor-exp "/" bitor-exp
  189          | . bitor-exp "%" bitor-exp
  190          | . bitor-exp "^" bitor-exp
  191          | . bitor-exp "<<" bitor-exp
  192          | . bitor-exp "bitand" bitor-exp
  193          | . bitor-exp "bitor" bitor-exp
  194          | . bitor-exp ">>" bitor-exp
  205 rel-exp: . bitor-exp rel-ops
  208 exp: . rel-exp
  209    | . exp "&&" exp
  210    | . exp "||" exp
  211    | . exp "in" exp
  212    | . exp "!" "in" exp
  216    | . "%unscope:" unsigned
  217 primary-exp: . "%exp:" unsigned
  218 lvalue: . "%lvalue:" unsigned
  219       | . "%id:" unsigned
  220       | . primary-exp "." "%id:" unsigned
  221 primary-exp: . lvalue "(" "%exps:" unsigned ")"

    "__HERE__"    shift, and go to state 7
    "closure"     shift, and go to state 9
    "const"       shift, and go to state 10
    "function"    shift, and go to state 13
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "var"         shift, and go to state 25
    "watch"       shift, and go to state 27
    "&"           shift, and go to state 29
    "identifier"  shift, and go to state 35
    "class"       shift, and go to state 36
    "package"     shift, and go to state 37
    "--"          shift, and go to state 41
    "++"          shift, and go to state 42
    "do"          shift, and go to state 43
    "assert"      shift, and go to state 44
    "detach"      shift, and go to state 45
    "disown"      shift, and go to state 46
    "new"         shift, and go to state 47
    "angle"       shift, and go to state 48
    "duration"    shift, and go to state 49
    "float"       shift, and go to state 50
    "string"      shift, and go to state 51
    "call"        shift, and go to state 52
    "this"        shift, and go to state 53
    "!"           shift, and go to state 54
    "compl"       shift, and go to state 55
    "-"           shift, and go to state 56
    "+"           shift, and go to state 57
    "%unscope:"   shift, and go to state 58
    "%exp:"       shift, and go to state 59
    "%lvalue:"    shift, and go to state 60
    "%id:"        shift, and go to state 61

    block        go to state 66
    exp          go to state 288
    routine      go to state 99
    primary-exp  go to state 100
    detach       go to state 70
    lvalue       go to state 71
    id           go to state 101
    bitor-exp    go to state 73
    new          go to state 74
    float-exp    go to state 75
    duration     go to state 76
    dictionary   go to state 77
    tuple        go to state 78
    literal-exp  go to state 79
    string       go to state 80
    unary-exp    go to state 81
    rel-exp      go to state 82


state 181

   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   37 exp: . "class" lvalue protos block
   38    | . "package" lvalue protos block
   52 routine: . "closure"
   53        | . "function"
   62 exp: . exp "=" exp
   63    | . exp "=" exp modifiers
   64    | . lvalue "+=" exp
   65    | . lvalue "-=" exp
   66    | . lvalue "*=" exp
   67    | . lvalue "/=" exp
   67    | lvalue "/=" . exp
   68    | . lvalue "^=" exp
   69    | . lvalue "%=" exp
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
  118            | . block
  119            | . "do" "(" exp ")" block
  120 detach: . "detach"
  121       | . "disown"
  122 primary-exp: . "assert" "(" exp ")"
  123            | . "assert" "{" claims "}"
  124            | . detach "(" exp ")"
  125            | . detach block
  126            | . "isdef" "(" k1_id ")"
  127            | . "watch" "(" exp ")"
  128 lvalue: . id
  129       | . primary-exp "." id
  130       | . primary-exp "." "*"
  131 primary-exp: . "&" id
  132            | . primary-exp "." "&" id
  133 id: . "identifier"
  134 bitor-exp: . "var" bitor-exp
  135          | . "const" "var" bitor-exp
  136 primary-exp: . lvalue
  137            | . lvalue args
  138 new: . "new" "identifier" args.opt
  139 bitor-exp: . new
  140 id: . "new"
  141 primary-exp: . routine formals block
  142 float-exp: . "float"
  143 duration: . "duration"
  144         | . duration "duration"
  150 dictionary: . "[" assocs "]"
  154 tuple: . "(" tuple.exps ")"
  155 literal-exp: . float-exp
  156            | . "angle"
  157            | . duration
  158            | . string
  159            | . "[" exps "]"
  160            | . dictionary
  161            | . tuple
  162 string: . "string"
  163       | . string "string"
  164 literal-exp: . "__HERE__"
  170 lvalue: . primary-exp "[" exps "]"
  171 literal-exp: . "this"
  172            | . "call"
  173 primary-exp: . literal-exp
  174            | . "(" exp ")"
  175            | . "(" error ")"
  176            | . primary-exp "**" primary-exp
  177 unary-exp: . primary-exp
  178          | . "--" lvalue
  179          | . "++" lvalue
  180          | . "+" unary-exp
  181          | . "-" unary-exp
  182          | . "!" unary-exp
  183          | . "compl" unary-exp
  184 bitor-exp: . unary-exp
  185          | . bitor-exp "+" bitor-exp
  186          | . bitor-exp "-" bitor-exp
  187          | . bitor-exp "*" bitor-exp
  188          | . bitor-exp "/" bitor-exp
  189          | . bitor-exp "%" bitor-exp
  190          | . bitor-exp "^" bitor-exp
  191          | . bitor-exp "<<" bitor-exp
  192          | . bitor-exp "bitand" bitor-exp
  193          | . bitor-exp "bitor" bitor-exp
  194          | . bitor-exp ">>" bitor-exp
  205 rel-exp: . bitor-exp rel-ops
  208 exp: . rel-exp
  209    | . exp "&&" exp
  210    | . exp "||" exp
  211    | . exp "in" exp
  212    | . exp "!" "in" exp
  216    | . "%unscope:" unsigned
  217 primary-exp: . "%exp:" unsigned
  218 lvalue: . "%lvalue:" unsigned
  219       | . "%id:" unsigned
  220       | . primary-exp "." "%id:" unsigned
  221 primary-exp: . lvalue "(" "%exps:" unsigned ")"

    "__HERE__"    shift, and go to state 7
    "closure"     shift, and go to state 9
    "const"       shift, and go to state 10
    "function"    shift, and go to state 13
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "var"         shift, and go to state 25
    "watch"       shift, and go to state 27
    "&"           shift, and go to state 29
    "identifier"  shift, and go to state 35
    "class"       shift, and go to state 36
    "package"     shift, and go to state 37
    "--"          shift, and go to state 41
    "++"          shift, and go to state 42
    "do"          shift, and go to state 43
    "assert"      shift, and go to state 44
    "detach"      shift, and go to state 45
    "disown"      shift, and go to state 46
    "new"         shift, and go to state 47
    "angle"       shift, and go to state 48
    "duration"    shift, and go to state 49
    "float"       shift, and go to state 50
    "string"      shift, and go to state 51
    "call"        shift, and go to state 52
    "this"        shift, and go to state 53
    "!"           shift, and go to state 54
    "compl"       shift, and go to state 55
    "-"           shift, and go to state 56
    "+"           shift, and go to state 57
    "%unscope:"   shift, and go to state 58
    "%exp:"       shift, and go to state 59
    "%lvalue:"    shift, and go to state 60
    "%id:"        shift, and go to state 61

    block        go to state 66
    exp          go to state 289
    routine      go to state 99
    primary-exp  go to state 100
    detach       go to state 70
    lvalue       go to state 71
    id           go to state 101
    bitor-exp    go to state 73
    new          go to state 74
    float-exp    go to state 75
    duration     go to state 76
    dictionary   go to state 77
    tuple        go to state 78
    literal-exp  go to state 79
    string       go to state 80
    unary-exp    go to state 81
    rel-exp      go to state 82


state 182

   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   37 exp: . "class" lvalue protos block
   38    | . "package" lvalue protos block
   52 routine: . "closure"
   53        | . "function"
   62 exp: . exp "=" exp
   63    | . exp "=" exp modifiers
   64    | . lvalue "+=" exp
   65    | . lvalue "-=" exp
   66    | . lvalue "*=" exp
   66    | lvalue "*=" . exp
   67    | . lvalue "/=" exp
   68    | . lvalue "^=" exp
   69    | . lvalue "%=" exp
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
  118            | . block
  119            | . "do" "(" exp ")" block
  120 detach: . "detach"
  121       | . "disown"
  122 primary-exp: . "assert" "(" exp ")"
  123            | . "assert" "{" claims "}"
  124            | . detach "(" exp ")"
  125            | . detach block
  126            | . "isdef" "(" k1_id ")"
  127            | . "watch" "(" exp ")"
  128 lvalue: . id
  129       | . primary-exp "." id
  130       | . primary-exp "." "*"
  131 primary-exp: . "&" id
  132            | . primary-exp "." "&" id
  133 id: . "identifier"
  134 bitor-exp: . "var" bitor-exp
  135          | . "const" "var" bitor-exp
  136 primary-exp: . lvalue
  137            | . lvalue args
  138 new: . "new" "identifier" args.opt
  139 bitor-exp: . new
  140 id: . "new"
  141 primary-exp: . routine formals block
  142 float-exp: . "float"
  143 duration: . "duration"
  144         | . duration "duration"
  150 dictionary: . "[" assocs "]"
  154 tuple: . "(" tuple.exps ")"
  155 literal-exp: . float-exp
  156            | . "angle"
  157            | . duration
  158            | . string
  159            | . "[" exps "]"
  160            | . dictionary
  161            | . tuple
  162 string: . "string"
  163       | . string "string"
  164 literal-exp: . "__HERE__"
  170 lvalue: . primary-exp "[" exps "]"
  171 literal-exp: . "this"
  172            | . "call"
  173 primary-exp: . literal-exp
  174            | . "(" exp ")"
  175            | . "(" error ")"
  176            | . primary-exp "**" primary-exp
  177 unary-exp: . primary-exp
  178          | . "--" lvalue
  179          | . "++" lvalue
  180          | . "+" unary-exp
  181          | . "-" unary-exp
  182          | . "!" unary-exp
  183          | . "compl" unary-exp
  184 bitor-exp: . unary-exp
  185          | . bitor-exp "+" bitor-exp
  186          | . bitor-exp "-" bitor-exp
  187          | . bitor-exp "*" bitor-exp
  188          | . bitor-exp "/" bitor-exp
  189          | . bitor-exp "%" bitor-exp
  190          | . bitor-exp "^" bitor-exp
  191          | . bitor-exp "<<" bitor-exp
  192          | . bitor-exp "bitand" bitor-exp
  193          | . bitor-exp "bitor" bitor-exp
  194          | . bitor-exp ">>" bitor-exp
  205 rel-exp: . bitor-exp rel-ops
  208 exp: . rel-exp
  209    | . exp "&&" exp
  210    | . exp "||" exp
  211    | . exp "in" exp
  212    | . exp "!" "in" exp
  216    | . "%unscope:" unsigned
  217 primary-exp: . "%exp:" unsigned
  218 lvalue: . "%lvalue:" unsigned
  219       | . "%id:" unsigned
  220       | . primary-exp "." "%id:" unsigned
  221 primary-exp: . lvalue "(" "%exps:" unsigned ")"

    "__HERE__"    shift, and go to state 7
    "closure"     shift, and go to state 9
    "const"       shift, and go to state 10
    "function"    shift, and go to state 13
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "var"         shift, and go to state 25
    "watch"       shift, and go to state 27
    "&"           shift, and go to state 29
    "identifier"  shift, and go to state 35
    "class"       shift, and go to state 36
    "package"     shift, and go to state 37
    "--"          shift, and go to state 41
    "++"          shift, and go to state 42
    "do"          shift, and go to state 43
    "assert"      shift, and go to state 44
    "detach"      shift, and go to state 45
    "disown"      shift, and go to state 46
    "new"         shift, and go to state 47
    "angle"       shift, and go to state 48
    "duration"    shift, and go to state 49
    "float"       shift, and go to state 50
    "string"      shift, and go to state 51
    "call"        shift, and go to state 52
    "this"        shift, and go to state 53
    "!"           shift, and go to state 54
    "compl"       shift, and go to state 55
    "-"           shift, and go to state 56
    "+"           shift, and go to state 57
    "%unscope:"   shift, and go to state 58
    "%exp:"       shift, and go to state 59
    "%lvalue:"    shift, and go to state 60
    "%id:"        shift, and go to state 61

    block        go to state 66
    exp          go to state 290
    routine      go to state 99
    primary-exp  go to state 100
    detach       go to state 70
    lvalue       go to state 71
    id           go to state 101
    bitor-exp    go to state 73
    new          go to state 74
    float-exp    go to state 75
    duration     go to state 76
    dictionary   go to state 77
    tuple        go to state 78
    literal-exp  go to state 79
    string       go to state 80
    unary-exp    go to state 81
    rel-exp      go to state 82


state 183

   70 primary-exp: lvalue "--" .

    $default  reduce using rule 70 (primary-exp)


state 184

   71 primary-exp: lvalue "++" .

    $default  reduce using rule 71 (primary-exp)


state 185

   72 primary-exp: lvalue "->" . id
  133 id: . "identifier"
  140   | . "new"

    "identifier"  shift, and go to state 35
    "new"         shift, and go to state 124

    id  go to state 291


state 186

  137 primary-exp: lvalue args .

    $default  reduce using rule 137 (primary-exp)


state 187

   55 stmt: id id . formals block
  246 formals: .  ["{"]
  247        | . "(" formals.0 ")"

    "("  shift, and go to state 165

    $default  reduce using rule 246 (formals)

    formals  go to state 292


state 188

   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   52 routine: . "closure"
   53        | . "function"
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
  118            | . block
  119            | . "do" "(" exp ")" block
  120 detach: . "detach"
  121       | . "disown"
  122 primary-exp: . "assert" "(" exp ")"
  123            | . "assert" "{" claims "}"
  124            | . detach "(" exp ")"
  125            | . detach block
  126            | . "isdef" "(" k1_id ")"
  127            | . "watch" "(" exp ")"
  128 lvalue: . id
  129       | . primary-exp "." id
  130       | . primary-exp "." "*"
  131 primary-exp: . "&" id
  132            | . primary-exp "." "&" id
  133 id: . "identifier"
  134 bitor-exp: . "var" bitor-exp
  135          | . "const" "var" bitor-exp
  136 primary-exp: . lvalue
  137            | . lvalue args
  138 new: . "new" "identifier" args.opt
  139 bitor-exp: . new
  140 id: . "new"
  141 primary-exp: . routine formals block
  142 float-exp: . "float"
  143 duration: . "duration"
  144         | . duration "duration"
  150 dictionary: . "[" assocs "]"
  154 tuple: . "(" tuple.exps ")"
  155 literal-exp: . float-exp
  156            | . "angle"
  157            | . duration
  158            | . string
  159            | . "[" exps "]"
  160            | . dictionary
  161            | . tuple
  162 string: . "string"
  163       | . string "string"
  164 literal-exp: . "__HERE__"
  170 lvalue: . primary-exp "[" exps "]"
  171 literal-exp: . "this"
  172            | . "call"
  173 primary-exp: . literal-exp
  174            | . "(" exp ")"
  175            | . "(" error ")"
  176            | . primary-exp "**" primary-exp
  177 unary-exp: . primary-exp
  178          | . "--" lvalue
  179          | . "++" lvalue
  180          | . "+" unary-exp
  181          | . "-" unary-exp
  182          | . "!" unary-exp
  183          | . "compl" unary-exp
  184 bitor-exp: . unary-exp
  185          | . bitor-exp "+" bitor-exp
  186          | . bitor-exp "-" bitor-exp
  187          | . bitor-exp "*" bitor-exp
  188          | . bitor-exp "/" bitor-exp
  189          | . bitor-exp "%" bitor-exp
  190          | . bitor-exp "^" bitor-exp
  191          | . bitor-exp "<<" bitor-exp
  192          | . bitor-exp "bitand" bitor-exp
  192          | bitor-exp "bitand" . bitor-exp
  193          | . bitor-exp "bitor" bitor-exp
  194          | . bitor-exp ">>" bitor-exp
  217 primary-exp: . "%exp:" unsigned
  218 lvalue: . "%lvalue:" unsigned
  219       | . "%id:" unsigned
  220       | . primary-exp "." "%id:" unsigned
  221 primary-exp: . lvalue "(" "%exps:" unsigned ")"

    "__HERE__"    shift, and go to state 7
    "closure"     shift, and go to state 9
    "const"       shift, and go to state 10
    "function"    shift, and go to state 13
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "var"         shift, and go to state 25
    "watch"       shift, and go to state 27
    "&"           shift, and go to state 29
    "identifier"  shift, and go to state 35
    "--"          shift, and go to state 41
    "++"          shift, and go to state 42
    "do"          shift, and go to state 43
    "assert"      shift, and go to state 44
    "detach"      shift, and go to state 45
    "disown"      shift, and go to state 46
    "new"         shift, and go to state 47
    "angle"       shift, and go to state 48
    "duration"    shift, and go to state 49
    "float"       shift, and go to state 50
    "string"      shift, and go to state 51
    "call"        shift, and go to state 52
    "this"        shift, and go to state 53
    "!"           shift, and go to state 54
    "compl"       shift, and go to state 55
    "-"           shift, and go to state 56
    "+"           shift, and go to state 57
    "%exp:"       shift, and go to state 59
    "%lvalue:"    shift, and go to state 60
    "%id:"        shift, and go to state 61

    block        go to state 66
    routine      go to state 99
    primary-exp  go to state 100
    detach       go to state 70
    lvalue       go to state 119
    id           go to state 101
    bitor-exp    go to state 293
    new          go to state 74
    float-exp    go to state 75
    duration     go to state 76
    dictionary   go to state 77
    tuple        go to state 78
    literal-exp  go to state 79
    string       go to state 80
    unary-exp    go to state 81


state 189

   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   52 routine: . "closure"
   53        | . "function"
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
  118            | . block
  119            | . "do" "(" exp ")" block
  120 detach: . "detach"
  121       | . "disown"
  122 primary-exp: . "assert" "(" exp ")"
  123            | . "assert" "{" claims "}"
  124            | . detach "(" exp ")"
  125            | . detach block
  126            | . "isdef" "(" k1_id ")"
  127            | . "watch" "(" exp ")"
  128 lvalue: . id
  129       | . primary-exp "." id
  130       | . primary-exp "." "*"
  131 primary-exp: . "&" id
  132            | . primary-exp "." "&" id
  133 id: . "identifier"
  134 bitor-exp: . "var" bitor-exp
  135          | . "const" "var" bitor-exp
  136 primary-exp: . lvalue
  137            | . lvalue args
  138 new: . "new" "identifier" args.opt
  139 bitor-exp: . new
  140 id: . "new"
  141 primary-exp: . routine formals block
  142 float-exp: . "float"
  143 duration: . "duration"
  144         | . duration "duration"
  150 dictionary: . "[" assocs "]"
  154 tuple: . "(" tuple.exps ")"
  155 literal-exp: . float-exp
  156            | . "angle"
  157            | . duration
  158            | . string
  159            | . "[" exps "]"
  160            | . dictionary
  161            | . tuple
  162 string: . "string"
  163       | . string "string"
  164 literal-exp: . "__HERE__"
  170 lvalue: . primary-exp "[" exps "]"
  171 literal-exp: . "this"
  172            | . "call"
  173 primary-exp: . literal-exp
  174            | . "(" exp ")"
  175            | . "(" error ")"
  176            | . primary-exp "**" primary-exp
  177 unary-exp: . primary-exp
  178          | . "--" lvalue
  179          | . "++" lvalue
  180          | . "+" unary-exp
  181          | . "-" unary-exp
  182          | . "!" unary-exp
  183          | . "compl" unary-exp
  184 bitor-exp: . unary-exp
  185          | . bitor-exp "+" bitor-exp
  186          | . bitor-exp "-" bitor-exp
  187          | . bitor-exp "*" bitor-exp
  188          | . bitor-exp "/" bitor-exp
  189          | . bitor-exp "%" bitor-exp
  190          | . bitor-exp "^" bitor-exp
  191          | . bitor-exp "<<" bitor-exp
  192          | . bitor-exp "bitand" bitor-exp
  193          | . bitor-exp "bitor" bitor-exp
  193          | bitor-exp "bitor" . bitor-exp
  194          | . bitor-exp ">>" bitor-exp
  217 primary-exp: . "%exp:" unsigned
  218 lvalue: . "%lvalue:" unsigned
  219       | . "%id:" unsigned
  220       | . primary-exp "." "%id:" unsigned
  221 primary-exp: . lvalue "(" "%exps:" unsigned ")"

    "__HERE__"    shift, and go to state 7
    "closure"     shift, and go to state 9
    "const"       shift, and go to state 10
    "function"    shift, and go to state 13
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "var"         shift, and go to state 25
    "watch"       shift, and go to state 27
    "&"           shift, and go to state 29
    "identifier"  shift, and go to state 35
    "--"          shift, and go to state 41
    "++"          shift, and go to state 42
    "do"          shift, and go to state 43
    "assert"      shift, and go to state 44
    "detach"      shift, and go to state 45
    "disown"      shift, and go to state 46
    "new"         shift, and go to state 47
    "angle"       shift, and go to state 48
    "duration"    shift, and go to state 49
    "float"       shift, and go to state 50
    "string"      shift, and go to state 51
    "call"        shift, and go to state 52
    "this"        shift, and go to state 53
    "!"           shift, and go to state 54
    "compl"       shift, and go to state 55
    "-"           shift, and go to state 56
    "+"           shift, and go to state 57
    "%exp:"       shift, and go to state 59
    "%lvalue:"    shift, and go to state 60
    "%id:"        shift, and go to state 61

    block        go to state 66
    routine      go to state 99
    primary-exp  go to state 100
    detach       go to state 70
    lvalue       go to state 119
    id           go to state 101
    bitor-exp    go to state 294
    new          go to state 74
    float-exp    go to state 75
    duration     go to state 76
    dictionary   go to state 77
    tuple        go to state 78
    literal-exp  go to state 79
    string       go to state 80
    unary-exp    go to state 81


state 190

   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   52 routine: . "closure"
   53        | . "function"
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
  118            | . block
  119            | . "do" "(" exp ")" block
  120 detach: . "detach"
  121       | . "disown"
  122 primary-exp: . "assert" "(" exp ")"
  123            | . "assert" "{" claims "}"
  124            | . detach "(" exp ")"
  125            | . detach block
  126            | . "isdef" "(" k1_id ")"
  127            | . "watch" "(" exp ")"
  128 lvalue: . id
  129       | . primary-exp "." id
  130       | . primary-exp "." "*"
  131 primary-exp: . "&" id
  132            | . primary-exp "." "&" id
  133 id: . "identifier"
  134 bitor-exp: . "var" bitor-exp
  135          | . "const" "var" bitor-exp
  136 primary-exp: . lvalue
  137            | . lvalue args
  138 new: . "new" "identifier" args.opt
  139 bitor-exp: . new
  140 id: . "new"
  141 primary-exp: . routine formals block
  142 float-exp: . "float"
  143 duration: . "duration"
  144         | . duration "duration"
  150 dictionary: . "[" assocs "]"
  154 tuple: . "(" tuple.exps ")"
  155 literal-exp: . float-exp
  156            | . "angle"
  157            | . duration
  158            | . string
  159            | . "[" exps "]"
  160            | . dictionary
  161            | . tuple
  162 string: . "string"
  163       | . string "string"
  164 literal-exp: . "__HERE__"
  170 lvalue: . primary-exp "[" exps "]"
  171 literal-exp: . "this"
  172            | . "call"
  173 primary-exp: . literal-exp
  174            | . "(" exp ")"
  175            | . "(" error ")"
  176            | . primary-exp "**" primary-exp
  177 unary-exp: . primary-exp
  178          | . "--" lvalue
  179          | . "++" lvalue
  180          | . "+" unary-exp
  181          | . "-" unary-exp
  182          | . "!" unary-exp
  183          | . "compl" unary-exp
  184 bitor-exp: . unary-exp
  185          | . bitor-exp "+" bitor-exp
  186          | . bitor-exp "-" bitor-exp
  187          | . bitor-exp "*" bitor-exp
  188          | . bitor-exp "/" bitor-exp
  189          | . bitor-exp "%" bitor-exp
  190          | . bitor-exp "^" bitor-exp
  190          | bitor-exp "^" . bitor-exp
  191          | . bitor-exp "<<" bitor-exp
  192          | . bitor-exp "bitand" bitor-exp
  193          | . bitor-exp "bitor" bitor-exp
  194          | . bitor-exp ">>" bitor-exp
  217 primary-exp: . "%exp:" unsigned
  218 lvalue: . "%lvalue:" unsigned
  219       | . "%id:" unsigned
  220       | . primary-exp "." "%id:" unsigned
  221 primary-exp: . lvalue "(" "%exps:" unsigned ")"

    "__HERE__"    shift, and go to state 7
    "closure"     shift, and go to state 9
    "const"       shift, and go to state 10
    "function"    shift, and go to state 13
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "var"         shift, and go to state 25
    "watch"       shift, and go to state 27
    "&"           shift, and go to state 29
    "identifier"  shift, and go to state 35
    "--"          shift, and go to state 41
    "++"          shift, and go to state 42
    "do"          shift, and go to state 43
    "assert"      shift, and go to state 44
    "detach"      shift, and go to state 45
    "disown"      shift, and go to state 46
    "new"         shift, and go to state 47
    "angle"       shift, and go to state 48
    "duration"    shift, and go to state 49
    "float"       shift, and go to state 50
    "string"      shift, and go to state 51
    "call"        shift, and go to state 52
    "this"        shift, and go to state 53
    "!"           shift, and go to state 54
    "compl"       shift, and go to state 55
    "-"           shift, and go to state 56
    "+"           shift, and go to state 57
    "%exp:"       shift, and go to state 59
    "%lvalue:"    shift, and go to state 60
    "%id:"        shift, and go to state 61

    block        go to state 66
    routine      go to state 99
    primary-exp  go to state 100
    detach       go to state 70
    lvalue       go to state 119
    id           go to state 101
    bitor-exp    go to state 295
    new          go to state 74
    float-exp    go to state 75
    duration     go to state 76
    dictionary   go to state 77
    tuple        go to state 78
    literal-exp  go to state 79
    string       go to state 80
    unary-exp    go to state 81


state 191

   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   52 routine: . "closure"
   53        | . "function"
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
  118            | . block
  119            | . "do" "(" exp ")" block
  120 detach: . "detach"
  121       | . "disown"
  122 primary-exp: . "assert" "(" exp ")"
  123            | . "assert" "{" claims "}"
  124            | . detach "(" exp ")"
  125            | . detach block
  126            | . "isdef" "(" k1_id ")"
  127            | . "watch" "(" exp ")"
  128 lvalue: . id
  129       | . primary-exp "." id
  130       | . primary-exp "." "*"
  131 primary-exp: . "&" id
  132            | . primary-exp "." "&" id
  133 id: . "identifier"
  134 bitor-exp: . "var" bitor-exp
  135          | . "const" "var" bitor-exp
  136 primary-exp: . lvalue
  137            | . lvalue args
  138 new: . "new" "identifier" args.opt
  139 bitor-exp: . new
  140 id: . "new"
  141 primary-exp: . routine formals block
  142 float-exp: . "float"
  143 duration: . "duration"
  144         | . duration "duration"
  150 dictionary: . "[" assocs "]"
  154 tuple: . "(" tuple.exps ")"
  155 literal-exp: . float-exp
  156            | . "angle"
  157            | . duration
  158            | . string
  159            | . "[" exps "]"
  160            | . dictionary
  161            | . tuple
  162 string: . "string"
  163       | . string "string"
  164 literal-exp: . "__HERE__"
  170 lvalue: . primary-exp "[" exps "]"
  171 literal-exp: . "this"
  172            | . "call"
  173 primary-exp: . literal-exp
  174            | . "(" exp ")"
  175            | . "(" error ")"
  176            | . primary-exp "**" primary-exp
  177 unary-exp: . primary-exp
  178          | . "--" lvalue
  179          | . "++" lvalue
  180          | . "+" unary-exp
  181          | . "-" unary-exp
  182          | . "!" unary-exp
  183          | . "compl" unary-exp
  184 bitor-exp: . unary-exp
  185          | . bitor-exp "+" bitor-exp
  186          | . bitor-exp "-" bitor-exp
  187          | . bitor-exp "*" bitor-exp
  188          | . bitor-exp "/" bitor-exp
  189          | . bitor-exp "%" bitor-exp
  190          | . bitor-exp "^" bitor-exp
  191          | . bitor-exp "<<" bitor-exp
  192          | . bitor-exp "bitand" bitor-exp
  193          | . bitor-exp "bitor" bitor-exp
  194          | . bitor-exp ">>" bitor-exp
  194          | bitor-exp ">>" . bitor-exp
  217 primary-exp: . "%exp:" unsigned
  218 lvalue: . "%lvalue:" unsigned
  219       | . "%id:" unsigned
  220       | . primary-exp "." "%id:" unsigned
  221 primary-exp: . lvalue "(" "%exps:" unsigned ")"

    "__HERE__"    shift, and go to state 7
    "closure"     shift, and go to state 9
    "const"       shift, and go to state 10
    "function"    shift, and go to state 13
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "var"         shift, and go to state 25
    "watch"       shift, and go to state 27
    "&"           shift, and go to state 29
    "identifier"  shift, and go to state 35
    "--"          shift, and go to state 41
    "++"          shift, and go to state 42
    "do"          shift, and go to state 43
    "assert"      shift, and go to state 44
    "detach"      shift, and go to state 45
    "disown"      shift, and go to state 46
    "new"         shift, and go to state 47
    "angle"       shift, and go to state 48
    "duration"    shift, and go to state 49
    "float"       shift, and go to state 50
    "string"      shift, and go to state 51
    "call"        shift, and go to state 52
    "this"        shift, and go to state 53
    "!"           shift, and go to state 54
    "compl"       shift, and go to state 55
    "-"           shift, and go to state 56
    "+"           shift, and go to state 57
    "%exp:"       shift, and go to state 59
    "%lvalue:"    shift, and go to state 60
    "%id:"        shift, and go to state 61

    block        go to state 66
    routine      go to state 99
    primary-exp  go to state 100
    detach       go to state 70
    lvalue       go to state 119
    id           go to state 101
    bitor-exp    go to state 296
    new          go to state 74
    float-exp    go to state 75
    duration     go to state 76
    dictionary   go to state 77
    tuple        go to state 78
    literal-exp  go to state 79
    string       go to state 80
    unary-exp    go to state 81


state 192

   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   52 routine: . "closure"
   53        | . "function"
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
  118            | . block
  119            | . "do" "(" exp ")" block
  120 detach: . "detach"
  121       | . "disown"
  122 primary-exp: . "assert" "(" exp ")"
  123            | . "assert" "{" claims "}"
  124            | . detach "(" exp ")"
  125            | . detach block
  126            | . "isdef" "(" k1_id ")"
  127            | . "watch" "(" exp ")"
  128 lvalue: . id
  129       | . primary-exp "." id
  130       | . primary-exp "." "*"
  131 primary-exp: . "&" id
  132            | . primary-exp "." "&" id
  133 id: . "identifier"
  134 bitor-exp: . "var" bitor-exp
  135          | . "const" "var" bitor-exp
  136 primary-exp: . lvalue
  137            | . lvalue args
  138 new: . "new" "identifier" args.opt
  139 bitor-exp: . new
  140 id: . "new"
  141 primary-exp: . routine formals block
  142 float-exp: . "float"
  143 duration: . "duration"
  144         | . duration "duration"
  150 dictionary: . "[" assocs "]"
  154 tuple: . "(" tuple.exps ")"
  155 literal-exp: . float-exp
  156            | . "angle"
  157            | . duration
  158            | . string
  159            | . "[" exps "]"
  160            | . dictionary
  161            | . tuple
  162 string: . "string"
  163       | . string "string"
  164 literal-exp: . "__HERE__"
  170 lvalue: . primary-exp "[" exps "]"
  171 literal-exp: . "this"
  172            | . "call"
  173 primary-exp: . literal-exp
  174            | . "(" exp ")"
  175            | . "(" error ")"
  176            | . primary-exp "**" primary-exp
  177 unary-exp: . primary-exp
  178          | . "--" lvalue
  179          | . "++" lvalue
  180          | . "+" unary-exp
  181          | . "-" unary-exp
  182          | . "!" unary-exp
  183          | . "compl" unary-exp
  184 bitor-exp: . unary-exp
  185          | . bitor-exp "+" bitor-exp
  186          | . bitor-exp "-" bitor-exp
  187          | . bitor-exp "*" bitor-exp
  188          | . bitor-exp "/" bitor-exp
  189          | . bitor-exp "%" bitor-exp
  190          | . bitor-exp "^" bitor-exp
  191          | . bitor-exp "<<" bitor-exp
  191          | bitor-exp "<<" . bitor-exp
  192          | . bitor-exp "bitand" bitor-exp
  193          | . bitor-exp "bitor" bitor-exp
  194          | . bitor-exp ">>" bitor-exp
  217 primary-exp: . "%exp:" unsigned
  218 lvalue: . "%lvalue:" unsigned
  219       | . "%id:" unsigned
  220       | . primary-exp "." "%id:" unsigned
  221 primary-exp: . lvalue "(" "%exps:" unsigned ")"

    "__HERE__"    shift, and go to state 7
    "closure"     shift, and go to state 9
    "const"       shift, and go to state 10
    "function"    shift, and go to state 13
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "var"         shift, and go to state 25
    "watch"       shift, and go to state 27
    "&"           shift, and go to state 29
    "identifier"  shift, and go to state 35
    "--"          shift, and go to state 41
    "++"          shift, and go to state 42
    "do"          shift, and go to state 43
    "assert"      shift, and go to state 44
    "detach"      shift, and go to state 45
    "disown"      shift, and go to state 46
    "new"         shift, and go to state 47
    "angle"       shift, and go to state 48
    "duration"    shift, and go to state 49
    "float"       shift, and go to state 50
    "string"      shift, and go to state 51
    "call"        shift, and go to state 52
    "this"        shift, and go to state 53
    "!"           shift, and go to state 54
    "compl"       shift, and go to state 55
    "-"           shift, and go to state 56
    "+"           shift, and go to state 57
    "%exp:"       shift, and go to state 59
    "%lvalue:"    shift, and go to state 60
    "%id:"        shift, and go to state 61

    block        go to state 66
    routine      go to state 99
    primary-exp  go to state 100
    detach       go to state 70
    lvalue       go to state 119
    id           go to state 101
    bitor-exp    go to state 297
    new          go to state 74
    float-exp    go to state 75
    duration     go to state 76
    dictionary   go to state 77
    tuple        go to state 78
    literal-exp  go to state 79
    string       go to state 80
    unary-exp    go to state 81


state 193

   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   52 routine: . "closure"
   53        | . "function"
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
  118            | . block
  119            | . "do" "(" exp ")" block
  120 detach: . "detach"
  121       | . "disown"
  122 primary-exp: . "assert" "(" exp ")"
  123            | . "assert" "{" claims "}"
  124            | . detach "(" exp ")"
  125            | . detach block
  126            | . "isdef" "(" k1_id ")"
  127            | . "watch" "(" exp ")"
  128 lvalue: . id
  129       | . primary-exp "." id
  130       | . primary-exp "." "*"
  131 primary-exp: . "&" id
  132            | . primary-exp "." "&" id
  133 id: . "identifier"
  134 bitor-exp: . "var" bitor-exp
  135          | . "const" "var" bitor-exp
  136 primary-exp: . lvalue
  137            | . lvalue args
  138 new: . "new" "identifier" args.opt
  139 bitor-exp: . new
  140 id: . "new"
  141 primary-exp: . routine formals block
  142 float-exp: . "float"
  143 duration: . "duration"
  144         | . duration "duration"
  150 dictionary: . "[" assocs "]"
  154 tuple: . "(" tuple.exps ")"
  155 literal-exp: . float-exp
  156            | . "angle"
  157            | . duration
  158            | . string
  159            | . "[" exps "]"
  160            | . dictionary
  161            | . tuple
  162 string: . "string"
  163       | . string "string"
  164 literal-exp: . "__HERE__"
  170 lvalue: . primary-exp "[" exps "]"
  171 literal-exp: . "this"
  172            | . "call"
  173 primary-exp: . literal-exp
  174            | . "(" exp ")"
  175            | . "(" error ")"
  176            | . primary-exp "**" primary-exp
  177 unary-exp: . primary-exp
  178          | . "--" lvalue
  179          | . "++" lvalue
  180          | . "+" unary-exp
  181          | . "-" unary-exp
  182          | . "!" unary-exp
  183          | . "compl" unary-exp
  184 bitor-exp: . unary-exp
  185          | . bitor-exp "+" bitor-exp
  186          | . bitor-exp "-" bitor-exp
  186          | bitor-exp "-" . bitor-exp
  187          | . bitor-exp "*" bitor-exp
  188          | . bitor-exp "/" bitor-exp
  189          | . bitor-exp "%" bitor-exp
  190          | . bitor-exp "^" bitor-exp
  191          | . bitor-exp "<<" bitor-exp
  192          | . bitor-exp "bitand" bitor-exp
  193          | . bitor-exp "bitor" bitor-exp
  194          | . bitor-exp ">>" bitor-exp
  217 primary-exp: . "%exp:" unsigned
  218 lvalue: . "%lvalue:" unsigned
  219       | . "%id:" unsigned
  220       | . primary-exp "." "%id:" unsigned
  221 primary-exp: . lvalue "(" "%exps:" unsigned ")"

    "__HERE__"    shift, and go to state 7
    "closure"     shift, and go to state 9
    "const"       shift, and go to state 10
    "function"    shift, and go to state 13
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "var"         shift, and go to state 25
    "watch"       shift, and go to state 27
    "&"           shift, and go to state 29
    "identifier"  shift, and go to state 35
    "--"          shift, and go to state 41
    "++"          shift, and go to state 42
    "do"          shift, and go to state 43
    "assert"      shift, and go to state 44
    "detach"      shift, and go to state 45
    "disown"      shift, and go to state 46
    "new"         shift, and go to state 47
    "angle"       shift, and go to state 48
    "duration"    shift, and go to state 49
    "float"       shift, and go to state 50
    "string"      shift, and go to state 51
    "call"        shift, and go to state 52
    "this"        shift, and go to state 53
    "!"           shift, and go to state 54
    "compl"       shift, and go to state 55
    "-"           shift, and go to state 56
    "+"           shift, and go to state 57
    "%exp:"       shift, and go to state 59
    "%lvalue:"    shift, and go to state 60
    "%id:"        shift, and go to state 61

    block        go to state 66
    routine      go to state 99
    primary-exp  go to state 100
    detach       go to state 70
    lvalue       go to state 119
    id           go to state 101
    bitor-exp    go to state 298
    new          go to state 74
    float-exp    go to state 75
    duration     go to state 76
    dictionary   go to state 77
    tuple        go to state 78
    literal-exp  go to state 79
    string       go to state 80
    unary-exp    go to state 81


state 194

   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   52 routine: . "closure"
   53        | . "function"
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
  118            | . block
  119            | . "do" "(" exp ")" block
  120 detach: . "detach"
  121       | . "disown"
  122 primary-exp: . "assert" "(" exp ")"
  123            | . "assert" "{" claims "}"
  124            | . detach "(" exp ")"
  125            | . detach block
  126            | . "isdef" "(" k1_id ")"
  127            | . "watch" "(" exp ")"
  128 lvalue: . id
  129       | . primary-exp "." id
  130       | . primary-exp "." "*"
  131 primary-exp: . "&" id
  132            | . primary-exp "." "&" id
  133 id: . "identifier"
  134 bitor-exp: . "var" bitor-exp
  135          | . "const" "var" bitor-exp
  136 primary-exp: . lvalue
  137            | . lvalue args
  138 new: . "new" "identifier" args.opt
  139 bitor-exp: . new
  140 id: . "new"
  141 primary-exp: . routine formals block
  142 float-exp: . "float"
  143 duration: . "duration"
  144         | . duration "duration"
  150 dictionary: . "[" assocs "]"
  154 tuple: . "(" tuple.exps ")"
  155 literal-exp: . float-exp
  156            | . "angle"
  157            | . duration
  158            | . string
  159            | . "[" exps "]"
  160            | . dictionary
  161            | . tuple
  162 string: . "string"
  163       | . string "string"
  164 literal-exp: . "__HERE__"
  170 lvalue: . primary-exp "[" exps "]"
  171 literal-exp: . "this"
  172            | . "call"
  173 primary-exp: . literal-exp
  174            | . "(" exp ")"
  175            | . "(" error ")"
  176            | . primary-exp "**" primary-exp
  177 unary-exp: . primary-exp
  178          | . "--" lvalue
  179          | . "++" lvalue
  180          | . "+" unary-exp
  181          | . "-" unary-exp
  182          | . "!" unary-exp
  183          | . "compl" unary-exp
  184 bitor-exp: . unary-exp
  185          | . bitor-exp "+" bitor-exp
  186          | . bitor-exp "-" bitor-exp
  187          | . bitor-exp "*" bitor-exp
  188          | . bitor-exp "/" bitor-exp
  189          | . bitor-exp "%" bitor-exp
  189          | bitor-exp "%" . bitor-exp
  190          | . bitor-exp "^" bitor-exp
  191          | . bitor-exp "<<" bitor-exp
  192          | . bitor-exp "bitand" bitor-exp
  193          | . bitor-exp "bitor" bitor-exp
  194          | . bitor-exp ">>" bitor-exp
  217 primary-exp: . "%exp:" unsigned
  218 lvalue: . "%lvalue:" unsigned
  219       | . "%id:" unsigned
  220       | . primary-exp "." "%id:" unsigned
  221 primary-exp: . lvalue "(" "%exps:" unsigned ")"

    "__HERE__"    shift, and go to state 7
    "closure"     shift, and go to state 9
    "const"       shift, and go to state 10
    "function"    shift, and go to state 13
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "var"         shift, and go to state 25
    "watch"       shift, and go to state 27
    "&"           shift, and go to state 29
    "identifier"  shift, and go to state 35
    "--"          shift, and go to state 41
    "++"          shift, and go to state 42
    "do"          shift, and go to state 43
    "assert"      shift, and go to state 44
    "detach"      shift, and go to state 45
    "disown"      shift, and go to state 46
    "new"         shift, and go to state 47
    "angle"       shift, and go to state 48
    "duration"    shift, and go to state 49
    "float"       shift, and go to state 50
    "string"      shift, and go to state 51
    "call"        shift, and go to state 52
    "this"        shift, and go to state 53
    "!"           shift, and go to state 54
    "compl"       shift, and go to state 55
    "-"           shift, and go to state 56
    "+"           shift, and go to state 57
    "%exp:"       shift, and go to state 59
    "%lvalue:"    shift, and go to state 60
    "%id:"        shift, and go to state 61

    block        go to state 66
    routine      go to state 99
    primary-exp  go to state 100
    detach       go to state 70
    lvalue       go to state 119
    id           go to state 101
    bitor-exp    go to state 299
    new          go to state 74
    float-exp    go to state 75
    duration     go to state 76
    dictionary   go to state 77
    tuple        go to state 78
    literal-exp  go to state 79
    string       go to state 80
    unary-exp    go to state 81


state 195

   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   52 routine: . "closure"
   53        | . "function"
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
  118            | . block
  119            | . "do" "(" exp ")" block
  120 detach: . "detach"
  121       | . "disown"
  122 primary-exp: . "assert" "(" exp ")"
  123            | . "assert" "{" claims "}"
  124            | . detach "(" exp ")"
  125            | . detach block
  126            | . "isdef" "(" k1_id ")"
  127            | . "watch" "(" exp ")"
  128 lvalue: . id
  129       | . primary-exp "." id
  130       | . primary-exp "." "*"
  131 primary-exp: . "&" id
  132            | . primary-exp "." "&" id
  133 id: . "identifier"
  134 bitor-exp: . "var" bitor-exp
  135          | . "const" "var" bitor-exp
  136 primary-exp: . lvalue
  137            | . lvalue args
  138 new: . "new" "identifier" args.opt
  139 bitor-exp: . new
  140 id: . "new"
  141 primary-exp: . routine formals block
  142 float-exp: . "float"
  143 duration: . "duration"
  144         | . duration "duration"
  150 dictionary: . "[" assocs "]"
  154 tuple: . "(" tuple.exps ")"
  155 literal-exp: . float-exp
  156            | . "angle"
  157            | . duration
  158            | . string
  159            | . "[" exps "]"
  160            | . dictionary
  161            | . tuple
  162 string: . "string"
  163       | . string "string"
  164 literal-exp: . "__HERE__"
  170 lvalue: . primary-exp "[" exps "]"
  171 literal-exp: . "this"
  172            | . "call"
  173 primary-exp: . literal-exp
  174            | . "(" exp ")"
  175            | . "(" error ")"
  176            | . primary-exp "**" primary-exp
  177 unary-exp: . primary-exp
  178          | . "--" lvalue
  179          | . "++" lvalue
  180          | . "+" unary-exp
  181          | . "-" unary-exp
  182          | . "!" unary-exp
  183          | . "compl" unary-exp
  184 bitor-exp: . unary-exp
  185          | . bitor-exp "+" bitor-exp
  185          | bitor-exp "+" . bitor-exp
  186          | . bitor-exp "-" bitor-exp
  187          | . bitor-exp "*" bitor-exp
  188          | . bitor-exp "/" bitor-exp
  189          | . bitor-exp "%" bitor-exp
  190          | . bitor-exp "^" bitor-exp
  191          | . bitor-exp "<<" bitor-exp
  192          | . bitor-exp "bitand" bitor-exp
  193          | . bitor-exp "bitor" bitor-exp
  194          | . bitor-exp ">>" bitor-exp
  217 primary-exp: . "%exp:" unsigned
  218 lvalue: . "%lvalue:" unsigned
  219       | . "%id:" unsigned
  220       | . primary-exp "." "%id:" unsigned
  221 primary-exp: . lvalue "(" "%exps:" unsigned ")"

    "__HERE__"    shift, and go to state 7
    "closure"     shift, and go to state 9
    "const"       shift, and go to state 10
    "function"    shift, and go to state 13
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "var"         shift, and go to state 25
    "watch"       shift, and go to state 27
    "&"           shift, and go to state 29
    "identifier"  shift, and go to state 35
    "--"          shift, and go to state 41
    "++"          shift, and go to state 42
    "do"          shift, and go to state 43
    "assert"      shift, and go to state 44
    "detach"      shift, and go to state 45
    "disown"      shift, and go to state 46
    "new"         shift, and go to state 47
    "angle"       shift, and go to state 48
    "duration"    shift, and go to state 49
    "float"       shift, and go to state 50
    "string"      shift, and go to state 51
    "call"        shift, and go to state 52
    "this"        shift, and go to state 53
    "!"           shift, and go to state 54
    "compl"       shift, and go to state 55
    "-"           shift, and go to state 56
    "+"           shift, and go to state 57
    "%exp:"       shift, and go to state 59
    "%lvalue:"    shift, and go to state 60
    "%id:"        shift, and go to state 61

    block        go to state 66
    routine      go to state 99
    primary-exp  go to state 100
    detach       go to state 70
    lvalue       go to state 119
    id           go to state 101
    bitor-exp    go to state 300
    new          go to state 74
    float-exp    go to state 75
    duration     go to state 76
    dictionary   go to state 77
    tuple        go to state 78
    literal-exp  go to state 79
    string       go to state 80
    unary-exp    go to state 81


state 196

   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   52 routine: . "closure"
   53        | . "function"
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
  118            | . block
  119            | . "do" "(" exp ")" block
  120 detach: . "detach"
  121       | . "disown"
  122 primary-exp: . "assert" "(" exp ")"
  123            | . "assert" "{" claims "}"
  124            | . detach "(" exp ")"
  125            | . detach block
  126            | . "isdef" "(" k1_id ")"
  127            | . "watch" "(" exp ")"
  128 lvalue: . id
  129       | . primary-exp "." id
  130       | . primary-exp "." "*"
  131 primary-exp: . "&" id
  132            | . primary-exp "." "&" id
  133 id: . "identifier"
  134 bitor-exp: . "var" bitor-exp
  135          | . "const" "var" bitor-exp
  136 primary-exp: . lvalue
  137            | . lvalue args
  138 new: . "new" "identifier" args.opt
  139 bitor-exp: . new
  140 id: . "new"
  141 primary-exp: . routine formals block
  142 float-exp: . "float"
  143 duration: . "duration"
  144         | . duration "duration"
  150 dictionary: . "[" assocs "]"
  154 tuple: . "(" tuple.exps ")"
  155 literal-exp: . float-exp
  156            | . "angle"
  157            | . duration
  158            | . string
  159            | . "[" exps "]"
  160            | . dictionary
  161            | . tuple
  162 string: . "string"
  163       | . string "string"
  164 literal-exp: . "__HERE__"
  170 lvalue: . primary-exp "[" exps "]"
  171 literal-exp: . "this"
  172            | . "call"
  173 primary-exp: . literal-exp
  174            | . "(" exp ")"
  175            | . "(" error ")"
  176            | . primary-exp "**" primary-exp
  177 unary-exp: . primary-exp
  178          | . "--" lvalue
  179          | . "++" lvalue
  180          | . "+" unary-exp
  181          | . "-" unary-exp
  182          | . "!" unary-exp
  183          | . "compl" unary-exp
  184 bitor-exp: . unary-exp
  185          | . bitor-exp "+" bitor-exp
  186          | . bitor-exp "-" bitor-exp
  187          | . bitor-exp "*" bitor-exp
  188          | . bitor-exp "/" bitor-exp
  188          | bitor-exp "/" . bitor-exp
  189          | . bitor-exp "%" bitor-exp
  190          | . bitor-exp "^" bitor-exp
  191          | . bitor-exp "<<" bitor-exp
  192          | . bitor-exp "bitand" bitor-exp
  193          | . bitor-exp "bitor" bitor-exp
  194          | . bitor-exp ">>" bitor-exp
  217 primary-exp: . "%exp:" unsigned
  218 lvalue: . "%lvalue:" unsigned
  219       | . "%id:" unsigned
  220       | . primary-exp "." "%id:" unsigned
  221 primary-exp: . lvalue "(" "%exps:" unsigned ")"

    "__HERE__"    shift, and go to state 7
    "closure"     shift, and go to state 9
    "const"       shift, and go to state 10
    "function"    shift, and go to state 13
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "var"         shift, and go to state 25
    "watch"       shift, and go to state 27
    "&"           shift, and go to state 29
    "identifier"  shift, and go to state 35
    "--"          shift, and go to state 41
    "++"          shift, and go to state 42
    "do"          shift, and go to state 43
    "assert"      shift, and go to state 44
    "detach"      shift, and go to state 45
    "disown"      shift, and go to state 46
    "new"         shift, and go to state 47
    "angle"       shift, and go to state 48
    "duration"    shift, and go to state 49
    "float"       shift, and go to state 50
    "string"      shift, and go to state 51
    "call"        shift, and go to state 52
    "this"        shift, and go to state 53
    "!"           shift, and go to state 54
    "compl"       shift, and go to state 55
    "-"           shift, and go to state 56
    "+"           shift, and go to state 57
    "%exp:"       shift, and go to state 59
    "%lvalue:"    shift, and go to state 60
    "%id:"        shift, and go to state 61

    block        go to state 66
    routine      go to state 99
    primary-exp  go to state 100
    detach       go to state 70
    lvalue       go to state 119
    id           go to state 101
    bitor-exp    go to state 301
    new          go to state 74
    float-exp    go to state 75
    duration     go to state 76
    dictionary   go to state 77
    tuple        go to state 78
    literal-exp  go to state 79
    string       go to state 80
    unary-exp    go to state 81


state 197

   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   52 routine: . "closure"
   53        | . "function"
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
  118            | . block
  119            | . "do" "(" exp ")" block
  120 detach: . "detach"
  121       | . "disown"
  122 primary-exp: . "assert" "(" exp ")"
  123            | . "assert" "{" claims "}"
  124            | . detach "(" exp ")"
  125            | . detach block
  126            | . "isdef" "(" k1_id ")"
  127            | . "watch" "(" exp ")"
  128 lvalue: . id
  129       | . primary-exp "." id
  130       | . primary-exp "." "*"
  131 primary-exp: . "&" id
  132            | . primary-exp "." "&" id
  133 id: . "identifier"
  134 bitor-exp: . "var" bitor-exp
  135          | . "const" "var" bitor-exp
  136 primary-exp: . lvalue
  137            | . lvalue args
  138 new: . "new" "identifier" args.opt
  139 bitor-exp: . new
  140 id: . "new"
  141 primary-exp: . routine formals block
  142 float-exp: . "float"
  143 duration: . "duration"
  144         | . duration "duration"
  150 dictionary: . "[" assocs "]"
  154 tuple: . "(" tuple.exps ")"
  155 literal-exp: . float-exp
  156            | . "angle"
  157            | . duration
  158            | . string
  159            | . "[" exps "]"
  160            | . dictionary
  161            | . tuple
  162 string: . "string"
  163       | . string "string"
  164 literal-exp: . "__HERE__"
  170 lvalue: . primary-exp "[" exps "]"
  171 literal-exp: . "this"
  172            | . "call"
  173 primary-exp: . literal-exp
  174            | . "(" exp ")"
  175            | . "(" error ")"
  176            | . primary-exp "**" primary-exp
  177 unary-exp: . primary-exp
  178          | . "--" lvalue
  179          | . "++" lvalue
  180          | . "+" unary-exp
  181          | . "-" unary-exp
  182          | . "!" unary-exp
  183          | . "compl" unary-exp
  184 bitor-exp: . unary-exp
  185          | . bitor-exp "+" bitor-exp
  186          | . bitor-exp "-" bitor-exp
  187          | . bitor-exp "*" bitor-exp
  187          | bitor-exp "*" . bitor-exp
  188          | . bitor-exp "/" bitor-exp
  189          | . bitor-exp "%" bitor-exp
  190          | . bitor-exp "^" bitor-exp
  191          | . bitor-exp "<<" bitor-exp
  192          | . bitor-exp "bitand" bitor-exp
  193          | . bitor-exp "bitor" bitor-exp
  194          | . bitor-exp ">>" bitor-exp
  217 primary-exp: . "%exp:" unsigned
  218 lvalue: . "%lvalue:" unsigned
  219       | . "%id:" unsigned
  220       | . primary-exp "." "%id:" unsigned
  221 primary-exp: . lvalue "(" "%exps:" unsigned ")"

    "__HERE__"    shift, and go to state 7
    "closure"     shift, and go to state 9
    "const"       shift, and go to state 10
    "function"    shift, and go to state 13
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "var"         shift, and go to state 25
    "watch"       shift, and go to state 27
    "&"           shift, and go to state 29
    "identifier"  shift, and go to state 35
    "--"          shift, and go to state 41
    "++"          shift, and go to state 42
    "do"          shift, and go to state 43
    "assert"      shift, and go to state 44
    "detach"      shift, and go to state 45
    "disown"      shift, and go to state 46
    "new"         shift, and go to state 47
    "angle"       shift, and go to state 48
    "duration"    shift, and go to state 49
    "float"       shift, and go to state 50
    "string"      shift, and go to state 51
    "call"        shift, and go to state 52
    "this"        shift, and go to state 53
    "!"           shift, and go to state 54
    "compl"       shift, and go to state 55
    "-"           shift, and go to state 56
    "+"           shift, and go to state 57
    "%exp:"       shift, and go to state 59
    "%lvalue:"    shift, and go to state 60
    "%id:"        shift, and go to state 61

    block        go to state 66
    routine      go to state 99
    primary-exp  go to state 100
    detach       go to state 70
    lvalue       go to state 119
    id           go to state 101
    bitor-exp    go to state 302
    new          go to state 74
    float-exp    go to state 75
    duration     go to state 76
    dictionary   go to state 77
    tuple        go to state 78
    literal-exp  go to state 79
    string       go to state 80
    unary-exp    go to state 81


state 198

  195 rel-op: . "!="
  196       | . "!=="
  197       | . "<"
  198       | . "<="
  199       | . "=="
  200       | . "==="
  201       | . "=~="
  202       | . ">"
  203       | . ">="
  204       | . "~="
  205 rel-exp: bitor-exp rel-ops .  ["end of command", "=", "case", "catch", ":", "default", "else", "finally", "if", "in", "{", "onleave", "}", "]", ")", "~", ",", ";", "&", "|", "identifier", "=>", "?", "!", "&&", "||"]
  207 rel-ops: rel-ops . rel-op bitor-exp

    "=~="  shift, and go to state 303
    "=="   shift, and go to state 304
    "==="  shift, and go to state 305
    ">="   shift, and go to state 306
    ">"    shift, and go to state 307
    "<="   shift, and go to state 308
    "<"    shift, and go to state 309
    "!="   shift, and go to state 310
    "!=="  shift, and go to state 311
    "~="   shift, and go to state 312

    $default  reduce using rule 205 (rel-exp)

    rel-op  go to state 313


state 199

  144 duration: duration "duration" .

    $default  reduce using rule 144 (duration)


state 200

  163 string: string "string" .

    $default  reduce using rule 163 (string)


state 201

   14 stmts: stmts "," . cstmt.opt
   15 cstmt.opt: .  ["end of command", "case", "default", "}", ")", ",", ";"]
   16          | . cstmt
   17          | . cstmt "|"
   18 cstmt: . stmt
   19      | . cstmt "|" cstmt
   20      | . cstmt "&" cstmt
   23 stmt: . primary-exp ":" stmt
   24     | . exp
   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   37 exp: . "class" lvalue protos block
   38    | . "package" lvalue protos block
   43 stmt: . "enum" id "{" id.0 "}"
   47     | . "external" "identifier" "identifier"
   48     | . "external" "var" "identifier" "." "identifier" from "identifier"
   49     | . "external" event_or_function "(" unsigned ")" "identifier" "." "identifier" from "identifier"
   50     | . "import" lvalue
   51     | . exp "!" args.opt tilda.opt
   52 routine: . "closure"
   53        | . "function"
   54 stmt: . routine k1_id formals block
   55     | . id id formals block
   62 exp: . exp "=" exp
   63    | . exp "=" exp modifiers
   64    | . lvalue "+=" exp
   65    | . lvalue "-=" exp
   66    | . lvalue "*=" exp
   67    | . lvalue "/=" exp
   68    | . lvalue "^=" exp
   69    | . lvalue "%=" exp
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
   73 stmt: . "at" identifiers "(" exp tilda.opt ")" stmt onleave.opt
   74     | . "at" identifiers "(" event_match ")" stmt onleave.opt
   75     | . "every" "(" exp ")" stmt
   76     | . "if" "(" stmts ")" stmt else.opt
   77     | . "freezeif" "(" exp ")" stmt
   78     | . "stopif" "(" exp ")" stmt
   79     | . "switch" "(" exp ")" "{" cases default.opt "}"
   80     | . "timeout" "(" exp ")" stmt catch.opt else.opt finally.opt
   81     | . "return" exp.opt
   82     | . "break"
   83     | . "continue"
   84     | . "waituntil" "(" exp tilda.opt ")"
   85     | . "waituntil" "(" event_match ")"
   86     | . "whenever" "(" exp tilda.opt ")" stmt else.opt
   87     | . "whenever" "(" event_match ")" stmt else.opt
  108     | . "try" block catches.1 else.opt finally.opt
  109     | . "try" block "finally" block
  110     | . "throw" exp.opt
  111     | . "loop" stmt
  112     | . "for" "(" exp ")" stmt
  113     | . "for" "(" stmt.opt ";" exp ";" stmt.opt ")" stmt
  114     | . "for" "(" "var" "identifier" in_or_colon exp ")" stmt
  115     | . "while" "(" exp ")" stmt
  118 primary-exp: . block
  119            | . "do" "(" exp ")" block
  120 detach: . "detach"
  121       | . "disown"
  122 primary-exp: . "assert" "(" exp ")"
  123            | . "assert" "{" claims "}"
  124            | . detach "(" exp ")"
  125            | . detach block
  126            | . "isdef" "(" k1_id ")"
  127            | . "watch" "(" exp ")"
  128 lvalue: . id
  129       | . primary-exp "." id
  130       | . primary-exp "." "*"
  131 primary-exp: . "&" id
  132            | . primary-exp "." "&" id
  133 id: . "identifier"
  134 bitor-exp: . "var" bitor-exp
  135          | . "const" "var" bitor-exp
  136 primary-exp: . lvalue
  137            | . lvalue args
  138 new: . "new" "identifier" args.opt
  139 bitor-exp: . new
  140 id: . "new"
  141 primary-exp: . routine formals block
  142 float-exp: . "float"
  143 duration: . "duration"
  144         | . duration "duration"
  150 dictionary: . "[" assocs "]"
  154 tuple: . "(" tuple.exps ")"
  155 literal-exp: . float-exp
  156            | . "angle"
  157            | . duration
  158            | . string
  159            | . "[" exps "]"
  160            | . dictionary
  161            | . tuple
  162 string: . "string"
  163       | . string "string"
  164 literal-exp: . "__HERE__"
  170 lvalue: . primary-exp "[" exps "]"
  171 literal-exp: . "this"
  172            | . "call"
  173 primary-exp: . literal-exp
  174            | . "(" exp ")"
  175            | . "(" error ")"
  176            | . primary-exp "**" primary-exp
  177 unary-exp: . primary-exp
  178          | . "--" lvalue
  179          | . "++" lvalue
  180          | . "+" unary-exp
  181          | . "-" unary-exp
  182          | . "!" unary-exp
  183          | . "compl" unary-exp
  184 bitor-exp: . unary-exp
  185          | . bitor-exp "+" bitor-exp
  186          | . bitor-exp "-" bitor-exp
  187          | . bitor-exp "*" bitor-exp
  188          | . bitor-exp "/" bitor-exp
  189          | . bitor-exp "%" bitor-exp
  190          | . bitor-exp "^" bitor-exp
  191          | . bitor-exp "<<" bitor-exp
  192          | . bitor-exp "bitand" bitor-exp
  193          | . bitor-exp "bitor" bitor-exp
  194          | . bitor-exp ">>" bitor-exp
  205 rel-exp: . bitor-exp rel-ops
  208 exp: . rel-exp
  209    | . exp "&&" exp
  210    | . exp "||" exp
  211    | . exp "in" exp
  212    | . exp "!" "in" exp
  216    | . "%unscope:" unsigned
  217 primary-exp: . "%exp:" unsigned
  218 lvalue: . "%lvalue:" unsigned
  219       | . "%id:" unsigned
  220       | . primary-exp "." "%id:" unsigned
  221 primary-exp: . lvalue "(" "%exps:" unsigned ")"

    "__HERE__"    shift, and go to state 7
    "break"       shift, and go to state 8
    "closure"     shift, and go to state 9
    "const"       shift, and go to state 10
    "continue"    shift, and go to state 11
    "freezeif"    shift, and go to state 12
    "function"    shift, and go to state 13
    "if"          shift, and go to state 14
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "return"      shift, and go to state 19
    "stopif"      shift, and go to state 20
    "switch"      shift, and go to state 21
    "throw"       shift, and go to state 22
    "timeout"     shift, and go to state 23
    "try"         shift, and go to state 24
    "var"         shift, and go to state 25
    "waituntil"   shift, and go to state 26
    "watch"       shift, and go to state 27
    "whenever"    shift, and go to state 28
    "&"           shift, and go to state 29
    "every"       shift, and go to state 30
    "for"         shift, and go to state 31
    "loop"        shift, and go to state 32
    "while"       shift, and go to state 33
    "at"          shift, and go to state 34
    "identifier"  shift, and go to state 35
    "class"       shift, and go to state 36
    "package"     shift, and go to state 37
    "enum"        shift, and go to state 38
    "external"    shift, and go to state 39
    "import"      shift, and go to state 40
    "--"          shift, and go to state 41
    "++"          shift, and go to state 42
    "do"          shift, and go to state 43
    "assert"      shift, and go to state 44
    "detach"      shift, and go to state 45
    "disown"      shift, and go to state 46
    "new"         shift, and go to state 47
    "angle"       shift, and go to state 48
    "duration"    shift, and go to state 49
    "float"       shift, and go to state 50
    "string"      shift, and go to state 51
    "call"        shift, and go to state 52
    "this"        shift, and go to state 53
    "!"           shift, and go to state 54
    "compl"       shift, and go to state 55
    "-"           shift, and go to state 56
    "+"           shift, and go to state 57
    "%unscope:"   shift, and go to state 58
    "%exp:"       shift, and go to state 59
    "%lvalue:"    shift, and go to state 60
    "%id:"        shift, and go to state 61

    $default  reduce using rule 15 (cstmt.opt)

    cstmt.opt    go to state 314
    cstmt        go to state 64
    stmt         go to state 65
    block        go to state 66
    exp          go to state 67
    routine      go to state 68
    primary-exp  go to state 69
    detach       go to state 70
    lvalue       go to state 71
    id           go to state 72
    bitor-exp    go to state 73
    new          go to state 74
    float-exp    go to state 75
    duration     go to state 76
    dictionary   go to state 77
    tuple        go to state 78
    literal-exp  go to state 79
    string       go to state 80
    unary-exp    go to state 81
    rel-exp      go to state 82


state 202

   13 stmts: stmts ";" . cstmt.opt
   15 cstmt.opt: .  ["end of command", "case", "default", "}", ")", ",", ";"]
   16          | . cstmt
   17          | . cstmt "|"
   18 cstmt: . stmt
   19      | . cstmt "|" cstmt
   20      | . cstmt "&" cstmt
   23 stmt: . primary-exp ":" stmt
   24     | . exp
   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   37 exp: . "class" lvalue protos block
   38    | . "package" lvalue protos block
   43 stmt: . "enum" id "{" id.0 "}"
   47     | . "external" "identifier" "identifier"
   48     | . "external" "var" "identifier" "." "identifier" from "identifier"
   49     | . "external" event_or_function "(" unsigned ")" "identifier" "." "identifier" from "identifier"
   50     | . "import" lvalue
   51     | . exp "!" args.opt tilda.opt
   52 routine: . "closure"
   53        | . "function"
   54 stmt: . routine k1_id formals block
   55     | . id id formals block
   62 exp: . exp "=" exp
   63    | . exp "=" exp modifiers
   64    | . lvalue "+=" exp
   65    | . lvalue "-=" exp
   66    | . lvalue "*=" exp
   67    | . lvalue "/=" exp
   68    | . lvalue "^=" exp
   69    | . lvalue "%=" exp
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
   73 stmt: . "at" identifiers "(" exp tilda.opt ")" stmt onleave.opt
   74     | . "at" identifiers "(" event_match ")" stmt onleave.opt
   75     | . "every" "(" exp ")" stmt
   76     | . "if" "(" stmts ")" stmt else.opt
   77     | . "freezeif" "(" exp ")" stmt
   78     | . "stopif" "(" exp ")" stmt
   79     | . "switch" "(" exp ")" "{" cases default.opt "}"
   80     | . "timeout" "(" exp ")" stmt catch.opt else.opt finally.opt
   81     | . "return" exp.opt
   82     | . "break"
   83     | . "continue"
   84     | . "waituntil" "(" exp tilda.opt ")"
   85     | . "waituntil" "(" event_match ")"
   86     | . "whenever" "(" exp tilda.opt ")" stmt else.opt
   87     | . "whenever" "(" event_match ")" stmt else.opt
  108     | . "try" block catches.1 else.opt finally.opt
  109     | . "try" block "finally" block
  110     | . "throw" exp.opt
  111     | . "loop" stmt
  112     | . "for" "(" exp ")" stmt
  113     | . "for" "(" stmt.opt ";" exp ";" stmt.opt ")" stmt
  114     | . "for" "(" "var" "identifier" in_or_colon exp ")" stmt
  115     | . "while" "(" exp ")" stmt
  118 primary-exp: . block
  119            | . "do" "(" exp ")" block
  120 detach: . "detach"
  121       | . "disown"
  122 primary-exp: . "assert" "(" exp ")"
  123            | . "assert" "{" claims "}"
  124            | . detach "(" exp ")"
  125            | . detach block
  126            | . "isdef" "(" k1_id ")"
  127            | . "watch" "(" exp ")"
  128 lvalue: . id
  129       | . primary-exp "." id
  130       | . primary-exp "." "*"
  131 primary-exp: . "&" id
  132            | . primary-exp "." "&" id
  133 id: . "identifier"
  134 bitor-exp: . "var" bitor-exp
  135          | . "const" "var" bitor-exp
  136 primary-exp: . lvalue
  137            | . lvalue args
  138 new: . "new" "identifier" args.opt
  139 bitor-exp: . new
  140 id: . "new"
  141 primary-exp: . routine formals block
  142 float-exp: . "float"
  143 duration: . "duration"
  144         | . duration "duration"
  150 dictionary: . "[" assocs "]"
  154 tuple: . "(" tuple.exps ")"
  155 literal-exp: . float-exp
  156            | . "angle"
  157            | . duration
  158            | . string
  159            | . "[" exps "]"
  160            | . dictionary
  161            | . tuple
  162 string: . "string"
  163       | . string "string"
  164 literal-exp: . "__HERE__"
  170 lvalue: . primary-exp "[" exps "]"
  171 literal-exp: . "this"
  172            | . "call"
  173 primary-exp: . literal-exp
  174            | . "(" exp ")"
  175            | . "(" error ")"
  176            | . primary-exp "**" primary-exp
  177 unary-exp: . primary-exp
  178          | . "--" lvalue
  179          | . "++" lvalue
  180          | . "+" unary-exp
  181          | . "-" unary-exp
  182          | . "!" unary-exp
  183          | . "compl" unary-exp
  184 bitor-exp: . unary-exp
  185          | . bitor-exp "+" bitor-exp
  186          | . bitor-exp "-" bitor-exp
  187          | . bitor-exp "*" bitor-exp
  188          | . bitor-exp "/" bitor-exp
  189          | . bitor-exp "%" bitor-exp
  190          | . bitor-exp "^" bitor-exp
  191          | . bitor-exp "<<" bitor-exp
  192          | . bitor-exp "bitand" bitor-exp
  193          | . bitor-exp "bitor" bitor-exp
  194          | . bitor-exp ">>" bitor-exp
  205 rel-exp: . bitor-exp rel-ops
  208 exp: . rel-exp
  209    | . exp "&&" exp
  210    | . exp "||" exp
  211    | . exp "in" exp
  212    | . exp "!" "in" exp
  216    | . "%unscope:" unsigned
  217 primary-exp: . "%exp:" unsigned
  218 lvalue: . "%lvalue:" unsigned
  219       | . "%id:" unsigned
  220       | . primary-exp "." "%id:" unsigned
  221 primary-exp: . lvalue "(" "%exps:" unsigned ")"

    "__HERE__"    shift, and go to state 7
    "break"       shift, and go to state 8
    "closure"     shift, and go to state 9
    "const"       shift, and go to state 10
    "continue"    shift, and go to state 11
    "freezeif"    shift, and go to state 12
    "function"    shift, and go to state 13
    "if"          shift, and go to state 14
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "return"      shift, and go to state 19
    "stopif"      shift, and go to state 20
    "switch"      shift, and go to state 21
    "throw"       shift, and go to state 22
    "timeout"     shift, and go to state 23
    "try"         shift, and go to state 24
    "var"         shift, and go to state 25
    "waituntil"   shift, and go to state 26
    "watch"       shift, and go to state 27
    "whenever"    shift, and go to state 28
    "&"           shift, and go to state 29
    "every"       shift, and go to state 30
    "for"         shift, and go to state 31
    "loop"        shift, and go to state 32
    "while"       shift, and go to state 33
    "at"          shift, and go to state 34
    "identifier"  shift, and go to state 35
    "class"       shift, and go to state 36
    "package"     shift, and go to state 37
    "enum"        shift, and go to state 38
    "external"    shift, and go to state 39
    "import"      shift, and go to state 40
    "--"          shift, and go to state 41
    "++"          shift, and go to state 42
    "do"          shift, and go to state 43
    "assert"      shift, and go to state 44
    "detach"      shift, and go to state 45
    "disown"      shift, and go to state 46
    "new"         shift, and go to state 47
    "angle"       shift, and go to state 48
    "duration"    shift, and go to state 49
    "float"       shift, and go to state 50
    "string"      shift, and go to state 51
    "call"        shift, and go to state 52
    "this"        shift, and go to state 53
    "!"           shift, and go to state 54
    "compl"       shift, and go to state 55
    "-"           shift, and go to state 56
    "+"           shift, and go to state 57
    "%unscope:"   shift, and go to state 58
    "%exp:"       shift, and go to state 59
    "%lvalue:"    shift, and go to state 60
    "%id:"        shift, and go to state 61

    $default  reduce using rule 15 (cstmt.opt)

    cstmt.opt    go to state 315
    cstmt        go to state 64
    stmt         go to state 65
    block        go to state 66
    exp          go to state 67
    routine      go to state 68
    primary-exp  go to state 69
    detach       go to state 70
    lvalue       go to state 71
    id           go to state 72
    bitor-exp    go to state 73
    new          go to state 74
    float-exp    go to state 75
    duration     go to state 76
    dictionary   go to state 77
    tuple        go to state 78
    literal-exp  go to state 79
    string       go to state 80
    unary-exp    go to state 81
    rel-exp      go to state 82


state 203

  135 bitor-exp: "const" "var" bitor-exp .  ["end of command", "=", "case", "catch", ":", "default", "else", "finally", "if", "in", "{", "onleave", "}", "]", ")", "~", ",", ";", "&", "|", "identifier", "=>", "?", "!", "=~=", "==", "===", ">=", ">", "<=", "<", "!=", "!==", "~=", "&&", "||"]
  185          | bitor-exp . "+" bitor-exp
  186          | bitor-exp . "-" bitor-exp
  187          | bitor-exp . "*" bitor-exp
  188          | bitor-exp . "/" bitor-exp
  189          | bitor-exp . "%" bitor-exp
  190          | bitor-exp . "^" bitor-exp
  191          | bitor-exp . "<<" bitor-exp
  192          | bitor-exp . "bitand" bitor-exp
  193          | bitor-exp . "bitor" bitor-exp
  194          | bitor-exp . ">>" bitor-exp

    "bitand"  shift, and go to state 188
    "bitor"   shift, and go to state 189
    "^"       shift, and go to state 190
    ">>"      shift, and go to state 191
    "<<"      shift, and go to state 192
    "-"       shift, and go to state 193
    "%"       shift, and go to state 194
    "+"       shift, and go to state 195
    "/"       shift, and go to state 196
    "*"       shift, and go to state 197

    $default  reduce using rule 135 (bitor-exp)

    Conflict between rule 135 and token "bitand" resolved as shift ("var" < "bitand").
    Conflict between rule 135 and token "bitor" resolved as shift ("var" < "bitor").
    Conflict between rule 135 and token "^" resolved as shift ("var" < "^").
    Conflict between rule 135 and token ">>" resolved as shift ("var" < ">>").
    Conflict between rule 135 and token "<<" resolved as shift ("var" < "<<").
    Conflict between rule 135 and token "-" resolved as shift ("var" < "-").
    Conflict between rule 135 and token "%" resolved as shift ("var" < "%").
    Conflict between rule 135 and token "+" resolved as shift ("var" < "+").
    Conflict between rule 135 and token "/" resolved as shift ("var" < "/").
    Conflict between rule 135 and token "*" resolved as shift ("var" < "*").


state 204

   62 exp: exp . "=" exp
   63    | exp . "=" exp modifiers
   77 stmt: "freezeif" "(" exp . ")" stmt
  209 exp: exp . "&&" exp
  210    | exp . "||" exp
  211    | exp . "in" exp
  212    | exp . "!" "in" exp

    "="   shift, and go to state 160
    "in"  shift, and go to state 161
    ")"   shift, and go to state 316
    "!"   shift, and go to state 211
    "&&"  shift, and go to state 163
    "||"  shift, and go to state 164


state 205

   13 stmts: stmts . ";" cstmt.opt
   14      | stmts . "," cstmt.opt
   76 stmt: "if" "(" stmts . ")" stmt else.opt

    ")"  shift, and go to state 317
    ","  shift, and go to state 201
    ";"  shift, and go to state 202


state 206

   58 k1_id: k1_id . "." "identifier"
  126 primary-exp: "isdef" "(" k1_id . ")"

    "."  shift, and go to state 271
    ")"  shift, and go to state 318


state 207

   26 block: "{" error "}" .

    $default  reduce using rule 26 (block)


state 208

   25 block: "{" stmts "}" .

    $default  reduce using rule 25 (block)


state 209

   27 block: "{" id "~" . id "}"
  133 id: . "identifier"
  140   | . "new"

    "identifier"  shift, and go to state 35
    "new"         shift, and go to state 124

    id  go to state 319


state 210

   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   37 exp: . "class" lvalue protos block
   38    | . "package" lvalue protos block
   52 routine: . "closure"
   53        | . "function"
   62 exp: . exp "=" exp
   63    | . exp "=" exp modifiers
   64    | . lvalue "+=" exp
   65    | . lvalue "-=" exp
   66    | . lvalue "*=" exp
   67    | . lvalue "/=" exp
   68    | . lvalue "^=" exp
   69    | . lvalue "%=" exp
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
  118            | . block
  119            | . "do" "(" exp ")" block
  120 detach: . "detach"
  121       | . "disown"
  122 primary-exp: . "assert" "(" exp ")"
  123            | . "assert" "{" claims "}"
  124            | . detach "(" exp ")"
  125            | . detach block
  126            | . "isdef" "(" k1_id ")"
  127            | . "watch" "(" exp ")"
  128 lvalue: . id
  129       | . primary-exp "." id
  130       | . primary-exp "." "*"
  131 primary-exp: . "&" id
  132            | . primary-exp "." "&" id
  133 id: . "identifier"
  134 bitor-exp: . "var" bitor-exp
  135          | . "const" "var" bitor-exp
  136 primary-exp: . lvalue
  137            | . lvalue args
  138 new: . "new" "identifier" args.opt
  139 bitor-exp: . new
  140 id: . "new"
  141 primary-exp: . routine formals block
  142 float-exp: . "float"
  143 duration: . "duration"
  144         | . duration "duration"
  145 assoc: exp "=>" . exp
  150 dictionary: . "[" assocs "]"
  154 tuple: . "(" tuple.exps ")"
  155 literal-exp: . float-exp
  156            | . "angle"
  157            | . duration
  158            | . string
  159            | . "[" exps "]"
  160            | . dictionary
  161            | . tuple
  162 string: . "string"
  163       | . string "string"
  164 literal-exp: . "__HERE__"
  170 lvalue: . primary-exp "[" exps "]"
  171 literal-exp: . "this"
  172            | . "call"
  173 primary-exp: . literal-exp
  174            | . "(" exp ")"
  175            | . "(" error ")"
  176            | . primary-exp "**" primary-exp
  177 unary-exp: . primary-exp
  178          | . "--" lvalue
  179          | . "++" lvalue
  180          | . "+" unary-exp
  181          | . "-" unary-exp
  182          | . "!" unary-exp
  183          | . "compl" unary-exp
  184 bitor-exp: . unary-exp
  185          | . bitor-exp "+" bitor-exp
  186          | . bitor-exp "-" bitor-exp
  187          | . bitor-exp "*" bitor-exp
  188          | . bitor-exp "/" bitor-exp
  189          | . bitor-exp "%" bitor-exp
  190          | . bitor-exp "^" bitor-exp
  191          | . bitor-exp "<<" bitor-exp
  192          | . bitor-exp "bitand" bitor-exp
  193          | . bitor-exp "bitor" bitor-exp
  194          | . bitor-exp ">>" bitor-exp
  205 rel-exp: . bitor-exp rel-ops
  208 exp: . rel-exp
  209    | . exp "&&" exp
  210    | . exp "||" exp
  211    | . exp "in" exp
  212    | . exp "!" "in" exp
  216    | . "%unscope:" unsigned
  217 primary-exp: . "%exp:" unsigned
  218 lvalue: . "%lvalue:" unsigned
  219       | . "%id:" unsigned
  220       | . primary-exp "." "%id:" unsigned
  221 primary-exp: . lvalue "(" "%exps:" unsigned ")"

    "__HERE__"    shift, and go to state 7
    "closure"     shift, and go to state 9
    "const"       shift, and go to state 10
    "function"    shift, and go to state 13
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "var"         shift, and go to state 25
    "watch"       shift, and go to state 27
    "&"           shift, and go to state 29
    "identifier"  shift, and go to state 35
    "class"       shift, and go to state 36
    "package"     shift, and go to state 37
    "--"          shift, and go to state 41
    "++"          shift, and go to state 42
    "do"          shift, and go to state 43
    "assert"      shift, and go to state 44
    "detach"      shift, and go to state 45
    "disown"      shift, and go to state 46
    "new"         shift, and go to state 47
    "angle"       shift, and go to state 48
    "duration"    shift, and go to state 49
    "float"       shift, and go to state 50
    "string"      shift, and go to state 51
    "call"        shift, and go to state 52
    "this"        shift, and go to state 53
    "!"           shift, and go to state 54
    "compl"       shift, and go to state 55
    "-"           shift, and go to state 56
    "+"           shift, and go to state 57
    "%unscope:"   shift, and go to state 58
    "%exp:"       shift, and go to state 59
    "%lvalue:"    shift, and go to state 60
    "%id:"        shift, and go to state 61

    block        go to state 66
    exp          go to state 320
    routine      go to state 99
    primary-exp  go to state 100
    detach       go to state 70
    lvalue       go to state 71
    id           go to state 101
    bitor-exp    go to state 73
    new          go to state 74
    float-exp    go to state 75
    duration     go to state 76
    dictionary   go to state 77
    tuple        go to state 78
    literal-exp  go to state 79
    string       go to state 80
    unary-exp    go to state 81
    rel-exp      go to state 82


state 211

  212 exp: exp "!" . "in" exp

    "in"  shift, and go to state 261


state 212

   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   37 exp: . "class" lvalue protos block
   38    | . "package" lvalue protos block
   52 routine: . "closure"
   53        | . "function"
   62 exp: . exp "=" exp
   63    | . exp "=" exp modifiers
   64    | . lvalue "+=" exp
   65    | . lvalue "-=" exp
   66    | . lvalue "*=" exp
   67    | . lvalue "/=" exp
   68    | . lvalue "^=" exp
   69    | . lvalue "%=" exp
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
  118            | . block
  119            | . "do" "(" exp ")" block
  120 detach: . "detach"
  121       | . "disown"
  122 primary-exp: . "assert" "(" exp ")"
  123            | . "assert" "{" claims "}"
  124            | . detach "(" exp ")"
  125            | . detach block
  126            | . "isdef" "(" k1_id ")"
  127            | . "watch" "(" exp ")"
  128 lvalue: . id
  129       | . primary-exp "." id
  130       | . primary-exp "." "*"
  131 primary-exp: . "&" id
  132            | . primary-exp "." "&" id
  133 id: . "identifier"
  134 bitor-exp: . "var" bitor-exp
  135          | . "const" "var" bitor-exp
  136 primary-exp: . lvalue
  137            | . lvalue args
  138 new: . "new" "identifier" args.opt
  139 bitor-exp: . new
  140 id: . "new"
  141 primary-exp: . routine formals block
  142 float-exp: . "float"
  143 duration: . "duration"
  144         | . duration "duration"
  145 assoc: . exp "=>" exp
  147 assocs.1: assocs.1 "," . assoc
  150 dictionary: . "[" assocs "]"
  154 tuple: . "(" tuple.exps ")"
  155 literal-exp: . float-exp
  156            | . "angle"
  157            | . duration
  158            | . string
  159            | . "[" exps "]"
  160            | . dictionary
  161            | . tuple
  162 string: . "string"
  163       | . string "string"
  164 literal-exp: . "__HERE__"
  170 lvalue: . primary-exp "[" exps "]"
  171 literal-exp: . "this"
  172            | . "call"
  173 primary-exp: . literal-exp
  174            | . "(" exp ")"
  175            | . "(" error ")"
  176            | . primary-exp "**" primary-exp
  177 unary-exp: . primary-exp
  178          | . "--" lvalue
  179          | . "++" lvalue
  180          | . "+" unary-exp
  181          | . "-" unary-exp
  182          | . "!" unary-exp
  183          | . "compl" unary-exp
  184 bitor-exp: . unary-exp
  185          | . bitor-exp "+" bitor-exp
  186          | . bitor-exp "-" bitor-exp
  187          | . bitor-exp "*" bitor-exp
  188          | . bitor-exp "/" bitor-exp
  189          | . bitor-exp "%" bitor-exp
  190          | . bitor-exp "^" bitor-exp
  191          | . bitor-exp "<<" bitor-exp
  192          | . bitor-exp "bitand" bitor-exp
  193          | . bitor-exp "bitor" bitor-exp
  194          | . bitor-exp ">>" bitor-exp
  205 rel-exp: . bitor-exp rel-ops
  208 exp: . rel-exp
  209    | . exp "&&" exp
  210    | . exp "||" exp
  211    | . exp "in" exp
  212    | . exp "!" "in" exp
  216    | . "%unscope:" unsigned
  217 primary-exp: . "%exp:" unsigned
  218 lvalue: . "%lvalue:" unsigned
  219       | . "%id:" unsigned
  220       | . primary-exp "." "%id:" unsigned
  221 primary-exp: . lvalue "(" "%exps:" unsigned ")"
  249 comma.opt: "," .  ["]"]

    "__HERE__"    shift, and go to state 7
    "closure"     shift, and go to state 9
    "const"       shift, and go to state 10
    "function"    shift, and go to state 13
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "var"         shift, and go to state 25
    "watch"       shift, and go to state 27
    "&"           shift, and go to state 29
    "identifier"  shift, and go to state 35
    "class"       shift, and go to state 36
    "package"     shift, and go to state 37
    "--"          shift, and go to state 41
    "++"          shift, and go to state 42
    "do"          shift, and go to state 43
    "assert"      shift, and go to state 44
    "detach"      shift, and go to state 45
    "disown"      shift, and go to state 46
    "new"         shift, and go to state 47
    "angle"       shift, and go to state 48
    "duration"    shift, and go to state 49
    "float"       shift, and go to state 50
    "string"      shift, and go to state 51
    "call"        shift, and go to state 52
    "this"        shift, and go to state 53
    "!"           shift, and go to state 54
    "compl"       shift, and go to state 55
    "-"           shift, and go to state 56
    "+"           shift, and go to state 57
    "%unscope:"   shift, and go to state 58
    "%exp:"       shift, and go to state 59
    "%lvalue:"    shift, and go to state 60
    "%id:"        shift, and go to state 61

    $default  reduce using rule 249 (comma.opt)

    block        go to state 66
    exp          go to state 321
    routine      go to state 99
    primary-exp  go to state 100
    detach       go to state 70
    lvalue       go to state 71
    id           go to state 101
    bitor-exp    go to state 73
    new          go to state 74
    float-exp    go to state 75
    duration     go to state 76
    assoc        go to state 322
    dictionary   go to state 77
    tuple        go to state 78
    literal-exp  go to state 79
    string       go to state 80
    unary-exp    go to state 81
    rel-exp      go to state 82


state 213

  149 assocs: assocs.1 comma.opt .

    $default  reduce using rule 149 (assocs)


state 214

  150 dictionary: "[" assocs "]" .

    $default  reduce using rule 150 (dictionary)


state 215

  159 literal-exp: "[" exps "]" .

    $default  reduce using rule 159 (literal-exp)


state 216

   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   37 exp: . "class" lvalue protos block
   38    | . "package" lvalue protos block
   52 routine: . "closure"
   53        | . "function"
   62 exp: . exp "=" exp
   63    | . exp "=" exp modifiers
   64    | . lvalue "+=" exp
   65    | . lvalue "-=" exp
   66    | . lvalue "*=" exp
   67    | . lvalue "/=" exp
   68    | . lvalue "^=" exp
   69    | . lvalue "%=" exp
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
  118            | . block
  119            | . "do" "(" exp ")" block
  120 detach: . "detach"
  121       | . "disown"
  122 primary-exp: . "assert" "(" exp ")"
  123            | . "assert" "{" claims "}"
  124            | . detach "(" exp ")"
  125            | . detach block
  126            | . "isdef" "(" k1_id ")"
  127            | . "watch" "(" exp ")"
  128 lvalue: . id
  129       | . primary-exp "." id
  130       | . primary-exp "." "*"
  131 primary-exp: . "&" id
  132            | . primary-exp "." "&" id
  133 id: . "identifier"
  134 bitor-exp: . "var" bitor-exp
  135          | . "const" "var" bitor-exp
  136 primary-exp: . lvalue
  137            | . lvalue args
  138 new: . "new" "identifier" args.opt
  139 bitor-exp: . new
  140 id: . "new"
  141 primary-exp: . routine formals block
  142 float-exp: . "float"
  143 duration: . "duration"
  144         | . duration "duration"
  150 dictionary: . "[" assocs "]"
  154 tuple: . "(" tuple.exps ")"
  155 literal-exp: . float-exp
  156            | . "angle"
  157            | . duration
  158            | . string
  159            | . "[" exps "]"
  160            | . dictionary
  161            | . tuple
  162 string: . "string"
  163       | . string "string"
  164 literal-exp: . "__HERE__"
  170 lvalue: . primary-exp "[" exps "]"
  171 literal-exp: . "this"
  172            | . "call"
  173 primary-exp: . literal-exp
  174            | . "(" exp ")"
  175            | . "(" error ")"
  176            | . primary-exp "**" primary-exp
  177 unary-exp: . primary-exp
  178          | . "--" lvalue
  179          | . "++" lvalue
  180          | . "+" unary-exp
  181          | . "-" unary-exp
  182          | . "!" unary-exp
  183          | . "compl" unary-exp
  184 bitor-exp: . unary-exp
  185          | . bitor-exp "+" bitor-exp
  186          | . bitor-exp "-" bitor-exp
  187          | . bitor-exp "*" bitor-exp
  188          | . bitor-exp "/" bitor-exp
  189          | . bitor-exp "%" bitor-exp
  190          | . bitor-exp "^" bitor-exp
  191          | . bitor-exp "<<" bitor-exp
  192          | . bitor-exp "bitand" bitor-exp
  193          | . bitor-exp "bitor" bitor-exp
  194          | . bitor-exp ">>" bitor-exp
  205 rel-exp: . bitor-exp rel-ops
  208 exp: . rel-exp
  209    | . exp "&&" exp
  210    | . exp "||" exp
  211    | . exp "in" exp
  212    | . exp "!" "in" exp
  216    | . "%unscope:" unsigned
  217 primary-exp: . "%exp:" unsigned
  218 lvalue: . "%lvalue:" unsigned
  219       | . "%id:" unsigned
  220       | . primary-exp "." "%id:" unsigned
  221 primary-exp: . lvalue "(" "%exps:" unsigned ")"
  229 exps.1: exps.1 "," . exp
  249 comma.opt: "," .  ["]", ")"]

    "__HERE__"    shift, and go to state 7
    "closure"     shift, and go to state 9
    "const"       shift, and go to state 10
    "function"    shift, and go to state 13
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "var"         shift, and go to state 25
    "watch"       shift, and go to state 27
    "&"           shift, and go to state 29
    "identifier"  shift, and go to state 35
    "class"       shift, and go to state 36
    "package"     shift, and go to state 37
    "--"          shift, and go to state 41
    "++"          shift, and go to state 42
    "do"          shift, and go to state 43
    "assert"      shift, and go to state 44
    "detach"      shift, and go to state 45
    "disown"      shift, and go to state 46
    "new"         shift, and go to state 47
    "angle"       shift, and go to state 48
    "duration"    shift, and go to state 49
    "float"       shift, and go to state 50
    "string"      shift, and go to state 51
    "call"        shift, and go to state 52
    "this"        shift, and go to state 53
    "!"           shift, and go to state 54
    "compl"       shift, and go to state 55
    "-"           shift, and go to state 56
    "+"           shift, and go to state 57
    "%unscope:"   shift, and go to state 58
    "%exp:"       shift, and go to state 59
    "%lvalue:"    shift, and go to state 60
    "%id:"        shift, and go to state 61

    $default  reduce using rule 249 (comma.opt)

    block        go to state 66
    exp          go to state 323
    routine      go to state 99
    primary-exp  go to state 100
    detach       go to state 70
    lvalue       go to state 71
    id           go to state 101
    bitor-exp    go to state 73
    new          go to state 74
    float-exp    go to state 75
    duration     go to state 76
    dictionary   go to state 77
    tuple        go to state 78
    literal-exp  go to state 79
    string       go to state 80
    unary-exp    go to state 81
    rel-exp      go to state 82


state 217

  227 exps: exps.1 comma.opt .

    $default  reduce using rule 227 (exps)


state 218

  175 primary-exp: "(" error ")" .

    $default  reduce using rule 175 (primary-exp)


state 219

  174 primary-exp: "(" exp ")" .

    $default  reduce using rule 174 (primary-exp)


state 220

  154 tuple: "(" tuple.exps ")" .

    $default  reduce using rule 154 (tuple)


state 221

   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   37 exp: . "class" lvalue protos block
   38    | . "package" lvalue protos block
   52 routine: . "closure"
   53        | . "function"
   62 exp: . exp "=" exp
   63    | . exp "=" exp modifiers
   64    | . lvalue "+=" exp
   65    | . lvalue "-=" exp
   66    | . lvalue "*=" exp
   67    | . lvalue "/=" exp
   68    | . lvalue "^=" exp
   69    | . lvalue "%=" exp
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
  118            | . block
  119            | . "do" "(" exp ")" block
  120 detach: . "detach"
  121       | . "disown"
  122 primary-exp: . "assert" "(" exp ")"
  123            | . "assert" "{" claims "}"
  124            | . detach "(" exp ")"
  125            | . detach block
  126            | . "isdef" "(" k1_id ")"
  127            | . "watch" "(" exp ")"
  128 lvalue: . id
  129       | . primary-exp "." id
  130       | . primary-exp "." "*"
  131 primary-exp: . "&" id
  132            | . primary-exp "." "&" id
  133 id: . "identifier"
  134 bitor-exp: . "var" bitor-exp
  135          | . "const" "var" bitor-exp
  136 primary-exp: . lvalue
  137            | . lvalue args
  138 new: . "new" "identifier" args.opt
  139 bitor-exp: . new
  140 id: . "new"
  141 primary-exp: . routine formals block
  142 float-exp: . "float"
  143 duration: . "duration"
  144         | . duration "duration"
  150 dictionary: . "[" assocs "]"
  152 tuple.exps: exps.1 "," .  [")"]
  154 tuple: . "(" tuple.exps ")"
  155 literal-exp: . float-exp
  156            | . "angle"
  157            | . duration
  158            | . string
  159            | . "[" exps "]"
  160            | . dictionary
  161            | . tuple
  162 string: . "string"
  163       | . string "string"
  164 literal-exp: . "__HERE__"
  170 lvalue: . primary-exp "[" exps "]"
  171 literal-exp: . "this"
  172            | . "call"
  173 primary-exp: . literal-exp
  174            | . "(" exp ")"
  175            | . "(" error ")"
  176            | . primary-exp "**" primary-exp
  177 unary-exp: . primary-exp
  178          | . "--" lvalue
  179          | . "++" lvalue
  180          | . "+" unary-exp
  181          | . "-" unary-exp
  182          | . "!" unary-exp
  183          | . "compl" unary-exp
  184 bitor-exp: . unary-exp
  185          | . bitor-exp "+" bitor-exp
  186          | . bitor-exp "-" bitor-exp
  187          | . bitor-exp "*" bitor-exp
  188          | . bitor-exp "/" bitor-exp
  189          | . bitor-exp "%" bitor-exp
  190          | . bitor-exp "^" bitor-exp
  191          | . bitor-exp "<<" bitor-exp
  192          | . bitor-exp "bitand" bitor-exp
  193          | . bitor-exp "bitor" bitor-exp
  194          | . bitor-exp ">>" bitor-exp
  205 rel-exp: . bitor-exp rel-ops
  208 exp: . rel-exp
  209    | . exp "&&" exp
  210    | . exp "||" exp
  211    | . exp "in" exp
  212    | . exp "!" "in" exp
  216    | . "%unscope:" unsigned
  217 primary-exp: . "%exp:" unsigned
  218 lvalue: . "%lvalue:" unsigned
  219       | . "%id:" unsigned
  220       | . primary-exp "." "%id:" unsigned
  221 primary-exp: . lvalue "(" "%exps:" unsigned ")"
  229 exps.1: exps.1 "," . exp
  230 exps.2: exps.1 "," . exp

    "__HERE__"    shift, and go to state 7
    "closure"     shift, and go to state 9
    "const"       shift, and go to state 10
    "function"    shift, and go to state 13
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "var"         shift, and go to state 25
    "watch"       shift, and go to state 27
    "&"           shift, and go to state 29
    "identifier"  shift, and go to state 35
    "class"       shift, and go to state 36
    "package"     shift, and go to state 37
    "--"          shift, and go to state 41
    "++"          shift, and go to state 42
    "do"          shift, and go to state 43
    "assert"      shift, and go to state 44
    "detach"      shift, and go to state 45
    "disown"      shift, and go to state 46
    "new"         shift, and go to state 47
    "angle"       shift, and go to state 48
    "duration"    shift, and go to state 49
    "float"       shift, and go to state 50
    "string"      shift, and go to state 51
    "call"        shift, and go to state 52
    "this"        shift, and go to state 53
    "!"           shift, and go to state 54
    "compl"       shift, and go to state 55
    "-"           shift, and go to state 56
    "+"           shift, and go to state 57
    "%unscope:"   shift, and go to state 58
    "%exp:"       shift, and go to state 59
    "%lvalue:"    shift, and go to state 60
    "%id:"        shift, and go to state 61

    $default  reduce using rule 152 (tuple.exps)

    block        go to state 66
    exp          go to state 324
    routine      go to state 99
    primary-exp  go to state 100
    detach       go to state 70
    lvalue       go to state 71
    id           go to state 101
    bitor-exp    go to state 73
    new          go to state 74
    float-exp    go to state 75
    duration     go to state 76
    dictionary   go to state 77
    tuple        go to state 78
    literal-exp  go to state 79
    string       go to state 80
    unary-exp    go to state 81
    rel-exp      go to state 82


state 222

   62 exp: exp . "=" exp
   63    | exp . "=" exp modifiers
   78 stmt: "stopif" "(" exp . ")" stmt
  209 exp: exp . "&&" exp
  210    | exp . "||" exp
  211    | exp . "in" exp
  212    | exp . "!" "in" exp

    "="   shift, and go to state 160
    "in"  shift, and go to state 161
    ")"   shift, and go to state 325
    "!"   shift, and go to state 211
    "&&"  shift, and go to state 163
    "||"  shift, and go to state 164


state 223

   62 exp: exp . "=" exp
   63    | exp . "=" exp modifiers
   79 stmt: "switch" "(" exp . ")" "{" cases default.opt "}"
  209 exp: exp . "&&" exp
  210    | exp . "||" exp
  211    | exp . "in" exp
  212    | exp . "!" "in" exp

    "="   shift, and go to state 160
    "in"  shift, and go to state 161
    ")"   shift, and go to state 326
    "!"   shift, and go to state 211
    "&&"  shift, and go to state 163
    "||"  shift, and go to state 164


state 224

   62 exp: exp . "=" exp
   63    | exp . "=" exp modifiers
   80 stmt: "timeout" "(" exp . ")" stmt catch.opt else.opt finally.opt
  209 exp: exp . "&&" exp
  210    | exp . "||" exp
  211    | exp . "in" exp
  212    | exp . "!" "in" exp

    "="   shift, and go to state 160
    "in"  shift, and go to state 161
    ")"   shift, and go to state 327
    "!"   shift, and go to state 211
    "&&"  shift, and go to state 163
    "||"  shift, and go to state 164


state 225

  101 match.opt: .  ["{"]
  102          | . "(" match ")"
  103 catch: "catch" . match.opt block

    "("  shift, and go to state 328

    $default  reduce using rule 101 (match.opt)

    match.opt  go to state 329


state 226

   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
  109 stmt: "try" block "finally" . block

    "{"  shift, and go to state 16

    block  go to state 330


state 227

   90 else.opt: .  ["end of command", "case", "default", "finally", "onleave", "}", ")", ",", ";", "&", "|"]
   91         | . "else" stmt
   98 catches.1: catches.1 . catch
  103 catch: . "catch" match.opt block
  108 stmt: "try" block catches.1 . else.opt finally.opt

    "catch"  shift, and go to state 225
    "else"   shift, and go to state 331

    $default  reduce using rule 90 (else.opt)

    else.opt  go to state 332
    catch     go to state 333

    Conflict between rule 90 and token "catch" resolved as shift (EMPTY < "catch").
    Conflict between rule 90 and token "else" resolved as shift (EMPTY < "else").


state 228

   97 catches.1: catch .

    $default  reduce using rule 97 (catches.1)


state 229

   62 exp: exp . "=" exp
   63    | exp . "=" exp modifiers
   84 stmt: "waituntil" "(" exp . tilda.opt ")"
  165 event_match: exp . "?" args.opt tilda.opt guard.opt
  168 tilda.opt: .  [")"]
  169          | . "~" exp
  209 exp: exp . "&&" exp
  210    | exp . "||" exp
  211    | exp . "in" exp
  212    | exp . "!" "in" exp

    "="   shift, and go to state 160
    "in"  shift, and go to state 161
    "~"   shift, and go to state 334
    "?"   shift, and go to state 335
    "!"   shift, and go to state 211
    "&&"  shift, and go to state 163
    "||"  shift, and go to state 164

    $default  reduce using rule 168 (tilda.opt)

    tilda.opt  go to state 336


state 230

   85 stmt: "waituntil" "(" event_match . ")"

    ")"  shift, and go to state 337


state 231

   62 exp: exp . "=" exp
   63    | exp . "=" exp modifiers
  127 primary-exp: "watch" "(" exp . ")"
  209 exp: exp . "&&" exp
  210    | exp . "||" exp
  211    | exp . "in" exp
  212    | exp . "!" "in" exp

    "="   shift, and go to state 160
    "in"  shift, and go to state 161
    ")"   shift, and go to state 338
    "!"   shift, and go to state 211
    "&&"  shift, and go to state 163
    "||"  shift, and go to state 164


state 232

   62 exp: exp . "=" exp
   63    | exp . "=" exp modifiers
   86 stmt: "whenever" "(" exp . tilda.opt ")" stmt else.opt
  165 event_match: exp . "?" args.opt tilda.opt guard.opt
  168 tilda.opt: .  [")"]
  169          | . "~" exp
  209 exp: exp . "&&" exp
  210    | exp . "||" exp
  211    | exp . "in" exp
  212    | exp . "!" "in" exp

    "="   shift, and go to state 160
    "in"  shift, and go to state 161
    "~"   shift, and go to state 334
    "?"   shift, and go to state 335
    "!"   shift, and go to state 211
    "&&"  shift, and go to state 163
    "||"  shift, and go to state 164

    $default  reduce using rule 168 (tilda.opt)

    tilda.opt  go to state 339


state 233

   87 stmt: "whenever" "(" event_match . ")" stmt else.opt

    ")"  shift, and go to state 340


state 234

   62 exp: exp . "=" exp
   63    | exp . "=" exp modifiers
   75 stmt: "every" "(" exp . ")" stmt
  209 exp: exp . "&&" exp
  210    | exp . "||" exp
  211    | exp . "in" exp
  212    | exp . "!" "in" exp

    "="   shift, and go to state 160
    "in"  shift, and go to state 161
    ")"   shift, and go to state 341
    "!"   shift, and go to state 211
    "&&"  shift, and go to state 163
    "||"  shift, and go to state 164


state 235

   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   52 routine: . "closure"
   53        | . "function"
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
  114 stmt: "for" "(" "var" . "identifier" in_or_colon exp ")" stmt
  118 primary-exp: . block
  119            | . "do" "(" exp ")" block
  120 detach: . "detach"
  121       | . "disown"
  122 primary-exp: . "assert" "(" exp ")"
  123            | . "assert" "{" claims "}"
  124            | . detach "(" exp ")"
  125            | . detach block
  126            | . "isdef" "(" k1_id ")"
  127            | . "watch" "(" exp ")"
  128 lvalue: . id
  129       | . primary-exp "." id
  130       | . primary-exp "." "*"
  131 primary-exp: . "&" id
  132            | . primary-exp "." "&" id
  133 id: . "identifier"
  134 bitor-exp: . "var" bitor-exp
  134          | "var" . bitor-exp
  135          | . "const" "var" bitor-exp
  136 primary-exp: . lvalue
  137            | . lvalue args
  138 new: . "new" "identifier" args.opt
  139 bitor-exp: . new
  140 id: . "new"
  141 primary-exp: . routine formals block
  142 float-exp: . "float"
  143 duration: . "duration"
  144         | . duration "duration"
  150 dictionary: . "[" assocs "]"
  154 tuple: . "(" tuple.exps ")"
  155 literal-exp: . float-exp
  156            | . "angle"
  157            | . duration
  158            | . string
  159            | . "[" exps "]"
  160            | . dictionary
  161            | . tuple
  162 string: . "string"
  163       | . string "string"
  164 literal-exp: . "__HERE__"
  170 lvalue: . primary-exp "[" exps "]"
  171 literal-exp: . "this"
  172            | . "call"
  173 primary-exp: . literal-exp
  174            | . "(" exp ")"
  175            | . "(" error ")"
  176            | . primary-exp "**" primary-exp
  177 unary-exp: . primary-exp
  178          | . "--" lvalue
  179          | . "++" lvalue
  180          | . "+" unary-exp
  181          | . "-" unary-exp
  182          | . "!" unary-exp
  183          | . "compl" unary-exp
  184 bitor-exp: . unary-exp
  185          | . bitor-exp "+" bitor-exp
  186          | . bitor-exp "-" bitor-exp
  187          | . bitor-exp "*" bitor-exp
  188          | . bitor-exp "/" bitor-exp
  189          | . bitor-exp "%" bitor-exp
  190          | . bitor-exp "^" bitor-exp
  191          | . bitor-exp "<<" bitor-exp
  192          | . bitor-exp "bitand" bitor-exp
  193          | . bitor-exp "bitor" bitor-exp
  194          | . bitor-exp ">>" bitor-exp
  217 primary-exp: . "%exp:" unsigned
  218 lvalue: . "%lvalue:" unsigned
  219       | . "%id:" unsigned
  220       | . primary-exp "." "%id:" unsigned
  221 primary-exp: . lvalue "(" "%exps:" unsigned ")"

    "__HERE__"    shift, and go to state 7
    "closure"     shift, and go to state 9
    "const"       shift, and go to state 10
    "function"    shift, and go to state 13
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "var"         shift, and go to state 25
    "watch"       shift, and go to state 27
    "&"           shift, and go to state 29
    "identifier"  shift, and go to state 342
    "--"          shift, and go to state 41
    "++"          shift, and go to state 42
    "do"          shift, and go to state 43
    "assert"      shift, and go to state 44
    "detach"      shift, and go to state 45
    "disown"      shift, and go to state 46
    "new"         shift, and go to state 47
    "angle"       shift, and go to state 48
    "duration"    shift, and go to state 49
    "float"       shift, and go to state 50
    "string"      shift, and go to state 51
    "call"        shift, and go to state 52
    "this"        shift, and go to state 53
    "!"           shift, and go to state 54
    "compl"       shift, and go to state 55
    "-"           shift, and go to state 56
    "+"           shift, and go to state 57
    "%exp:"       shift, and go to state 59
    "%lvalue:"    shift, and go to state 60
    "%id:"        shift, and go to state 61

    block        go to state 66
    routine      go to state 99
    primary-exp  go to state 100
    detach       go to state 70
    lvalue       go to state 119
    id           go to state 101
    bitor-exp    go to state 120
    new          go to state 74
    float-exp    go to state 75
    duration     go to state 76
    dictionary   go to state 77
    tuple        go to state 78
    literal-exp  go to state 79
    string       go to state 80
    unary-exp    go to state 81


state 236

  113 stmt: "for" "(" stmt.opt . ";" exp ";" stmt.opt ")" stmt

    ";"  shift, and go to state 343


state 237

   22 stmt.opt: stmt .

    $default  reduce using rule 22 (stmt.opt)


state 238

   24 stmt: exp .  [";"]
   51     | exp . "!" args.opt tilda.opt
   62 exp: exp . "=" exp
   63    | exp . "=" exp modifiers
  112 stmt: "for" "(" exp . ")" stmt
  209 exp: exp . "&&" exp
  210    | exp . "||" exp
  211    | exp . "in" exp
  212    | exp . "!" "in" exp

    "="   shift, and go to state 160
    "in"  shift, and go to state 161
    ")"   shift, and go to state 344
    "!"   shift, and go to state 162
    "&&"  shift, and go to state 163
    "||"  shift, and go to state 164

    $default  reduce using rule 24 (stmt)


state 239

   62 exp: exp . "=" exp
   63    | exp . "=" exp modifiers
  115 stmt: "while" "(" exp . ")" stmt
  209 exp: exp . "&&" exp
  210    | exp . "||" exp
  211    | exp . "in" exp
  212    | exp . "!" "in" exp

    "="   shift, and go to state 160
    "in"  shift, and go to state 161
    ")"   shift, and go to state 345
    "!"   shift, and go to state 211
    "&&"  shift, and go to state 163
    "||"  shift, and go to state 164


state 240

   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   37 exp: . "class" lvalue protos block
   38    | . "package" lvalue protos block
   52 routine: . "closure"
   53        | . "function"
   62 exp: . exp "=" exp
   63    | . exp "=" exp modifiers
   64    | . lvalue "+=" exp
   65    | . lvalue "-=" exp
   66    | . lvalue "*=" exp
   67    | . lvalue "/=" exp
   68    | . lvalue "^=" exp
   69    | . lvalue "%=" exp
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
   73 stmt: "at" identifiers "(" . exp tilda.opt ")" stmt onleave.opt
   74     | "at" identifiers "(" . event_match ")" stmt onleave.opt
  118 primary-exp: . block
  119            | . "do" "(" exp ")" block
  120 detach: . "detach"
  121       | . "disown"
  122 primary-exp: . "assert" "(" exp ")"
  123            | . "assert" "{" claims "}"
  124            | . detach "(" exp ")"
  125            | . detach block
  126            | . "isdef" "(" k1_id ")"
  127            | . "watch" "(" exp ")"
  128 lvalue: . id
  129       | . primary-exp "." id
  130       | . primary-exp "." "*"
  131 primary-exp: . "&" id
  132            | . primary-exp "." "&" id
  133 id: . "identifier"
  134 bitor-exp: . "var" bitor-exp
  135          | . "const" "var" bitor-exp
  136 primary-exp: . lvalue
  137            | . lvalue args
  138 new: . "new" "identifier" args.opt
  139 bitor-exp: . new
  140 id: . "new"
  141 primary-exp: . routine formals block
  142 float-exp: . "float"
  143 duration: . "duration"
  144         | . duration "duration"
  150 dictionary: . "[" assocs "]"
  154 tuple: . "(" tuple.exps ")"
  155 literal-exp: . float-exp
  156            | . "angle"
  157            | . duration
  158            | . string
  159            | . "[" exps "]"
  160            | . dictionary
  161            | . tuple
  162 string: . "string"
  163       | . string "string"
  164 literal-exp: . "__HERE__"
  165 event_match: . exp "?" args.opt tilda.opt guard.opt
  170 lvalue: . primary-exp "[" exps "]"
  171 literal-exp: . "this"
  172            | . "call"
  173 primary-exp: . literal-exp
  174            | . "(" exp ")"
  175            | . "(" error ")"
  176            | . primary-exp "**" primary-exp
  177 unary-exp: . primary-exp
  178          | . "--" lvalue
  179          | . "++" lvalue
  180          | . "+" unary-exp
  181          | . "-" unary-exp
  182          | . "!" unary-exp
  183          | . "compl" unary-exp
  184 bitor-exp: . unary-exp
  185          | . bitor-exp "+" bitor-exp
  186          | . bitor-exp "-" bitor-exp
  187          | . bitor-exp "*" bitor-exp
  188          | . bitor-exp "/" bitor-exp
  189          | . bitor-exp "%" bitor-exp
  190          | . bitor-exp "^" bitor-exp
  191          | . bitor-exp "<<" bitor-exp
  192          | . bitor-exp "bitand" bitor-exp
  193          | . bitor-exp "bitor" bitor-exp
  194          | . bitor-exp ">>" bitor-exp
  205 rel-exp: . bitor-exp rel-ops
  208 exp: . rel-exp
  209    | . exp "&&" exp
  210    | . exp "||" exp
  211    | . exp "in" exp
  212    | . exp "!" "in" exp
  216    | . "%unscope:" unsigned
  217 primary-exp: . "%exp:" unsigned
  218 lvalue: . "%lvalue:" unsigned
  219       | . "%id:" unsigned
  220       | . primary-exp "." "%id:" unsigned
  221 primary-exp: . lvalue "(" "%exps:" unsigned ")"

    "__HERE__"    shift, and go to state 7
    "closure"     shift, and go to state 9
    "const"       shift, and go to state 10
    "function"    shift, and go to state 13
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "var"         shift, and go to state 25
    "watch"       shift, and go to state 27
    "&"           shift, and go to state 29
    "identifier"  shift, and go to state 35
    "class"       shift, and go to state 36
    "package"     shift, and go to state 37
    "--"          shift, and go to state 41
    "++"          shift, and go to state 42
    "do"          shift, and go to state 43
    "assert"      shift, and go to state 44
    "detach"      shift, and go to state 45
    "disown"      shift, and go to state 46
    "new"         shift, and go to state 47
    "angle"       shift, and go to state 48
    "duration"    shift, and go to state 49
    "float"       shift, and go to state 50
    "string"      shift, and go to state 51
    "call"        shift, and go to state 52
    "this"        shift, and go to state 53
    "!"           shift, and go to state 54
    "compl"       shift, and go to state 55
    "-"           shift, and go to state 56
    "+"           shift, and go to state 57
    "%unscope:"   shift, and go to state 58
    "%exp:"       shift, and go to state 59
    "%lvalue:"    shift, and go to state 60
    "%id:"        shift, and go to state 61

    block        go to state 66
    exp          go to state 346
    routine      go to state 99
    primary-exp  go to state 100
    detach       go to state 70
    lvalue       go to state 71
    id           go to state 101
    bitor-exp    go to state 73
    new          go to state 74
    float-exp    go to state 75
    duration     go to state 76
    dictionary   go to state 77
    tuple        go to state 78
    literal-exp  go to state 79
    string       go to state 80
    event_match  go to state 347
    unary-exp    go to state 81
    rel-exp      go to state 82


state 241

  235 identifiers: identifiers "identifier" .

    $default  reduce using rule 235 (identifiers)


state 242

   28 visibility: .  ["__HERE__", "closure", "const", "function", "isdef", "{", "[", "(", "var", "watch", "&", "identifier", "class", "package", "--", "++", "do", "assert", "detach", "disown", "new", "angle", "duration", "float", "string", "call", "this", "!", "compl", "-", "+", "%unscope:", "%exp:", "%lvalue:", "%id:"]
   29           | . "private"
   30           | . "protected"
   31           | . "public"
   32 proto: . visibility exp
   33 protos.1: . proto
   34         | . protos.1 "," proto
   36 protos: ":" . protos.1

    "private"    shift, and go to state 348
    "protected"  shift, and go to state 349
    "public"     shift, and go to state 350

    $default  reduce using rule 28 (visibility)

    visibility  go to state 351
    proto       go to state 352
    protos.1    go to state 353


state 243

   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   37 exp: "class" lvalue protos . block

    "{"  shift, and go to state 16

    block  go to state 354


state 244

   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   38 exp: "package" lvalue protos . block

    "{"  shift, and go to state 16

    block  go to state 355


state 245

   39 id.0: .  ["}"]
   40     | . id.1 comma.opt
   41 id.1: . id
   42     | . id.1 "," id
   43 stmt: "enum" id "{" . id.0 "}"
  133 id: . "identifier"
  140   | . "new"

    "identifier"  shift, and go to state 35
    "new"         shift, and go to state 124

    $default  reduce using rule 39 (id.0)

    id.0  go to state 356
    id.1  go to state 357
    id    go to state 358


state 246

   48 stmt: "external" "var" "identifier" . "." "identifier" from "identifier"

    "."  shift, and go to state 359


state 247

   47 stmt: "external" "identifier" "identifier" .

    $default  reduce using rule 47 (stmt)


state 248

   49 stmt: "external" event_or_function "(" . unsigned ")" "identifier" "." "identifier" from "identifier"
  215 unsigned: . "float"

    "float"  shift, and go to state 150

    unsigned  go to state 360


state 249

   62 exp: exp . "=" exp
   63    | exp . "=" exp modifiers
  119 primary-exp: "do" "(" exp . ")" block
  209 exp: exp . "&&" exp
  210    | exp . "||" exp
  211    | exp . "in" exp
  212    | exp . "!" "in" exp

    "="   shift, and go to state 160
    "in"  shift, and go to state 161
    ")"   shift, and go to state 361
    "!"   shift, and go to state 211
    "&&"  shift, and go to state 163
    "||"  shift, and go to state 164


state 250

   62 exp: exp . "=" exp
   63    | exp . "=" exp modifiers
  209    | exp . "&&" exp
  210    | exp . "||" exp
  211    | exp . "in" exp
  212    | exp . "!" "in" exp
  224 claims.1: exp .  ["}", ";"]

    "="   shift, and go to state 160
    "in"  shift, and go to state 161
    "!"   shift, and go to state 211
    "&&"  shift, and go to state 163
    "||"  shift, and go to state 164

    $default  reduce using rule 224 (claims.1)


state 251

  123 primary-exp: "assert" "{" claims . "}"

    "}"  shift, and go to state 362


state 252

  223 claims: claims.1 . semi.opt
  225 claims.1: claims.1 . ";" exp
  250 semi.opt: .  ["}"]
  251         | . ";"

    ";"  shift, and go to state 363

    $default  reduce using rule 250 (semi.opt)

    semi.opt  go to state 364


state 253

   62 exp: exp . "=" exp
   63    | exp . "=" exp modifiers
  122 primary-exp: "assert" "(" exp . ")"
  209 exp: exp . "&&" exp
  210    | exp . "||" exp
  211    | exp . "in" exp
  212    | exp . "!" "in" exp

    "="   shift, and go to state 160
    "in"  shift, and go to state 161
    ")"   shift, and go to state 365
    "!"   shift, and go to state 211
    "&&"  shift, and go to state 163
    "||"  shift, and go to state 164


state 254

   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   37 exp: . "class" lvalue protos block
   38    | . "package" lvalue protos block
   52 routine: . "closure"
   53        | . "function"
   62 exp: . exp "=" exp
   63    | . exp "=" exp modifiers
   64    | . lvalue "+=" exp
   65    | . lvalue "-=" exp
   66    | . lvalue "*=" exp
   67    | . lvalue "/=" exp
   68    | . lvalue "^=" exp
   69    | . lvalue "%=" exp
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
  118            | . block
  119            | . "do" "(" exp ")" block
  120 detach: . "detach"
  121       | . "disown"
  122 primary-exp: . "assert" "(" exp ")"
  123            | . "assert" "{" claims "}"
  124            | . detach "(" exp ")"
  125            | . detach block
  126            | . "isdef" "(" k1_id ")"
  127            | . "watch" "(" exp ")"
  128 lvalue: . id
  129       | . primary-exp "." id
  130       | . primary-exp "." "*"
  131 primary-exp: . "&" id
  132            | . primary-exp "." "&" id
  133 id: . "identifier"
  134 bitor-exp: . "var" bitor-exp
  135          | . "const" "var" bitor-exp
  136 primary-exp: . lvalue
  137            | . lvalue args
  138 new: . "new" "identifier" args.opt
  139 bitor-exp: . new
  140 id: . "new"
  141 primary-exp: . routine formals block
  142 float-exp: . "float"
  143 duration: . "duration"
  144         | . duration "duration"
  150 dictionary: . "[" assocs "]"
  154 tuple: . "(" tuple.exps ")"
  155 literal-exp: . float-exp
  156            | . "angle"
  157            | . duration
  158            | . string
  159            | . "[" exps "]"
  160            | . dictionary
  161            | . tuple
  162 string: . "string"
  163       | . string "string"
  164 literal-exp: . "__HERE__"
  170 lvalue: . primary-exp "[" exps "]"
  171 literal-exp: . "this"
  172            | . "call"
  173 primary-exp: . literal-exp
  174            | . "(" exp ")"
  175            | . "(" error ")"
  176            | . primary-exp "**" primary-exp
  177 unary-exp: . primary-exp
  178          | . "--" lvalue
  179          | . "++" lvalue
  180          | . "+" unary-exp
  181          | . "-" unary-exp
  182          | . "!" unary-exp
  183          | . "compl" unary-exp
  184 bitor-exp: . unary-exp
  185          | . bitor-exp "+" bitor-exp
  186          | . bitor-exp "-" bitor-exp
  187          | . bitor-exp "*" bitor-exp
  188          | . bitor-exp "/" bitor-exp
  189          | . bitor-exp "%" bitor-exp
  190          | . bitor-exp "^" bitor-exp
  191          | . bitor-exp "<<" bitor-exp
  192          | . bitor-exp "bitand" bitor-exp
  193          | . bitor-exp "bitor" bitor-exp
  194          | . bitor-exp ">>" bitor-exp
  205 rel-exp: . bitor-exp rel-ops
  208 exp: . rel-exp
  209    | . exp "&&" exp
  210    | . exp "||" exp
  211    | . exp "in" exp
  212    | . exp "!" "in" exp
  216    | . "%unscope:" unsigned
  217 primary-exp: . "%exp:" unsigned
  218 lvalue: . "%lvalue:" unsigned
  219       | . "%id:" unsigned
  220       | . primary-exp "." "%id:" unsigned
  221 primary-exp: . lvalue "(" "%exps:" unsigned ")"
  226 exps: .  [")"]
  227     | . exps.1 comma.opt
  228 exps.1: . exp
  229       | . exps.1 "," exp
  231 args: "(" . exps ")"

    "__HERE__"    shift, and go to state 7
    "closure"     shift, and go to state 9
    "const"       shift, and go to state 10
    "function"    shift, and go to state 13
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "var"         shift, and go to state 25
    "watch"       shift, and go to state 27
    "&"           shift, and go to state 29
    "identifier"  shift, and go to state 35
    "class"       shift, and go to state 36
    "package"     shift, and go to state 37
    "--"          shift, and go to state 41
    "++"          shift, and go to state 42
    "do"          shift, and go to state 43
    "assert"      shift, and go to state 44
    "detach"      shift, and go to state 45
    "disown"      shift, and go to state 46
    "new"         shift, and go to state 47
    "angle"       shift, and go to state 48
    "duration"    shift, and go to state 49
    "float"       shift, and go to state 50
    "string"      shift, and go to state 51
    "call"        shift, and go to state 52
    "this"        shift, and go to state 53
    "!"           shift, and go to state 54
    "compl"       shift, and go to state 55
    "-"           shift, and go to state 56
    "+"           shift, and go to state 57
    "%unscope:"   shift, and go to state 58
    "%exp:"       shift, and go to state 59
    "%lvalue:"    shift, and go to state 60
    "%id:"        shift, and go to state 61

    $default  reduce using rule 226 (exps)

    block        go to state 66
    exp          go to state 275
    routine      go to state 99
    primary-exp  go to state 100
    detach       go to state 70
    lvalue       go to state 71
    id           go to state 101
    bitor-exp    go to state 73
    new          go to state 74
    float-exp    go to state 75
    duration     go to state 76
    dictionary   go to state 77
    tuple        go to state 78
    literal-exp  go to state 79
    string       go to state 80
    unary-exp    go to state 81
    rel-exp      go to state 82
    exps         go to state 284
    exps.1       go to state 106


state 255

  233 args.opt: args .

    $default  reduce using rule 233 (args.opt)


state 256

  138 new: "new" "identifier" args.opt .

    $default  reduce using rule 138 (new)


state 257

   19 cstmt: cstmt . "|" cstmt
   20      | cstmt . "&" cstmt
   20      | cstmt "&" cstmt .  ["end of command", "case", "default", "}", ")", ",", ";", "&", "|"]

    $default  reduce using rule 20 (cstmt)

    Conflict between rule 20 and token "&" resolved as reduce (%left "&").
    Conflict between rule 20 and token "|" resolved as reduce ("|" < "&").


state 258

   19 cstmt: cstmt . "|" cstmt
   19      | cstmt "|" cstmt .  ["end of command", "case", "default", "}", ")", ",", ";", "|"]
   20      | cstmt . "&" cstmt

    "&"  shift, and go to state 158

    $default  reduce using rule 19 (cstmt)

    Conflict between rule 19 and token "&" resolved as shift ("|" < "&").
    Conflict between rule 19 and token "|" resolved as reduce (%left "|").


state 259

   59 modifier: . "identifier" ":" exp
   60 modifiers: . modifier
   61          | . modifiers modifier
   62 exp: exp . "=" exp
   62    | exp "=" exp .  ["end of command", "case", "catch", ":", "default", "else", "finally", "if", "{", "onleave", "}", "]", ")", "~", ",", ";", "&", "|", "=>", "?"]
   63    | exp . "=" exp modifiers
   63    | exp "=" exp . modifiers
  209    | exp . "&&" exp
  210    | exp . "||" exp
  211    | exp . "in" exp
  212    | exp . "!" "in" exp

    "="           shift, and go to state 160
    "in"          shift, and go to state 161
    "identifier"  shift, and go to state 366
    "!"           shift, and go to state 211
    "&&"          shift, and go to state 163
    "||"          shift, and go to state 164

    $default  reduce using rule 62 (exp)

    modifier   go to state 367
    modifiers  go to state 368

    Conflict between rule 62 and token "=" resolved as shift (ASSIGN < "=").
    Conflict between rule 62 and token "in" resolved as shift (ASSIGN < "in").
    Conflict between rule 62 and token "identifier" resolved as shift (ASSIGN < "identifier").
    Conflict between rule 62 and token "!" resolved as shift (ASSIGN < "!").
    Conflict between rule 62 and token "&&" resolved as shift (ASSIGN < "&&").
    Conflict between rule 62 and token "||" resolved as shift (ASSIGN < "||").


state 260

   62 exp: exp . "=" exp
   63    | exp . "=" exp modifiers
  209    | exp . "&&" exp
  210    | exp . "||" exp
  211    | exp . "in" exp
  211    | exp "in" exp .  ["end of command", "=", "case", "catch", ":", "default", "else", "finally", "if", "{", "onleave", "}", "]", ")", "~", ",", ";", "&", "|", "identifier", "=>", "?", "&&", "||"]
  212    | exp . "!" "in" exp

    "!"  shift, and go to state 211

    "in"  error (nonassociative)

    $default  reduce using rule 211 (exp)

    Conflict between rule 211 and token "=" resolved as reduce ("=" < "in").
    Conflict between rule 211 and token "in" resolved as an error (%nonassoc "in").
    Conflict between rule 211 and token "!" resolved as shift ("in" < "!").
    Conflict between rule 211 and token "&&" resolved as reduce ("&&" < "in").
    Conflict between rule 211 and token "||" resolved as reduce ("||" < "in").


state 261

   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   37 exp: . "class" lvalue protos block
   38    | . "package" lvalue protos block
   52 routine: . "closure"
   53        | . "function"
   62 exp: . exp "=" exp
   63    | . exp "=" exp modifiers
   64    | . lvalue "+=" exp
   65    | . lvalue "-=" exp
   66    | . lvalue "*=" exp
   67    | . lvalue "/=" exp
   68    | . lvalue "^=" exp
   69    | . lvalue "%=" exp
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
  118            | . block
  119            | . "do" "(" exp ")" block
  120 detach: . "detach"
  121       | . "disown"
  122 primary-exp: . "assert" "(" exp ")"
  123            | . "assert" "{" claims "}"
  124            | . detach "(" exp ")"
  125            | . detach block
  126            | . "isdef" "(" k1_id ")"
  127            | . "watch" "(" exp ")"
  128 lvalue: . id
  129       | . primary-exp "." id
  130       | . primary-exp "." "*"
  131 primary-exp: . "&" id
  132            | . primary-exp "." "&" id
  133 id: . "identifier"
  134 bitor-exp: . "var" bitor-exp
  135          | . "const" "var" bitor-exp
  136 primary-exp: . lvalue
  137            | . lvalue args
  138 new: . "new" "identifier" args.opt
  139 bitor-exp: . new
  140 id: . "new"
  141 primary-exp: . routine formals block
  142 float-exp: . "float"
  143 duration: . "duration"
  144         | . duration "duration"
  150 dictionary: . "[" assocs "]"
  154 tuple: . "(" tuple.exps ")"
  155 literal-exp: . float-exp
  156            | . "angle"
  157            | . duration
  158            | . string
  159            | . "[" exps "]"
  160            | . dictionary
  161            | . tuple
  162 string: . "string"
  163       | . string "string"
  164 literal-exp: . "__HERE__"
  170 lvalue: . primary-exp "[" exps "]"
  171 literal-exp: . "this"
  172            | . "call"
  173 primary-exp: . literal-exp
  174            | . "(" exp ")"
  175            | . "(" error ")"
  176            | . primary-exp "**" primary-exp
  177 unary-exp: . primary-exp
  178          | . "--" lvalue
  179          | . "++" lvalue
  180          | . "+" unary-exp
  181          | . "-" unary-exp
  182          | . "!" unary-exp
  183          | . "compl" unary-exp
  184 bitor-exp: . unary-exp
  185          | . bitor-exp "+" bitor-exp
  186          | . bitor-exp "-" bitor-exp
  187          | . bitor-exp "*" bitor-exp
  188          | . bitor-exp "/" bitor-exp
  189          | . bitor-exp "%" bitor-exp
  190          | . bitor-exp "^" bitor-exp
  191          | . bitor-exp "<<" bitor-exp
  192          | . bitor-exp "bitand" bitor-exp
  193          | . bitor-exp "bitor" bitor-exp
  194          | . bitor-exp ">>" bitor-exp
  205 rel-exp: . bitor-exp rel-ops
  208 exp: . rel-exp
  209    | . exp "&&" exp
  210    | . exp "||" exp
  211    | . exp "in" exp
  212    | . exp "!" "in" exp
  212    | exp "!" "in" . exp
  216    | . "%unscope:" unsigned
  217 primary-exp: . "%exp:" unsigned
  218 lvalue: . "%lvalue:" unsigned
  219       | . "%id:" unsigned
  220       | . primary-exp "." "%id:" unsigned
  221 primary-exp: . lvalue "(" "%exps:" unsigned ")"

    "__HERE__"    shift, and go to state 7
    "closure"     shift, and go to state 9
    "const"       shift, and go to state 10
    "function"    shift, and go to state 13
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "var"         shift, and go to state 25
    "watch"       shift, and go to state 27
    "&"           shift, and go to state 29
    "identifier"  shift, and go to state 35
    "class"       shift, and go to state 36
    "package"     shift, and go to state 37
    "--"          shift, and go to state 41
    "++"          shift, and go to state 42
    "do"          shift, and go to state 43
    "assert"      shift, and go to state 44
    "detach"      shift, and go to state 45
    "disown"      shift, and go to state 46
    "new"         shift, and go to state 47
    "angle"       shift, and go to state 48
    "duration"    shift, and go to state 49
    "float"       shift, and go to state 50
    "string"      shift, and go to state 51
    "call"        shift, and go to state 52
    "this"        shift, and go to state 53
    "!"           shift, and go to state 54
    "compl"       shift, and go to state 55
    "-"           shift, and go to state 56
    "+"           shift, and go to state 57
    "%unscope:"   shift, and go to state 58
    "%exp:"       shift, and go to state 59
    "%lvalue:"    shift, and go to state 60
    "%id:"        shift, and go to state 61

    block        go to state 66
    exp          go to state 369
    routine      go to state 99
    primary-exp  go to state 100
    detach       go to state 70
    lvalue       go to state 71
    id           go to state 101
    bitor-exp    go to state 73
    new          go to state 74
    float-exp    go to state 75
    duration     go to state 76
    dictionary   go to state 77
    tuple        go to state 78
    literal-exp  go to state 79
    string       go to state 80
    unary-exp    go to state 81
    rel-exp      go to state 82


state 262

   51 stmt: exp "!" args.opt . tilda.opt
  168 tilda.opt: .  ["end of command", "case", "catch", "default", "else", "finally", "onleave", "}", ")", ",", ";", "&", "|"]
  169          | . "~" exp

    "~"  shift, and go to state 334

    $default  reduce using rule 168 (tilda.opt)

    tilda.opt  go to state 370


state 263

   62 exp: exp . "=" exp
   63    | exp . "=" exp modifiers
  209    | exp . "&&" exp
  209    | exp "&&" exp .  ["end of command", "=", "case", "catch", ":", "default", "else", "finally", "if", "{", "onleave", "}", "]", ")", "~", ",", ";", "&", "|", "identifier", "=>", "?", "&&", "||"]
  210    | exp . "||" exp
  211    | exp . "in" exp
  212    | exp . "!" "in" exp

    "in"  shift, and go to state 161
    "!"   shift, and go to state 211

    $default  reduce using rule 209 (exp)

    Conflict between rule 209 and token "=" resolved as reduce ("=" < "&&").
    Conflict between rule 209 and token "in" resolved as shift ("&&" < "in").
    Conflict between rule 209 and token "!" resolved as shift ("&&" < "!").
    Conflict between rule 209 and token "&&" resolved as reduce (%left "&&").
    Conflict between rule 209 and token "||" resolved as reduce ("||" < "&&").


state 264

   62 exp: exp . "=" exp
   63    | exp . "=" exp modifiers
  209    | exp . "&&" exp
  210    | exp . "||" exp
  210    | exp "||" exp .  ["end of command", "=", "case", "catch", ":", "default", "else", "finally", "if", "{", "onleave", "}", "]", ")", "~", ",", ";", "&", "|", "identifier", "=>", "?", "||"]
  211    | exp . "in" exp
  212    | exp . "!" "in" exp

    "in"  shift, and go to state 161
    "!"   shift, and go to state 211
    "&&"  shift, and go to state 163

    $default  reduce using rule 210 (exp)

    Conflict between rule 210 and token "=" resolved as reduce ("=" < "||").
    Conflict between rule 210 and token "in" resolved as shift ("||" < "in").
    Conflict between rule 210 and token "!" resolved as shift ("||" < "!").
    Conflict between rule 210 and token "&&" resolved as shift ("||" < "&&").
    Conflict between rule 210 and token "||" resolved as reduce (%left "||").


state 265

  253 var.opt: "var" .

    $default  reduce using rule 253 (var.opt)


state 266

  242 formals.1: formal .

    $default  reduce using rule 242 (formals.1)


state 267

  243 formals.1: formals.1 . "," formal
  245 formals.0: formals.1 . comma.opt
  248 comma.opt: .  [")"]
  249          | . ","

    ","  shift, and go to state 371

    $default  reduce using rule 248 (comma.opt)

    comma.opt  go to state 372


state 268

  247 formals: "(" formals.0 . ")"

    ")"  shift, and go to state 373


state 269

  239 formal: var.opt . "identifier" typespec.opt
  240       | var.opt . "identifier" "=" exp typespec.opt
  241       | var.opt . "identifier" "[" "]"

    "identifier"  shift, and go to state 374


state 270

   57 k1_id: "this" "." . "identifier"

    "identifier"  shift, and go to state 375


state 271

   58 k1_id: k1_id "." . "identifier"

    "identifier"  shift, and go to state 376


state 272

   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   54 stmt: routine k1_id formals . block

    "{"  shift, and go to state 16

    block  go to state 377


state 273

  141 primary-exp: routine formals block .

    $default  reduce using rule 141 (primary-exp)


state 274

   23 stmt: primary-exp ":" stmt .

    $default  reduce using rule 23 (stmt)


state 275

   62 exp: exp . "=" exp
   63    | exp . "=" exp modifiers
  209    | exp . "&&" exp
  210    | exp . "||" exp
  211    | exp . "in" exp
  212    | exp . "!" "in" exp
  228 exps.1: exp .  ["]", ")", ","]

    "="   shift, and go to state 160
    "in"  shift, and go to state 161
    "!"   shift, and go to state 211
    "&&"  shift, and go to state 163
    "||"  shift, and go to state 164

    $default  reduce using rule 228 (exps.1)


state 276

  170 lvalue: primary-exp "[" exps . "]"

    "]"  shift, and go to state 378


state 277

  132 primary-exp: primary-exp "." "&" . id
  133 id: . "identifier"
  140   | . "new"

    "identifier"  shift, and go to state 35
    "new"         shift, and go to state 124

    id  go to state 379


state 278

  130 lvalue: primary-exp "." "*" .

    $default  reduce using rule 130 (lvalue)


state 279

  215 unsigned: . "float"
  220 lvalue: primary-exp "." "%id:" . unsigned

    "float"  shift, and go to state 150

    unsigned  go to state 380


state 280

  129 lvalue: primary-exp "." id .

    $default  reduce using rule 129 (lvalue)


state 281

  129 lvalue: primary-exp . "." id
  130       | primary-exp . "." "*"
  132 primary-exp: primary-exp . "." "&" id
  170 lvalue: primary-exp . "[" exps "]"
  176 primary-exp: primary-exp . "**" primary-exp
  176            | primary-exp "**" primary-exp .  ["end of command", "=", "case", "catch", ":", "default", "else", "finally", "if", "in", "{", "onleave", "}", "]", ")", "~", ",", ";", "&", "|", "identifier", "=>", "?", "!", "bitand", "bitor", "^", ">>", "<<", "-", "%", "+", "/", "*", "=~=", "==", "===", ">=", ">", "<=", "<", "!=", "!==", "~=", "&&", "||"]
  220 lvalue: primary-exp . "." "%id:" unsigned

    "["   shift, and go to state 171
    "."   shift, and go to state 172
    "**"  shift, and go to state 173

    $default  reduce using rule 176 (primary-exp)

    Conflict between rule 176 and token "[" resolved as shift ("**" < "[").
    Conflict between rule 176 and token "." resolved as shift ("**" < ".").
    Conflict between rule 176 and token "**" resolved as shift (%right "**").


state 282

   62 exp: exp . "=" exp
   63    | exp . "=" exp modifiers
  124 primary-exp: detach "(" exp . ")"
  209 exp: exp . "&&" exp
  210    | exp . "||" exp
  211    | exp . "in" exp
  212    | exp . "!" "in" exp

    "="   shift, and go to state 160
    "in"  shift, and go to state 161
    ")"   shift, and go to state 381
    "!"   shift, and go to state 211
    "&&"  shift, and go to state 163
    "||"  shift, and go to state 164


state 283

  215 unsigned: . "float"
  221 primary-exp: lvalue "(" "%exps:" . unsigned ")"

    "float"  shift, and go to state 150

    unsigned  go to state 382


state 284

  231 args: "(" exps . ")"

    ")"  shift, and go to state 383


state 285

   62 exp: exp . "=" exp
   63    | exp . "=" exp modifiers
   68    | lvalue "^=" exp .  ["end of command", "case", "catch", ":", "default", "else", "finally", "if", "{", "onleave", "}", "]", ")", "~", ",", ";", "&", "|", "identifier", "=>", "?"]
  209    | exp . "&&" exp
  210    | exp . "||" exp
  211    | exp . "in" exp
  212    | exp . "!" "in" exp

    "="   shift, and go to state 160
    "in"  shift, and go to state 161
    "!"   shift, and go to state 211
    "&&"  shift, and go to state 163
    "||"  shift, and go to state 164

    $default  reduce using rule 68 (exp)

    Conflict between rule 68 and token "=" resolved as shift (%right "=").
    Conflict between rule 68 and token "in" resolved as shift ("^=" < "in").
    Conflict between rule 68 and token "!" resolved as shift ("^=" < "!").
    Conflict between rule 68 and token "&&" resolved as shift ("^=" < "&&").
    Conflict between rule 68 and token "||" resolved as shift ("^=" < "||").


state 286

   62 exp: exp . "=" exp
   63    | exp . "=" exp modifiers
   65    | lvalue "-=" exp .  ["end of command", "case", "catch", ":", "default", "else", "finally", "if", "{", "onleave", "}", "]", ")", "~", ",", ";", "&", "|", "identifier", "=>", "?"]
  209    | exp . "&&" exp
  210    | exp . "||" exp
  211    | exp . "in" exp
  212    | exp . "!" "in" exp

    "="   shift, and go to state 160
    "in"  shift, and go to state 161
    "!"   shift, and go to state 211
    "&&"  shift, and go to state 163
    "||"  shift, and go to state 164

    $default  reduce using rule 65 (exp)

    Conflict between rule 65 and token "=" resolved as shift (%right "=").
    Conflict between rule 65 and token "in" resolved as shift ("-=" < "in").
    Conflict between rule 65 and token "!" resolved as shift ("-=" < "!").
    Conflict between rule 65 and token "&&" resolved as shift ("-=" < "&&").
    Conflict between rule 65 and token "||" resolved as shift ("-=" < "||").


state 287

   62 exp: exp . "=" exp
   63    | exp . "=" exp modifiers
   69    | lvalue "%=" exp .  ["end of command", "case", "catch", ":", "default", "else", "finally", "if", "{", "onleave", "}", "]", ")", "~", ",", ";", "&", "|", "identifier", "=>", "?"]
  209    | exp . "&&" exp
  210    | exp . "||" exp
  211    | exp . "in" exp
  212    | exp . "!" "in" exp

    "="   shift, and go to state 160
    "in"  shift, and go to state 161
    "!"   shift, and go to state 211
    "&&"  shift, and go to state 163
    "||"  shift, and go to state 164

    $default  reduce using rule 69 (exp)

    Conflict between rule 69 and token "=" resolved as shift (%right "=").
    Conflict between rule 69 and token "in" resolved as shift ("%=" < "in").
    Conflict between rule 69 and token "!" resolved as shift ("%=" < "!").
    Conflict between rule 69 and token "&&" resolved as shift ("%=" < "&&").
    Conflict between rule 69 and token "||" resolved as shift ("%=" < "||").


state 288

   62 exp: exp . "=" exp
   63    | exp . "=" exp modifiers
   64    | lvalue "+=" exp .  ["end of command", "case", "catch", ":", "default", "else", "finally", "if", "{", "onleave", "}", "]", ")", "~", ",", ";", "&", "|", "identifier", "=>", "?"]
  209    | exp . "&&" exp
  210    | exp . "||" exp
  211    | exp . "in" exp
  212    | exp . "!" "in" exp

    "="   shift, and go to state 160
    "in"  shift, and go to state 161
    "!"   shift, and go to state 211
    "&&"  shift, and go to state 163
    "||"  shift, and go to state 164

    $default  reduce using rule 64 (exp)

    Conflict between rule 64 and token "=" resolved as shift (%right "=").
    Conflict between rule 64 and token "in" resolved as shift ("+=" < "in").
    Conflict between rule 64 and token "!" resolved as shift ("+=" < "!").
    Conflict between rule 64 and token "&&" resolved as shift ("+=" < "&&").
    Conflict between rule 64 and token "||" resolved as shift ("+=" < "||").


state 289

   62 exp: exp . "=" exp
   63    | exp . "=" exp modifiers
   67    | lvalue "/=" exp .  ["end of command", "case", "catch", ":", "default", "else", "finally", "if", "{", "onleave", "}", "]", ")", "~", ",", ";", "&", "|", "identifier", "=>", "?"]
  209    | exp . "&&" exp
  210    | exp . "||" exp
  211    | exp . "in" exp
  212    | exp . "!" "in" exp

    "="   shift, and go to state 160
    "in"  shift, and go to state 161
    "!"   shift, and go to state 211
    "&&"  shift, and go to state 163
    "||"  shift, and go to state 164

    $default  reduce using rule 67 (exp)

    Conflict between rule 67 and token "=" resolved as shift (%right "=").
    Conflict between rule 67 and token "in" resolved as shift ("/=" < "in").
    Conflict between rule 67 and token "!" resolved as shift ("/=" < "!").
    Conflict between rule 67 and token "&&" resolved as shift ("/=" < "&&").
    Conflict between rule 67 and token "||" resolved as shift ("/=" < "||").


state 290

   62 exp: exp . "=" exp
   63    | exp . "=" exp modifiers
   66    | lvalue "*=" exp .  ["end of command", "case", "catch", ":", "default", "else", "finally", "if", "{", "onleave", "}", "]", ")", "~", ",", ";", "&", "|", "identifier", "=>", "?"]
  209    | exp . "&&" exp
  210    | exp . "||" exp
  211    | exp . "in" exp
  212    | exp . "!" "in" exp

    "="   shift, and go to state 160
    "in"  shift, and go to state 161
    "!"   shift, and go to state 211
    "&&"  shift, and go to state 163
    "||"  shift, and go to state 164

    $default  reduce using rule 66 (exp)

    Conflict between rule 66 and token "=" resolved as shift (%right "=").
    Conflict between rule 66 and token "in" resolved as shift ("*=" < "in").
    Conflict between rule 66 and token "!" resolved as shift ("*=" < "!").
    Conflict between rule 66 and token "&&" resolved as shift ("*=" < "&&").
    Conflict between rule 66 and token "||" resolved as shift ("*=" < "||").


state 291

   72 primary-exp: lvalue "->" id .

    $default  reduce using rule 72 (primary-exp)


state 292

   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   55 stmt: id id formals . block

    "{"  shift, and go to state 16

    block  go to state 384


state 293

  185 bitor-exp: bitor-exp . "+" bitor-exp
  186          | bitor-exp . "-" bitor-exp
  187          | bitor-exp . "*" bitor-exp
  188          | bitor-exp . "/" bitor-exp
  189          | bitor-exp . "%" bitor-exp
  190          | bitor-exp . "^" bitor-exp
  191          | bitor-exp . "<<" bitor-exp
  192          | bitor-exp . "bitand" bitor-exp
  192          | bitor-exp "bitand" bitor-exp .  ["end of command", "=", "case", "catch", ":", "default", "else", "finally", "if", "in", "{", "onleave", "}", "]", ")", "~", ",", ";", "&", "|", "identifier", "=>", "?", "!", "bitand", "bitor", "^", "=~=", "==", "===", ">=", ">", "<=", "<", "!=", "!==", "~=", "&&", "||"]
  193          | bitor-exp . "bitor" bitor-exp
  194          | bitor-exp . ">>" bitor-exp

    ">>"  shift, and go to state 191
    "<<"  shift, and go to state 192
    "-"   shift, and go to state 193
    "%"   shift, and go to state 194
    "+"   shift, and go to state 195
    "/"   shift, and go to state 196
    "*"   shift, and go to state 197

    $default  reduce using rule 192 (bitor-exp)

    Conflict between rule 192 and token "bitand" resolved as reduce (%left "bitand").
    Conflict between rule 192 and token "bitor" resolved as reduce ("bitor" < "bitand").
    Conflict between rule 192 and token "^" resolved as reduce ("^" < "bitand").
    Conflict between rule 192 and token ">>" resolved as shift ("bitand" < ">>").
    Conflict between rule 192 and token "<<" resolved as shift ("bitand" < "<<").
    Conflict between rule 192 and token "-" resolved as shift ("bitand" < "-").
    Conflict between rule 192 and token "%" resolved as shift ("bitand" < "%").
    Conflict between rule 192 and token "+" resolved as shift ("bitand" < "+").
    Conflict between rule 192 and token "/" resolved as shift ("bitand" < "/").
    Conflict between rule 192 and token "*" resolved as shift ("bitand" < "*").


state 294

  185 bitor-exp: bitor-exp . "+" bitor-exp
  186          | bitor-exp . "-" bitor-exp
  187          | bitor-exp . "*" bitor-exp
  188          | bitor-exp . "/" bitor-exp
  189          | bitor-exp . "%" bitor-exp
  190          | bitor-exp . "^" bitor-exp
  191          | bitor-exp . "<<" bitor-exp
  192          | bitor-exp . "bitand" bitor-exp
  193          | bitor-exp . "bitor" bitor-exp
  193          | bitor-exp "bitor" bitor-exp .  ["end of command", "=", "case", "catch", ":", "default", "else", "finally", "if", "in", "{", "onleave", "}", "]", ")", "~", ",", ";", "&", "|", "identifier", "=>", "?", "!", "bitor", "=~=", "==", "===", ">=", ">", "<=", "<", "!=", "!==", "~=", "&&", "||"]
  194          | bitor-exp . ">>" bitor-exp

    "bitand"  shift, and go to state 188
    "^"       shift, and go to state 190
    ">>"      shift, and go to state 191
    "<<"      shift, and go to state 192
    "-"       shift, and go to state 193
    "%"       shift, and go to state 194
    "+"       shift, and go to state 195
    "/"       shift, and go to state 196
    "*"       shift, and go to state 197

    $default  reduce using rule 193 (bitor-exp)

    Conflict between rule 193 and token "bitand" resolved as shift ("bitor" < "bitand").
    Conflict between rule 193 and token "bitor" resolved as reduce (%left "bitor").
    Conflict between rule 193 and token "^" resolved as shift ("bitor" < "^").
    Conflict between rule 193 and token ">>" resolved as shift ("bitor" < ">>").
    Conflict between rule 193 and token "<<" resolved as shift ("bitor" < "<<").
    Conflict between rule 193 and token "-" resolved as shift ("bitor" < "-").
    Conflict between rule 193 and token "%" resolved as shift ("bitor" < "%").
    Conflict between rule 193 and token "+" resolved as shift ("bitor" < "+").
    Conflict between rule 193 and token "/" resolved as shift ("bitor" < "/").
    Conflict between rule 193 and token "*" resolved as shift ("bitor" < "*").


state 295

  185 bitor-exp: bitor-exp . "+" bitor-exp
  186          | bitor-exp . "-" bitor-exp
  187          | bitor-exp . "*" bitor-exp
  188          | bitor-exp . "/" bitor-exp
  189          | bitor-exp . "%" bitor-exp
  190          | bitor-exp . "^" bitor-exp
  190          | bitor-exp "^" bitor-exp .  ["end of command", "=", "case", "catch", ":", "default", "else", "finally", "if", "in", "{", "onleave", "}", "]", ")", "~", ",", ";", "&", "|", "identifier", "=>", "?", "!", "bitor", "^", "=~=", "==", "===", ">=", ">", "<=", "<", "!=", "!==", "~=", "&&", "||"]
  191          | bitor-exp . "<<" bitor-exp
  192          | bitor-exp . "bitand" bitor-exp
  193          | bitor-exp . "bitor" bitor-exp
  194          | bitor-exp . ">>" bitor-exp

    "bitand"  shift, and go to state 188
    ">>"      shift, and go to state 191
    "<<"      shift, and go to state 192
    "-"       shift, and go to state 193
    "%"       shift, and go to state 194
    "+"       shift, and go to state 195
    "/"       shift, and go to state 196
    "*"       shift, and go to state 197

    $default  reduce using rule 190 (bitor-exp)

    Conflict between rule 190 and token "bitand" resolved as shift ("^" < "bitand").
    Conflict between rule 190 and token "bitor" resolved as reduce ("bitor" < "^").
    Conflict between rule 190 and token "^" resolved as reduce (%left "^").
    Conflict between rule 190 and token ">>" resolved as shift ("^" < ">>").
    Conflict between rule 190 and token "<<" resolved as shift ("^" < "<<").
    Conflict between rule 190 and token "-" resolved as shift ("^" < "-").
    Conflict between rule 190 and token "%" resolved as shift ("^" < "%").
    Conflict between rule 190 and token "+" resolved as shift ("^" < "+").
    Conflict between rule 190 and token "/" resolved as shift ("^" < "/").
    Conflict between rule 190 and token "*" resolved as shift ("^" < "*").


state 296

  185 bitor-exp: bitor-exp . "+" bitor-exp
  186          | bitor-exp . "-" bitor-exp
  187          | bitor-exp . "*" bitor-exp
  188          | bitor-exp . "/" bitor-exp
  189          | bitor-exp . "%" bitor-exp
  190          | bitor-exp . "^" bitor-exp
  191          | bitor-exp . "<<" bitor-exp
  192          | bitor-exp . "bitand" bitor-exp
  193          | bitor-exp . "bitor" bitor-exp
  194          | bitor-exp . ">>" bitor-exp
  194          | bitor-exp ">>" bitor-exp .  ["end of command", "=", "case", "catch", ":", "default", "else", "finally", "if", "in", "{", "onleave", "}", "]", ")", "~", ",", ";", "&", "|", "identifier", "=>", "?", "!", "bitand", "bitor", "^", ">>", "<<", "=~=", "==", "===", ">=", ">", "<=", "<", "!=", "!==", "~=", "&&", "||"]

    "-"  shift, and go to state 193
    "%"  shift, and go to state 194
    "+"  shift, and go to state 195
    "/"  shift, and go to state 196
    "*"  shift, and go to state 197

    $default  reduce using rule 194 (bitor-exp)

    Conflict between rule 194 and token "bitand" resolved as reduce ("bitand" < ">>").
    Conflict between rule 194 and token "bitor" resolved as reduce ("bitor" < ">>").
    Conflict between rule 194 and token "^" resolved as reduce ("^" < ">>").
    Conflict between rule 194 and token ">>" resolved as reduce (%left ">>").
    Conflict between rule 194 and token "<<" resolved as reduce (%left "<<").
    Conflict between rule 194 and token "-" resolved as shift (">>" < "-").
    Conflict between rule 194 and token "%" resolved as shift (">>" < "%").
    Conflict between rule 194 and token "+" resolved as shift (">>" < "+").
    Conflict between rule 194 and token "/" resolved as shift (">>" < "/").
    Conflict between rule 194 and token "*" resolved as shift (">>" < "*").


state 297

  185 bitor-exp: bitor-exp . "+" bitor-exp
  186          | bitor-exp . "-" bitor-exp
  187          | bitor-exp . "*" bitor-exp
  188          | bitor-exp . "/" bitor-exp
  189          | bitor-exp . "%" bitor-exp
  190          | bitor-exp . "^" bitor-exp
  191          | bitor-exp . "<<" bitor-exp
  191          | bitor-exp "<<" bitor-exp .  ["end of command", "=", "case", "catch", ":", "default", "else", "finally", "if", "in", "{", "onleave", "}", "]", ")", "~", ",", ";", "&", "|", "identifier", "=>", "?", "!", "bitand", "bitor", "^", ">>", "<<", "=~=", "==", "===", ">=", ">", "<=", "<", "!=", "!==", "~=", "&&", "||"]
  192          | bitor-exp . "bitand" bitor-exp
  193          | bitor-exp . "bitor" bitor-exp
  194          | bitor-exp . ">>" bitor-exp

    "-"  shift, and go to state 193
    "%"  shift, and go to state 194
    "+"  shift, and go to state 195
    "/"  shift, and go to state 196
    "*"  shift, and go to state 197

    $default  reduce using rule 191 (bitor-exp)

    Conflict between rule 191 and token "bitand" resolved as reduce ("bitand" < "<<").
    Conflict between rule 191 and token "bitor" resolved as reduce ("bitor" < "<<").
    Conflict between rule 191 and token "^" resolved as reduce ("^" < "<<").
    Conflict between rule 191 and token ">>" resolved as reduce (%left ">>").
    Conflict between rule 191 and token "<<" resolved as reduce (%left "<<").
    Conflict between rule 191 and token "-" resolved as shift ("<<" < "-").
    Conflict between rule 191 and token "%" resolved as shift ("<<" < "%").
    Conflict between rule 191 and token "+" resolved as shift ("<<" < "+").
    Conflict between rule 191 and token "/" resolved as shift ("<<" < "/").
    Conflict between rule 191 and token "*" resolved as shift ("<<" < "*").


state 298

  185 bitor-exp: bitor-exp . "+" bitor-exp
  186          | bitor-exp . "-" bitor-exp
  186          | bitor-exp "-" bitor-exp .  ["end of command", "=", "case", "catch", ":", "default", "else", "finally", "if", "in", "{", "onleave", "}", "]", ")", "~", ",", ";", "&", "|", "identifier", "=>", "?", "!", "bitand", "bitor", "^", ">>", "<<", "-", "+", "=~=", "==", "===", ">=", ">", "<=", "<", "!=", "!==", "~=", "&&", "||"]
  187          | bitor-exp . "*" bitor-exp
  188          | bitor-exp . "/" bitor-exp
  189          | bitor-exp . "%" bitor-exp
  190          | bitor-exp . "^" bitor-exp
  191          | bitor-exp . "<<" bitor-exp
  192          | bitor-exp . "bitand" bitor-exp
  193          | bitor-exp . "bitor" bitor-exp
  194          | bitor-exp . ">>" bitor-exp

    "%"  shift, and go to state 194
    "/"  shift, and go to state 196
    "*"  shift, and go to state 197

    $default  reduce using rule 186 (bitor-exp)

    Conflict between rule 186 and token "bitand" resolved as reduce ("bitand" < "-").
    Conflict between rule 186 and token "bitor" resolved as reduce ("bitor" < "-").
    Conflict between rule 186 and token "^" resolved as reduce ("^" < "-").
    Conflict between rule 186 and token ">>" resolved as reduce (">>" < "-").
    Conflict between rule 186 and token "<<" resolved as reduce ("<<" < "-").
    Conflict between rule 186 and token "-" resolved as reduce (%left "-").
    Conflict between rule 186 and token "%" resolved as shift ("-" < "%").
    Conflict between rule 186 and token "+" resolved as reduce (%left "+").
    Conflict between rule 186 and token "/" resolved as shift ("-" < "/").
    Conflict between rule 186 and token "*" resolved as shift ("-" < "*").


state 299

  185 bitor-exp: bitor-exp . "+" bitor-exp
  186          | bitor-exp . "-" bitor-exp
  187          | bitor-exp . "*" bitor-exp
  188          | bitor-exp . "/" bitor-exp
  189          | bitor-exp . "%" bitor-exp
  189          | bitor-exp "%" bitor-exp .  ["end of command", "=", "case", "catch", ":", "default", "else", "finally", "if", "in", "{", "onleave", "}", "]", ")", "~", ",", ";", "&", "|", "identifier", "=>", "?", "!", "bitand", "bitor", "^", ">>", "<<", "-", "%", "+", "/", "*", "=~=", "==", "===", ">=", ">", "<=", "<", "!=", "!==", "~=", "&&", "||"]
  190          | bitor-exp . "^" bitor-exp
  191          | bitor-exp . "<<" bitor-exp
  192          | bitor-exp . "bitand" bitor-exp
  193          | bitor-exp . "bitor" bitor-exp
  194          | bitor-exp . ">>" bitor-exp

    $default  reduce using rule 189 (bitor-exp)

    Conflict between rule 189 and token "bitand" resolved as reduce ("bitand" < "%").
    Conflict between rule 189 and token "bitor" resolved as reduce ("bitor" < "%").
    Conflict between rule 189 and token "^" resolved as reduce ("^" < "%").
    Conflict between rule 189 and token ">>" resolved as reduce (">>" < "%").
    Conflict between rule 189 and token "<<" resolved as reduce ("<<" < "%").
    Conflict between rule 189 and token "-" resolved as reduce ("-" < "%").
    Conflict between rule 189 and token "%" resolved as reduce (%left "%").
    Conflict between rule 189 and token "+" resolved as reduce ("+" < "%").
    Conflict between rule 189 and token "/" resolved as reduce (%left "/").
    Conflict between rule 189 and token "*" resolved as reduce (%left "*").


state 300

  185 bitor-exp: bitor-exp . "+" bitor-exp
  185          | bitor-exp "+" bitor-exp .  ["end of command", "=", "case", "catch", ":", "default", "else", "finally", "if", "in", "{", "onleave", "}", "]", ")", "~", ",", ";", "&", "|", "identifier", "=>", "?", "!", "bitand", "bitor", "^", ">>", "<<", "-", "+", "=~=", "==", "===", ">=", ">", "<=", "<", "!=", "!==", "~=", "&&", "||"]
  186          | bitor-exp . "-" bitor-exp
  187          | bitor-exp . "*" bitor-exp
  188          | bitor-exp . "/" bitor-exp
  189          | bitor-exp . "%" bitor-exp
  190          | bitor-exp . "^" bitor-exp
  191          | bitor-exp . "<<" bitor-exp
  192          | bitor-exp . "bitand" bitor-exp
  193          | bitor-exp . "bitor" bitor-exp
  194          | bitor-exp . ">>" bitor-exp

    "%"  shift, and go to state 194
    "/"  shift, and go to state 196
    "*"  shift, and go to state 197

    $default  reduce using rule 185 (bitor-exp)

    Conflict between rule 185 and token "bitand" resolved as reduce ("bitand" < "+").
    Conflict between rule 185 and token "bitor" resolved as reduce ("bitor" < "+").
    Conflict between rule 185 and token "^" resolved as reduce ("^" < "+").
    Conflict between rule 185 and token ">>" resolved as reduce (">>" < "+").
    Conflict between rule 185 and token "<<" resolved as reduce ("<<" < "+").
    Conflict between rule 185 and token "-" resolved as reduce (%left "-").
    Conflict between rule 185 and token "%" resolved as shift ("+" < "%").
    Conflict between rule 185 and token "+" resolved as reduce (%left "+").
    Conflict between rule 185 and token "/" resolved as shift ("+" < "/").
    Conflict between rule 185 and token "*" resolved as shift ("+" < "*").


state 301

  185 bitor-exp: bitor-exp . "+" bitor-exp
  186          | bitor-exp . "-" bitor-exp
  187          | bitor-exp . "*" bitor-exp
  188          | bitor-exp . "/" bitor-exp
  188          | bitor-exp "/" bitor-exp .  ["end of command", "=", "case", "catch", ":", "default", "else", "finally", "if", "in", "{", "onleave", "}", "]", ")", "~", ",", ";", "&", "|", "identifier", "=>", "?", "!", "bitand", "bitor", "^", ">>", "<<", "-", "%", "+", "/", "*", "=~=", "==", "===", ">=", ">", "<=", "<", "!=", "!==", "~=", "&&", "||"]
  189          | bitor-exp . "%" bitor-exp
  190          | bitor-exp . "^" bitor-exp
  191          | bitor-exp . "<<" bitor-exp
  192          | bitor-exp . "bitand" bitor-exp
  193          | bitor-exp . "bitor" bitor-exp
  194          | bitor-exp . ">>" bitor-exp

    $default  reduce using rule 188 (bitor-exp)

    Conflict between rule 188 and token "bitand" resolved as reduce ("bitand" < "/").
    Conflict between rule 188 and token "bitor" resolved as reduce ("bitor" < "/").
    Conflict between rule 188 and token "^" resolved as reduce ("^" < "/").
    Conflict between rule 188 and token ">>" resolved as reduce (">>" < "/").
    Conflict between rule 188 and token "<<" resolved as reduce ("<<" < "/").
    Conflict between rule 188 and token "-" resolved as reduce ("-" < "/").
    Conflict between rule 188 and token "%" resolved as reduce (%left "%").
    Conflict between rule 188 and token "+" resolved as reduce ("+" < "/").
    Conflict between rule 188 and token "/" resolved as reduce (%left "/").
    Conflict between rule 188 and token "*" resolved as reduce (%left "*").


state 302

  185 bitor-exp: bitor-exp . "+" bitor-exp
  186          | bitor-exp . "-" bitor-exp
  187          | bitor-exp . "*" bitor-exp
  187          | bitor-exp "*" bitor-exp .  ["end of command", "=", "case", "catch", ":", "default", "else", "finally", "if", "in", "{", "onleave", "}", "]", ")", "~", ",", ";", "&", "|", "identifier", "=>", "?", "!", "bitand", "bitor", "^", ">>", "<<", "-", "%", "+", "/", "*", "=~=", "==", "===", ">=", ">", "<=", "<", "!=", "!==", "~=", "&&", "||"]
  188          | bitor-exp . "/" bitor-exp
  189          | bitor-exp . "%" bitor-exp
  190          | bitor-exp . "^" bitor-exp
  191          | bitor-exp . "<<" bitor-exp
  192          | bitor-exp . "bitand" bitor-exp
  193          | bitor-exp . "bitor" bitor-exp
  194          | bitor-exp . ">>" bitor-exp

    $default  reduce using rule 187 (bitor-exp)

    Conflict between rule 187 and token "bitand" resolved as reduce ("bitand" < "*").
    Conflict between rule 187 and token "bitor" resolved as reduce ("bitor" < "*").
    Conflict between rule 187 and token "^" resolved as reduce ("^" < "*").
    Conflict between rule 187 and token ">>" resolved as reduce (">>" < "*").
    Conflict between rule 187 and token "<<" resolved as reduce ("<<" < "*").
    Conflict between rule 187 and token "-" resolved as reduce ("-" < "*").
    Conflict between rule 187 and token "%" resolved as reduce (%left "%").
    Conflict between rule 187 and token "+" resolved as reduce ("+" < "*").
    Conflict between rule 187 and token "/" resolved as reduce (%left "/").
    Conflict between rule 187 and token "*" resolved as reduce (%left "*").


state 303

  201 rel-op: "=~=" .

    $default  reduce using rule 201 (rel-op)


state 304

  199 rel-op: "==" .

    $default  reduce using rule 199 (rel-op)


state 305

  200 rel-op: "===" .

    $default  reduce using rule 200 (rel-op)


state 306

  203 rel-op: ">=" .

    $default  reduce using rule 203 (rel-op)


state 307

  202 rel-op: ">" .

    $default  reduce using rule 202 (rel-op)


state 308

  198 rel-op: "<=" .

    $default  reduce using rule 198 (rel-op)


state 309

  197 rel-op: "<" .

    $default  reduce using rule 197 (rel-op)


state 310

  195 rel-op: "!=" .

    $default  reduce using rule 195 (rel-op)


state 311

  196 rel-op: "!==" .

    $default  reduce using rule 196 (rel-op)


state 312

  204 rel-op: "~=" .

    $default  reduce using rule 204 (rel-op)


state 313

   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   52 routine: . "closure"
   53        | . "function"
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
  118            | . block
  119            | . "do" "(" exp ")" block
  120 detach: . "detach"
  121       | . "disown"
  122 primary-exp: . "assert" "(" exp ")"
  123            | . "assert" "{" claims "}"
  124            | . detach "(" exp ")"
  125            | . detach block
  126            | . "isdef" "(" k1_id ")"
  127            | . "watch" "(" exp ")"
  128 lvalue: . id
  129       | . primary-exp "." id
  130       | . primary-exp "." "*"
  131 primary-exp: . "&" id
  132            | . primary-exp "." "&" id
  133 id: . "identifier"
  134 bitor-exp: . "var" bitor-exp
  135          | . "const" "var" bitor-exp
  136 primary-exp: . lvalue
  137            | . lvalue args
  138 new: . "new" "identifier" args.opt
  139 bitor-exp: . new
  140 id: . "new"
  141 primary-exp: . routine formals block
  142 float-exp: . "float"
  143 duration: . "duration"
  144         | . duration "duration"
  150 dictionary: . "[" assocs "]"
  154 tuple: . "(" tuple.exps ")"
  155 literal-exp: . float-exp
  156            | . "angle"
  157            | . duration
  158            | . string
  159            | . "[" exps "]"
  160            | . dictionary
  161            | . tuple
  162 string: . "string"
  163       | . string "string"
  164 literal-exp: . "__HERE__"
  170 lvalue: . primary-exp "[" exps "]"
  171 literal-exp: . "this"
  172            | . "call"
  173 primary-exp: . literal-exp
  174            | . "(" exp ")"
  175            | . "(" error ")"
  176            | . primary-exp "**" primary-exp
  177 unary-exp: . primary-exp
  178          | . "--" lvalue
  179          | . "++" lvalue
  180          | . "+" unary-exp
  181          | . "-" unary-exp
  182          | . "!" unary-exp
  183          | . "compl" unary-exp
  184 bitor-exp: . unary-exp
  185          | . bitor-exp "+" bitor-exp
  186          | . bitor-exp "-" bitor-exp
  187          | . bitor-exp "*" bitor-exp
  188          | . bitor-exp "/" bitor-exp
  189          | . bitor-exp "%" bitor-exp
  190          | . bitor-exp "^" bitor-exp
  191          | . bitor-exp "<<" bitor-exp
  192          | . bitor-exp "bitand" bitor-exp
  193          | . bitor-exp "bitor" bitor-exp
  194          | . bitor-exp ">>" bitor-exp
  207 rel-ops: rel-ops rel-op . bitor-exp
  217 primary-exp: . "%exp:" unsigned
  218 lvalue: . "%lvalue:" unsigned
  219       | . "%id:" unsigned
  220       | . primary-exp "." "%id:" unsigned
  221 primary-exp: . lvalue "(" "%exps:" unsigned ")"

    "__HERE__"    shift, and go to state 7
    "closure"     shift, and go to state 9
    "const"       shift, and go to state 10
    "function"    shift, and go to state 13
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "var"         shift, and go to state 25
    "watch"       shift, and go to state 27
    "&"           shift, and go to state 29
    "identifier"  shift, and go to state 35
    "--"          shift, and go to state 41
    "++"          shift, and go to state 42
    "do"          shift, and go to state 43
    "assert"      shift, and go to state 44
    "detach"      shift, and go to state 45
    "disown"      shift, and go to state 46
    "new"         shift, and go to state 47
    "angle"       shift, and go to state 48
    "duration"    shift, and go to state 49
    "float"       shift, and go to state 50
    "string"      shift, and go to state 51
    "call"        shift, and go to state 52
    "this"        shift, and go to state 53
    "!"           shift, and go to state 54
    "compl"       shift, and go to state 55
    "-"           shift, and go to state 56
    "+"           shift, and go to state 57
    "%exp:"       shift, and go to state 59
    "%lvalue:"    shift, and go to state 60
    "%id:"        shift, and go to state 61

    block        go to state 66
    routine      go to state 99
    primary-exp  go to state 100
    detach       go to state 70
    lvalue       go to state 119
    id           go to state 101
    bitor-exp    go to state 385
    new          go to state 74
    float-exp    go to state 75
    duration     go to state 76
    dictionary   go to state 77
    tuple        go to state 78
    literal-exp  go to state 79
    string       go to state 80
    unary-exp    go to state 81


state 314

   14 stmts: stmts "," cstmt.opt .

    $default  reduce using rule 14 (stmts)


state 315

   13 stmts: stmts ";" cstmt.opt .

    $default  reduce using rule 13 (stmts)


state 316

   23 stmt: . primary-exp ":" stmt
   24     | . exp
   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   37 exp: . "class" lvalue protos block
   38    | . "package" lvalue protos block
   43 stmt: . "enum" id "{" id.0 "}"
   47     | . "external" "identifier" "identifier"
   48     | . "external" "var" "identifier" "." "identifier" from "identifier"
   49     | . "external" event_or_function "(" unsigned ")" "identifier" "." "identifier" from "identifier"
   50     | . "import" lvalue
   51     | . exp "!" args.opt tilda.opt
   52 routine: . "closure"
   53        | . "function"
   54 stmt: . routine k1_id formals block
   55     | . id id formals block
   62 exp: . exp "=" exp
   63    | . exp "=" exp modifiers
   64    | . lvalue "+=" exp
   65    | . lvalue "-=" exp
   66    | . lvalue "*=" exp
   67    | . lvalue "/=" exp
   68    | . lvalue "^=" exp
   69    | . lvalue "%=" exp
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
   73 stmt: . "at" identifiers "(" exp tilda.opt ")" stmt onleave.opt
   74     | . "at" identifiers "(" event_match ")" stmt onleave.opt
   75     | . "every" "(" exp ")" stmt
   76     | . "if" "(" stmts ")" stmt else.opt
   77     | . "freezeif" "(" exp ")" stmt
   77     | "freezeif" "(" exp ")" . stmt
   78     | . "stopif" "(" exp ")" stmt
   79     | . "switch" "(" exp ")" "{" cases default.opt "}"
   80     | . "timeout" "(" exp ")" stmt catch.opt else.opt finally.opt
   81     | . "return" exp.opt
   82     | . "break"
   83     | . "continue"
   84     | . "waituntil" "(" exp tilda.opt ")"
   85     | . "waituntil" "(" event_match ")"
   86     | . "whenever" "(" exp tilda.opt ")" stmt else.opt
   87     | . "whenever" "(" event_match ")" stmt else.opt
  108     | . "try" block catches.1 else.opt finally.opt
  109     | . "try" block "finally" block
  110     | . "throw" exp.opt
  111     | . "loop" stmt
  112     | . "for" "(" exp ")" stmt
  113     | . "for" "(" stmt.opt ";" exp ";" stmt.opt ")" stmt
  114     | . "for" "(" "var" "identifier" in_or_colon exp ")" stmt
  115     | . "while" "(" exp ")" stmt
  118 primary-exp: . block
  119            | . "do" "(" exp ")" block
  120 detach: . "detach"
  121       | . "disown"
  122 primary-exp: . "assert" "(" exp ")"
  123            | . "assert" "{" claims "}"
  124            | . detach "(" exp ")"
  125            | . detach block
  126            | . "isdef" "(" k1_id ")"
  127            | . "watch" "(" exp ")"
  128 lvalue: . id
  129       | . primary-exp "." id
  130       | . primary-exp "." "*"
  131 primary-exp: . "&" id
  132            | . primary-exp "." "&" id
  133 id: . "identifier"
  134 bitor-exp: . "var" bitor-exp
  135          | . "const" "var" bitor-exp
  136 primary-exp: . lvalue
  137            | . lvalue args
  138 new: . "new" "identifier" args.opt
  139 bitor-exp: . new
  140 id: . "new"
  141 primary-exp: . routine formals block
  142 float-exp: . "float"
  143 duration: . "duration"
  144         | . duration "duration"
  150 dictionary: . "[" assocs "]"
  154 tuple: . "(" tuple.exps ")"
  155 literal-exp: . float-exp
  156            | . "angle"
  157            | . duration
  158            | . string
  159            | . "[" exps "]"
  160            | . dictionary
  161            | . tuple
  162 string: . "string"
  163       | . string "string"
  164 literal-exp: . "__HERE__"
  170 lvalue: . primary-exp "[" exps "]"
  171 literal-exp: . "this"
  172            | . "call"
  173 primary-exp: . literal-exp
  174            | . "(" exp ")"
  175            | . "(" error ")"
  176            | . primary-exp "**" primary-exp
  177 unary-exp: . primary-exp
  178          | . "--" lvalue
  179          | . "++" lvalue
  180          | . "+" unary-exp
  181          | . "-" unary-exp
  182          | . "!" unary-exp
  183          | . "compl" unary-exp
  184 bitor-exp: . unary-exp
  185          | . bitor-exp "+" bitor-exp
  186          | . bitor-exp "-" bitor-exp
  187          | . bitor-exp "*" bitor-exp
  188          | . bitor-exp "/" bitor-exp
  189          | . bitor-exp "%" bitor-exp
  190          | . bitor-exp "^" bitor-exp
  191          | . bitor-exp "<<" bitor-exp
  192          | . bitor-exp "bitand" bitor-exp
  193          | . bitor-exp "bitor" bitor-exp
  194          | . bitor-exp ">>" bitor-exp
  205 rel-exp: . bitor-exp rel-ops
  208 exp: . rel-exp
  209    | . exp "&&" exp
  210    | . exp "||" exp
  211    | . exp "in" exp
  212    | . exp "!" "in" exp
  216    | . "%unscope:" unsigned
  217 primary-exp: . "%exp:" unsigned
  218 lvalue: . "%lvalue:" unsigned
  219       | . "%id:" unsigned
  220       | . primary-exp "." "%id:" unsigned
  221 primary-exp: . lvalue "(" "%exps:" unsigned ")"

    "__HERE__"    shift, and go to state 7
    "break"       shift, and go to state 8
    "closure"     shift, and go to state 9
    "const"       shift, and go to state 10
    "continue"    shift, and go to state 11
    "freezeif"    shift, and go to state 12
    "function"    shift, and go to state 13
    "if"          shift, and go to state 14
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "return"      shift, and go to state 19
    "stopif"      shift, and go to state 20
    "switch"      shift, and go to state 21
    "throw"       shift, and go to state 22
    "timeout"     shift, and go to state 23
    "try"         shift, and go to state 24
    "var"         shift, and go to state 25
    "waituntil"   shift, and go to state 26
    "watch"       shift, and go to state 27
    "whenever"    shift, and go to state 28
    "&"           shift, and go to state 29
    "every"       shift, and go to state 30
    "for"         shift, and go to state 31
    "loop"        shift, and go to state 32
    "while"       shift, and go to state 33
    "at"          shift, and go to state 34
    "identifier"  shift, and go to state 35
    "class"       shift, and go to state 36
    "package"     shift, and go to state 37
    "enum"        shift, and go to state 38
    "external"    shift, and go to state 39
    "import"      shift, and go to state 40
    "--"          shift, and go to state 41
    "++"          shift, and go to state 42
    "do"          shift, and go to state 43
    "assert"      shift, and go to state 44
    "detach"      shift, and go to state 45
    "disown"      shift, and go to state 46
    "new"         shift, and go to state 47
    "angle"       shift, and go to state 48
    "duration"    shift, and go to state 49
    "float"       shift, and go to state 50
    "string"      shift, and go to state 51
    "call"        shift, and go to state 52
    "this"        shift, and go to state 53
    "!"           shift, and go to state 54
    "compl"       shift, and go to state 55
    "-"           shift, and go to state 56
    "+"           shift, and go to state 57
    "%unscope:"   shift, and go to state 58
    "%exp:"       shift, and go to state 59
    "%lvalue:"    shift, and go to state 60
    "%id:"        shift, and go to state 61

    stmt         go to state 386
    block        go to state 66
    exp          go to state 67
    routine      go to state 68
    primary-exp  go to state 69
    detach       go to state 70
    lvalue       go to state 71
    id           go to state 72
    bitor-exp    go to state 73
    new          go to state 74
    float-exp    go to state 75
    duration     go to state 76
    dictionary   go to state 77
    tuple        go to state 78
    literal-exp  go to state 79
    string       go to state 80
    unary-exp    go to state 81
    rel-exp      go to state 82


state 317

   23 stmt: . primary-exp ":" stmt
   24     | . exp
   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   37 exp: . "class" lvalue protos block
   38    | . "package" lvalue protos block
   43 stmt: . "enum" id "{" id.0 "}"
   47     | . "external" "identifier" "identifier"
   48     | . "external" "var" "identifier" "." "identifier" from "identifier"
   49     | . "external" event_or_function "(" unsigned ")" "identifier" "." "identifier" from "identifier"
   50     | . "import" lvalue
   51     | . exp "!" args.opt tilda.opt
   52 routine: . "closure"
   53        | . "function"
   54 stmt: . routine k1_id formals block
   55     | . id id formals block
   62 exp: . exp "=" exp
   63    | . exp "=" exp modifiers
   64    | . lvalue "+=" exp
   65    | . lvalue "-=" exp
   66    | . lvalue "*=" exp
   67    | . lvalue "/=" exp
   68    | . lvalue "^=" exp
   69    | . lvalue "%=" exp
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
   73 stmt: . "at" identifiers "(" exp tilda.opt ")" stmt onleave.opt
   74     | . "at" identifiers "(" event_match ")" stmt onleave.opt
   75     | . "every" "(" exp ")" stmt
   76     | . "if" "(" stmts ")" stmt else.opt
   76     | "if" "(" stmts ")" . stmt else.opt
   77     | . "freezeif" "(" exp ")" stmt
   78     | . "stopif" "(" exp ")" stmt
   79     | . "switch" "(" exp ")" "{" cases default.opt "}"
   80     | . "timeout" "(" exp ")" stmt catch.opt else.opt finally.opt
   81     | . "return" exp.opt
   82     | . "break"
   83     | . "continue"
   84     | . "waituntil" "(" exp tilda.opt ")"
   85     | . "waituntil" "(" event_match ")"
   86     | . "whenever" "(" exp tilda.opt ")" stmt else.opt
   87     | . "whenever" "(" event_match ")" stmt else.opt
  108     | . "try" block catches.1 else.opt finally.opt
  109     | . "try" block "finally" block
  110     | . "throw" exp.opt
  111     | . "loop" stmt
  112     | . "for" "(" exp ")" stmt
  113     | . "for" "(" stmt.opt ";" exp ";" stmt.opt ")" stmt
  114     | . "for" "(" "var" "identifier" in_or_colon exp ")" stmt
  115     | . "while" "(" exp ")" stmt
  118 primary-exp: . block
  119            | . "do" "(" exp ")" block
  120 detach: . "detach"
  121       | . "disown"
  122 primary-exp: . "assert" "(" exp ")"
  123            | . "assert" "{" claims "}"
  124            | . detach "(" exp ")"
  125            | . detach block
  126            | . "isdef" "(" k1_id ")"
  127            | . "watch" "(" exp ")"
  128 lvalue: . id
  129       | . primary-exp "." id
  130       | . primary-exp "." "*"
  131 primary-exp: . "&" id
  132            | . primary-exp "." "&" id
  133 id: . "identifier"
  134 bitor-exp: . "var" bitor-exp
  135          | . "const" "var" bitor-exp
  136 primary-exp: . lvalue
  137            | . lvalue args
  138 new: . "new" "identifier" args.opt
  139 bitor-exp: . new
  140 id: . "new"
  141 primary-exp: . routine formals block
  142 float-exp: . "float"
  143 duration: . "duration"
  144         | . duration "duration"
  150 dictionary: . "[" assocs "]"
  154 tuple: . "(" tuple.exps ")"
  155 literal-exp: . float-exp
  156            | . "angle"
  157            | . duration
  158            | . string
  159            | . "[" exps "]"
  160            | . dictionary
  161            | . tuple
  162 string: . "string"
  163       | . string "string"
  164 literal-exp: . "__HERE__"
  170 lvalue: . primary-exp "[" exps "]"
  171 literal-exp: . "this"
  172            | . "call"
  173 primary-exp: . literal-exp
  174            | . "(" exp ")"
  175            | . "(" error ")"
  176            | . primary-exp "**" primary-exp
  177 unary-exp: . primary-exp
  178          | . "--" lvalue
  179          | . "++" lvalue
  180          | . "+" unary-exp
  181          | . "-" unary-exp
  182          | . "!" unary-exp
  183          | . "compl" unary-exp
  184 bitor-exp: . unary-exp
  185          | . bitor-exp "+" bitor-exp
  186          | . bitor-exp "-" bitor-exp
  187          | . bitor-exp "*" bitor-exp
  188          | . bitor-exp "/" bitor-exp
  189          | . bitor-exp "%" bitor-exp
  190          | . bitor-exp "^" bitor-exp
  191          | . bitor-exp "<<" bitor-exp
  192          | . bitor-exp "bitand" bitor-exp
  193          | . bitor-exp "bitor" bitor-exp
  194          | . bitor-exp ">>" bitor-exp
  205 rel-exp: . bitor-exp rel-ops
  208 exp: . rel-exp
  209    | . exp "&&" exp
  210    | . exp "||" exp
  211    | . exp "in" exp
  212    | . exp "!" "in" exp
  216    | . "%unscope:" unsigned
  217 primary-exp: . "%exp:" unsigned
  218 lvalue: . "%lvalue:" unsigned
  219       | . "%id:" unsigned
  220       | . primary-exp "." "%id:" unsigned
  221 primary-exp: . lvalue "(" "%exps:" unsigned ")"

    "__HERE__"    shift, and go to state 7
    "break"       shift, and go to state 8
    "closure"     shift, and go to state 9
    "const"       shift, and go to state 10
    "continue"    shift, and go to state 11
    "freezeif"    shift, and go to state 12
    "function"    shift, and go to state 13
    "if"          shift, and go to state 14
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "return"      shift, and go to state 19
    "stopif"      shift, and go to state 20
    "switch"      shift, and go to state 21
    "throw"       shift, and go to state 22
    "timeout"     shift, and go to state 23
    "try"         shift, and go to state 24
    "var"         shift, and go to state 25
    "waituntil"   shift, and go to state 26
    "watch"       shift, and go to state 27
    "whenever"    shift, and go to state 28
    "&"           shift, and go to state 29
    "every"       shift, and go to state 30
    "for"         shift, and go to state 31
    "loop"        shift, and go to state 32
    "while"       shift, and go to state 33
    "at"          shift, and go to state 34
    "identifier"  shift, and go to state 35
    "class"       shift, and go to state 36
    "package"     shift, and go to state 37
    "enum"        shift, and go to state 38
    "external"    shift, and go to state 39
    "import"      shift, and go to state 40
    "--"          shift, and go to state 41
    "++"          shift, and go to state 42
    "do"          shift, and go to state 43
    "assert"      shift, and go to state 44
    "detach"      shift, and go to state 45
    "disown"      shift, and go to state 46
    "new"         shift, and go to state 47
    "angle"       shift, and go to state 48
    "duration"    shift, and go to state 49
    "float"       shift, and go to state 50
    "string"      shift, and go to state 51
    "call"        shift, and go to state 52
    "this"        shift, and go to state 53
    "!"           shift, and go to state 54
    "compl"       shift, and go to state 55
    "-"           shift, and go to state 56
    "+"           shift, and go to state 57
    "%unscope:"   shift, and go to state 58
    "%exp:"       shift, and go to state 59
    "%lvalue:"    shift, and go to state 60
    "%id:"        shift, and go to state 61

    stmt         go to state 387
    block        go to state 66
    exp          go to state 67
    routine      go to state 68
    primary-exp  go to state 69
    detach       go to state 70
    lvalue       go to state 71
    id           go to state 72
    bitor-exp    go to state 73
    new          go to state 74
    float-exp    go to state 75
    duration     go to state 76
    dictionary   go to state 77
    tuple        go to state 78
    literal-exp  go to state 79
    string       go to state 80
    unary-exp    go to state 81
    rel-exp      go to state 82


state 318

  126 primary-exp: "isdef" "(" k1_id ")" .

    $default  reduce using rule 126 (primary-exp)


state 319

   27 block: "{" id "~" id . "}"

    "}"  shift, and go to state 388


state 320

   62 exp: exp . "=" exp
   63    | exp . "=" exp modifiers
  145 assoc: exp "=>" exp .  ["]", ","]
  209 exp: exp . "&&" exp
  210    | exp . "||" exp
  211    | exp . "in" exp
  212    | exp . "!" "in" exp

    "="   shift, and go to state 160
    "in"  shift, and go to state 161
    "!"   shift, and go to state 211
    "&&"  shift, and go to state 163
    "||"  shift, and go to state 164

    $default  reduce using rule 145 (assoc)


state 321

   62 exp: exp . "=" exp
   63    | exp . "=" exp modifiers
  145 assoc: exp . "=>" exp
  209 exp: exp . "&&" exp
  210    | exp . "||" exp
  211    | exp . "in" exp
  212    | exp . "!" "in" exp

    "="   shift, and go to state 160
    "in"  shift, and go to state 161
    "=>"  shift, and go to state 210
    "!"   shift, and go to state 211
    "&&"  shift, and go to state 163
    "||"  shift, and go to state 164


state 322

  147 assocs.1: assocs.1 "," assoc .

    $default  reduce using rule 147 (assocs.1)


state 323

   62 exp: exp . "=" exp
   63    | exp . "=" exp modifiers
  209    | exp . "&&" exp
  210    | exp . "||" exp
  211    | exp . "in" exp
  212    | exp . "!" "in" exp
  229 exps.1: exps.1 "," exp .  ["]", ")", ","]

    "="   shift, and go to state 160
    "in"  shift, and go to state 161
    "!"   shift, and go to state 211
    "&&"  shift, and go to state 163
    "||"  shift, and go to state 164

    $default  reduce using rule 229 (exps.1)


state 324

   62 exp: exp . "=" exp
   63    | exp . "=" exp modifiers
  209    | exp . "&&" exp
  210    | exp . "||" exp
  211    | exp . "in" exp
  212    | exp . "!" "in" exp
  229 exps.1: exps.1 "," exp .  [","]
  230 exps.2: exps.1 "," exp .  [")"]

    "="   shift, and go to state 160
    "in"  shift, and go to state 161
    "!"   shift, and go to state 211
    "&&"  shift, and go to state 163
    "||"  shift, and go to state 164

    ")"       reduce using rule 230 (exps.2)
    $default  reduce using rule 229 (exps.1)


state 325

   23 stmt: . primary-exp ":" stmt
   24     | . exp
   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   37 exp: . "class" lvalue protos block
   38    | . "package" lvalue protos block
   43 stmt: . "enum" id "{" id.0 "}"
   47     | . "external" "identifier" "identifier"
   48     | . "external" "var" "identifier" "." "identifier" from "identifier"
   49     | . "external" event_or_function "(" unsigned ")" "identifier" "." "identifier" from "identifier"
   50     | . "import" lvalue
   51     | . exp "!" args.opt tilda.opt
   52 routine: . "closure"
   53        | . "function"
   54 stmt: . routine k1_id formals block
   55     | . id id formals block
   62 exp: . exp "=" exp
   63    | . exp "=" exp modifiers
   64    | . lvalue "+=" exp
   65    | . lvalue "-=" exp
   66    | . lvalue "*=" exp
   67    | . lvalue "/=" exp
   68    | . lvalue "^=" exp
   69    | . lvalue "%=" exp
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
   73 stmt: . "at" identifiers "(" exp tilda.opt ")" stmt onleave.opt
   74     | . "at" identifiers "(" event_match ")" stmt onleave.opt
   75     | . "every" "(" exp ")" stmt
   76     | . "if" "(" stmts ")" stmt else.opt
   77     | . "freezeif" "(" exp ")" stmt
   78     | . "stopif" "(" exp ")" stmt
   78     | "stopif" "(" exp ")" . stmt
   79     | . "switch" "(" exp ")" "{" cases default.opt "}"
   80     | . "timeout" "(" exp ")" stmt catch.opt else.opt finally.opt
   81     | . "return" exp.opt
   82     | . "break"
   83     | . "continue"
   84     | . "waituntil" "(" exp tilda.opt ")"
   85     | . "waituntil" "(" event_match ")"
   86     | . "whenever" "(" exp tilda.opt ")" stmt else.opt
   87     | . "whenever" "(" event_match ")" stmt else.opt
  108     | . "try" block catches.1 else.opt finally.opt
  109     | . "try" block "finally" block
  110     | . "throw" exp.opt
  111     | . "loop" stmt
  112     | . "for" "(" exp ")" stmt
  113     | . "for" "(" stmt.opt ";" exp ";" stmt.opt ")" stmt
  114     | . "for" "(" "var" "identifier" in_or_colon exp ")" stmt
  115     | . "while" "(" exp ")" stmt
  118 primary-exp: . block
  119            | . "do" "(" exp ")" block
  120 detach: . "detach"
  121       | . "disown"
  122 primary-exp: . "assert" "(" exp ")"
  123            | . "assert" "{" claims "}"
  124            | . detach "(" exp ")"
  125            | . detach block
  126            | . "isdef" "(" k1_id ")"
  127            | . "watch" "(" exp ")"
  128 lvalue: . id
  129       | . primary-exp "." id
  130       | . primary-exp "." "*"
  131 primary-exp: . "&" id
  132            | . primary-exp "." "&" id
  133 id: . "identifier"
  134 bitor-exp: . "var" bitor-exp
  135          | . "const" "var" bitor-exp
  136 primary-exp: . lvalue
  137            | . lvalue args
  138 new: . "new" "identifier" args.opt
  139 bitor-exp: . new
  140 id: . "new"
  141 primary-exp: . routine formals block
  142 float-exp: . "float"
  143 duration: . "duration"
  144         | . duration "duration"
  150 dictionary: . "[" assocs "]"
  154 tuple: . "(" tuple.exps ")"
  155 literal-exp: . float-exp
  156            | . "angle"
  157            | . duration
  158            | . string
  159            | . "[" exps "]"
  160            | . dictionary
  161            | . tuple
  162 string: . "string"
  163       | . string "string"
  164 literal-exp: . "__HERE__"
  170 lvalue: . primary-exp "[" exps "]"
  171 literal-exp: . "this"
  172            | . "call"
  173 primary-exp: . literal-exp
  174            | . "(" exp ")"
  175            | . "(" error ")"
  176            | . primary-exp "**" primary-exp
  177 unary-exp: . primary-exp
  178          | . "--" lvalue
  179          | . "++" lvalue
  180          | . "+" unary-exp
  181          | . "-" unary-exp
  182          | . "!" unary-exp
  183          | . "compl" unary-exp
  184 bitor-exp: . unary-exp
  185          | . bitor-exp "+" bitor-exp
  186          | . bitor-exp "-" bitor-exp
  187          | . bitor-exp "*" bitor-exp
  188          | . bitor-exp "/" bitor-exp
  189          | . bitor-exp "%" bitor-exp
  190          | . bitor-exp "^" bitor-exp
  191          | . bitor-exp "<<" bitor-exp
  192          | . bitor-exp "bitand" bitor-exp
  193          | . bitor-exp "bitor" bitor-exp
  194          | . bitor-exp ">>" bitor-exp
  205 rel-exp: . bitor-exp rel-ops
  208 exp: . rel-exp
  209    | . exp "&&" exp
  210    | . exp "||" exp
  211    | . exp "in" exp
  212    | . exp "!" "in" exp
  216    | . "%unscope:" unsigned
  217 primary-exp: . "%exp:" unsigned
  218 lvalue: . "%lvalue:" unsigned
  219       | . "%id:" unsigned
  220       | . primary-exp "." "%id:" unsigned
  221 primary-exp: . lvalue "(" "%exps:" unsigned ")"

    "__HERE__"    shift, and go to state 7
    "break"       shift, and go to state 8
    "closure"     shift, and go to state 9
    "const"       shift, and go to state 10
    "continue"    shift, and go to state 11
    "freezeif"    shift, and go to state 12
    "function"    shift, and go to state 13
    "if"          shift, and go to state 14
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "return"      shift, and go to state 19
    "stopif"      shift, and go to state 20
    "switch"      shift, and go to state 21
    "throw"       shift, and go to state 22
    "timeout"     shift, and go to state 23
    "try"         shift, and go to state 24
    "var"         shift, and go to state 25
    "waituntil"   shift, and go to state 26
    "watch"       shift, and go to state 27
    "whenever"    shift, and go to state 28
    "&"           shift, and go to state 29
    "every"       shift, and go to state 30
    "for"         shift, and go to state 31
    "loop"        shift, and go to state 32
    "while"       shift, and go to state 33
    "at"          shift, and go to state 34
    "identifier"  shift, and go to state 35
    "class"       shift, and go to state 36
    "package"     shift, and go to state 37
    "enum"        shift, and go to state 38
    "external"    shift, and go to state 39
    "import"      shift, and go to state 40
    "--"          shift, and go to state 41
    "++"          shift, and go to state 42
    "do"          shift, and go to state 43
    "assert"      shift, and go to state 44
    "detach"      shift, and go to state 45
    "disown"      shift, and go to state 46
    "new"         shift, and go to state 47
    "angle"       shift, and go to state 48
    "duration"    shift, and go to state 49
    "float"       shift, and go to state 50
    "string"      shift, and go to state 51
    "call"        shift, and go to state 52
    "this"        shift, and go to state 53
    "!"           shift, and go to state 54
    "compl"       shift, and go to state 55
    "-"           shift, and go to state 56
    "+"           shift, and go to state 57
    "%unscope:"   shift, and go to state 58
    "%exp:"       shift, and go to state 59
    "%lvalue:"    shift, and go to state 60
    "%id:"        shift, and go to state 61

    stmt         go to state 389
    block        go to state 66
    exp          go to state 67
    routine      go to state 68
    primary-exp  go to state 69
    detach       go to state 70
    lvalue       go to state 71
    id           go to state 72
    bitor-exp    go to state 73
    new          go to state 74
    float-exp    go to state 75
    duration     go to state 76
    dictionary   go to state 77
    tuple        go to state 78
    literal-exp  go to state 79
    string       go to state 80
    unary-exp    go to state 81
    rel-exp      go to state 82


state 326

   79 stmt: "switch" "(" exp ")" . "{" cases default.opt "}"

    "{"  shift, and go to state 390


state 327

   23 stmt: . primary-exp ":" stmt
   24     | . exp
   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   37 exp: . "class" lvalue protos block
   38    | . "package" lvalue protos block
   43 stmt: . "enum" id "{" id.0 "}"
   47     | . "external" "identifier" "identifier"
   48     | . "external" "var" "identifier" "." "identifier" from "identifier"
   49     | . "external" event_or_function "(" unsigned ")" "identifier" "." "identifier" from "identifier"
   50     | . "import" lvalue
   51     | . exp "!" args.opt tilda.opt
   52 routine: . "closure"
   53        | . "function"
   54 stmt: . routine k1_id formals block
   55     | . id id formals block
   62 exp: . exp "=" exp
   63    | . exp "=" exp modifiers
   64    | . lvalue "+=" exp
   65    | . lvalue "-=" exp
   66    | . lvalue "*=" exp
   67    | . lvalue "/=" exp
   68    | . lvalue "^=" exp
   69    | . lvalue "%=" exp
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
   73 stmt: . "at" identifiers "(" exp tilda.opt ")" stmt onleave.opt
   74     | . "at" identifiers "(" event_match ")" stmt onleave.opt
   75     | . "every" "(" exp ")" stmt
   76     | . "if" "(" stmts ")" stmt else.opt
   77     | . "freezeif" "(" exp ")" stmt
   78     | . "stopif" "(" exp ")" stmt
   79     | . "switch" "(" exp ")" "{" cases default.opt "}"
   80     | . "timeout" "(" exp ")" stmt catch.opt else.opt finally.opt
   80     | "timeout" "(" exp ")" . stmt catch.opt else.opt finally.opt
   81     | . "return" exp.opt
   82     | . "break"
   83     | . "continue"
   84     | . "waituntil" "(" exp tilda.opt ")"
   85     | . "waituntil" "(" event_match ")"
   86     | . "whenever" "(" exp tilda.opt ")" stmt else.opt
   87     | . "whenever" "(" event_match ")" stmt else.opt
  108     | . "try" block catches.1 else.opt finally.opt
  109     | . "try" block "finally" block
  110     | . "throw" exp.opt
  111     | . "loop" stmt
  112     | . "for" "(" exp ")" stmt
  113     | . "for" "(" stmt.opt ";" exp ";" stmt.opt ")" stmt
  114     | . "for" "(" "var" "identifier" in_or_colon exp ")" stmt
  115     | . "while" "(" exp ")" stmt
  118 primary-exp: . block
  119            | . "do" "(" exp ")" block
  120 detach: . "detach"
  121       | . "disown"
  122 primary-exp: . "assert" "(" exp ")"
  123            | . "assert" "{" claims "}"
  124            | . detach "(" exp ")"
  125            | . detach block
  126            | . "isdef" "(" k1_id ")"
  127            | . "watch" "(" exp ")"
  128 lvalue: . id
  129       | . primary-exp "." id
  130       | . primary-exp "." "*"
  131 primary-exp: . "&" id
  132            | . primary-exp "." "&" id
  133 id: . "identifier"
  134 bitor-exp: . "var" bitor-exp
  135          | . "const" "var" bitor-exp
  136 primary-exp: . lvalue
  137            | . lvalue args
  138 new: . "new" "identifier" args.opt
  139 bitor-exp: . new
  140 id: . "new"
  141 primary-exp: . routine formals block
  142 float-exp: . "float"
  143 duration: . "duration"
  144         | . duration "duration"
  150 dictionary: . "[" assocs "]"
  154 tuple: . "(" tuple.exps ")"
  155 literal-exp: . float-exp
  156            | . "angle"
  157            | . duration
  158            | . string
  159            | . "[" exps "]"
  160            | . dictionary
  161            | . tuple
  162 string: . "string"
  163       | . string "string"
  164 literal-exp: . "__HERE__"
  170 lvalue: . primary-exp "[" exps "]"
  171 literal-exp: . "this"
  172            | . "call"
  173 primary-exp: . literal-exp
  174            | . "(" exp ")"
  175            | . "(" error ")"
  176            | . primary-exp "**" primary-exp
  177 unary-exp: . primary-exp
  178          | . "--" lvalue
  179          | . "++" lvalue
  180          | . "+" unary-exp
  181          | . "-" unary-exp
  182          | . "!" unary-exp
  183          | . "compl" unary-exp
  184 bitor-exp: . unary-exp
  185          | . bitor-exp "+" bitor-exp
  186          | . bitor-exp "-" bitor-exp
  187          | . bitor-exp "*" bitor-exp
  188          | . bitor-exp "/" bitor-exp
  189          | . bitor-exp "%" bitor-exp
  190          | . bitor-exp "^" bitor-exp
  191          | . bitor-exp "<<" bitor-exp
  192          | . bitor-exp "bitand" bitor-exp
  193          | . bitor-exp "bitor" bitor-exp
  194          | . bitor-exp ">>" bitor-exp
  205 rel-exp: . bitor-exp rel-ops
  208 exp: . rel-exp
  209    | . exp "&&" exp
  210    | . exp "||" exp
  211    | . exp "in" exp
  212    | . exp "!" "in" exp
  216    | . "%unscope:" unsigned
  217 primary-exp: . "%exp:" unsigned
  218 lvalue: . "%lvalue:" unsigned
  219       | . "%id:" unsigned
  220       | . primary-exp "." "%id:" unsigned
  221 primary-exp: . lvalue "(" "%exps:" unsigned ")"

    "__HERE__"    shift, and go to state 7
    "break"       shift, and go to state 8
    "closure"     shift, and go to state 9
    "const"       shift, and go to state 10
    "continue"    shift, and go to state 11
    "freezeif"    shift, and go to state 12
    "function"    shift, and go to state 13
    "if"          shift, and go to state 14
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "return"      shift, and go to state 19
    "stopif"      shift, and go to state 20
    "switch"      shift, and go to state 21
    "throw"       shift, and go to state 22
    "timeout"     shift, and go to state 23
    "try"         shift, and go to state 24
    "var"         shift, and go to state 25
    "waituntil"   shift, and go to state 26
    "watch"       shift, and go to state 27
    "whenever"    shift, and go to state 28
    "&"           shift, and go to state 29
    "every"       shift, and go to state 30
    "for"         shift, and go to state 31
    "loop"        shift, and go to state 32
    "while"       shift, and go to state 33
    "at"          shift, and go to state 34
    "identifier"  shift, and go to state 35
    "class"       shift, and go to state 36
    "package"     shift, and go to state 37
    "enum"        shift, and go to state 38
    "external"    shift, and go to state 39
    "import"      shift, and go to state 40
    "--"          shift, and go to state 41
    "++"          shift, and go to state 42
    "do"          shift, and go to state 43
    "assert"      shift, and go to state 44
    "detach"      shift, and go to state 45
    "disown"      shift, and go to state 46
    "new"         shift, and go to state 47
    "angle"       shift, and go to state 48
    "duration"    shift, and go to state 49
    "float"       shift, and go to state 50
    "string"      shift, and go to state 51
    "call"        shift, and go to state 52
    "this"        shift, and go to state 53
    "!"           shift, and go to state 54
    "compl"       shift, and go to state 55
    "-"           shift, and go to state 56
    "+"           shift, and go to state 57
    "%unscope:"   shift, and go to state 58
    "%exp:"       shift, and go to state 59
    "%lvalue:"    shift, and go to state 60
    "%id:"        shift, and go to state 61

    stmt         go to state 391
    block        go to state 66
    exp          go to state 67
    routine      go to state 68
    primary-exp  go to state 69
    detach       go to state 70
    lvalue       go to state 71
    id           go to state 72
    bitor-exp    go to state 73
    new          go to state 74
    float-exp    go to state 75
    duration     go to state 76
    dictionary   go to state 77
    tuple        go to state 78
    literal-exp  go to state 79
    string       go to state 80
    unary-exp    go to state 81
    rel-exp      go to state 82


state 328

   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   37 exp: . "class" lvalue protos block
   38    | . "package" lvalue protos block
   52 routine: . "closure"
   53        | . "function"
   62 exp: . exp "=" exp
   63    | . exp "=" exp modifiers
   64    | . lvalue "+=" exp
   65    | . lvalue "-=" exp
   66    | . lvalue "*=" exp
   67    | . lvalue "/=" exp
   68    | . lvalue "^=" exp
   69    | . lvalue "%=" exp
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
   99 match: . exp
  100      | . exp "if" exp
  102 match.opt: "(" . match ")"
  118 primary-exp: . block
  119            | . "do" "(" exp ")" block
  120 detach: . "detach"
  121       | . "disown"
  122 primary-exp: . "assert" "(" exp ")"
  123            | . "assert" "{" claims "}"
  124            | . detach "(" exp ")"
  125            | . detach block
  126            | . "isdef" "(" k1_id ")"
  127            | . "watch" "(" exp ")"
  128 lvalue: . id
  129       | . primary-exp "." id
  130       | . primary-exp "." "*"
  131 primary-exp: . "&" id
  132            | . primary-exp "." "&" id
  133 id: . "identifier"
  134 bitor-exp: . "var" bitor-exp
  135          | . "const" "var" bitor-exp
  136 primary-exp: . lvalue
  137            | . lvalue args
  138 new: . "new" "identifier" args.opt
  139 bitor-exp: . new
  140 id: . "new"
  141 primary-exp: . routine formals block
  142 float-exp: . "float"
  143 duration: . "duration"
  144         | . duration "duration"
  150 dictionary: . "[" assocs "]"
  154 tuple: . "(" tuple.exps ")"
  155 literal-exp: . float-exp
  156            | . "angle"
  157            | . duration
  158            | . string
  159            | . "[" exps "]"
  160            | . dictionary
  161            | . tuple
  162 string: . "string"
  163       | . string "string"
  164 literal-exp: . "__HERE__"
  170 lvalue: . primary-exp "[" exps "]"
  171 literal-exp: . "this"
  172            | . "call"
  173 primary-exp: . literal-exp
  174            | . "(" exp ")"
  175            | . "(" error ")"
  176            | . primary-exp "**" primary-exp
  177 unary-exp: . primary-exp
  178          | . "--" lvalue
  179          | . "++" lvalue
  180          | . "+" unary-exp
  181          | . "-" unary-exp
  182          | . "!" unary-exp
  183          | . "compl" unary-exp
  184 bitor-exp: . unary-exp
  185          | . bitor-exp "+" bitor-exp
  186          | . bitor-exp "-" bitor-exp
  187          | . bitor-exp "*" bitor-exp
  188          | . bitor-exp "/" bitor-exp
  189          | . bitor-exp "%" bitor-exp
  190          | . bitor-exp "^" bitor-exp
  191          | . bitor-exp "<<" bitor-exp
  192          | . bitor-exp "bitand" bitor-exp
  193          | . bitor-exp "bitor" bitor-exp
  194          | . bitor-exp ">>" bitor-exp
  205 rel-exp: . bitor-exp rel-ops
  208 exp: . rel-exp
  209    | . exp "&&" exp
  210    | . exp "||" exp
  211    | . exp "in" exp
  212    | . exp "!" "in" exp
  216    | . "%unscope:" unsigned
  217 primary-exp: . "%exp:" unsigned
  218 lvalue: . "%lvalue:" unsigned
  219       | . "%id:" unsigned
  220       | . primary-exp "." "%id:" unsigned
  221 primary-exp: . lvalue "(" "%exps:" unsigned ")"

    "__HERE__"    shift, and go to state 7
    "closure"     shift, and go to state 9
    "const"       shift, and go to state 10
    "function"    shift, and go to state 13
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "var"         shift, and go to state 25
    "watch"       shift, and go to state 27
    "&"           shift, and go to state 29
    "identifier"  shift, and go to state 35
    "class"       shift, and go to state 36
    "package"     shift, and go to state 37
    "--"          shift, and go to state 41
    "++"          shift, and go to state 42
    "do"          shift, and go to state 43
    "assert"      shift, and go to state 44
    "detach"      shift, and go to state 45
    "disown"      shift, and go to state 46
    "new"         shift, and go to state 47
    "angle"       shift, and go to state 48
    "duration"    shift, and go to state 49
    "float"       shift, and go to state 50
    "string"      shift, and go to state 51
    "call"        shift, and go to state 52
    "this"        shift, and go to state 53
    "!"           shift, and go to state 54
    "compl"       shift, and go to state 55
    "-"           shift, and go to state 56
    "+"           shift, and go to state 57
    "%unscope:"   shift, and go to state 58
    "%exp:"       shift, and go to state 59
    "%lvalue:"    shift, and go to state 60
    "%id:"        shift, and go to state 61

    block        go to state 66
    exp          go to state 392
    routine      go to state 99
    primary-exp  go to state 100
    match        go to state 393
    detach       go to state 70
    lvalue       go to state 71
    id           go to state 101
    bitor-exp    go to state 73
    new          go to state 74
    float-exp    go to state 75
    duration     go to state 76
    dictionary   go to state 77
    tuple        go to state 78
    literal-exp  go to state 79
    string       go to state 80
    unary-exp    go to state 81
    rel-exp      go to state 82


state 329

   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
  103 catch: "catch" match.opt . block

    "{"  shift, and go to state 16

    block  go to state 394


state 330

  109 stmt: "try" block "finally" block .

    $default  reduce using rule 109 (stmt)


state 331

   23 stmt: . primary-exp ":" stmt
   24     | . exp
   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   37 exp: . "class" lvalue protos block
   38    | . "package" lvalue protos block
   43 stmt: . "enum" id "{" id.0 "}"
   47     | . "external" "identifier" "identifier"
   48     | . "external" "var" "identifier" "." "identifier" from "identifier"
   49     | . "external" event_or_function "(" unsigned ")" "identifier" "." "identifier" from "identifier"
   50     | . "import" lvalue
   51     | . exp "!" args.opt tilda.opt
   52 routine: . "closure"
   53        | . "function"
   54 stmt: . routine k1_id formals block
   55     | . id id formals block
   62 exp: . exp "=" exp
   63    | . exp "=" exp modifiers
   64    | . lvalue "+=" exp
   65    | . lvalue "-=" exp
   66    | . lvalue "*=" exp
   67    | . lvalue "/=" exp
   68    | . lvalue "^=" exp
   69    | . lvalue "%=" exp
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
   73 stmt: . "at" identifiers "(" exp tilda.opt ")" stmt onleave.opt
   74     | . "at" identifiers "(" event_match ")" stmt onleave.opt
   75     | . "every" "(" exp ")" stmt
   76     | . "if" "(" stmts ")" stmt else.opt
   77     | . "freezeif" "(" exp ")" stmt
   78     | . "stopif" "(" exp ")" stmt
   79     | . "switch" "(" exp ")" "{" cases default.opt "}"
   80     | . "timeout" "(" exp ")" stmt catch.opt else.opt finally.opt
   81     | . "return" exp.opt
   82     | . "break"
   83     | . "continue"
   84     | . "waituntil" "(" exp tilda.opt ")"
   85     | . "waituntil" "(" event_match ")"
   86     | . "whenever" "(" exp tilda.opt ")" stmt else.opt
   87     | . "whenever" "(" event_match ")" stmt else.opt
   91 else.opt: "else" . stmt
  108 stmt: . "try" block catches.1 else.opt finally.opt
  109     | . "try" block "finally" block
  110     | . "throw" exp.opt
  111     | . "loop" stmt
  112     | . "for" "(" exp ")" stmt
  113     | . "for" "(" stmt.opt ";" exp ";" stmt.opt ")" stmt
  114     | . "for" "(" "var" "identifier" in_or_colon exp ")" stmt
  115     | . "while" "(" exp ")" stmt
  118 primary-exp: . block
  119            | . "do" "(" exp ")" block
  120 detach: . "detach"
  121       | . "disown"
  122 primary-exp: . "assert" "(" exp ")"
  123            | . "assert" "{" claims "}"
  124            | . detach "(" exp ")"
  125            | . detach block
  126            | . "isdef" "(" k1_id ")"
  127            | . "watch" "(" exp ")"
  128 lvalue: . id
  129       | . primary-exp "." id
  130       | . primary-exp "." "*"
  131 primary-exp: . "&" id
  132            | . primary-exp "." "&" id
  133 id: . "identifier"
  134 bitor-exp: . "var" bitor-exp
  135          | . "const" "var" bitor-exp
  136 primary-exp: . lvalue
  137            | . lvalue args
  138 new: . "new" "identifier" args.opt
  139 bitor-exp: . new
  140 id: . "new"
  141 primary-exp: . routine formals block
  142 float-exp: . "float"
  143 duration: . "duration"
  144         | . duration "duration"
  150 dictionary: . "[" assocs "]"
  154 tuple: . "(" tuple.exps ")"
  155 literal-exp: . float-exp
  156            | . "angle"
  157            | . duration
  158            | . string
  159            | . "[" exps "]"
  160            | . dictionary
  161            | . tuple
  162 string: . "string"
  163       | . string "string"
  164 literal-exp: . "__HERE__"
  170 lvalue: . primary-exp "[" exps "]"
  171 literal-exp: . "this"
  172            | . "call"
  173 primary-exp: . literal-exp
  174            | . "(" exp ")"
  175            | . "(" error ")"
  176            | . primary-exp "**" primary-exp
  177 unary-exp: . primary-exp
  178          | . "--" lvalue
  179          | . "++" lvalue
  180          | . "+" unary-exp
  181          | . "-" unary-exp
  182          | . "!" unary-exp
  183          | . "compl" unary-exp
  184 bitor-exp: . unary-exp
  185          | . bitor-exp "+" bitor-exp
  186          | . bitor-exp "-" bitor-exp
  187          | . bitor-exp "*" bitor-exp
  188          | . bitor-exp "/" bitor-exp
  189          | . bitor-exp "%" bitor-exp
  190          | . bitor-exp "^" bitor-exp
  191          | . bitor-exp "<<" bitor-exp
  192          | . bitor-exp "bitand" bitor-exp
  193          | . bitor-exp "bitor" bitor-exp
  194          | . bitor-exp ">>" bitor-exp
  205 rel-exp: . bitor-exp rel-ops
  208 exp: . rel-exp
  209    | . exp "&&" exp
  210    | . exp "||" exp
  211    | . exp "in" exp
  212    | . exp "!" "in" exp
  216    | . "%unscope:" unsigned
  217 primary-exp: . "%exp:" unsigned
  218 lvalue: . "%lvalue:" unsigned
  219       | . "%id:" unsigned
  220       | . primary-exp "." "%id:" unsigned
  221 primary-exp: . lvalue "(" "%exps:" unsigned ")"

    "__HERE__"    shift, and go to state 7
    "break"       shift, and go to state 8
    "closure"     shift, and go to state 9
    "const"       shift, and go to state 10
    "continue"    shift, and go to state 11
    "freezeif"    shift, and go to state 12
    "function"    shift, and go to state 13
    "if"          shift, and go to state 14
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "return"      shift, and go to state 19
    "stopif"      shift, and go to state 20
    "switch"      shift, and go to state 21
    "throw"       shift, and go to state 22
    "timeout"     shift, and go to state 23
    "try"         shift, and go to state 24
    "var"         shift, and go to state 25
    "waituntil"   shift, and go to state 26
    "watch"       shift, and go to state 27
    "whenever"    shift, and go to state 28
    "&"           shift, and go to state 29
    "every"       shift, and go to state 30
    "for"         shift, and go to state 31
    "loop"        shift, and go to state 32
    "while"       shift, and go to state 33
    "at"          shift, and go to state 34
    "identifier"  shift, and go to state 35
    "class"       shift, and go to state 36
    "package"     shift, and go to state 37
    "enum"        shift, and go to state 38
    "external"    shift, and go to state 39
    "import"      shift, and go to state 40
    "--"          shift, and go to state 41
    "++"          shift, and go to state 42
    "do"          shift, and go to state 43
    "assert"      shift, and go to state 44
    "detach"      shift, and go to state 45
    "disown"      shift, and go to state 46
    "new"         shift, and go to state 47
    "angle"       shift, and go to state 48
    "duration"    shift, and go to state 49
    "float"       shift, and go to state 50
    "string"      shift, and go to state 51
    "call"        shift, and go to state 52
    "this"        shift, and go to state 53
    "!"           shift, and go to state 54
    "compl"       shift, and go to state 55
    "-"           shift, and go to state 56
    "+"           shift, and go to state 57
    "%unscope:"   shift, and go to state 58
    "%exp:"       shift, and go to state 59
    "%lvalue:"    shift, and go to state 60
    "%id:"        shift, and go to state 61

    stmt         go to state 395
    block        go to state 66
    exp          go to state 67
    routine      go to state 68
    primary-exp  go to state 69
    detach       go to state 70
    lvalue       go to state 71
    id           go to state 72
    bitor-exp    go to state 73
    new          go to state 74
    float-exp    go to state 75
    duration     go to state 76
    dictionary   go to state 77
    tuple        go to state 78
    literal-exp  go to state 79
    string       go to state 80
    unary-exp    go to state 81
    rel-exp      go to state 82


state 332

  106 finally.opt: .  ["end of command", "case", "catch", "default", "else", "onleave", "}", ")", ",", ";", "&", "|"]
  107            | . "finally" block
  108 stmt: "try" block catches.1 else.opt . finally.opt

    "finally"  shift, and go to state 396

    $default  reduce using rule 106 (finally.opt)

    finally.opt  go to state 397

    Conflict between rule 106 and token "finally" resolved as shift (EMPTY < "finally").


state 333

   98 catches.1: catches.1 catch .

    $default  reduce using rule 98 (catches.1)


state 334

   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   37 exp: . "class" lvalue protos block
   38    | . "package" lvalue protos block
   52 routine: . "closure"
   53        | . "function"
   62 exp: . exp "=" exp
   63    | . exp "=" exp modifiers
   64    | . lvalue "+=" exp
   65    | . lvalue "-=" exp
   66    | . lvalue "*=" exp
   67    | . lvalue "/=" exp
   68    | . lvalue "^=" exp
   69    | . lvalue "%=" exp
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
  118            | . block
  119            | . "do" "(" exp ")" block
  120 detach: . "detach"
  121       | . "disown"
  122 primary-exp: . "assert" "(" exp ")"
  123            | . "assert" "{" claims "}"
  124            | . detach "(" exp ")"
  125            | . detach block
  126            | . "isdef" "(" k1_id ")"
  127            | . "watch" "(" exp ")"
  128 lvalue: . id
  129       | . primary-exp "." id
  130       | . primary-exp "." "*"
  131 primary-exp: . "&" id
  132            | . primary-exp "." "&" id
  133 id: . "identifier"
  134 bitor-exp: . "var" bitor-exp
  135          | . "const" "var" bitor-exp
  136 primary-exp: . lvalue
  137            | . lvalue args
  138 new: . "new" "identifier" args.opt
  139 bitor-exp: . new
  140 id: . "new"
  141 primary-exp: . routine formals block
  142 float-exp: . "float"
  143 duration: . "duration"
  144         | . duration "duration"
  150 dictionary: . "[" assocs "]"
  154 tuple: . "(" tuple.exps ")"
  155 literal-exp: . float-exp
  156            | . "angle"
  157            | . duration
  158            | . string
  159            | . "[" exps "]"
  160            | . dictionary
  161            | . tuple
  162 string: . "string"
  163       | . string "string"
  164 literal-exp: . "__HERE__"
  169 tilda.opt: "~" . exp
  170 lvalue: . primary-exp "[" exps "]"
  171 literal-exp: . "this"
  172            | . "call"
  173 primary-exp: . literal-exp
  174            | . "(" exp ")"
  175            | . "(" error ")"
  176            | . primary-exp "**" primary-exp
  177 unary-exp: . primary-exp
  178          | . "--" lvalue
  179          | . "++" lvalue
  180          | . "+" unary-exp
  181          | . "-" unary-exp
  182          | . "!" unary-exp
  183          | . "compl" unary-exp
  184 bitor-exp: . unary-exp
  185          | . bitor-exp "+" bitor-exp
  186          | . bitor-exp "-" bitor-exp
  187          | . bitor-exp "*" bitor-exp
  188          | . bitor-exp "/" bitor-exp
  189          | . bitor-exp "%" bitor-exp
  190          | . bitor-exp "^" bitor-exp
  191          | . bitor-exp "<<" bitor-exp
  192          | . bitor-exp "bitand" bitor-exp
  193          | . bitor-exp "bitor" bitor-exp
  194          | . bitor-exp ">>" bitor-exp
  205 rel-exp: . bitor-exp rel-ops
  208 exp: . rel-exp
  209    | . exp "&&" exp
  210    | . exp "||" exp
  211    | . exp "in" exp
  212    | . exp "!" "in" exp
  216    | . "%unscope:" unsigned
  217 primary-exp: . "%exp:" unsigned
  218 lvalue: . "%lvalue:" unsigned
  219       | . "%id:" unsigned
  220       | . primary-exp "." "%id:" unsigned
  221 primary-exp: . lvalue "(" "%exps:" unsigned ")"

    "__HERE__"    shift, and go to state 7
    "closure"     shift, and go to state 9
    "const"       shift, and go to state 10
    "function"    shift, and go to state 13
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "var"         shift, and go to state 25
    "watch"       shift, and go to state 27
    "&"           shift, and go to state 29
    "identifier"  shift, and go to state 35
    "class"       shift, and go to state 36
    "package"     shift, and go to state 37
    "--"          shift, and go to state 41
    "++"          shift, and go to state 42
    "do"          shift, and go to state 43
    "assert"      shift, and go to state 44
    "detach"      shift, and go to state 45
    "disown"      shift, and go to state 46
    "new"         shift, and go to state 47
    "angle"       shift, and go to state 48
    "duration"    shift, and go to state 49
    "float"       shift, and go to state 50
    "string"      shift, and go to state 51
    "call"        shift, and go to state 52
    "this"        shift, and go to state 53
    "!"           shift, and go to state 54
    "compl"       shift, and go to state 55
    "-"           shift, and go to state 56
    "+"           shift, and go to state 57
    "%unscope:"   shift, and go to state 58
    "%exp:"       shift, and go to state 59
    "%lvalue:"    shift, and go to state 60
    "%id:"        shift, and go to state 61

    block        go to state 66
    exp          go to state 398
    routine      go to state 99
    primary-exp  go to state 100
    detach       go to state 70
    lvalue       go to state 71
    id           go to state 101
    bitor-exp    go to state 73
    new          go to state 74
    float-exp    go to state 75
    duration     go to state 76
    dictionary   go to state 77
    tuple        go to state 78
    literal-exp  go to state 79
    string       go to state 80
    unary-exp    go to state 81
    rel-exp      go to state 82


state 335

  165 event_match: exp "?" . args.opt tilda.opt guard.opt
  231 args: . "(" exps ")"
  232 args.opt: .  ["if", ")", "~"]
  233         | . args

    "("  shift, and go to state 254

    $default  reduce using rule 232 (args.opt)

    args      go to state 255
    args.opt  go to state 399


state 336

   84 stmt: "waituntil" "(" exp tilda.opt . ")"

    ")"  shift, and go to state 400


state 337

   85 stmt: "waituntil" "(" event_match ")" .

    $default  reduce using rule 85 (stmt)


state 338

  127 primary-exp: "watch" "(" exp ")" .

    $default  reduce using rule 127 (primary-exp)


state 339

   86 stmt: "whenever" "(" exp tilda.opt . ")" stmt else.opt

    ")"  shift, and go to state 401


state 340

   23 stmt: . primary-exp ":" stmt
   24     | . exp
   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   37 exp: . "class" lvalue protos block
   38    | . "package" lvalue protos block
   43 stmt: . "enum" id "{" id.0 "}"
   47     | . "external" "identifier" "identifier"
   48     | . "external" "var" "identifier" "." "identifier" from "identifier"
   49     | . "external" event_or_function "(" unsigned ")" "identifier" "." "identifier" from "identifier"
   50     | . "import" lvalue
   51     | . exp "!" args.opt tilda.opt
   52 routine: . "closure"
   53        | . "function"
   54 stmt: . routine k1_id formals block
   55     | . id id formals block
   62 exp: . exp "=" exp
   63    | . exp "=" exp modifiers
   64    | . lvalue "+=" exp
   65    | . lvalue "-=" exp
   66    | . lvalue "*=" exp
   67    | . lvalue "/=" exp
   68    | . lvalue "^=" exp
   69    | . lvalue "%=" exp
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
   73 stmt: . "at" identifiers "(" exp tilda.opt ")" stmt onleave.opt
   74     | . "at" identifiers "(" event_match ")" stmt onleave.opt
   75     | . "every" "(" exp ")" stmt
   76     | . "if" "(" stmts ")" stmt else.opt
   77     | . "freezeif" "(" exp ")" stmt
   78     | . "stopif" "(" exp ")" stmt
   79     | . "switch" "(" exp ")" "{" cases default.opt "}"
   80     | . "timeout" "(" exp ")" stmt catch.opt else.opt finally.opt
   81     | . "return" exp.opt
   82     | . "break"
   83     | . "continue"
   84     | . "waituntil" "(" exp tilda.opt ")"
   85     | . "waituntil" "(" event_match ")"
   86     | . "whenever" "(" exp tilda.opt ")" stmt else.opt
   87     | . "whenever" "(" event_match ")" stmt else.opt
   87     | "whenever" "(" event_match ")" . stmt else.opt
  108     | . "try" block catches.1 else.opt finally.opt
  109     | . "try" block "finally" block
  110     | . "throw" exp.opt
  111     | . "loop" stmt
  112     | . "for" "(" exp ")" stmt
  113     | . "for" "(" stmt.opt ";" exp ";" stmt.opt ")" stmt
  114     | . "for" "(" "var" "identifier" in_or_colon exp ")" stmt
  115     | . "while" "(" exp ")" stmt
  118 primary-exp: . block
  119            | . "do" "(" exp ")" block
  120 detach: . "detach"
  121       | . "disown"
  122 primary-exp: . "assert" "(" exp ")"
  123            | . "assert" "{" claims "}"
  124            | . detach "(" exp ")"
  125            | . detach block
  126            | . "isdef" "(" k1_id ")"
  127            | . "watch" "(" exp ")"
  128 lvalue: . id
  129       | . primary-exp "." id
  130       | . primary-exp "." "*"
  131 primary-exp: . "&" id
  132            | . primary-exp "." "&" id
  133 id: . "identifier"
  134 bitor-exp: . "var" bitor-exp
  135          | . "const" "var" bitor-exp
  136 primary-exp: . lvalue
  137            | . lvalue args
  138 new: . "new" "identifier" args.opt
  139 bitor-exp: . new
  140 id: . "new"
  141 primary-exp: . routine formals block
  142 float-exp: . "float"
  143 duration: . "duration"
  144         | . duration "duration"
  150 dictionary: . "[" assocs "]"
  154 tuple: . "(" tuple.exps ")"
  155 literal-exp: . float-exp
  156            | . "angle"
  157            | . duration
  158            | . string
  159            | . "[" exps "]"
  160            | . dictionary
  161            | . tuple
  162 string: . "string"
  163       | . string "string"
  164 literal-exp: . "__HERE__"
  170 lvalue: . primary-exp "[" exps "]"
  171 literal-exp: . "this"
  172            | . "call"
  173 primary-exp: . literal-exp
  174            | . "(" exp ")"
  175            | . "(" error ")"
  176            | . primary-exp "**" primary-exp
  177 unary-exp: . primary-exp
  178          | . "--" lvalue
  179          | . "++" lvalue
  180          | . "+" unary-exp
  181          | . "-" unary-exp
  182          | . "!" unary-exp
  183          | . "compl" unary-exp
  184 bitor-exp: . unary-exp
  185          | . bitor-exp "+" bitor-exp
  186          | . bitor-exp "-" bitor-exp
  187          | . bitor-exp "*" bitor-exp
  188          | . bitor-exp "/" bitor-exp
  189          | . bitor-exp "%" bitor-exp
  190          | . bitor-exp "^" bitor-exp
  191          | . bitor-exp "<<" bitor-exp
  192          | . bitor-exp "bitand" bitor-exp
  193          | . bitor-exp "bitor" bitor-exp
  194          | . bitor-exp ">>" bitor-exp
  205 rel-exp: . bitor-exp rel-ops
  208 exp: . rel-exp
  209    | . exp "&&" exp
  210    | . exp "||" exp
  211    | . exp "in" exp
  212    | . exp "!" "in" exp
  216    | . "%unscope:" unsigned
  217 primary-exp: . "%exp:" unsigned
  218 lvalue: . "%lvalue:" unsigned
  219       | . "%id:" unsigned
  220       | . primary-exp "." "%id:" unsigned
  221 primary-exp: . lvalue "(" "%exps:" unsigned ")"

    "__HERE__"    shift, and go to state 7
    "break"       shift, and go to state 8
    "closure"     shift, and go to state 9
    "const"       shift, and go to state 10
    "continue"    shift, and go to state 11
    "freezeif"    shift, and go to state 12
    "function"    shift, and go to state 13
    "if"          shift, and go to state 14
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "return"      shift, and go to state 19
    "stopif"      shift, and go to state 20
    "switch"      shift, and go to state 21
    "throw"       shift, and go to state 22
    "timeout"     shift, and go to state 23
    "try"         shift, and go to state 24
    "var"         shift, and go to state 25
    "waituntil"   shift, and go to state 26
    "watch"       shift, and go to state 27
    "whenever"    shift, and go to state 28
    "&"           shift, and go to state 29
    "every"       shift, and go to state 30
    "for"         shift, and go to state 31
    "loop"        shift, and go to state 32
    "while"       shift, and go to state 33
    "at"          shift, and go to state 34
    "identifier"  shift, and go to state 35
    "class"       shift, and go to state 36
    "package"     shift, and go to state 37
    "enum"        shift, and go to state 38
    "external"    shift, and go to state 39
    "import"      shift, and go to state 40
    "--"          shift, and go to state 41
    "++"          shift, and go to state 42
    "do"          shift, and go to state 43
    "assert"      shift, and go to state 44
    "detach"      shift, and go to state 45
    "disown"      shift, and go to state 46
    "new"         shift, and go to state 47
    "angle"       shift, and go to state 48
    "duration"    shift, and go to state 49
    "float"       shift, and go to state 50
    "string"      shift, and go to state 51
    "call"        shift, and go to state 52
    "this"        shift, and go to state 53
    "!"           shift, and go to state 54
    "compl"       shift, and go to state 55
    "-"           shift, and go to state 56
    "+"           shift, and go to state 57
    "%unscope:"   shift, and go to state 58
    "%exp:"       shift, and go to state 59
    "%lvalue:"    shift, and go to state 60
    "%id:"        shift, and go to state 61

    stmt         go to state 402
    block        go to state 66
    exp          go to state 67
    routine      go to state 68
    primary-exp  go to state 69
    detach       go to state 70
    lvalue       go to state 71
    id           go to state 72
    bitor-exp    go to state 73
    new          go to state 74
    float-exp    go to state 75
    duration     go to state 76
    dictionary   go to state 77
    tuple        go to state 78
    literal-exp  go to state 79
    string       go to state 80
    unary-exp    go to state 81
    rel-exp      go to state 82


state 341

   23 stmt: . primary-exp ":" stmt
   24     | . exp
   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   37 exp: . "class" lvalue protos block
   38    | . "package" lvalue protos block
   43 stmt: . "enum" id "{" id.0 "}"
   47     | . "external" "identifier" "identifier"
   48     | . "external" "var" "identifier" "." "identifier" from "identifier"
   49     | . "external" event_or_function "(" unsigned ")" "identifier" "." "identifier" from "identifier"
   50     | . "import" lvalue
   51     | . exp "!" args.opt tilda.opt
   52 routine: . "closure"
   53        | . "function"
   54 stmt: . routine k1_id formals block
   55     | . id id formals block
   62 exp: . exp "=" exp
   63    | . exp "=" exp modifiers
   64    | . lvalue "+=" exp
   65    | . lvalue "-=" exp
   66    | . lvalue "*=" exp
   67    | . lvalue "/=" exp
   68    | . lvalue "^=" exp
   69    | . lvalue "%=" exp
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
   73 stmt: . "at" identifiers "(" exp tilda.opt ")" stmt onleave.opt
   74     | . "at" identifiers "(" event_match ")" stmt onleave.opt
   75     | . "every" "(" exp ")" stmt
   75     | "every" "(" exp ")" . stmt
   76     | . "if" "(" stmts ")" stmt else.opt
   77     | . "freezeif" "(" exp ")" stmt
   78     | . "stopif" "(" exp ")" stmt
   79     | . "switch" "(" exp ")" "{" cases default.opt "}"
   80     | . "timeout" "(" exp ")" stmt catch.opt else.opt finally.opt
   81     | . "return" exp.opt
   82     | . "break"
   83     | . "continue"
   84     | . "waituntil" "(" exp tilda.opt ")"
   85     | . "waituntil" "(" event_match ")"
   86     | . "whenever" "(" exp tilda.opt ")" stmt else.opt
   87     | . "whenever" "(" event_match ")" stmt else.opt
  108     | . "try" block catches.1 else.opt finally.opt
  109     | . "try" block "finally" block
  110     | . "throw" exp.opt
  111     | . "loop" stmt
  112     | . "for" "(" exp ")" stmt
  113     | . "for" "(" stmt.opt ";" exp ";" stmt.opt ")" stmt
  114     | . "for" "(" "var" "identifier" in_or_colon exp ")" stmt
  115     | . "while" "(" exp ")" stmt
  118 primary-exp: . block
  119            | . "do" "(" exp ")" block
  120 detach: . "detach"
  121       | . "disown"
  122 primary-exp: . "assert" "(" exp ")"
  123            | . "assert" "{" claims "}"
  124            | . detach "(" exp ")"
  125            | . detach block
  126            | . "isdef" "(" k1_id ")"
  127            | . "watch" "(" exp ")"
  128 lvalue: . id
  129       | . primary-exp "." id
  130       | . primary-exp "." "*"
  131 primary-exp: . "&" id
  132            | . primary-exp "." "&" id
  133 id: . "identifier"
  134 bitor-exp: . "var" bitor-exp
  135          | . "const" "var" bitor-exp
  136 primary-exp: . lvalue
  137            | . lvalue args
  138 new: . "new" "identifier" args.opt
  139 bitor-exp: . new
  140 id: . "new"
  141 primary-exp: . routine formals block
  142 float-exp: . "float"
  143 duration: . "duration"
  144         | . duration "duration"
  150 dictionary: . "[" assocs "]"
  154 tuple: . "(" tuple.exps ")"
  155 literal-exp: . float-exp
  156            | . "angle"
  157            | . duration
  158            | . string
  159            | . "[" exps "]"
  160            | . dictionary
  161            | . tuple
  162 string: . "string"
  163       | . string "string"
  164 literal-exp: . "__HERE__"
  170 lvalue: . primary-exp "[" exps "]"
  171 literal-exp: . "this"
  172            | . "call"
  173 primary-exp: . literal-exp
  174            | . "(" exp ")"
  175            | . "(" error ")"
  176            | . primary-exp "**" primary-exp
  177 unary-exp: . primary-exp
  178          | . "--" lvalue
  179          | . "++" lvalue
  180          | . "+" unary-exp
  181          | . "-" unary-exp
  182          | . "!" unary-exp
  183          | . "compl" unary-exp
  184 bitor-exp: . unary-exp
  185          | . bitor-exp "+" bitor-exp
  186          | . bitor-exp "-" bitor-exp
  187          | . bitor-exp "*" bitor-exp
  188          | . bitor-exp "/" bitor-exp
  189          | . bitor-exp "%" bitor-exp
  190          | . bitor-exp "^" bitor-exp
  191          | . bitor-exp "<<" bitor-exp
  192          | . bitor-exp "bitand" bitor-exp
  193          | . bitor-exp "bitor" bitor-exp
  194          | . bitor-exp ">>" bitor-exp
  205 rel-exp: . bitor-exp rel-ops
  208 exp: . rel-exp
  209    | . exp "&&" exp
  210    | . exp "||" exp
  211    | . exp "in" exp
  212    | . exp "!" "in" exp
  216    | . "%unscope:" unsigned
  217 primary-exp: . "%exp:" unsigned
  218 lvalue: . "%lvalue:" unsigned
  219       | . "%id:" unsigned
  220       | . primary-exp "." "%id:" unsigned
  221 primary-exp: . lvalue "(" "%exps:" unsigned ")"

    "__HERE__"    shift, and go to state 7
    "break"       shift, and go to state 8
    "closure"     shift, and go to state 9
    "const"       shift, and go to state 10
    "continue"    shift, and go to state 11
    "freezeif"    shift, and go to state 12
    "function"    shift, and go to state 13
    "if"          shift, and go to state 14
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "return"      shift, and go to state 19
    "stopif"      shift, and go to state 20
    "switch"      shift, and go to state 21
    "throw"       shift, and go to state 22
    "timeout"     shift, and go to state 23
    "try"         shift, and go to state 24
    "var"         shift, and go to state 25
    "waituntil"   shift, and go to state 26
    "watch"       shift, and go to state 27
    "whenever"    shift, and go to state 28
    "&"           shift, and go to state 29
    "every"       shift, and go to state 30
    "for"         shift, and go to state 31
    "loop"        shift, and go to state 32
    "while"       shift, and go to state 33
    "at"          shift, and go to state 34
    "identifier"  shift, and go to state 35
    "class"       shift, and go to state 36
    "package"     shift, and go to state 37
    "enum"        shift, and go to state 38
    "external"    shift, and go to state 39
    "import"      shift, and go to state 40
    "--"          shift, and go to state 41
    "++"          shift, and go to state 42
    "do"          shift, and go to state 43
    "assert"      shift, and go to state 44
    "detach"      shift, and go to state 45
    "disown"      shift, and go to state 46
    "new"         shift, and go to state 47
    "angle"       shift, and go to state 48
    "duration"    shift, and go to state 49
    "float"       shift, and go to state 50
    "string"      shift, and go to state 51
    "call"        shift, and go to state 52
    "this"        shift, and go to state 53
    "!"           shift, and go to state 54
    "compl"       shift, and go to state 55
    "-"           shift, and go to state 56
    "+"           shift, and go to state 57
    "%unscope:"   shift, and go to state 58
    "%exp:"       shift, and go to state 59
    "%lvalue:"    shift, and go to state 60
    "%id:"        shift, and go to state 61

    stmt         go to state 403
    block        go to state 66
    exp          go to state 67
    routine      go to state 68
    primary-exp  go to state 69
    detach       go to state 70
    lvalue       go to state 71
    id           go to state 72
    bitor-exp    go to state 73
    new          go to state 74
    float-exp    go to state 75
    duration     go to state 76
    dictionary   go to state 77
    tuple        go to state 78
    literal-exp  go to state 79
    string       go to state 80
    unary-exp    go to state 81
    rel-exp      go to state 82


state 342

  114 stmt: "for" "(" "var" "identifier" . in_or_colon exp ")" stmt
  116 in_or_colon: . "in"
  117            | . ":"
  133 id: "identifier" .  ["=", "[", "(", ".", ")", ";", "--", "++", "->", "!", "bitand", "bitor", "^", ">>", "<<", "-", "%", "+", "/", "*", "**", "=~=", "==", "===", ">=", ">", "<=", "<", "!=", "!==", "~=", "&&", "||"]

    ":"   shift, and go to state 404
    "in"  shift, and go to state 405

    $default  reduce using rule 133 (id)

    in_or_colon  go to state 406

    Conflict between rule 133 and token "in" resolved as shift ("identifier" < "in").


state 343

   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   37 exp: . "class" lvalue protos block
   38    | . "package" lvalue protos block
   52 routine: . "closure"
   53        | . "function"
   62 exp: . exp "=" exp
   63    | . exp "=" exp modifiers
   64    | . lvalue "+=" exp
   65    | . lvalue "-=" exp
   66    | . lvalue "*=" exp
   67    | . lvalue "/=" exp
   68    | . lvalue "^=" exp
   69    | . lvalue "%=" exp
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
  113 stmt: "for" "(" stmt.opt ";" . exp ";" stmt.opt ")" stmt
  118 primary-exp: . block
  119            | . "do" "(" exp ")" block
  120 detach: . "detach"
  121       | . "disown"
  122 primary-exp: . "assert" "(" exp ")"
  123            | . "assert" "{" claims "}"
  124            | . detach "(" exp ")"
  125            | . detach block
  126            | . "isdef" "(" k1_id ")"
  127            | . "watch" "(" exp ")"
  128 lvalue: . id
  129       | . primary-exp "." id
  130       | . primary-exp "." "*"
  131 primary-exp: . "&" id
  132            | . primary-exp "." "&" id
  133 id: . "identifier"
  134 bitor-exp: . "var" bitor-exp
  135          | . "const" "var" bitor-exp
  136 primary-exp: . lvalue
  137            | . lvalue args
  138 new: . "new" "identifier" args.opt
  139 bitor-exp: . new
  140 id: . "new"
  141 primary-exp: . routine formals block
  142 float-exp: . "float"
  143 duration: . "duration"
  144         | . duration "duration"
  150 dictionary: . "[" assocs "]"
  154 tuple: . "(" tuple.exps ")"
  155 literal-exp: . float-exp
  156            | . "angle"
  157            | . duration
  158            | . string
  159            | . "[" exps "]"
  160            | . dictionary
  161            | . tuple
  162 string: . "string"
  163       | . string "string"
  164 literal-exp: . "__HERE__"
  170 lvalue: . primary-exp "[" exps "]"
  171 literal-exp: . "this"
  172            | . "call"
  173 primary-exp: . literal-exp
  174            | . "(" exp ")"
  175            | . "(" error ")"
  176            | . primary-exp "**" primary-exp
  177 unary-exp: . primary-exp
  178          | . "--" lvalue
  179          | . "++" lvalue
  180          | . "+" unary-exp
  181          | . "-" unary-exp
  182          | . "!" unary-exp
  183          | . "compl" unary-exp
  184 bitor-exp: . unary-exp
  185          | . bitor-exp "+" bitor-exp
  186          | . bitor-exp "-" bitor-exp
  187          | . bitor-exp "*" bitor-exp
  188          | . bitor-exp "/" bitor-exp
  189          | . bitor-exp "%" bitor-exp
  190          | . bitor-exp "^" bitor-exp
  191          | . bitor-exp "<<" bitor-exp
  192          | . bitor-exp "bitand" bitor-exp
  193          | . bitor-exp "bitor" bitor-exp
  194          | . bitor-exp ">>" bitor-exp
  205 rel-exp: . bitor-exp rel-ops
  208 exp: . rel-exp
  209    | . exp "&&" exp
  210    | . exp "||" exp
  211    | . exp "in" exp
  212    | . exp "!" "in" exp
  216    | . "%unscope:" unsigned
  217 primary-exp: . "%exp:" unsigned
  218 lvalue: . "%lvalue:" unsigned
  219       | . "%id:" unsigned
  220       | . primary-exp "." "%id:" unsigned
  221 primary-exp: . lvalue "(" "%exps:" unsigned ")"

    "__HERE__"    shift, and go to state 7
    "closure"     shift, and go to state 9
    "const"       shift, and go to state 10
    "function"    shift, and go to state 13
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "var"         shift, and go to state 25
    "watch"       shift, and go to state 27
    "&"           shift, and go to state 29
    "identifier"  shift, and go to state 35
    "class"       shift, and go to state 36
    "package"     shift, and go to state 37
    "--"          shift, and go to state 41
    "++"          shift, and go to state 42
    "do"          shift, and go to state 43
    "assert"      shift, and go to state 44
    "detach"      shift, and go to state 45
    "disown"      shift, and go to state 46
    "new"         shift, and go to state 47
    "angle"       shift, and go to state 48
    "duration"    shift, and go to state 49
    "float"       shift, and go to state 50
    "string"      shift, and go to state 51
    "call"        shift, and go to state 52
    "this"        shift, and go to state 53
    "!"           shift, and go to state 54
    "compl"       shift, and go to state 55
    "-"           shift, and go to state 56
    "+"           shift, and go to state 57
    "%unscope:"   shift, and go to state 58
    "%exp:"       shift, and go to state 59
    "%lvalue:"    shift, and go to state 60
    "%id:"        shift, and go to state 61

    block        go to state 66
    exp          go to state 407
    routine      go to state 99
    primary-exp  go to state 100
    detach       go to state 70
    lvalue       go to state 71
    id           go to state 101
    bitor-exp    go to state 73
    new          go to state 74
    float-exp    go to state 75
    duration     go to state 76
    dictionary   go to state 77
    tuple        go to state 78
    literal-exp  go to state 79
    string       go to state 80
    unary-exp    go to state 81
    rel-exp      go to state 82


state 344

   23 stmt: . primary-exp ":" stmt
   24     | . exp
   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   37 exp: . "class" lvalue protos block
   38    | . "package" lvalue protos block
   43 stmt: . "enum" id "{" id.0 "}"
   47     | . "external" "identifier" "identifier"
   48     | . "external" "var" "identifier" "." "identifier" from "identifier"
   49     | . "external" event_or_function "(" unsigned ")" "identifier" "." "identifier" from "identifier"
   50     | . "import" lvalue
   51     | . exp "!" args.opt tilda.opt
   52 routine: . "closure"
   53        | . "function"
   54 stmt: . routine k1_id formals block
   55     | . id id formals block
   62 exp: . exp "=" exp
   63    | . exp "=" exp modifiers
   64    | . lvalue "+=" exp
   65    | . lvalue "-=" exp
   66    | . lvalue "*=" exp
   67    | . lvalue "/=" exp
   68    | . lvalue "^=" exp
   69    | . lvalue "%=" exp
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
   73 stmt: . "at" identifiers "(" exp tilda.opt ")" stmt onleave.opt
   74     | . "at" identifiers "(" event_match ")" stmt onleave.opt
   75     | . "every" "(" exp ")" stmt
   76     | . "if" "(" stmts ")" stmt else.opt
   77     | . "freezeif" "(" exp ")" stmt
   78     | . "stopif" "(" exp ")" stmt
   79     | . "switch" "(" exp ")" "{" cases default.opt "}"
   80     | . "timeout" "(" exp ")" stmt catch.opt else.opt finally.opt
   81     | . "return" exp.opt
   82     | . "break"
   83     | . "continue"
   84     | . "waituntil" "(" exp tilda.opt ")"
   85     | . "waituntil" "(" event_match ")"
   86     | . "whenever" "(" exp tilda.opt ")" stmt else.opt
   87     | . "whenever" "(" event_match ")" stmt else.opt
  108     | . "try" block catches.1 else.opt finally.opt
  109     | . "try" block "finally" block
  110     | . "throw" exp.opt
  111     | . "loop" stmt
  112     | . "for" "(" exp ")" stmt
  112     | "for" "(" exp ")" . stmt
  113     | . "for" "(" stmt.opt ";" exp ";" stmt.opt ")" stmt
  114     | . "for" "(" "var" "identifier" in_or_colon exp ")" stmt
  115     | . "while" "(" exp ")" stmt
  118 primary-exp: . block
  119            | . "do" "(" exp ")" block
  120 detach: . "detach"
  121       | . "disown"
  122 primary-exp: . "assert" "(" exp ")"
  123            | . "assert" "{" claims "}"
  124            | . detach "(" exp ")"
  125            | . detach block
  126            | . "isdef" "(" k1_id ")"
  127            | . "watch" "(" exp ")"
  128 lvalue: . id
  129       | . primary-exp "." id
  130       | . primary-exp "." "*"
  131 primary-exp: . "&" id
  132            | . primary-exp "." "&" id
  133 id: . "identifier"
  134 bitor-exp: . "var" bitor-exp
  135          | . "const" "var" bitor-exp
  136 primary-exp: . lvalue
  137            | . lvalue args
  138 new: . "new" "identifier" args.opt
  139 bitor-exp: . new
  140 id: . "new"
  141 primary-exp: . routine formals block
  142 float-exp: . "float"
  143 duration: . "duration"
  144         | . duration "duration"
  150 dictionary: . "[" assocs "]"
  154 tuple: . "(" tuple.exps ")"
  155 literal-exp: . float-exp
  156            | . "angle"
  157            | . duration
  158            | . string
  159            | . "[" exps "]"
  160            | . dictionary
  161            | . tuple
  162 string: . "string"
  163       | . string "string"
  164 literal-exp: . "__HERE__"
  170 lvalue: . primary-exp "[" exps "]"
  171 literal-exp: . "this"
  172            | . "call"
  173 primary-exp: . literal-exp
  174            | . "(" exp ")"
  175            | . "(" error ")"
  176            | . primary-exp "**" primary-exp
  177 unary-exp: . primary-exp
  178          | . "--" lvalue
  179          | . "++" lvalue
  180          | . "+" unary-exp
  181          | . "-" unary-exp
  182          | . "!" unary-exp
  183          | . "compl" unary-exp
  184 bitor-exp: . unary-exp
  185          | . bitor-exp "+" bitor-exp
  186          | . bitor-exp "-" bitor-exp
  187          | . bitor-exp "*" bitor-exp
  188          | . bitor-exp "/" bitor-exp
  189          | . bitor-exp "%" bitor-exp
  190          | . bitor-exp "^" bitor-exp
  191          | . bitor-exp "<<" bitor-exp
  192          | . bitor-exp "bitand" bitor-exp
  193          | . bitor-exp "bitor" bitor-exp
  194          | . bitor-exp ">>" bitor-exp
  205 rel-exp: . bitor-exp rel-ops
  208 exp: . rel-exp
  209    | . exp "&&" exp
  210    | . exp "||" exp
  211    | . exp "in" exp
  212    | . exp "!" "in" exp
  216    | . "%unscope:" unsigned
  217 primary-exp: . "%exp:" unsigned
  218 lvalue: . "%lvalue:" unsigned
  219       | . "%id:" unsigned
  220       | . primary-exp "." "%id:" unsigned
  221 primary-exp: . lvalue "(" "%exps:" unsigned ")"

    "__HERE__"    shift, and go to state 7
    "break"       shift, and go to state 8
    "closure"     shift, and go to state 9
    "const"       shift, and go to state 10
    "continue"    shift, and go to state 11
    "freezeif"    shift, and go to state 12
    "function"    shift, and go to state 13
    "if"          shift, and go to state 14
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "return"      shift, and go to state 19
    "stopif"      shift, and go to state 20
    "switch"      shift, and go to state 21
    "throw"       shift, and go to state 22
    "timeout"     shift, and go to state 23
    "try"         shift, and go to state 24
    "var"         shift, and go to state 25
    "waituntil"   shift, and go to state 26
    "watch"       shift, and go to state 27
    "whenever"    shift, and go to state 28
    "&"           shift, and go to state 29
    "every"       shift, and go to state 30
    "for"         shift, and go to state 31
    "loop"        shift, and go to state 32
    "while"       shift, and go to state 33
    "at"          shift, and go to state 34
    "identifier"  shift, and go to state 35
    "class"       shift, and go to state 36
    "package"     shift, and go to state 37
    "enum"        shift, and go to state 38
    "external"    shift, and go to state 39
    "import"      shift, and go to state 40
    "--"          shift, and go to state 41
    "++"          shift, and go to state 42
    "do"          shift, and go to state 43
    "assert"      shift, and go to state 44
    "detach"      shift, and go to state 45
    "disown"      shift, and go to state 46
    "new"         shift, and go to state 47
    "angle"       shift, and go to state 48
    "duration"    shift, and go to state 49
    "float"       shift, and go to state 50
    "string"      shift, and go to state 51
    "call"        shift, and go to state 52
    "this"        shift, and go to state 53
    "!"           shift, and go to state 54
    "compl"       shift, and go to state 55
    "-"           shift, and go to state 56
    "+"           shift, and go to state 57
    "%unscope:"   shift, and go to state 58
    "%exp:"       shift, and go to state 59
    "%lvalue:"    shift, and go to state 60
    "%id:"        shift, and go to state 61

    stmt         go to state 408
    block        go to state 66
    exp          go to state 67
    routine      go to state 68
    primary-exp  go to state 69
    detach       go to state 70
    lvalue       go to state 71
    id           go to state 72
    bitor-exp    go to state 73
    new          go to state 74
    float-exp    go to state 75
    duration     go to state 76
    dictionary   go to state 77
    tuple        go to state 78
    literal-exp  go to state 79
    string       go to state 80
    unary-exp    go to state 81
    rel-exp      go to state 82


state 345

   23 stmt: . primary-exp ":" stmt
   24     | . exp
   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   37 exp: . "class" lvalue protos block
   38    | . "package" lvalue protos block
   43 stmt: . "enum" id "{" id.0 "}"
   47     | . "external" "identifier" "identifier"
   48     | . "external" "var" "identifier" "." "identifier" from "identifier"
   49     | . "external" event_or_function "(" unsigned ")" "identifier" "." "identifier" from "identifier"
   50     | . "import" lvalue
   51     | . exp "!" args.opt tilda.opt
   52 routine: . "closure"
   53        | . "function"
   54 stmt: . routine k1_id formals block
   55     | . id id formals block
   62 exp: . exp "=" exp
   63    | . exp "=" exp modifiers
   64    | . lvalue "+=" exp
   65    | . lvalue "-=" exp
   66    | . lvalue "*=" exp
   67    | . lvalue "/=" exp
   68    | . lvalue "^=" exp
   69    | . lvalue "%=" exp
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
   73 stmt: . "at" identifiers "(" exp tilda.opt ")" stmt onleave.opt
   74     | . "at" identifiers "(" event_match ")" stmt onleave.opt
   75     | . "every" "(" exp ")" stmt
   76     | . "if" "(" stmts ")" stmt else.opt
   77     | . "freezeif" "(" exp ")" stmt
   78     | . "stopif" "(" exp ")" stmt
   79     | . "switch" "(" exp ")" "{" cases default.opt "}"
   80     | . "timeout" "(" exp ")" stmt catch.opt else.opt finally.opt
   81     | . "return" exp.opt
   82     | . "break"
   83     | . "continue"
   84     | . "waituntil" "(" exp tilda.opt ")"
   85     | . "waituntil" "(" event_match ")"
   86     | . "whenever" "(" exp tilda.opt ")" stmt else.opt
   87     | . "whenever" "(" event_match ")" stmt else.opt
  108     | . "try" block catches.1 else.opt finally.opt
  109     | . "try" block "finally" block
  110     | . "throw" exp.opt
  111     | . "loop" stmt
  112     | . "for" "(" exp ")" stmt
  113     | . "for" "(" stmt.opt ";" exp ";" stmt.opt ")" stmt
  114     | . "for" "(" "var" "identifier" in_or_colon exp ")" stmt
  115     | . "while" "(" exp ")" stmt
  115     | "while" "(" exp ")" . stmt
  118 primary-exp: . block
  119            | . "do" "(" exp ")" block
  120 detach: . "detach"
  121       | . "disown"
  122 primary-exp: . "assert" "(" exp ")"
  123            | . "assert" "{" claims "}"
  124            | . detach "(" exp ")"
  125            | . detach block
  126            | . "isdef" "(" k1_id ")"
  127            | . "watch" "(" exp ")"
  128 lvalue: . id
  129       | . primary-exp "." id
  130       | . primary-exp "." "*"
  131 primary-exp: . "&" id
  132            | . primary-exp "." "&" id
  133 id: . "identifier"
  134 bitor-exp: . "var" bitor-exp
  135          | . "const" "var" bitor-exp
  136 primary-exp: . lvalue
  137            | . lvalue args
  138 new: . "new" "identifier" args.opt
  139 bitor-exp: . new
  140 id: . "new"
  141 primary-exp: . routine formals block
  142 float-exp: . "float"
  143 duration: . "duration"
  144         | . duration "duration"
  150 dictionary: . "[" assocs "]"
  154 tuple: . "(" tuple.exps ")"
  155 literal-exp: . float-exp
  156            | . "angle"
  157            | . duration
  158            | . string
  159            | . "[" exps "]"
  160            | . dictionary
  161            | . tuple
  162 string: . "string"
  163       | . string "string"
  164 literal-exp: . "__HERE__"
  170 lvalue: . primary-exp "[" exps "]"
  171 literal-exp: . "this"
  172            | . "call"
  173 primary-exp: . literal-exp
  174            | . "(" exp ")"
  175            | . "(" error ")"
  176            | . primary-exp "**" primary-exp
  177 unary-exp: . primary-exp
  178          | . "--" lvalue
  179          | . "++" lvalue
  180          | . "+" unary-exp
  181          | . "-" unary-exp
  182          | . "!" unary-exp
  183          | . "compl" unary-exp
  184 bitor-exp: . unary-exp
  185          | . bitor-exp "+" bitor-exp
  186          | . bitor-exp "-" bitor-exp
  187          | . bitor-exp "*" bitor-exp
  188          | . bitor-exp "/" bitor-exp
  189          | . bitor-exp "%" bitor-exp
  190          | . bitor-exp "^" bitor-exp
  191          | . bitor-exp "<<" bitor-exp
  192          | . bitor-exp "bitand" bitor-exp
  193          | . bitor-exp "bitor" bitor-exp
  194          | . bitor-exp ">>" bitor-exp
  205 rel-exp: . bitor-exp rel-ops
  208 exp: . rel-exp
  209    | . exp "&&" exp
  210    | . exp "||" exp
  211    | . exp "in" exp
  212    | . exp "!" "in" exp
  216    | . "%unscope:" unsigned
  217 primary-exp: . "%exp:" unsigned
  218 lvalue: . "%lvalue:" unsigned
  219       | . "%id:" unsigned
  220       | . primary-exp "." "%id:" unsigned
  221 primary-exp: . lvalue "(" "%exps:" unsigned ")"

    "__HERE__"    shift, and go to state 7
    "break"       shift, and go to state 8
    "closure"     shift, and go to state 9
    "const"       shift, and go to state 10
    "continue"    shift, and go to state 11
    "freezeif"    shift, and go to state 12
    "function"    shift, and go to state 13
    "if"          shift, and go to state 14
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "return"      shift, and go to state 19
    "stopif"      shift, and go to state 20
    "switch"      shift, and go to state 21
    "throw"       shift, and go to state 22
    "timeout"     shift, and go to state 23
    "try"         shift, and go to state 24
    "var"         shift, and go to state 25
    "waituntil"   shift, and go to state 26
    "watch"       shift, and go to state 27
    "whenever"    shift, and go to state 28
    "&"           shift, and go to state 29
    "every"       shift, and go to state 30
    "for"         shift, and go to state 31
    "loop"        shift, and go to state 32
    "while"       shift, and go to state 33
    "at"          shift, and go to state 34
    "identifier"  shift, and go to state 35
    "class"       shift, and go to state 36
    "package"     shift, and go to state 37
    "enum"        shift, and go to state 38
    "external"    shift, and go to state 39
    "import"      shift, and go to state 40
    "--"          shift, and go to state 41
    "++"          shift, and go to state 42
    "do"          shift, and go to state 43
    "assert"      shift, and go to state 44
    "detach"      shift, and go to state 45
    "disown"      shift, and go to state 46
    "new"         shift, and go to state 47
    "angle"       shift, and go to state 48
    "duration"    shift, and go to state 49
    "float"       shift, and go to state 50
    "string"      shift, and go to state 51
    "call"        shift, and go to state 52
    "this"        shift, and go to state 53
    "!"           shift, and go to state 54
    "compl"       shift, and go to state 55
    "-"           shift, and go to state 56
    "+"           shift, and go to state 57
    "%unscope:"   shift, and go to state 58
    "%exp:"       shift, and go to state 59
    "%lvalue:"    shift, and go to state 60
    "%id:"        shift, and go to state 61

    stmt         go to state 409
    block        go to state 66
    exp          go to state 67
    routine      go to state 68
    primary-exp  go to state 69
    detach       go to state 70
    lvalue       go to state 71
    id           go to state 72
    bitor-exp    go to state 73
    new          go to state 74
    float-exp    go to state 75
    duration     go to state 76
    dictionary   go to state 77
    tuple        go to state 78
    literal-exp  go to state 79
    string       go to state 80
    unary-exp    go to state 81
    rel-exp      go to state 82


state 346

   62 exp: exp . "=" exp
   63    | exp . "=" exp modifiers
   73 stmt: "at" identifiers "(" exp . tilda.opt ")" stmt onleave.opt
  165 event_match: exp . "?" args.opt tilda.opt guard.opt
  168 tilda.opt: .  [")"]
  169          | . "~" exp
  209 exp: exp . "&&" exp
  210    | exp . "||" exp
  211    | exp . "in" exp
  212    | exp . "!" "in" exp

    "="   shift, and go to state 160
    "in"  shift, and go to state 161
    "~"   shift, and go to state 334
    "?"   shift, and go to state 335
    "!"   shift, and go to state 211
    "&&"  shift, and go to state 163
    "||"  shift, and go to state 164

    $default  reduce using rule 168 (tilda.opt)

    tilda.opt  go to state 410


state 347

   74 stmt: "at" identifiers "(" event_match . ")" stmt onleave.opt

    ")"  shift, and go to state 411


state 348

   29 visibility: "private" .

    $default  reduce using rule 29 (visibility)


state 349

   30 visibility: "protected" .

    $default  reduce using rule 30 (visibility)


state 350

   31 visibility: "public" .

    $default  reduce using rule 31 (visibility)


state 351

   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   32 proto: visibility . exp
   37 exp: . "class" lvalue protos block
   38    | . "package" lvalue protos block
   52 routine: . "closure"
   53        | . "function"
   62 exp: . exp "=" exp
   63    | . exp "=" exp modifiers
   64    | . lvalue "+=" exp
   65    | . lvalue "-=" exp
   66    | . lvalue "*=" exp
   67    | . lvalue "/=" exp
   68    | . lvalue "^=" exp
   69    | . lvalue "%=" exp
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
  118            | . block
  119            | . "do" "(" exp ")" block
  120 detach: . "detach"
  121       | . "disown"
  122 primary-exp: . "assert" "(" exp ")"
  123            | . "assert" "{" claims "}"
  124            | . detach "(" exp ")"
  125            | . detach block
  126            | . "isdef" "(" k1_id ")"
  127            | . "watch" "(" exp ")"
  128 lvalue: . id
  129       | . primary-exp "." id
  130       | . primary-exp "." "*"
  131 primary-exp: . "&" id
  132            | . primary-exp "." "&" id
  133 id: . "identifier"
  134 bitor-exp: . "var" bitor-exp
  135          | . "const" "var" bitor-exp
  136 primary-exp: . lvalue
  137            | . lvalue args
  138 new: . "new" "identifier" args.opt
  139 bitor-exp: . new
  140 id: . "new"
  141 primary-exp: . routine formals block
  142 float-exp: . "float"
  143 duration: . "duration"
  144         | . duration "duration"
  150 dictionary: . "[" assocs "]"
  154 tuple: . "(" tuple.exps ")"
  155 literal-exp: . float-exp
  156            | . "angle"
  157            | . duration
  158            | . string
  159            | . "[" exps "]"
  160            | . dictionary
  161            | . tuple
  162 string: . "string"
  163       | . string "string"
  164 literal-exp: . "__HERE__"
  170 lvalue: . primary-exp "[" exps "]"
  171 literal-exp: . "this"
  172            | . "call"
  173 primary-exp: . literal-exp
  174            | . "(" exp ")"
  175            | . "(" error ")"
  176            | . primary-exp "**" primary-exp
  177 unary-exp: . primary-exp
  178          | . "--" lvalue
  179          | . "++" lvalue
  180          | . "+" unary-exp
  181          | . "-" unary-exp
  182          | . "!" unary-exp
  183          | . "compl" unary-exp
  184 bitor-exp: . unary-exp
  185          | . bitor-exp "+" bitor-exp
  186          | . bitor-exp "-" bitor-exp
  187          | . bitor-exp "*" bitor-exp
  188          | . bitor-exp "/" bitor-exp
  189          | . bitor-exp "%" bitor-exp
  190          | . bitor-exp "^" bitor-exp
  191          | . bitor-exp "<<" bitor-exp
  192          | . bitor-exp "bitand" bitor-exp
  193          | . bitor-exp "bitor" bitor-exp
  194          | . bitor-exp ">>" bitor-exp
  205 rel-exp: . bitor-exp rel-ops
  208 exp: . rel-exp
  209    | . exp "&&" exp
  210    | . exp "||" exp
  211    | . exp "in" exp
  212    | . exp "!" "in" exp
  216    | . "%unscope:" unsigned
  217 primary-exp: . "%exp:" unsigned
  218 lvalue: . "%lvalue:" unsigned
  219       | . "%id:" unsigned
  220       | . primary-exp "." "%id:" unsigned
  221 primary-exp: . lvalue "(" "%exps:" unsigned ")"

    "__HERE__"    shift, and go to state 7
    "closure"     shift, and go to state 9
    "const"       shift, and go to state 10
    "function"    shift, and go to state 13
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "var"         shift, and go to state 25
    "watch"       shift, and go to state 27
    "&"           shift, and go to state 29
    "identifier"  shift, and go to state 35
    "class"       shift, and go to state 36
    "package"     shift, and go to state 37
    "--"          shift, and go to state 41
    "++"          shift, and go to state 42
    "do"          shift, and go to state 43
    "assert"      shift, and go to state 44
    "detach"      shift, and go to state 45
    "disown"      shift, and go to state 46
    "new"         shift, and go to state 47
    "angle"       shift, and go to state 48
    "duration"    shift, and go to state 49
    "float"       shift, and go to state 50
    "string"      shift, and go to state 51
    "call"        shift, and go to state 52
    "this"        shift, and go to state 53
    "!"           shift, and go to state 54
    "compl"       shift, and go to state 55
    "-"           shift, and go to state 56
    "+"           shift, and go to state 57
    "%unscope:"   shift, and go to state 58
    "%exp:"       shift, and go to state 59
    "%lvalue:"    shift, and go to state 60
    "%id:"        shift, and go to state 61

    block        go to state 66
    exp          go to state 412
    routine      go to state 99
    primary-exp  go to state 100
    detach       go to state 70
    lvalue       go to state 71
    id           go to state 101
    bitor-exp    go to state 73
    new          go to state 74
    float-exp    go to state 75
    duration     go to state 76
    dictionary   go to state 77
    tuple        go to state 78
    literal-exp  go to state 79
    string       go to state 80
    unary-exp    go to state 81
    rel-exp      go to state 82


state 352

   33 protos.1: proto .

    $default  reduce using rule 33 (protos.1)


state 353

   34 protos.1: protos.1 . "," proto
   36 protos: ":" protos.1 .  ["{"]

    ","  shift, and go to state 413

    $default  reduce using rule 36 (protos)


state 354

   37 exp: "class" lvalue protos block .

    $default  reduce using rule 37 (exp)


state 355

   38 exp: "package" lvalue protos block .

    $default  reduce using rule 38 (exp)


state 356

   43 stmt: "enum" id "{" id.0 . "}"

    "}"  shift, and go to state 414


state 357

   40 id.0: id.1 . comma.opt
   42 id.1: id.1 . "," id
  248 comma.opt: .  ["}"]
  249          | . ","

    ","  shift, and go to state 415

    $default  reduce using rule 248 (comma.opt)

    comma.opt  go to state 416


state 358

   41 id.1: id .

    $default  reduce using rule 41 (id.1)


state 359

   48 stmt: "external" "var" "identifier" "." . "identifier" from "identifier"

    "identifier"  shift, and go to state 417


state 360

   49 stmt: "external" event_or_function "(" unsigned . ")" "identifier" "." "identifier" from "identifier"

    ")"  shift, and go to state 418


state 361

   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
  119 primary-exp: "do" "(" exp ")" . block

    "{"  shift, and go to state 16

    block  go to state 419


state 362

  123 primary-exp: "assert" "{" claims "}" .

    $default  reduce using rule 123 (primary-exp)


state 363

   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   37 exp: . "class" lvalue protos block
   38    | . "package" lvalue protos block
   52 routine: . "closure"
   53        | . "function"
   62 exp: . exp "=" exp
   63    | . exp "=" exp modifiers
   64    | . lvalue "+=" exp
   65    | . lvalue "-=" exp
   66    | . lvalue "*=" exp
   67    | . lvalue "/=" exp
   68    | . lvalue "^=" exp
   69    | . lvalue "%=" exp
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
  118            | . block
  119            | . "do" "(" exp ")" block
  120 detach: . "detach"
  121       | . "disown"
  122 primary-exp: . "assert" "(" exp ")"
  123            | . "assert" "{" claims "}"
  124            | . detach "(" exp ")"
  125            | . detach block
  126            | . "isdef" "(" k1_id ")"
  127            | . "watch" "(" exp ")"
  128 lvalue: . id
  129       | . primary-exp "." id
  130       | . primary-exp "." "*"
  131 primary-exp: . "&" id
  132            | . primary-exp "." "&" id
  133 id: . "identifier"
  134 bitor-exp: . "var" bitor-exp
  135          | . "const" "var" bitor-exp
  136 primary-exp: . lvalue
  137            | . lvalue args
  138 new: . "new" "identifier" args.opt
  139 bitor-exp: . new
  140 id: . "new"
  141 primary-exp: . routine formals block
  142 float-exp: . "float"
  143 duration: . "duration"
  144         | . duration "duration"
  150 dictionary: . "[" assocs "]"
  154 tuple: . "(" tuple.exps ")"
  155 literal-exp: . float-exp
  156            | . "angle"
  157            | . duration
  158            | . string
  159            | . "[" exps "]"
  160            | . dictionary
  161            | . tuple
  162 string: . "string"
  163       | . string "string"
  164 literal-exp: . "__HERE__"
  170 lvalue: . primary-exp "[" exps "]"
  171 literal-exp: . "this"
  172            | . "call"
  173 primary-exp: . literal-exp
  174            | . "(" exp ")"
  175            | . "(" error ")"
  176            | . primary-exp "**" primary-exp
  177 unary-exp: . primary-exp
  178          | . "--" lvalue
  179          | . "++" lvalue
  180          | . "+" unary-exp
  181          | . "-" unary-exp
  182          | . "!" unary-exp
  183          | . "compl" unary-exp
  184 bitor-exp: . unary-exp
  185          | . bitor-exp "+" bitor-exp
  186          | . bitor-exp "-" bitor-exp
  187          | . bitor-exp "*" bitor-exp
  188          | . bitor-exp "/" bitor-exp
  189          | . bitor-exp "%" bitor-exp
  190          | . bitor-exp "^" bitor-exp
  191          | . bitor-exp "<<" bitor-exp
  192          | . bitor-exp "bitand" bitor-exp
  193          | . bitor-exp "bitor" bitor-exp
  194          | . bitor-exp ">>" bitor-exp
  205 rel-exp: . bitor-exp rel-ops
  208 exp: . rel-exp
  209    | . exp "&&" exp
  210    | . exp "||" exp
  211    | . exp "in" exp
  212    | . exp "!" "in" exp
  216    | . "%unscope:" unsigned
  217 primary-exp: . "%exp:" unsigned
  218 lvalue: . "%lvalue:" unsigned
  219       | . "%id:" unsigned
  220       | . primary-exp "." "%id:" unsigned
  221 primary-exp: . lvalue "(" "%exps:" unsigned ")"
  225 claims.1: claims.1 ";" . exp
  251 semi.opt: ";" .  ["}"]

    "__HERE__"    shift, and go to state 7
    "closure"     shift, and go to state 9
    "const"       shift, and go to state 10
    "function"    shift, and go to state 13
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "var"         shift, and go to state 25
    "watch"       shift, and go to state 27
    "&"           shift, and go to state 29
    "identifier"  shift, and go to state 35
    "class"       shift, and go to state 36
    "package"     shift, and go to state 37
    "--"          shift, and go to state 41
    "++"          shift, and go to state 42
    "do"          shift, and go to state 43
    "assert"      shift, and go to state 44
    "detach"      shift, and go to state 45
    "disown"      shift, and go to state 46
    "new"         shift, and go to state 47
    "angle"       shift, and go to state 48
    "duration"    shift, and go to state 49
    "float"       shift, and go to state 50
    "string"      shift, and go to state 51
    "call"        shift, and go to state 52
    "this"        shift, and go to state 53
    "!"           shift, and go to state 54
    "compl"       shift, and go to state 55
    "-"           shift, and go to state 56
    "+"           shift, and go to state 57
    "%unscope:"   shift, and go to state 58
    "%exp:"       shift, and go to state 59
    "%lvalue:"    shift, and go to state 60
    "%id:"        shift, and go to state 61

    $default  reduce using rule 251 (semi.opt)

    block        go to state 66
    exp          go to state 420
    routine      go to state 99
    primary-exp  go to state 100
    detach       go to state 70
    lvalue       go to state 71
    id           go to state 101
    bitor-exp    go to state 73
    new          go to state 74
    float-exp    go to state 75
    duration     go to state 76
    dictionary   go to state 77
    tuple        go to state 78
    literal-exp  go to state 79
    string       go to state 80
    unary-exp    go to state 81
    rel-exp      go to state 82


state 364

  223 claims: claims.1 semi.opt .

    $default  reduce using rule 223 (claims)


state 365

  122 primary-exp: "assert" "(" exp ")" .

    $default  reduce using rule 122 (primary-exp)


state 366

   59 modifier: "identifier" . ":" exp

    ":"  shift, and go to state 421


state 367

   60 modifiers: modifier .

    $default  reduce using rule 60 (modifiers)


state 368

   59 modifier: . "identifier" ":" exp
   61 modifiers: modifiers . modifier
   63 exp: exp "=" exp modifiers .  ["end of command", "=", "case", "catch", ":", "default", "else", "finally", "if", "in", "{", "onleave", "}", "]", ")", "~", ",", ";", "&", "|", "=>", "?", "!", "&&", "||"]

    "identifier"  shift, and go to state 366

    $default  reduce using rule 63 (exp)

    modifier  go to state 422

    Conflict between rule 63 and token "identifier" resolved as shift (ASSIGN < "identifier").


state 369

   62 exp: exp . "=" exp
   63    | exp . "=" exp modifiers
  209    | exp . "&&" exp
  210    | exp . "||" exp
  211    | exp . "in" exp
  212    | exp . "!" "in" exp
  212    | exp "!" "in" exp .  ["end of command", "=", "case", "catch", ":", "default", "else", "finally", "if", "{", "onleave", "}", "]", ")", "~", ",", ";", "&", "|", "identifier", "=>", "?", "&&", "||"]

    "!"  shift, and go to state 211

    "in"  error (nonassociative)

    $default  reduce using rule 212 (exp)

    Conflict between rule 212 and token "=" resolved as reduce ("=" < "in").
    Conflict between rule 212 and token "in" resolved as an error (%nonassoc "in").
    Conflict between rule 212 and token "!" resolved as shift ("in" < "!").
    Conflict between rule 212 and token "&&" resolved as reduce ("&&" < "in").
    Conflict between rule 212 and token "||" resolved as reduce ("||" < "in").


state 370

   51 stmt: exp "!" args.opt tilda.opt .

    $default  reduce using rule 51 (stmt)


state 371

  239 formal: . var.opt "identifier" typespec.opt
  240       | . var.opt "identifier" "=" exp typespec.opt
  241       | . var.opt "identifier" "[" "]"
  243 formals.1: formals.1 "," . formal
  249 comma.opt: "," .  [")"]
  252 var.opt: .  ["identifier"]
  253        | . "var"

    "var"  shift, and go to state 265

    "identifier"  reduce using rule 252 (var.opt)
    $default      reduce using rule 249 (comma.opt)

    formal   go to state 423
    var.opt  go to state 269


state 372

  245 formals.0: formals.1 comma.opt .

    $default  reduce using rule 245 (formals.0)


state 373

  247 formals: "(" formals.0 ")" .

    $default  reduce using rule 247 (formals)


state 374

  236 typespec: . ":" exp
  237 typespec.opt: .  [")", ","]
  238             | . typespec
  239 formal: var.opt "identifier" . typespec.opt
  240       | var.opt "identifier" . "=" exp typespec.opt
  241       | var.opt "identifier" . "[" "]"

    "="  shift, and go to state 424
    ":"  shift, and go to state 425
    "["  shift, and go to state 426

    $default  reduce using rule 237 (typespec.opt)

    typespec      go to state 427
    typespec.opt  go to state 428


state 375

   57 k1_id: "this" "." "identifier" .

    $default  reduce using rule 57 (k1_id)


state 376

   58 k1_id: k1_id "." "identifier" .

    $default  reduce using rule 58 (k1_id)


state 377

   54 stmt: routine k1_id formals block .

    $default  reduce using rule 54 (stmt)


state 378

  170 lvalue: primary-exp "[" exps "]" .

    $default  reduce using rule 170 (lvalue)


state 379

  132 primary-exp: primary-exp "." "&" id .

    $default  reduce using rule 132 (primary-exp)


state 380

  220 lvalue: primary-exp "." "%id:" unsigned .

    $default  reduce using rule 220 (lvalue)


state 381

  124 primary-exp: detach "(" exp ")" .

    $default  reduce using rule 124 (primary-exp)


state 382

  221 primary-exp: lvalue "(" "%exps:" unsigned . ")"

    ")"  shift, and go to state 429


state 383

  231 args: "(" exps ")" .

    $default  reduce using rule 231 (args)


state 384

   55 stmt: id id formals block .

    $default  reduce using rule 55 (stmt)


state 385

  185 bitor-exp: bitor-exp . "+" bitor-exp
  186          | bitor-exp . "-" bitor-exp
  187          | bitor-exp . "*" bitor-exp
  188          | bitor-exp . "/" bitor-exp
  189          | bitor-exp . "%" bitor-exp
  190          | bitor-exp . "^" bitor-exp
  191          | bitor-exp . "<<" bitor-exp
  192          | bitor-exp . "bitand" bitor-exp
  193          | bitor-exp . "bitor" bitor-exp
  194          | bitor-exp . ">>" bitor-exp
  207 rel-ops: rel-ops rel-op bitor-exp .  ["end of command", "=", "case", "catch", ":", "default", "else", "finally", "if", "in", "{", "onleave", "}", "]", ")", "~", ",", ";", "&", "|", "identifier", "=>", "?", "!", "=~=", "==", "===", ">=", ">", "<=", "<", "!=", "!==", "~=", "&&", "||"]

    "bitand"  shift, and go to state 188
    "bitor"   shift, and go to state 189
    "^"       shift, and go to state 190
    ">>"      shift, and go to state 191
    "<<"      shift, and go to state 192
    "-"       shift, and go to state 193
    "%"       shift, and go to state 194
    "+"       shift, and go to state 195
    "/"       shift, and go to state 196
    "*"       shift, and go to state 197

    $default  reduce using rule 207 (rel-ops)


state 386

   77 stmt: "freezeif" "(" exp ")" stmt .

    $default  reduce using rule 77 (stmt)


state 387

   76 stmt: "if" "(" stmts ")" stmt . else.opt
   90 else.opt: .  ["end of command", "case", "catch", "default", "finally", "onleave", "}", ")", ",", ";", "&", "|"]
   91         | . "else" stmt

    "else"  shift, and go to state 331

    $default  reduce using rule 90 (else.opt)

    else.opt  go to state 430

    Conflict between rule 90 and token "else" resolved as shift (EMPTY < "else").


state 388

   27 block: "{" id "~" id "}" .

    $default  reduce using rule 27 (block)


state 389

   78 stmt: "stopif" "(" exp ")" stmt .

    $default  reduce using rule 78 (stmt)


state 390

   79 stmt: "switch" "(" exp ")" "{" . cases default.opt "}"
   94 cases: .
   95      | . cases case

    $default  reduce using rule 94 (cases)

    cases  go to state 431


state 391

   80 stmt: "timeout" "(" exp ")" stmt . catch.opt else.opt finally.opt
  104 catch.opt: .  ["end of command", "case", "default", "else", "finally", "onleave", "}", ")", ",", ";", "&", "|"]
  105          | . "catch" block

    "catch"  shift, and go to state 432

    $default  reduce using rule 104 (catch.opt)

    catch.opt  go to state 433

    Conflict between rule 104 and token "catch" resolved as shift (EMPTY < "catch").


state 392

   62 exp: exp . "=" exp
   63    | exp . "=" exp modifiers
   99 match: exp .  [":", ")"]
  100      | exp . "if" exp
  209 exp: exp . "&&" exp
  210    | exp . "||" exp
  211    | exp . "in" exp
  212    | exp . "!" "in" exp

    "="   shift, and go to state 160
    "if"  shift, and go to state 434
    "in"  shift, and go to state 161
    "!"   shift, and go to state 211
    "&&"  shift, and go to state 163
    "||"  shift, and go to state 164

    $default  reduce using rule 99 (match)


state 393

  102 match.opt: "(" match . ")"

    ")"  shift, and go to state 435


state 394

  103 catch: "catch" match.opt block .

    $default  reduce using rule 103 (catch)


state 395

   91 else.opt: "else" stmt .

    $default  reduce using rule 91 (else.opt)


state 396

   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
  107 finally.opt: "finally" . block

    "{"  shift, and go to state 16

    block  go to state 436


state 397

  108 stmt: "try" block catches.1 else.opt finally.opt .

    $default  reduce using rule 108 (stmt)


state 398

   62 exp: exp . "=" exp
   63    | exp . "=" exp modifiers
  169 tilda.opt: "~" exp .  ["end of command", "case", "catch", "default", "else", "finally", "if", "onleave", "}", ")", ",", ";", "&", "|"]
  209 exp: exp . "&&" exp
  210    | exp . "||" exp
  211    | exp . "in" exp
  212    | exp . "!" "in" exp

    "="   shift, and go to state 160
    "in"  shift, and go to state 161
    "!"   shift, and go to state 211
    "&&"  shift, and go to state 163
    "||"  shift, and go to state 164

    $default  reduce using rule 169 (tilda.opt)


state 399

  165 event_match: exp "?" args.opt . tilda.opt guard.opt
  168 tilda.opt: .  ["if", ")"]
  169          | . "~" exp

    "~"  shift, and go to state 334

    $default  reduce using rule 168 (tilda.opt)

    tilda.opt  go to state 437


state 400

   84 stmt: "waituntil" "(" exp tilda.opt ")" .

    $default  reduce using rule 84 (stmt)


state 401

   23 stmt: . primary-exp ":" stmt
   24     | . exp
   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   37 exp: . "class" lvalue protos block
   38    | . "package" lvalue protos block
   43 stmt: . "enum" id "{" id.0 "}"
   47     | . "external" "identifier" "identifier"
   48     | . "external" "var" "identifier" "." "identifier" from "identifier"
   49     | . "external" event_or_function "(" unsigned ")" "identifier" "." "identifier" from "identifier"
   50     | . "import" lvalue
   51     | . exp "!" args.opt tilda.opt
   52 routine: . "closure"
   53        | . "function"
   54 stmt: . routine k1_id formals block
   55     | . id id formals block
   62 exp: . exp "=" exp
   63    | . exp "=" exp modifiers
   64    | . lvalue "+=" exp
   65    | . lvalue "-=" exp
   66    | . lvalue "*=" exp
   67    | . lvalue "/=" exp
   68    | . lvalue "^=" exp
   69    | . lvalue "%=" exp
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
   73 stmt: . "at" identifiers "(" exp tilda.opt ")" stmt onleave.opt
   74     | . "at" identifiers "(" event_match ")" stmt onleave.opt
   75     | . "every" "(" exp ")" stmt
   76     | . "if" "(" stmts ")" stmt else.opt
   77     | . "freezeif" "(" exp ")" stmt
   78     | . "stopif" "(" exp ")" stmt
   79     | . "switch" "(" exp ")" "{" cases default.opt "}"
   80     | . "timeout" "(" exp ")" stmt catch.opt else.opt finally.opt
   81     | . "return" exp.opt
   82     | . "break"
   83     | . "continue"
   84     | . "waituntil" "(" exp tilda.opt ")"
   85     | . "waituntil" "(" event_match ")"
   86     | . "whenever" "(" exp tilda.opt ")" stmt else.opt
   86     | "whenever" "(" exp tilda.opt ")" . stmt else.opt
   87     | . "whenever" "(" event_match ")" stmt else.opt
  108     | . "try" block catches.1 else.opt finally.opt
  109     | . "try" block "finally" block
  110     | . "throw" exp.opt
  111     | . "loop" stmt
  112     | . "for" "(" exp ")" stmt
  113     | . "for" "(" stmt.opt ";" exp ";" stmt.opt ")" stmt
  114     | . "for" "(" "var" "identifier" in_or_colon exp ")" stmt
  115     | . "while" "(" exp ")" stmt
  118 primary-exp: . block
  119            | . "do" "(" exp ")" block
  120 detach: . "detach"
  121       | . "disown"
  122 primary-exp: . "assert" "(" exp ")"
  123            | . "assert" "{" claims "}"
  124            | . detach "(" exp ")"
  125            | . detach block
  126            | . "isdef" "(" k1_id ")"
  127            | . "watch" "(" exp ")"
  128 lvalue: . id
  129       | . primary-exp "." id
  130       | . primary-exp "." "*"
  131 primary-exp: . "&" id
  132            | . primary-exp "." "&" id
  133 id: . "identifier"
  134 bitor-exp: . "var" bitor-exp
  135          | . "const" "var" bitor-exp
  136 primary-exp: . lvalue
  137            | . lvalue args
  138 new: . "new" "identifier" args.opt
  139 bitor-exp: . new
  140 id: . "new"
  141 primary-exp: . routine formals block
  142 float-exp: . "float"
  143 duration: . "duration"
  144         | . duration "duration"
  150 dictionary: . "[" assocs "]"
  154 tuple: . "(" tuple.exps ")"
  155 literal-exp: . float-exp
  156            | . "angle"
  157            | . duration
  158            | . string
  159            | . "[" exps "]"
  160            | . dictionary
  161            | . tuple
  162 string: . "string"
  163       | . string "string"
  164 literal-exp: . "__HERE__"
  170 lvalue: . primary-exp "[" exps "]"
  171 literal-exp: . "this"
  172            | . "call"
  173 primary-exp: . literal-exp
  174            | . "(" exp ")"
  175            | . "(" error ")"
  176            | . primary-exp "**" primary-exp
  177 unary-exp: . primary-exp
  178          | . "--" lvalue
  179          | . "++" lvalue
  180          | . "+" unary-exp
  181          | . "-" unary-exp
  182          | . "!" unary-exp
  183          | . "compl" unary-exp
  184 bitor-exp: . unary-exp
  185          | . bitor-exp "+" bitor-exp
  186          | . bitor-exp "-" bitor-exp
  187          | . bitor-exp "*" bitor-exp
  188          | . bitor-exp "/" bitor-exp
  189          | . bitor-exp "%" bitor-exp
  190          | . bitor-exp "^" bitor-exp
  191          | . bitor-exp "<<" bitor-exp
  192          | . bitor-exp "bitand" bitor-exp
  193          | . bitor-exp "bitor" bitor-exp
  194          | . bitor-exp ">>" bitor-exp
  205 rel-exp: . bitor-exp rel-ops
  208 exp: . rel-exp
  209    | . exp "&&" exp
  210    | . exp "||" exp
  211    | . exp "in" exp
  212    | . exp "!" "in" exp
  216    | . "%unscope:" unsigned
  217 primary-exp: . "%exp:" unsigned
  218 lvalue: . "%lvalue:" unsigned
  219       | . "%id:" unsigned
  220       | . primary-exp "." "%id:" unsigned
  221 primary-exp: . lvalue "(" "%exps:" unsigned ")"

    "__HERE__"    shift, and go to state 7
    "break"       shift, and go to state 8
    "closure"     shift, and go to state 9
    "const"       shift, and go to state 10
    "continue"    shift, and go to state 11
    "freezeif"    shift, and go to state 12
    "function"    shift, and go to state 13
    "if"          shift, and go to state 14
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "return"      shift, and go to state 19
    "stopif"      shift, and go to state 20
    "switch"      shift, and go to state 21
    "throw"       shift, and go to state 22
    "timeout"     shift, and go to state 23
    "try"         shift, and go to state 24
    "var"         shift, and go to state 25
    "waituntil"   shift, and go to state 26
    "watch"       shift, and go to state 27
    "whenever"    shift, and go to state 28
    "&"           shift, and go to state 29
    "every"       shift, and go to state 30
    "for"         shift, and go to state 31
    "loop"        shift, and go to state 32
    "while"       shift, and go to state 33
    "at"          shift, and go to state 34
    "identifier"  shift, and go to state 35
    "class"       shift, and go to state 36
    "package"     shift, and go to state 37
    "enum"        shift, and go to state 38
    "external"    shift, and go to state 39
    "import"      shift, and go to state 40
    "--"          shift, and go to state 41
    "++"          shift, and go to state 42
    "do"          shift, and go to state 43
    "assert"      shift, and go to state 44
    "detach"      shift, and go to state 45
    "disown"      shift, and go to state 46
    "new"         shift, and go to state 47
    "angle"       shift, and go to state 48
    "duration"    shift, and go to state 49
    "float"       shift, and go to state 50
    "string"      shift, and go to state 51
    "call"        shift, and go to state 52
    "this"        shift, and go to state 53
    "!"           shift, and go to state 54
    "compl"       shift, and go to state 55
    "-"           shift, and go to state 56
    "+"           shift, and go to state 57
    "%unscope:"   shift, and go to state 58
    "%exp:"       shift, and go to state 59
    "%lvalue:"    shift, and go to state 60
    "%id:"        shift, and go to state 61

    stmt         go to state 438
    block        go to state 66
    exp          go to state 67
    routine      go to state 68
    primary-exp  go to state 69
    detach       go to state 70
    lvalue       go to state 71
    id           go to state 72
    bitor-exp    go to state 73
    new          go to state 74
    float-exp    go to state 75
    duration     go to state 76
    dictionary   go to state 77
    tuple        go to state 78
    literal-exp  go to state 79
    string       go to state 80
    unary-exp    go to state 81
    rel-exp      go to state 82


state 402

   87 stmt: "whenever" "(" event_match ")" stmt . else.opt
   90 else.opt: .  ["end of command", "case", "catch", "default", "finally", "onleave", "}", ")", ",", ";", "&", "|"]
   91         | . "else" stmt

    "else"  shift, and go to state 331

    $default  reduce using rule 90 (else.opt)

    else.opt  go to state 439

    Conflict between rule 90 and token "else" resolved as shift (EMPTY < "else").


state 403

   75 stmt: "every" "(" exp ")" stmt .

    $default  reduce using rule 75 (stmt)


state 404

  117 in_or_colon: ":" .

    $default  reduce using rule 117 (in_or_colon)


state 405

  116 in_or_colon: "in" .

    $default  reduce using rule 116 (in_or_colon)


state 406

   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   37 exp: . "class" lvalue protos block
   38    | . "package" lvalue protos block
   52 routine: . "closure"
   53        | . "function"
   62 exp: . exp "=" exp
   63    | . exp "=" exp modifiers
   64    | . lvalue "+=" exp
   65    | . lvalue "-=" exp
   66    | . lvalue "*=" exp
   67    | . lvalue "/=" exp
   68    | . lvalue "^=" exp
   69    | . lvalue "%=" exp
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
  114 stmt: "for" "(" "var" "identifier" in_or_colon . exp ")" stmt
  118 primary-exp: . block
  119            | . "do" "(" exp ")" block
  120 detach: . "detach"
  121       | . "disown"
  122 primary-exp: . "assert" "(" exp ")"
  123            | . "assert" "{" claims "}"
  124            | . detach "(" exp ")"
  125            | . detach block
  126            | . "isdef" "(" k1_id ")"
  127            | . "watch" "(" exp ")"
  128 lvalue: . id
  129       | . primary-exp "." id
  130       | . primary-exp "." "*"
  131 primary-exp: . "&" id
  132            | . primary-exp "." "&" id
  133 id: . "identifier"
  134 bitor-exp: . "var" bitor-exp
  135          | . "const" "var" bitor-exp
  136 primary-exp: . lvalue
  137            | . lvalue args
  138 new: . "new" "identifier" args.opt
  139 bitor-exp: . new
  140 id: . "new"
  141 primary-exp: . routine formals block
  142 float-exp: . "float"
  143 duration: . "duration"
  144         | . duration "duration"
  150 dictionary: . "[" assocs "]"
  154 tuple: . "(" tuple.exps ")"
  155 literal-exp: . float-exp
  156            | . "angle"
  157            | . duration
  158            | . string
  159            | . "[" exps "]"
  160            | . dictionary
  161            | . tuple
  162 string: . "string"
  163       | . string "string"
  164 literal-exp: . "__HERE__"
  170 lvalue: . primary-exp "[" exps "]"
  171 literal-exp: . "this"
  172            | . "call"
  173 primary-exp: . literal-exp
  174            | . "(" exp ")"
  175            | . "(" error ")"
  176            | . primary-exp "**" primary-exp
  177 unary-exp: . primary-exp
  178          | . "--" lvalue
  179          | . "++" lvalue
  180          | . "+" unary-exp
  181          | . "-" unary-exp
  182          | . "!" unary-exp
  183          | . "compl" unary-exp
  184 bitor-exp: . unary-exp
  185          | . bitor-exp "+" bitor-exp
  186          | . bitor-exp "-" bitor-exp
  187          | . bitor-exp "*" bitor-exp
  188          | . bitor-exp "/" bitor-exp
  189          | . bitor-exp "%" bitor-exp
  190          | . bitor-exp "^" bitor-exp
  191          | . bitor-exp "<<" bitor-exp
  192          | . bitor-exp "bitand" bitor-exp
  193          | . bitor-exp "bitor" bitor-exp
  194          | . bitor-exp ">>" bitor-exp
  205 rel-exp: . bitor-exp rel-ops
  208 exp: . rel-exp
  209    | . exp "&&" exp
  210    | . exp "||" exp
  211    | . exp "in" exp
  212    | . exp "!" "in" exp
  216    | . "%unscope:" unsigned
  217 primary-exp: . "%exp:" unsigned
  218 lvalue: . "%lvalue:" unsigned
  219       | . "%id:" unsigned
  220       | . primary-exp "." "%id:" unsigned
  221 primary-exp: . lvalue "(" "%exps:" unsigned ")"

    "__HERE__"    shift, and go to state 7
    "closure"     shift, and go to state 9
    "const"       shift, and go to state 10
    "function"    shift, and go to state 13
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "var"         shift, and go to state 25
    "watch"       shift, and go to state 27
    "&"           shift, and go to state 29
    "identifier"  shift, and go to state 35
    "class"       shift, and go to state 36
    "package"     shift, and go to state 37
    "--"          shift, and go to state 41
    "++"          shift, and go to state 42
    "do"          shift, and go to state 43
    "assert"      shift, and go to state 44
    "detach"      shift, and go to state 45
    "disown"      shift, and go to state 46
    "new"         shift, and go to state 47
    "angle"       shift, and go to state 48
    "duration"    shift, and go to state 49
    "float"       shift, and go to state 50
    "string"      shift, and go to state 51
    "call"        shift, and go to state 52
    "this"        shift, and go to state 53
    "!"           shift, and go to state 54
    "compl"       shift, and go to state 55
    "-"           shift, and go to state 56
    "+"           shift, and go to state 57
    "%unscope:"   shift, and go to state 58
    "%exp:"       shift, and go to state 59
    "%lvalue:"    shift, and go to state 60
    "%id:"        shift, and go to state 61

    block        go to state 66
    exp          go to state 440
    routine      go to state 99
    primary-exp  go to state 100
    detach       go to state 70
    lvalue       go to state 71
    id           go to state 101
    bitor-exp    go to state 73
    new          go to state 74
    float-exp    go to state 75
    duration     go to state 76
    dictionary   go to state 77
    tuple        go to state 78
    literal-exp  go to state 79
    string       go to state 80
    unary-exp    go to state 81
    rel-exp      go to state 82


state 407

   62 exp: exp . "=" exp
   63    | exp . "=" exp modifiers
  113 stmt: "for" "(" stmt.opt ";" exp . ";" stmt.opt ")" stmt
  209 exp: exp . "&&" exp
  210    | exp . "||" exp
  211    | exp . "in" exp
  212    | exp . "!" "in" exp

    "="   shift, and go to state 160
    "in"  shift, and go to state 161
    ";"   shift, and go to state 441
    "!"   shift, and go to state 211
    "&&"  shift, and go to state 163
    "||"  shift, and go to state 164


state 408

  112 stmt: "for" "(" exp ")" stmt .

    $default  reduce using rule 112 (stmt)


state 409

  115 stmt: "while" "(" exp ")" stmt .

    $default  reduce using rule 115 (stmt)


state 410

   73 stmt: "at" identifiers "(" exp tilda.opt . ")" stmt onleave.opt

    ")"  shift, and go to state 442


state 411

   23 stmt: . primary-exp ":" stmt
   24     | . exp
   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   37 exp: . "class" lvalue protos block
   38    | . "package" lvalue protos block
   43 stmt: . "enum" id "{" id.0 "}"
   47     | . "external" "identifier" "identifier"
   48     | . "external" "var" "identifier" "." "identifier" from "identifier"
   49     | . "external" event_or_function "(" unsigned ")" "identifier" "." "identifier" from "identifier"
   50     | . "import" lvalue
   51     | . exp "!" args.opt tilda.opt
   52 routine: . "closure"
   53        | . "function"
   54 stmt: . routine k1_id formals block
   55     | . id id formals block
   62 exp: . exp "=" exp
   63    | . exp "=" exp modifiers
   64    | . lvalue "+=" exp
   65    | . lvalue "-=" exp
   66    | . lvalue "*=" exp
   67    | . lvalue "/=" exp
   68    | . lvalue "^=" exp
   69    | . lvalue "%=" exp
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
   73 stmt: . "at" identifiers "(" exp tilda.opt ")" stmt onleave.opt
   74     | . "at" identifiers "(" event_match ")" stmt onleave.opt
   74     | "at" identifiers "(" event_match ")" . stmt onleave.opt
   75     | . "every" "(" exp ")" stmt
   76     | . "if" "(" stmts ")" stmt else.opt
   77     | . "freezeif" "(" exp ")" stmt
   78     | . "stopif" "(" exp ")" stmt
   79     | . "switch" "(" exp ")" "{" cases default.opt "}"
   80     | . "timeout" "(" exp ")" stmt catch.opt else.opt finally.opt
   81     | . "return" exp.opt
   82     | . "break"
   83     | . "continue"
   84     | . "waituntil" "(" exp tilda.opt ")"
   85     | . "waituntil" "(" event_match ")"
   86     | . "whenever" "(" exp tilda.opt ")" stmt else.opt
   87     | . "whenever" "(" event_match ")" stmt else.opt
  108     | . "try" block catches.1 else.opt finally.opt
  109     | . "try" block "finally" block
  110     | . "throw" exp.opt
  111     | . "loop" stmt
  112     | . "for" "(" exp ")" stmt
  113     | . "for" "(" stmt.opt ";" exp ";" stmt.opt ")" stmt
  114     | . "for" "(" "var" "identifier" in_or_colon exp ")" stmt
  115     | . "while" "(" exp ")" stmt
  118 primary-exp: . block
  119            | . "do" "(" exp ")" block
  120 detach: . "detach"
  121       | . "disown"
  122 primary-exp: . "assert" "(" exp ")"
  123            | . "assert" "{" claims "}"
  124            | . detach "(" exp ")"
  125            | . detach block
  126            | . "isdef" "(" k1_id ")"
  127            | . "watch" "(" exp ")"
  128 lvalue: . id
  129       | . primary-exp "." id
  130       | . primary-exp "." "*"
  131 primary-exp: . "&" id
  132            | . primary-exp "." "&" id
  133 id: . "identifier"
  134 bitor-exp: . "var" bitor-exp
  135          | . "const" "var" bitor-exp
  136 primary-exp: . lvalue
  137            | . lvalue args
  138 new: . "new" "identifier" args.opt
  139 bitor-exp: . new
  140 id: . "new"
  141 primary-exp: . routine formals block
  142 float-exp: . "float"
  143 duration: . "duration"
  144         | . duration "duration"
  150 dictionary: . "[" assocs "]"
  154 tuple: . "(" tuple.exps ")"
  155 literal-exp: . float-exp
  156            | . "angle"
  157            | . duration
  158            | . string
  159            | . "[" exps "]"
  160            | . dictionary
  161            | . tuple
  162 string: . "string"
  163       | . string "string"
  164 literal-exp: . "__HERE__"
  170 lvalue: . primary-exp "[" exps "]"
  171 literal-exp: . "this"
  172            | . "call"
  173 primary-exp: . literal-exp
  174            | . "(" exp ")"
  175            | . "(" error ")"
  176            | . primary-exp "**" primary-exp
  177 unary-exp: . primary-exp
  178          | . "--" lvalue
  179          | . "++" lvalue
  180          | . "+" unary-exp
  181          | . "-" unary-exp
  182          | . "!" unary-exp
  183          | . "compl" unary-exp
  184 bitor-exp: . unary-exp
  185          | . bitor-exp "+" bitor-exp
  186          | . bitor-exp "-" bitor-exp
  187          | . bitor-exp "*" bitor-exp
  188          | . bitor-exp "/" bitor-exp
  189          | . bitor-exp "%" bitor-exp
  190          | . bitor-exp "^" bitor-exp
  191          | . bitor-exp "<<" bitor-exp
  192          | . bitor-exp "bitand" bitor-exp
  193          | . bitor-exp "bitor" bitor-exp
  194          | . bitor-exp ">>" bitor-exp
  205 rel-exp: . bitor-exp rel-ops
  208 exp: . rel-exp
  209    | . exp "&&" exp
  210    | . exp "||" exp
  211    | . exp "in" exp
  212    | . exp "!" "in" exp
  216    | . "%unscope:" unsigned
  217 primary-exp: . "%exp:" unsigned
  218 lvalue: . "%lvalue:" unsigned
  219       | . "%id:" unsigned
  220       | . primary-exp "." "%id:" unsigned
  221 primary-exp: . lvalue "(" "%exps:" unsigned ")"

    "__HERE__"    shift, and go to state 7
    "break"       shift, and go to state 8
    "closure"     shift, and go to state 9
    "const"       shift, and go to state 10
    "continue"    shift, and go to state 11
    "freezeif"    shift, and go to state 12
    "function"    shift, and go to state 13
    "if"          shift, and go to state 14
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "return"      shift, and go to state 19
    "stopif"      shift, and go to state 20
    "switch"      shift, and go to state 21
    "throw"       shift, and go to state 22
    "timeout"     shift, and go to state 23
    "try"         shift, and go to state 24
    "var"         shift, and go to state 25
    "waituntil"   shift, and go to state 26
    "watch"       shift, and go to state 27
    "whenever"    shift, and go to state 28
    "&"           shift, and go to state 29
    "every"       shift, and go to state 30
    "for"         shift, and go to state 31
    "loop"        shift, and go to state 32
    "while"       shift, and go to state 33
    "at"          shift, and go to state 34
    "identifier"  shift, and go to state 35
    "class"       shift, and go to state 36
    "package"     shift, and go to state 37
    "enum"        shift, and go to state 38
    "external"    shift, and go to state 39
    "import"      shift, and go to state 40
    "--"          shift, and go to state 41
    "++"          shift, and go to state 42
    "do"          shift, and go to state 43
    "assert"      shift, and go to state 44
    "detach"      shift, and go to state 45
    "disown"      shift, and go to state 46
    "new"         shift, and go to state 47
    "angle"       shift, and go to state 48
    "duration"    shift, and go to state 49
    "float"       shift, and go to state 50
    "string"      shift, and go to state 51
    "call"        shift, and go to state 52
    "this"        shift, and go to state 53
    "!"           shift, and go to state 54
    "compl"       shift, and go to state 55
    "-"           shift, and go to state 56
    "+"           shift, and go to state 57
    "%unscope:"   shift, and go to state 58
    "%exp:"       shift, and go to state 59
    "%lvalue:"    shift, and go to state 60
    "%id:"        shift, and go to state 61

    stmt         go to state 443
    block        go to state 66
    exp          go to state 67
    routine      go to state 68
    primary-exp  go to state 69
    detach       go to state 70
    lvalue       go to state 71
    id           go to state 72
    bitor-exp    go to state 73
    new          go to state 74
    float-exp    go to state 75
    duration     go to state 76
    dictionary   go to state 77
    tuple        go to state 78
    literal-exp  go to state 79
    string       go to state 80
    unary-exp    go to state 81
    rel-exp      go to state 82


state 412

   32 proto: visibility exp .  ["{", ","]
   62 exp: exp . "=" exp
   63    | exp . "=" exp modifiers
  209    | exp . "&&" exp
  210    | exp . "||" exp
  211    | exp . "in" exp
  212    | exp . "!" "in" exp

    "="   shift, and go to state 160
    "in"  shift, and go to state 161
    "!"   shift, and go to state 211
    "&&"  shift, and go to state 163
    "||"  shift, and go to state 164

    $default  reduce using rule 32 (proto)


state 413

   28 visibility: .  ["__HERE__", "closure", "const", "function", "isdef", "{", "[", "(", "var", "watch", "&", "identifier", "class", "package", "--", "++", "do", "assert", "detach", "disown", "new", "angle", "duration", "float", "string", "call", "this", "!", "compl", "-", "+", "%unscope:", "%exp:", "%lvalue:", "%id:"]
   29           | . "private"
   30           | . "protected"
   31           | . "public"
   32 proto: . visibility exp
   34 protos.1: protos.1 "," . proto

    "private"    shift, and go to state 348
    "protected"  shift, and go to state 349
    "public"     shift, and go to state 350

    $default  reduce using rule 28 (visibility)

    visibility  go to state 351
    proto       go to state 444


state 414

   43 stmt: "enum" id "{" id.0 "}" .

    $default  reduce using rule 43 (stmt)


state 415

   42 id.1: id.1 "," . id
  133 id: . "identifier"
  140   | . "new"
  249 comma.opt: "," .  ["}"]

    "identifier"  shift, and go to state 35
    "new"         shift, and go to state 124

    $default  reduce using rule 249 (comma.opt)

    id  go to state 445


state 416

   40 id.0: id.1 comma.opt .

    $default  reduce using rule 40 (id.0)


state 417

   44 from: . "identifier"
   48 stmt: "external" "var" "identifier" "." "identifier" . from "identifier"

    "identifier"  shift, and go to state 446

    from  go to state 447


state 418

   49 stmt: "external" event_or_function "(" unsigned ")" . "identifier" "." "identifier" from "identifier"

    "identifier"  shift, and go to state 448


state 419

  119 primary-exp: "do" "(" exp ")" block .

    $default  reduce using rule 119 (primary-exp)


state 420

   62 exp: exp . "=" exp
   63    | exp . "=" exp modifiers
  209    | exp . "&&" exp
  210    | exp . "||" exp
  211    | exp . "in" exp
  212    | exp . "!" "in" exp
  225 claims.1: claims.1 ";" exp .  ["}", ";"]

    "="   shift, and go to state 160
    "in"  shift, and go to state 161
    "!"   shift, and go to state 211
    "&&"  shift, and go to state 163
    "||"  shift, and go to state 164

    $default  reduce using rule 225 (claims.1)


state 421

   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   37 exp: . "class" lvalue protos block
   38    | . "package" lvalue protos block
   52 routine: . "closure"
   53        | . "function"
   59 modifier: "identifier" ":" . exp
   62 exp: . exp "=" exp
   63    | . exp "=" exp modifiers
   64    | . lvalue "+=" exp
   65    | . lvalue "-=" exp
   66    | . lvalue "*=" exp
   67    | . lvalue "/=" exp
   68    | . lvalue "^=" exp
   69    | . lvalue "%=" exp
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
  118            | . block
  119            | . "do" "(" exp ")" block
  120 detach: . "detach"
  121       | . "disown"
  122 primary-exp: . "assert" "(" exp ")"
  123            | . "assert" "{" claims "}"
  124            | . detach "(" exp ")"
  125            | . detach block
  126            | . "isdef" "(" k1_id ")"
  127            | . "watch" "(" exp ")"
  128 lvalue: . id
  129       | . primary-exp "." id
  130       | . primary-exp "." "*"
  131 primary-exp: . "&" id
  132            | . primary-exp "." "&" id
  133 id: . "identifier"
  134 bitor-exp: . "var" bitor-exp
  135          | . "const" "var" bitor-exp
  136 primary-exp: . lvalue
  137            | . lvalue args
  138 new: . "new" "identifier" args.opt
  139 bitor-exp: . new
  140 id: . "new"
  141 primary-exp: . routine formals block
  142 float-exp: . "float"
  143 duration: . "duration"
  144         | . duration "duration"
  150 dictionary: . "[" assocs "]"
  154 tuple: . "(" tuple.exps ")"
  155 literal-exp: . float-exp
  156            | . "angle"
  157            | . duration
  158            | . string
  159            | . "[" exps "]"
  160            | . dictionary
  161            | . tuple
  162 string: . "string"
  163       | . string "string"
  164 literal-exp: . "__HERE__"
  170 lvalue: . primary-exp "[" exps "]"
  171 literal-exp: . "this"
  172            | . "call"
  173 primary-exp: . literal-exp
  174            | . "(" exp ")"
  175            | . "(" error ")"
  176            | . primary-exp "**" primary-exp
  177 unary-exp: . primary-exp
  178          | . "--" lvalue
  179          | . "++" lvalue
  180          | . "+" unary-exp
  181          | . "-" unary-exp
  182          | . "!" unary-exp
  183          | . "compl" unary-exp
  184 bitor-exp: . unary-exp
  185          | . bitor-exp "+" bitor-exp
  186          | . bitor-exp "-" bitor-exp
  187          | . bitor-exp "*" bitor-exp
  188          | . bitor-exp "/" bitor-exp
  189          | . bitor-exp "%" bitor-exp
  190          | . bitor-exp "^" bitor-exp
  191          | . bitor-exp "<<" bitor-exp
  192          | . bitor-exp "bitand" bitor-exp
  193          | . bitor-exp "bitor" bitor-exp
  194          | . bitor-exp ">>" bitor-exp
  205 rel-exp: . bitor-exp rel-ops
  208 exp: . rel-exp
  209    | . exp "&&" exp
  210    | . exp "||" exp
  211    | . exp "in" exp
  212    | . exp "!" "in" exp
  216    | . "%unscope:" unsigned
  217 primary-exp: . "%exp:" unsigned
  218 lvalue: . "%lvalue:" unsigned
  219       | . "%id:" unsigned
  220       | . primary-exp "." "%id:" unsigned
  221 primary-exp: . lvalue "(" "%exps:" unsigned ")"

    "__HERE__"    shift, and go to state 7
    "closure"     shift, and go to state 9
    "const"       shift, and go to state 10
    "function"    shift, and go to state 13
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "var"         shift, and go to state 25
    "watch"       shift, and go to state 27
    "&"           shift, and go to state 29
    "identifier"  shift, and go to state 35
    "class"       shift, and go to state 36
    "package"     shift, and go to state 37
    "--"          shift, and go to state 41
    "++"          shift, and go to state 42
    "do"          shift, and go to state 43
    "assert"      shift, and go to state 44
    "detach"      shift, and go to state 45
    "disown"      shift, and go to state 46
    "new"         shift, and go to state 47
    "angle"       shift, and go to state 48
    "duration"    shift, and go to state 49
    "float"       shift, and go to state 50
    "string"      shift, and go to state 51
    "call"        shift, and go to state 52
    "this"        shift, and go to state 53
    "!"           shift, and go to state 54
    "compl"       shift, and go to state 55
    "-"           shift, and go to state 56
    "+"           shift, and go to state 57
    "%unscope:"   shift, and go to state 58
    "%exp:"       shift, and go to state 59
    "%lvalue:"    shift, and go to state 60
    "%id:"        shift, and go to state 61

    block        go to state 66
    exp          go to state 449
    routine      go to state 99
    primary-exp  go to state 100
    detach       go to state 70
    lvalue       go to state 71
    id           go to state 101
    bitor-exp    go to state 73
    new          go to state 74
    float-exp    go to state 75
    duration     go to state 76
    dictionary   go to state 77
    tuple        go to state 78
    literal-exp  go to state 79
    string       go to state 80
    unary-exp    go to state 81
    rel-exp      go to state 82


state 422

   61 modifiers: modifiers modifier .

    $default  reduce using rule 61 (modifiers)


state 423

  243 formals.1: formals.1 "," formal .

    $default  reduce using rule 243 (formals.1)


state 424

   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   37 exp: . "class" lvalue protos block
   38    | . "package" lvalue protos block
   52 routine: . "closure"
   53        | . "function"
   62 exp: . exp "=" exp
   63    | . exp "=" exp modifiers
   64    | . lvalue "+=" exp
   65    | . lvalue "-=" exp
   66    | . lvalue "*=" exp
   67    | . lvalue "/=" exp
   68    | . lvalue "^=" exp
   69    | . lvalue "%=" exp
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
  118            | . block
  119            | . "do" "(" exp ")" block
  120 detach: . "detach"
  121       | . "disown"
  122 primary-exp: . "assert" "(" exp ")"
  123            | . "assert" "{" claims "}"
  124            | . detach "(" exp ")"
  125            | . detach block
  126            | . "isdef" "(" k1_id ")"
  127            | . "watch" "(" exp ")"
  128 lvalue: . id
  129       | . primary-exp "." id
  130       | . primary-exp "." "*"
  131 primary-exp: . "&" id
  132            | . primary-exp "." "&" id
  133 id: . "identifier"
  134 bitor-exp: . "var" bitor-exp
  135          | . "const" "var" bitor-exp
  136 primary-exp: . lvalue
  137            | . lvalue args
  138 new: . "new" "identifier" args.opt
  139 bitor-exp: . new
  140 id: . "new"
  141 primary-exp: . routine formals block
  142 float-exp: . "float"
  143 duration: . "duration"
  144         | . duration "duration"
  150 dictionary: . "[" assocs "]"
  154 tuple: . "(" tuple.exps ")"
  155 literal-exp: . float-exp
  156            | . "angle"
  157            | . duration
  158            | . string
  159            | . "[" exps "]"
  160            | . dictionary
  161            | . tuple
  162 string: . "string"
  163       | . string "string"
  164 literal-exp: . "__HERE__"
  170 lvalue: . primary-exp "[" exps "]"
  171 literal-exp: . "this"
  172            | . "call"
  173 primary-exp: . literal-exp
  174            | . "(" exp ")"
  175            | . "(" error ")"
  176            | . primary-exp "**" primary-exp
  177 unary-exp: . primary-exp
  178          | . "--" lvalue
  179          | . "++" lvalue
  180          | . "+" unary-exp
  181          | . "-" unary-exp
  182          | . "!" unary-exp
  183          | . "compl" unary-exp
  184 bitor-exp: . unary-exp
  185          | . bitor-exp "+" bitor-exp
  186          | . bitor-exp "-" bitor-exp
  187          | . bitor-exp "*" bitor-exp
  188          | . bitor-exp "/" bitor-exp
  189          | . bitor-exp "%" bitor-exp
  190          | . bitor-exp "^" bitor-exp
  191          | . bitor-exp "<<" bitor-exp
  192          | . bitor-exp "bitand" bitor-exp
  193          | . bitor-exp "bitor" bitor-exp
  194          | . bitor-exp ">>" bitor-exp
  205 rel-exp: . bitor-exp rel-ops
  208 exp: . rel-exp
  209    | . exp "&&" exp
  210    | . exp "||" exp
  211    | . exp "in" exp
  212    | . exp "!" "in" exp
  216    | . "%unscope:" unsigned
  217 primary-exp: . "%exp:" unsigned
  218 lvalue: . "%lvalue:" unsigned
  219       | . "%id:" unsigned
  220       | . primary-exp "." "%id:" unsigned
  221 primary-exp: . lvalue "(" "%exps:" unsigned ")"
  240 formal: var.opt "identifier" "=" . exp typespec.opt

    "__HERE__"    shift, and go to state 7
    "closure"     shift, and go to state 9
    "const"       shift, and go to state 10
    "function"    shift, and go to state 13
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "var"         shift, and go to state 25
    "watch"       shift, and go to state 27
    "&"           shift, and go to state 29
    "identifier"  shift, and go to state 35
    "class"       shift, and go to state 36
    "package"     shift, and go to state 37
    "--"          shift, and go to state 41
    "++"          shift, and go to state 42
    "do"          shift, and go to state 43
    "assert"      shift, and go to state 44
    "detach"      shift, and go to state 45
    "disown"      shift, and go to state 46
    "new"         shift, and go to state 47
    "angle"       shift, and go to state 48
    "duration"    shift, and go to state 49
    "float"       shift, and go to state 50
    "string"      shift, and go to state 51
    "call"        shift, and go to state 52
    "this"        shift, and go to state 53
    "!"           shift, and go to state 54
    "compl"       shift, and go to state 55
    "-"           shift, and go to state 56
    "+"           shift, and go to state 57
    "%unscope:"   shift, and go to state 58
    "%exp:"       shift, and go to state 59
    "%lvalue:"    shift, and go to state 60
    "%id:"        shift, and go to state 61

    block        go to state 66
    exp          go to state 450
    routine      go to state 99
    primary-exp  go to state 100
    detach       go to state 70
    lvalue       go to state 71
    id           go to state 101
    bitor-exp    go to state 73
    new          go to state 74
    float-exp    go to state 75
    duration     go to state 76
    dictionary   go to state 77
    tuple        go to state 78
    literal-exp  go to state 79
    string       go to state 80
    unary-exp    go to state 81
    rel-exp      go to state 82


state 425

   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   37 exp: . "class" lvalue protos block
   38    | . "package" lvalue protos block
   52 routine: . "closure"
   53        | . "function"
   62 exp: . exp "=" exp
   63    | . exp "=" exp modifiers
   64    | . lvalue "+=" exp
   65    | . lvalue "-=" exp
   66    | . lvalue "*=" exp
   67    | . lvalue "/=" exp
   68    | . lvalue "^=" exp
   69    | . lvalue "%=" exp
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
  118            | . block
  119            | . "do" "(" exp ")" block
  120 detach: . "detach"
  121       | . "disown"
  122 primary-exp: . "assert" "(" exp ")"
  123            | . "assert" "{" claims "}"
  124            | . detach "(" exp ")"
  125            | . detach block
  126            | . "isdef" "(" k1_id ")"
  127            | . "watch" "(" exp ")"
  128 lvalue: . id
  129       | . primary-exp "." id
  130       | . primary-exp "." "*"
  131 primary-exp: . "&" id
  132            | . primary-exp "." "&" id
  133 id: . "identifier"
  134 bitor-exp: . "var" bitor-exp
  135          | . "const" "var" bitor-exp
  136 primary-exp: . lvalue
  137            | . lvalue args
  138 new: . "new" "identifier" args.opt
  139 bitor-exp: . new
  140 id: . "new"
  141 primary-exp: . routine formals block
  142 float-exp: . "float"
  143 duration: . "duration"
  144         | . duration "duration"
  150 dictionary: . "[" assocs "]"
  154 tuple: . "(" tuple.exps ")"
  155 literal-exp: . float-exp
  156            | . "angle"
  157            | . duration
  158            | . string
  159            | . "[" exps "]"
  160            | . dictionary
  161            | . tuple
  162 string: . "string"
  163       | . string "string"
  164 literal-exp: . "__HERE__"
  170 lvalue: . primary-exp "[" exps "]"
  171 literal-exp: . "this"
  172            | . "call"
  173 primary-exp: . literal-exp
  174            | . "(" exp ")"
  175            | . "(" error ")"
  176            | . primary-exp "**" primary-exp
  177 unary-exp: . primary-exp
  178          | . "--" lvalue
  179          | . "++" lvalue
  180          | . "+" unary-exp
  181          | . "-" unary-exp
  182          | . "!" unary-exp
  183          | . "compl" unary-exp
  184 bitor-exp: . unary-exp
  185          | . bitor-exp "+" bitor-exp
  186          | . bitor-exp "-" bitor-exp
  187          | . bitor-exp "*" bitor-exp
  188          | . bitor-exp "/" bitor-exp
  189          | . bitor-exp "%" bitor-exp
  190          | . bitor-exp "^" bitor-exp
  191          | . bitor-exp "<<" bitor-exp
  192          | . bitor-exp "bitand" bitor-exp
  193          | . bitor-exp "bitor" bitor-exp
  194          | . bitor-exp ">>" bitor-exp
  205 rel-exp: . bitor-exp rel-ops
  208 exp: . rel-exp
  209    | . exp "&&" exp
  210    | . exp "||" exp
  211    | . exp "in" exp
  212    | . exp "!" "in" exp
  216    | . "%unscope:" unsigned
  217 primary-exp: . "%exp:" unsigned
  218 lvalue: . "%lvalue:" unsigned
  219       | . "%id:" unsigned
  220       | . primary-exp "." "%id:" unsigned
  221 primary-exp: . lvalue "(" "%exps:" unsigned ")"
  236 typespec: ":" . exp

    "__HERE__"    shift, and go to state 7
    "closure"     shift, and go to state 9
    "const"       shift, and go to state 10
    "function"    shift, and go to state 13
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "var"         shift, and go to state 25
    "watch"       shift, and go to state 27
    "&"           shift, and go to state 29
    "identifier"  shift, and go to state 35
    "class"       shift, and go to state 36
    "package"     shift, and go to state 37
    "--"          shift, and go to state 41
    "++"          shift, and go to state 42
    "do"          shift, and go to state 43
    "assert"      shift, and go to state 44
    "detach"      shift, and go to state 45
    "disown"      shift, and go to state 46
    "new"         shift, and go to state 47
    "angle"       shift, and go to state 48
    "duration"    shift, and go to state 49
    "float"       shift, and go to state 50
    "string"      shift, and go to state 51
    "call"        shift, and go to state 52
    "this"        shift, and go to state 53
    "!"           shift, and go to state 54
    "compl"       shift, and go to state 55
    "-"           shift, and go to state 56
    "+"           shift, and go to state 57
    "%unscope:"   shift, and go to state 58
    "%exp:"       shift, and go to state 59
    "%lvalue:"    shift, and go to state 60
    "%id:"        shift, and go to state 61

    block        go to state 66
    exp          go to state 451
    routine      go to state 99
    primary-exp  go to state 100
    detach       go to state 70
    lvalue       go to state 71
    id           go to state 101
    bitor-exp    go to state 73
    new          go to state 74
    float-exp    go to state 75
    duration     go to state 76
    dictionary   go to state 77
    tuple        go to state 78
    literal-exp  go to state 79
    string       go to state 80
    unary-exp    go to state 81
    rel-exp      go to state 82


state 426

  241 formal: var.opt "identifier" "[" . "]"

    "]"  shift, and go to state 452


state 427

  238 typespec.opt: typespec .

    $default  reduce using rule 238 (typespec.opt)


state 428

  239 formal: var.opt "identifier" typespec.opt .

    $default  reduce using rule 239 (formal)


state 429

  221 primary-exp: lvalue "(" "%exps:" unsigned ")" .

    $default  reduce using rule 221 (primary-exp)


state 430

   76 stmt: "if" "(" stmts ")" stmt else.opt .

    $default  reduce using rule 76 (stmt)


state 431

   79 stmt: "switch" "(" exp ")" "{" cases . default.opt "}"
   88 default.opt: .  ["}"]
   89            | . "default" ":" stmts
   95 cases: cases . case
   96 case: . "case" match ":" stmts

    "case"     shift, and go to state 453
    "default"  shift, and go to state 454

    $default  reduce using rule 88 (default.opt)

    default.opt  go to state 455
    case         go to state 456


state 432

   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
  105 catch.opt: "catch" . block

    "{"  shift, and go to state 16

    block  go to state 457


state 433

   80 stmt: "timeout" "(" exp ")" stmt catch.opt . else.opt finally.opt
   90 else.opt: .  ["end of command", "case", "catch", "default", "finally", "onleave", "}", ")", ",", ";", "&", "|"]
   91         | . "else" stmt

    "else"  shift, and go to state 331

    $default  reduce using rule 90 (else.opt)

    else.opt  go to state 458

    Conflict between rule 90 and token "else" resolved as shift (EMPTY < "else").


state 434

   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   37 exp: . "class" lvalue protos block
   38    | . "package" lvalue protos block
   52 routine: . "closure"
   53        | . "function"
   62 exp: . exp "=" exp
   63    | . exp "=" exp modifiers
   64    | . lvalue "+=" exp
   65    | . lvalue "-=" exp
   66    | . lvalue "*=" exp
   67    | . lvalue "/=" exp
   68    | . lvalue "^=" exp
   69    | . lvalue "%=" exp
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
  100 match: exp "if" . exp
  118 primary-exp: . block
  119            | . "do" "(" exp ")" block
  120 detach: . "detach"
  121       | . "disown"
  122 primary-exp: . "assert" "(" exp ")"
  123            | . "assert" "{" claims "}"
  124            | . detach "(" exp ")"
  125            | . detach block
  126            | . "isdef" "(" k1_id ")"
  127            | . "watch" "(" exp ")"
  128 lvalue: . id
  129       | . primary-exp "." id
  130       | . primary-exp "." "*"
  131 primary-exp: . "&" id
  132            | . primary-exp "." "&" id
  133 id: . "identifier"
  134 bitor-exp: . "var" bitor-exp
  135          | . "const" "var" bitor-exp
  136 primary-exp: . lvalue
  137            | . lvalue args
  138 new: . "new" "identifier" args.opt
  139 bitor-exp: . new
  140 id: . "new"
  141 primary-exp: . routine formals block
  142 float-exp: . "float"
  143 duration: . "duration"
  144         | . duration "duration"
  150 dictionary: . "[" assocs "]"
  154 tuple: . "(" tuple.exps ")"
  155 literal-exp: . float-exp
  156            | . "angle"
  157            | . duration
  158            | . string
  159            | . "[" exps "]"
  160            | . dictionary
  161            | . tuple
  162 string: . "string"
  163       | . string "string"
  164 literal-exp: . "__HERE__"
  170 lvalue: . primary-exp "[" exps "]"
  171 literal-exp: . "this"
  172            | . "call"
  173 primary-exp: . literal-exp
  174            | . "(" exp ")"
  175            | . "(" error ")"
  176            | . primary-exp "**" primary-exp
  177 unary-exp: . primary-exp
  178          | . "--" lvalue
  179          | . "++" lvalue
  180          | . "+" unary-exp
  181          | . "-" unary-exp
  182          | . "!" unary-exp
  183          | . "compl" unary-exp
  184 bitor-exp: . unary-exp
  185          | . bitor-exp "+" bitor-exp
  186          | . bitor-exp "-" bitor-exp
  187          | . bitor-exp "*" bitor-exp
  188          | . bitor-exp "/" bitor-exp
  189          | . bitor-exp "%" bitor-exp
  190          | . bitor-exp "^" bitor-exp
  191          | . bitor-exp "<<" bitor-exp
  192          | . bitor-exp "bitand" bitor-exp
  193          | . bitor-exp "bitor" bitor-exp
  194          | . bitor-exp ">>" bitor-exp
  205 rel-exp: . bitor-exp rel-ops
  208 exp: . rel-exp
  209    | . exp "&&" exp
  210    | . exp "||" exp
  211    | . exp "in" exp
  212    | . exp "!" "in" exp
  216    | . "%unscope:" unsigned
  217 primary-exp: . "%exp:" unsigned
  218 lvalue: . "%lvalue:" unsigned
  219       | . "%id:" unsigned
  220       | . primary-exp "." "%id:" unsigned
  221 primary-exp: . lvalue "(" "%exps:" unsigned ")"

    "__HERE__"    shift, and go to state 7
    "closure"     shift, and go to state 9
    "const"       shift, and go to state 10
    "function"    shift, and go to state 13
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "var"         shift, and go to state 25
    "watch"       shift, and go to state 27
    "&"           shift, and go to state 29
    "identifier"  shift, and go to state 35
    "class"       shift, and go to state 36
    "package"     shift, and go to state 37
    "--"          shift, and go to state 41
    "++"          shift, and go to state 42
    "do"          shift, and go to state 43
    "assert"      shift, and go to state 44
    "detach"      shift, and go to state 45
    "disown"      shift, and go to state 46
    "new"         shift, and go to state 47
    "angle"       shift, and go to state 48
    "duration"    shift, and go to state 49
    "float"       shift, and go to state 50
    "string"      shift, and go to state 51
    "call"        shift, and go to state 52
    "this"        shift, and go to state 53
    "!"           shift, and go to state 54
    "compl"       shift, and go to state 55
    "-"           shift, and go to state 56
    "+"           shift, and go to state 57
    "%unscope:"   shift, and go to state 58
    "%exp:"       shift, and go to state 59
    "%lvalue:"    shift, and go to state 60
    "%id:"        shift, and go to state 61

    block        go to state 66
    exp          go to state 459
    routine      go to state 99
    primary-exp  go to state 100
    detach       go to state 70
    lvalue       go to state 71
    id           go to state 101
    bitor-exp    go to state 73
    new          go to state 74
    float-exp    go to state 75
    duration     go to state 76
    dictionary   go to state 77
    tuple        go to state 78
    literal-exp  go to state 79
    string       go to state 80
    unary-exp    go to state 81
    rel-exp      go to state 82


state 435

  102 match.opt: "(" match ")" .

    $default  reduce using rule 102 (match.opt)


state 436

  107 finally.opt: "finally" block .

    $default  reduce using rule 107 (finally.opt)


state 437

  165 event_match: exp "?" args.opt tilda.opt . guard.opt
  166 guard.opt: .  [")"]
  167          | . "if" exp

    "if"  shift, and go to state 460

    $default  reduce using rule 166 (guard.opt)

    guard.opt  go to state 461


state 438

   86 stmt: "whenever" "(" exp tilda.opt ")" stmt . else.opt
   90 else.opt: .  ["end of command", "case", "catch", "default", "finally", "onleave", "}", ")", ",", ";", "&", "|"]
   91         | . "else" stmt

    "else"  shift, and go to state 331

    $default  reduce using rule 90 (else.opt)

    else.opt  go to state 462

    Conflict between rule 90 and token "else" resolved as shift (EMPTY < "else").


state 439

   87 stmt: "whenever" "(" event_match ")" stmt else.opt .

    $default  reduce using rule 87 (stmt)


state 440

   62 exp: exp . "=" exp
   63    | exp . "=" exp modifiers
  114 stmt: "for" "(" "var" "identifier" in_or_colon exp . ")" stmt
  209 exp: exp . "&&" exp
  210    | exp . "||" exp
  211    | exp . "in" exp
  212    | exp . "!" "in" exp

    "="   shift, and go to state 160
    "in"  shift, and go to state 161
    ")"   shift, and go to state 463
    "!"   shift, and go to state 211
    "&&"  shift, and go to state 163
    "||"  shift, and go to state 164


state 441

   21 stmt.opt: .  [")"]
   22         | . stmt
   23 stmt: . primary-exp ":" stmt
   24     | . exp
   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   37 exp: . "class" lvalue protos block
   38    | . "package" lvalue protos block
   43 stmt: . "enum" id "{" id.0 "}"
   47     | . "external" "identifier" "identifier"
   48     | . "external" "var" "identifier" "." "identifier" from "identifier"
   49     | . "external" event_or_function "(" unsigned ")" "identifier" "." "identifier" from "identifier"
   50     | . "import" lvalue
   51     | . exp "!" args.opt tilda.opt
   52 routine: . "closure"
   53        | . "function"
   54 stmt: . routine k1_id formals block
   55     | . id id formals block
   62 exp: . exp "=" exp
   63    | . exp "=" exp modifiers
   64    | . lvalue "+=" exp
   65    | . lvalue "-=" exp
   66    | . lvalue "*=" exp
   67    | . lvalue "/=" exp
   68    | . lvalue "^=" exp
   69    | . lvalue "%=" exp
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
   73 stmt: . "at" identifiers "(" exp tilda.opt ")" stmt onleave.opt
   74     | . "at" identifiers "(" event_match ")" stmt onleave.opt
   75     | . "every" "(" exp ")" stmt
   76     | . "if" "(" stmts ")" stmt else.opt
   77     | . "freezeif" "(" exp ")" stmt
   78     | . "stopif" "(" exp ")" stmt
   79     | . "switch" "(" exp ")" "{" cases default.opt "}"
   80     | . "timeout" "(" exp ")" stmt catch.opt else.opt finally.opt
   81     | . "return" exp.opt
   82     | . "break"
   83     | . "continue"
   84     | . "waituntil" "(" exp tilda.opt ")"
   85     | . "waituntil" "(" event_match ")"
   86     | . "whenever" "(" exp tilda.opt ")" stmt else.opt
   87     | . "whenever" "(" event_match ")" stmt else.opt
  108     | . "try" block catches.1 else.opt finally.opt
  109     | . "try" block "finally" block
  110     | . "throw" exp.opt
  111     | . "loop" stmt
  112     | . "for" "(" exp ")" stmt
  113     | . "for" "(" stmt.opt ";" exp ";" stmt.opt ")" stmt
  113     | "for" "(" stmt.opt ";" exp ";" . stmt.opt ")" stmt
  114     | . "for" "(" "var" "identifier" in_or_colon exp ")" stmt
  115     | . "while" "(" exp ")" stmt
  118 primary-exp: . block
  119            | . "do" "(" exp ")" block
  120 detach: . "detach"
  121       | . "disown"
  122 primary-exp: . "assert" "(" exp ")"
  123            | . "assert" "{" claims "}"
  124            | . detach "(" exp ")"
  125            | . detach block
  126            | . "isdef" "(" k1_id ")"
  127            | . "watch" "(" exp ")"
  128 lvalue: . id
  129       | . primary-exp "." id
  130       | . primary-exp "." "*"
  131 primary-exp: . "&" id
  132            | . primary-exp "." "&" id
  133 id: . "identifier"
  134 bitor-exp: . "var" bitor-exp
  135          | . "const" "var" bitor-exp
  136 primary-exp: . lvalue
  137            | . lvalue args
  138 new: . "new" "identifier" args.opt
  139 bitor-exp: . new
  140 id: . "new"
  141 primary-exp: . routine formals block
  142 float-exp: . "float"
  143 duration: . "duration"
  144         | . duration "duration"
  150 dictionary: . "[" assocs "]"
  154 tuple: . "(" tuple.exps ")"
  155 literal-exp: . float-exp
  156            | . "angle"
  157            | . duration
  158            | . string
  159            | . "[" exps "]"
  160            | . dictionary
  161            | . tuple
  162 string: . "string"
  163       | . string "string"
  164 literal-exp: . "__HERE__"
  170 lvalue: . primary-exp "[" exps "]"
  171 literal-exp: . "this"
  172            | . "call"
  173 primary-exp: . literal-exp
  174            | . "(" exp ")"
  175            | . "(" error ")"
  176            | . primary-exp "**" primary-exp
  177 unary-exp: . primary-exp
  178          | . "--" lvalue
  179          | . "++" lvalue
  180          | . "+" unary-exp
  181          | . "-" unary-exp
  182          | . "!" unary-exp
  183          | . "compl" unary-exp
  184 bitor-exp: . unary-exp
  185          | . bitor-exp "+" bitor-exp
  186          | . bitor-exp "-" bitor-exp
  187          | . bitor-exp "*" bitor-exp
  188          | . bitor-exp "/" bitor-exp
  189          | . bitor-exp "%" bitor-exp
  190          | . bitor-exp "^" bitor-exp
  191          | . bitor-exp "<<" bitor-exp
  192          | . bitor-exp "bitand" bitor-exp
  193          | . bitor-exp "bitor" bitor-exp
  194          | . bitor-exp ">>" bitor-exp
  205 rel-exp: . bitor-exp rel-ops
  208 exp: . rel-exp
  209    | . exp "&&" exp
  210    | . exp "||" exp
  211    | . exp "in" exp
  212    | . exp "!" "in" exp
  216    | . "%unscope:" unsigned
  217 primary-exp: . "%exp:" unsigned
  218 lvalue: . "%lvalue:" unsigned
  219       | . "%id:" unsigned
  220       | . primary-exp "." "%id:" unsigned
  221 primary-exp: . lvalue "(" "%exps:" unsigned ")"

    "__HERE__"    shift, and go to state 7
    "break"       shift, and go to state 8
    "closure"     shift, and go to state 9
    "const"       shift, and go to state 10
    "continue"    shift, and go to state 11
    "freezeif"    shift, and go to state 12
    "function"    shift, and go to state 13
    "if"          shift, and go to state 14
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "return"      shift, and go to state 19
    "stopif"      shift, and go to state 20
    "switch"      shift, and go to state 21
    "throw"       shift, and go to state 22
    "timeout"     shift, and go to state 23
    "try"         shift, and go to state 24
    "var"         shift, and go to state 25
    "waituntil"   shift, and go to state 26
    "watch"       shift, and go to state 27
    "whenever"    shift, and go to state 28
    "&"           shift, and go to state 29
    "every"       shift, and go to state 30
    "for"         shift, and go to state 31
    "loop"        shift, and go to state 32
    "while"       shift, and go to state 33
    "at"          shift, and go to state 34
    "identifier"  shift, and go to state 35
    "class"       shift, and go to state 36
    "package"     shift, and go to state 37
    "enum"        shift, and go to state 38
    "external"    shift, and go to state 39
    "import"      shift, and go to state 40
    "--"          shift, and go to state 41
    "++"          shift, and go to state 42
    "do"          shift, and go to state 43
    "assert"      shift, and go to state 44
    "detach"      shift, and go to state 45
    "disown"      shift, and go to state 46
    "new"         shift, and go to state 47
    "angle"       shift, and go to state 48
    "duration"    shift, and go to state 49
    "float"       shift, and go to state 50
    "string"      shift, and go to state 51
    "call"        shift, and go to state 52
    "this"        shift, and go to state 53
    "!"           shift, and go to state 54
    "compl"       shift, and go to state 55
    "-"           shift, and go to state 56
    "+"           shift, and go to state 57
    "%unscope:"   shift, and go to state 58
    "%exp:"       shift, and go to state 59
    "%lvalue:"    shift, and go to state 60
    "%id:"        shift, and go to state 61

    $default  reduce using rule 21 (stmt.opt)

    stmt.opt     go to state 464
    stmt         go to state 237
    block        go to state 66
    exp          go to state 67
    routine      go to state 68
    primary-exp  go to state 69
    detach       go to state 70
    lvalue       go to state 71
    id           go to state 72
    bitor-exp    go to state 73
    new          go to state 74
    float-exp    go to state 75
    duration     go to state 76
    dictionary   go to state 77
    tuple        go to state 78
    literal-exp  go to state 79
    string       go to state 80
    unary-exp    go to state 81
    rel-exp      go to state 82


state 442

   23 stmt: . primary-exp ":" stmt
   24     | . exp
   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   37 exp: . "class" lvalue protos block
   38    | . "package" lvalue protos block
   43 stmt: . "enum" id "{" id.0 "}"
   47     | . "external" "identifier" "identifier"
   48     | . "external" "var" "identifier" "." "identifier" from "identifier"
   49     | . "external" event_or_function "(" unsigned ")" "identifier" "." "identifier" from "identifier"
   50     | . "import" lvalue
   51     | . exp "!" args.opt tilda.opt
   52 routine: . "closure"
   53        | . "function"
   54 stmt: . routine k1_id formals block
   55     | . id id formals block
   62 exp: . exp "=" exp
   63    | . exp "=" exp modifiers
   64    | . lvalue "+=" exp
   65    | . lvalue "-=" exp
   66    | . lvalue "*=" exp
   67    | . lvalue "/=" exp
   68    | . lvalue "^=" exp
   69    | . lvalue "%=" exp
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
   73 stmt: . "at" identifiers "(" exp tilda.opt ")" stmt onleave.opt
   73     | "at" identifiers "(" exp tilda.opt ")" . stmt onleave.opt
   74     | . "at" identifiers "(" event_match ")" stmt onleave.opt
   75     | . "every" "(" exp ")" stmt
   76     | . "if" "(" stmts ")" stmt else.opt
   77     | . "freezeif" "(" exp ")" stmt
   78     | . "stopif" "(" exp ")" stmt
   79     | . "switch" "(" exp ")" "{" cases default.opt "}"
   80     | . "timeout" "(" exp ")" stmt catch.opt else.opt finally.opt
   81     | . "return" exp.opt
   82     | . "break"
   83     | . "continue"
   84     | . "waituntil" "(" exp tilda.opt ")"
   85     | . "waituntil" "(" event_match ")"
   86     | . "whenever" "(" exp tilda.opt ")" stmt else.opt
   87     | . "whenever" "(" event_match ")" stmt else.opt
  108     | . "try" block catches.1 else.opt finally.opt
  109     | . "try" block "finally" block
  110     | . "throw" exp.opt
  111     | . "loop" stmt
  112     | . "for" "(" exp ")" stmt
  113     | . "for" "(" stmt.opt ";" exp ";" stmt.opt ")" stmt
  114     | . "for" "(" "var" "identifier" in_or_colon exp ")" stmt
  115     | . "while" "(" exp ")" stmt
  118 primary-exp: . block
  119            | . "do" "(" exp ")" block
  120 detach: . "detach"
  121       | . "disown"
  122 primary-exp: . "assert" "(" exp ")"
  123            | . "assert" "{" claims "}"
  124            | . detach "(" exp ")"
  125            | . detach block
  126            | . "isdef" "(" k1_id ")"
  127            | . "watch" "(" exp ")"
  128 lvalue: . id
  129       | . primary-exp "." id
  130       | . primary-exp "." "*"
  131 primary-exp: . "&" id
  132            | . primary-exp "." "&" id
  133 id: . "identifier"
  134 bitor-exp: . "var" bitor-exp
  135          | . "const" "var" bitor-exp
  136 primary-exp: . lvalue
  137            | . lvalue args
  138 new: . "new" "identifier" args.opt
  139 bitor-exp: . new
  140 id: . "new"
  141 primary-exp: . routine formals block
  142 float-exp: . "float"
  143 duration: . "duration"
  144         | . duration "duration"
  150 dictionary: . "[" assocs "]"
  154 tuple: . "(" tuple.exps ")"
  155 literal-exp: . float-exp
  156            | . "angle"
  157            | . duration
  158            | . string
  159            | . "[" exps "]"
  160            | . dictionary
  161            | . tuple
  162 string: . "string"
  163       | . string "string"
  164 literal-exp: . "__HERE__"
  170 lvalue: . primary-exp "[" exps "]"
  171 literal-exp: . "this"
  172            | . "call"
  173 primary-exp: . literal-exp
  174            | . "(" exp ")"
  175            | . "(" error ")"
  176            | . primary-exp "**" primary-exp
  177 unary-exp: . primary-exp
  178          | . "--" lvalue
  179          | . "++" lvalue
  180          | . "+" unary-exp
  181          | . "-" unary-exp
  182          | . "!" unary-exp
  183          | . "compl" unary-exp
  184 bitor-exp: . unary-exp
  185          | . bitor-exp "+" bitor-exp
  186          | . bitor-exp "-" bitor-exp
  187          | . bitor-exp "*" bitor-exp
  188          | . bitor-exp "/" bitor-exp
  189          | . bitor-exp "%" bitor-exp
  190          | . bitor-exp "^" bitor-exp
  191          | . bitor-exp "<<" bitor-exp
  192          | . bitor-exp "bitand" bitor-exp
  193          | . bitor-exp "bitor" bitor-exp
  194          | . bitor-exp ">>" bitor-exp
  205 rel-exp: . bitor-exp rel-ops
  208 exp: . rel-exp
  209    | . exp "&&" exp
  210    | . exp "||" exp
  211    | . exp "in" exp
  212    | . exp "!" "in" exp
  216    | . "%unscope:" unsigned
  217 primary-exp: . "%exp:" unsigned
  218 lvalue: . "%lvalue:" unsigned
  219       | . "%id:" unsigned
  220       | . primary-exp "." "%id:" unsigned
  221 primary-exp: . lvalue "(" "%exps:" unsigned ")"

    "__HERE__"    shift, and go to state 7
    "break"       shift, and go to state 8
    "closure"     shift, and go to state 9
    "const"       shift, and go to state 10
    "continue"    shift, and go to state 11
    "freezeif"    shift, and go to state 12
    "function"    shift, and go to state 13
    "if"          shift, and go to state 14
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "return"      shift, and go to state 19
    "stopif"      shift, and go to state 20
    "switch"      shift, and go to state 21
    "throw"       shift, and go to state 22
    "timeout"     shift, and go to state 23
    "try"         shift, and go to state 24
    "var"         shift, and go to state 25
    "waituntil"   shift, and go to state 26
    "watch"       shift, and go to state 27
    "whenever"    shift, and go to state 28
    "&"           shift, and go to state 29
    "every"       shift, and go to state 30
    "for"         shift, and go to state 31
    "loop"        shift, and go to state 32
    "while"       shift, and go to state 33
    "at"          shift, and go to state 34
    "identifier"  shift, and go to state 35
    "class"       shift, and go to state 36
    "package"     shift, and go to state 37
    "enum"        shift, and go to state 38
    "external"    shift, and go to state 39
    "import"      shift, and go to state 40
    "--"          shift, and go to state 41
    "++"          shift, and go to state 42
    "do"          shift, and go to state 43
    "assert"      shift, and go to state 44
    "detach"      shift, and go to state 45
    "disown"      shift, and go to state 46
    "new"         shift, and go to state 47
    "angle"       shift, and go to state 48
    "duration"    shift, and go to state 49
    "float"       shift, and go to state 50
    "string"      shift, and go to state 51
    "call"        shift, and go to state 52
    "this"        shift, and go to state 53
    "!"           shift, and go to state 54
    "compl"       shift, and go to state 55
    "-"           shift, and go to state 56
    "+"           shift, and go to state 57
    "%unscope:"   shift, and go to state 58
    "%exp:"       shift, and go to state 59
    "%lvalue:"    shift, and go to state 60
    "%id:"        shift, and go to state 61

    stmt         go to state 465
    block        go to state 66
    exp          go to state 67
    routine      go to state 68
    primary-exp  go to state 69
    detach       go to state 70
    lvalue       go to state 71
    id           go to state 72
    bitor-exp    go to state 73
    new          go to state 74
    float-exp    go to state 75
    duration     go to state 76
    dictionary   go to state 77
    tuple        go to state 78
    literal-exp  go to state 79
    string       go to state 80
    unary-exp    go to state 81
    rel-exp      go to state 82


state 443

   74 stmt: "at" identifiers "(" event_match ")" stmt . onleave.opt
   92 onleave.opt: .  ["end of command", "case", "catch", "default", "else", "finally", "}", ")", ",", ";", "&", "|"]
   93            | . "onleave" stmt

    "onleave"  shift, and go to state 466

    $default  reduce using rule 92 (onleave.opt)

    onleave.opt  go to state 467

    Conflict between rule 92 and token "onleave" resolved as shift (EMPTY < "onleave").


state 444

   34 protos.1: protos.1 "," proto .

    $default  reduce using rule 34 (protos.1)


state 445

   42 id.1: id.1 "," id .

    $default  reduce using rule 42 (id.1)


state 446

   44 from: "identifier" .

    $default  reduce using rule 44 (from)


state 447

   48 stmt: "external" "var" "identifier" "." "identifier" from . "identifier"

    "identifier"  shift, and go to state 468


state 448

   49 stmt: "external" event_or_function "(" unsigned ")" "identifier" . "." "identifier" from "identifier"

    "."  shift, and go to state 469


state 449

   59 modifier: "identifier" ":" exp .  ["end of command", "case", "catch", ":", "default", "else", "finally", "if", "{", "onleave", "}", "]", ")", "~", ",", ";", "&", "|", "identifier", "=>", "?"]
   62 exp: exp . "=" exp
   63    | exp . "=" exp modifiers
  209    | exp . "&&" exp
  210    | exp . "||" exp
  211    | exp . "in" exp
  212    | exp . "!" "in" exp

    "="   shift, and go to state 160
    "in"  shift, and go to state 161
    "!"   shift, and go to state 211
    "&&"  shift, and go to state 163
    "||"  shift, and go to state 164

    $default  reduce using rule 59 (modifier)

    Conflict between rule 59 and token "=" resolved as shift (":" < "=").
    Conflict between rule 59 and token "in" resolved as shift (":" < "in").
    Conflict between rule 59 and token "!" resolved as shift (":" < "!").
    Conflict between rule 59 and token "&&" resolved as shift (":" < "&&").
    Conflict between rule 59 and token "||" resolved as shift (":" < "||").


state 450

   62 exp: exp . "=" exp
   63    | exp . "=" exp modifiers
  209    | exp . "&&" exp
  210    | exp . "||" exp
  211    | exp . "in" exp
  212    | exp . "!" "in" exp
  236 typespec: . ":" exp
  237 typespec.opt: .  [")", ","]
  238             | . typespec
  240 formal: var.opt "identifier" "=" exp . typespec.opt

    "="   shift, and go to state 160
    ":"   shift, and go to state 425
    "in"  shift, and go to state 161
    "!"   shift, and go to state 211
    "&&"  shift, and go to state 163
    "||"  shift, and go to state 164

    $default  reduce using rule 237 (typespec.opt)

    typespec      go to state 427
    typespec.opt  go to state 470


state 451

   62 exp: exp . "=" exp
   63    | exp . "=" exp modifiers
  209    | exp . "&&" exp
  210    | exp . "||" exp
  211    | exp . "in" exp
  212    | exp . "!" "in" exp
  236 typespec: ":" exp .  [")", ","]

    "="   shift, and go to state 160
    "in"  shift, and go to state 161
    "!"   shift, and go to state 211
    "&&"  shift, and go to state 163
    "||"  shift, and go to state 164

    $default  reduce using rule 236 (typespec)


state 452

  241 formal: var.opt "identifier" "[" "]" .

    $default  reduce using rule 241 (formal)


state 453

   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   37 exp: . "class" lvalue protos block
   38    | . "package" lvalue protos block
   52 routine: . "closure"
   53        | . "function"
   62 exp: . exp "=" exp
   63    | . exp "=" exp modifiers
   64    | . lvalue "+=" exp
   65    | . lvalue "-=" exp
   66    | . lvalue "*=" exp
   67    | . lvalue "/=" exp
   68    | . lvalue "^=" exp
   69    | . lvalue "%=" exp
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
   96 case: "case" . match ":" stmts
   99 match: . exp
  100      | . exp "if" exp
  118 primary-exp: . block
  119            | . "do" "(" exp ")" block
  120 detach: . "detach"
  121       | . "disown"
  122 primary-exp: . "assert" "(" exp ")"
  123            | . "assert" "{" claims "}"
  124            | . detach "(" exp ")"
  125            | . detach block
  126            | . "isdef" "(" k1_id ")"
  127            | . "watch" "(" exp ")"
  128 lvalue: . id
  129       | . primary-exp "." id
  130       | . primary-exp "." "*"
  131 primary-exp: . "&" id
  132            | . primary-exp "." "&" id
  133 id: . "identifier"
  134 bitor-exp: . "var" bitor-exp
  135          | . "const" "var" bitor-exp
  136 primary-exp: . lvalue
  137            | . lvalue args
  138 new: . "new" "identifier" args.opt
  139 bitor-exp: . new
  140 id: . "new"
  141 primary-exp: . routine formals block
  142 float-exp: . "float"
  143 duration: . "duration"
  144         | . duration "duration"
  150 dictionary: . "[" assocs "]"
  154 tuple: . "(" tuple.exps ")"
  155 literal-exp: . float-exp
  156            | . "angle"
  157            | . duration
  158            | . string
  159            | . "[" exps "]"
  160            | . dictionary
  161            | . tuple
  162 string: . "string"
  163       | . string "string"
  164 literal-exp: . "__HERE__"
  170 lvalue: . primary-exp "[" exps "]"
  171 literal-exp: . "this"
  172            | . "call"
  173 primary-exp: . literal-exp
  174            | . "(" exp ")"
  175            | . "(" error ")"
  176            | . primary-exp "**" primary-exp
  177 unary-exp: . primary-exp
  178          | . "--" lvalue
  179          | . "++" lvalue
  180          | . "+" unary-exp
  181          | . "-" unary-exp
  182          | . "!" unary-exp
  183          | . "compl" unary-exp
  184 bitor-exp: . unary-exp
  185          | . bitor-exp "+" bitor-exp
  186          | . bitor-exp "-" bitor-exp
  187          | . bitor-exp "*" bitor-exp
  188          | . bitor-exp "/" bitor-exp
  189          | . bitor-exp "%" bitor-exp
  190          | . bitor-exp "^" bitor-exp
  191          | . bitor-exp "<<" bitor-exp
  192          | . bitor-exp "bitand" bitor-exp
  193          | . bitor-exp "bitor" bitor-exp
  194          | . bitor-exp ">>" bitor-exp
  205 rel-exp: . bitor-exp rel-ops
  208 exp: . rel-exp
  209    | . exp "&&" exp
  210    | . exp "||" exp
  211    | . exp "in" exp
  212    | . exp "!" "in" exp
  216    | . "%unscope:" unsigned
  217 primary-exp: . "%exp:" unsigned
  218 lvalue: . "%lvalue:" unsigned
  219       | . "%id:" unsigned
  220       | . primary-exp "." "%id:" unsigned
  221 primary-exp: . lvalue "(" "%exps:" unsigned ")"

    "__HERE__"    shift, and go to state 7
    "closure"     shift, and go to state 9
    "const"       shift, and go to state 10
    "function"    shift, and go to state 13
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "var"         shift, and go to state 25
    "watch"       shift, and go to state 27
    "&"           shift, and go to state 29
    "identifier"  shift, and go to state 35
    "class"       shift, and go to state 36
    "package"     shift, and go to state 37
    "--"          shift, and go to state 41
    "++"          shift, and go to state 42
    "do"          shift, and go to state 43
    "assert"      shift, and go to state 44
    "detach"      shift, and go to state 45
    "disown"      shift, and go to state 46
    "new"         shift, and go to state 47
    "angle"       shift, and go to state 48
    "duration"    shift, and go to state 49
    "float"       shift, and go to state 50
    "string"      shift, and go to state 51
    "call"        shift, and go to state 52
    "this"        shift, and go to state 53
    "!"           shift, and go to state 54
    "compl"       shift, and go to state 55
    "-"           shift, and go to state 56
    "+"           shift, and go to state 57
    "%unscope:"   shift, and go to state 58
    "%exp:"       shift, and go to state 59
    "%lvalue:"    shift, and go to state 60
    "%id:"        shift, and go to state 61

    block        go to state 66
    exp          go to state 392
    routine      go to state 99
    primary-exp  go to state 100
    match        go to state 471
    detach       go to state 70
    lvalue       go to state 71
    id           go to state 101
    bitor-exp    go to state 73
    new          go to state 74
    float-exp    go to state 75
    duration     go to state 76
    dictionary   go to state 77
    tuple        go to state 78
    literal-exp  go to state 79
    string       go to state 80
    unary-exp    go to state 81
    rel-exp      go to state 82


state 454

   89 default.opt: "default" . ":" stmts

    ":"  shift, and go to state 472


state 455

   79 stmt: "switch" "(" exp ")" "{" cases default.opt . "}"

    "}"  shift, and go to state 473


state 456

   95 cases: cases case .

    $default  reduce using rule 95 (cases)


state 457

  105 catch.opt: "catch" block .

    $default  reduce using rule 105 (catch.opt)


state 458

   80 stmt: "timeout" "(" exp ")" stmt catch.opt else.opt . finally.opt
  106 finally.opt: .  ["end of command", "case", "catch", "default", "else", "onleave", "}", ")", ",", ";", "&", "|"]
  107            | . "finally" block

    "finally"  shift, and go to state 396

    $default  reduce using rule 106 (finally.opt)

    finally.opt  go to state 474

    Conflict between rule 106 and token "finally" resolved as shift (EMPTY < "finally").


state 459

   62 exp: exp . "=" exp
   63    | exp . "=" exp modifiers
  100 match: exp "if" exp .  [":", ")"]
  209 exp: exp . "&&" exp
  210    | exp . "||" exp
  211    | exp . "in" exp
  212    | exp . "!" "in" exp

    "="   shift, and go to state 160
    "in"  shift, and go to state 161
    "!"   shift, and go to state 211
    "&&"  shift, and go to state 163
    "||"  shift, and go to state 164

    $default  reduce using rule 100 (match)


state 460

   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   37 exp: . "class" lvalue protos block
   38    | . "package" lvalue protos block
   52 routine: . "closure"
   53        | . "function"
   62 exp: . exp "=" exp
   63    | . exp "=" exp modifiers
   64    | . lvalue "+=" exp
   65    | . lvalue "-=" exp
   66    | . lvalue "*=" exp
   67    | . lvalue "/=" exp
   68    | . lvalue "^=" exp
   69    | . lvalue "%=" exp
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
  118            | . block
  119            | . "do" "(" exp ")" block
  120 detach: . "detach"
  121       | . "disown"
  122 primary-exp: . "assert" "(" exp ")"
  123            | . "assert" "{" claims "}"
  124            | . detach "(" exp ")"
  125            | . detach block
  126            | . "isdef" "(" k1_id ")"
  127            | . "watch" "(" exp ")"
  128 lvalue: . id
  129       | . primary-exp "." id
  130       | . primary-exp "." "*"
  131 primary-exp: . "&" id
  132            | . primary-exp "." "&" id
  133 id: . "identifier"
  134 bitor-exp: . "var" bitor-exp
  135          | . "const" "var" bitor-exp
  136 primary-exp: . lvalue
  137            | . lvalue args
  138 new: . "new" "identifier" args.opt
  139 bitor-exp: . new
  140 id: . "new"
  141 primary-exp: . routine formals block
  142 float-exp: . "float"
  143 duration: . "duration"
  144         | . duration "duration"
  150 dictionary: . "[" assocs "]"
  154 tuple: . "(" tuple.exps ")"
  155 literal-exp: . float-exp
  156            | . "angle"
  157            | . duration
  158            | . string
  159            | . "[" exps "]"
  160            | . dictionary
  161            | . tuple
  162 string: . "string"
  163       | . string "string"
  164 literal-exp: . "__HERE__"
  167 guard.opt: "if" . exp
  170 lvalue: . primary-exp "[" exps "]"
  171 literal-exp: . "this"
  172            | . "call"
  173 primary-exp: . literal-exp
  174            | . "(" exp ")"
  175            | . "(" error ")"
  176            | . primary-exp "**" primary-exp
  177 unary-exp: . primary-exp
  178          | . "--" lvalue
  179          | . "++" lvalue
  180          | . "+" unary-exp
  181          | . "-" unary-exp
  182          | . "!" unary-exp
  183          | . "compl" unary-exp
  184 bitor-exp: . unary-exp
  185          | . bitor-exp "+" bitor-exp
  186          | . bitor-exp "-" bitor-exp
  187          | . bitor-exp "*" bitor-exp
  188          | . bitor-exp "/" bitor-exp
  189          | . bitor-exp "%" bitor-exp
  190          | . bitor-exp "^" bitor-exp
  191          | . bitor-exp "<<" bitor-exp
  192          | . bitor-exp "bitand" bitor-exp
  193          | . bitor-exp "bitor" bitor-exp
  194          | . bitor-exp ">>" bitor-exp
  205 rel-exp: . bitor-exp rel-ops
  208 exp: . rel-exp
  209    | . exp "&&" exp
  210    | . exp "||" exp
  211    | . exp "in" exp
  212    | . exp "!" "in" exp
  216    | . "%unscope:" unsigned
  217 primary-exp: . "%exp:" unsigned
  218 lvalue: . "%lvalue:" unsigned
  219       | . "%id:" unsigned
  220       | . primary-exp "." "%id:" unsigned
  221 primary-exp: . lvalue "(" "%exps:" unsigned ")"

    "__HERE__"    shift, and go to state 7
    "closure"     shift, and go to state 9
    "const"       shift, and go to state 10
    "function"    shift, and go to state 13
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "var"         shift, and go to state 25
    "watch"       shift, and go to state 27
    "&"           shift, and go to state 29
    "identifier"  shift, and go to state 35
    "class"       shift, and go to state 36
    "package"     shift, and go to state 37
    "--"          shift, and go to state 41
    "++"          shift, and go to state 42
    "do"          shift, and go to state 43
    "assert"      shift, and go to state 44
    "detach"      shift, and go to state 45
    "disown"      shift, and go to state 46
    "new"         shift, and go to state 47
    "angle"       shift, and go to state 48
    "duration"    shift, and go to state 49
    "float"       shift, and go to state 50
    "string"      shift, and go to state 51
    "call"        shift, and go to state 52
    "this"        shift, and go to state 53
    "!"           shift, and go to state 54
    "compl"       shift, and go to state 55
    "-"           shift, and go to state 56
    "+"           shift, and go to state 57
    "%unscope:"   shift, and go to state 58
    "%exp:"       shift, and go to state 59
    "%lvalue:"    shift, and go to state 60
    "%id:"        shift, and go to state 61

    block        go to state 66
    exp          go to state 475
    routine      go to state 99
    primary-exp  go to state 100
    detach       go to state 70
    lvalue       go to state 71
    id           go to state 101
    bitor-exp    go to state 73
    new          go to state 74
    float-exp    go to state 75
    duration     go to state 76
    dictionary   go to state 77
    tuple        go to state 78
    literal-exp  go to state 79
    string       go to state 80
    unary-exp    go to state 81
    rel-exp      go to state 82


state 461

  165 event_match: exp "?" args.opt tilda.opt guard.opt .

    $default  reduce using rule 165 (event_match)


state 462

   86 stmt: "whenever" "(" exp tilda.opt ")" stmt else.opt .

    $default  reduce using rule 86 (stmt)


state 463

   23 stmt: . primary-exp ":" stmt
   24     | . exp
   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   37 exp: . "class" lvalue protos block
   38    | . "package" lvalue protos block
   43 stmt: . "enum" id "{" id.0 "}"
   47     | . "external" "identifier" "identifier"
   48     | . "external" "var" "identifier" "." "identifier" from "identifier"
   49     | . "external" event_or_function "(" unsigned ")" "identifier" "." "identifier" from "identifier"
   50     | . "import" lvalue
   51     | . exp "!" args.opt tilda.opt
   52 routine: . "closure"
   53        | . "function"
   54 stmt: . routine k1_id formals block
   55     | . id id formals block
   62 exp: . exp "=" exp
   63    | . exp "=" exp modifiers
   64    | . lvalue "+=" exp
   65    | . lvalue "-=" exp
   66    | . lvalue "*=" exp
   67    | . lvalue "/=" exp
   68    | . lvalue "^=" exp
   69    | . lvalue "%=" exp
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
   73 stmt: . "at" identifiers "(" exp tilda.opt ")" stmt onleave.opt
   74     | . "at" identifiers "(" event_match ")" stmt onleave.opt
   75     | . "every" "(" exp ")" stmt
   76     | . "if" "(" stmts ")" stmt else.opt
   77     | . "freezeif" "(" exp ")" stmt
   78     | . "stopif" "(" exp ")" stmt
   79     | . "switch" "(" exp ")" "{" cases default.opt "}"
   80     | . "timeout" "(" exp ")" stmt catch.opt else.opt finally.opt
   81     | . "return" exp.opt
   82     | . "break"
   83     | . "continue"
   84     | . "waituntil" "(" exp tilda.opt ")"
   85     | . "waituntil" "(" event_match ")"
   86     | . "whenever" "(" exp tilda.opt ")" stmt else.opt
   87     | . "whenever" "(" event_match ")" stmt else.opt
  108     | . "try" block catches.1 else.opt finally.opt
  109     | . "try" block "finally" block
  110     | . "throw" exp.opt
  111     | . "loop" stmt
  112     | . "for" "(" exp ")" stmt
  113     | . "for" "(" stmt.opt ";" exp ";" stmt.opt ")" stmt
  114     | . "for" "(" "var" "identifier" in_or_colon exp ")" stmt
  114     | "for" "(" "var" "identifier" in_or_colon exp ")" . stmt
  115     | . "while" "(" exp ")" stmt
  118 primary-exp: . block
  119            | . "do" "(" exp ")" block
  120 detach: . "detach"
  121       | . "disown"
  122 primary-exp: . "assert" "(" exp ")"
  123            | . "assert" "{" claims "}"
  124            | . detach "(" exp ")"
  125            | . detach block
  126            | . "isdef" "(" k1_id ")"
  127            | . "watch" "(" exp ")"
  128 lvalue: . id
  129       | . primary-exp "." id
  130       | . primary-exp "." "*"
  131 primary-exp: . "&" id
  132            | . primary-exp "." "&" id
  133 id: . "identifier"
  134 bitor-exp: . "var" bitor-exp
  135          | . "const" "var" bitor-exp
  136 primary-exp: . lvalue
  137            | . lvalue args
  138 new: . "new" "identifier" args.opt
  139 bitor-exp: . new
  140 id: . "new"
  141 primary-exp: . routine formals block
  142 float-exp: . "float"
  143 duration: . "duration"
  144         | . duration "duration"
  150 dictionary: . "[" assocs "]"
  154 tuple: . "(" tuple.exps ")"
  155 literal-exp: . float-exp
  156            | . "angle"
  157            | . duration
  158            | . string
  159            | . "[" exps "]"
  160            | . dictionary
  161            | . tuple
  162 string: . "string"
  163       | . string "string"
  164 literal-exp: . "__HERE__"
  170 lvalue: . primary-exp "[" exps "]"
  171 literal-exp: . "this"
  172            | . "call"
  173 primary-exp: . literal-exp
  174            | . "(" exp ")"
  175            | . "(" error ")"
  176            | . primary-exp "**" primary-exp
  177 unary-exp: . primary-exp
  178          | . "--" lvalue
  179          | . "++" lvalue
  180          | . "+" unary-exp
  181          | . "-" unary-exp
  182          | . "!" unary-exp
  183          | . "compl" unary-exp
  184 bitor-exp: . unary-exp
  185          | . bitor-exp "+" bitor-exp
  186          | . bitor-exp "-" bitor-exp
  187          | . bitor-exp "*" bitor-exp
  188          | . bitor-exp "/" bitor-exp
  189          | . bitor-exp "%" bitor-exp
  190          | . bitor-exp "^" bitor-exp
  191          | . bitor-exp "<<" bitor-exp
  192          | . bitor-exp "bitand" bitor-exp
  193          | . bitor-exp "bitor" bitor-exp
  194          | . bitor-exp ">>" bitor-exp
  205 rel-exp: . bitor-exp rel-ops
  208 exp: . rel-exp
  209    | . exp "&&" exp
  210    | . exp "||" exp
  211    | . exp "in" exp
  212    | . exp "!" "in" exp
  216    | . "%unscope:" unsigned
  217 primary-exp: . "%exp:" unsigned
  218 lvalue: . "%lvalue:" unsigned
  219       | . "%id:" unsigned
  220       | . primary-exp "." "%id:" unsigned
  221 primary-exp: . lvalue "(" "%exps:" unsigned ")"

    "__HERE__"    shift, and go to state 7
    "break"       shift, and go to state 8
    "closure"     shift, and go to state 9
    "const"       shift, and go to state 10
    "continue"    shift, and go to state 11
    "freezeif"    shift, and go to state 12
    "function"    shift, and go to state 13
    "if"          shift, and go to state 14
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "return"      shift, and go to state 19
    "stopif"      shift, and go to state 20
    "switch"      shift, and go to state 21
    "throw"       shift, and go to state 22
    "timeout"     shift, and go to state 23
    "try"         shift, and go to state 24
    "var"         shift, and go to state 25
    "waituntil"   shift, and go to state 26
    "watch"       shift, and go to state 27
    "whenever"    shift, and go to state 28
    "&"           shift, and go to state 29
    "every"       shift, and go to state 30
    "for"         shift, and go to state 31
    "loop"        shift, and go to state 32
    "while"       shift, and go to state 33
    "at"          shift, and go to state 34
    "identifier"  shift, and go to state 35
    "class"       shift, and go to state 36
    "package"     shift, and go to state 37
    "enum"        shift, and go to state 38
    "external"    shift, and go to state 39
    "import"      shift, and go to state 40
    "--"          shift, and go to state 41
    "++"          shift, and go to state 42
    "do"          shift, and go to state 43
    "assert"      shift, and go to state 44
    "detach"      shift, and go to state 45
    "disown"      shift, and go to state 46
    "new"         shift, and go to state 47
    "angle"       shift, and go to state 48
    "duration"    shift, and go to state 49
    "float"       shift, and go to state 50
    "string"      shift, and go to state 51
    "call"        shift, and go to state 52
    "this"        shift, and go to state 53
    "!"           shift, and go to state 54
    "compl"       shift, and go to state 55
    "-"           shift, and go to state 56
    "+"           shift, and go to state 57
    "%unscope:"   shift, and go to state 58
    "%exp:"       shift, and go to state 59
    "%lvalue:"    shift, and go to state 60
    "%id:"        shift, and go to state 61

    stmt         go to state 476
    block        go to state 66
    exp          go to state 67
    routine      go to state 68
    primary-exp  go to state 69
    detach       go to state 70
    lvalue       go to state 71
    id           go to state 72
    bitor-exp    go to state 73
    new          go to state 74
    float-exp    go to state 75
    duration     go to state 76
    dictionary   go to state 77
    tuple        go to state 78
    literal-exp  go to state 79
    string       go to state 80
    unary-exp    go to state 81
    rel-exp      go to state 82


state 464

  113 stmt: "for" "(" stmt.opt ";" exp ";" stmt.opt . ")" stmt

    ")"  shift, and go to state 477


state 465

   73 stmt: "at" identifiers "(" exp tilda.opt ")" stmt . onleave.opt
   92 onleave.opt: .  ["end of command", "case", "catch", "default", "else", "finally", "}", ")", ",", ";", "&", "|"]
   93            | . "onleave" stmt

    "onleave"  shift, and go to state 466

    $default  reduce using rule 92 (onleave.opt)

    onleave.opt  go to state 478

    Conflict between rule 92 and token "onleave" resolved as shift (EMPTY < "onleave").


state 466

   23 stmt: . primary-exp ":" stmt
   24     | . exp
   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   37 exp: . "class" lvalue protos block
   38    | . "package" lvalue protos block
   43 stmt: . "enum" id "{" id.0 "}"
   47     | . "external" "identifier" "identifier"
   48     | . "external" "var" "identifier" "." "identifier" from "identifier"
   49     | . "external" event_or_function "(" unsigned ")" "identifier" "." "identifier" from "identifier"
   50     | . "import" lvalue
   51     | . exp "!" args.opt tilda.opt
   52 routine: . "closure"
   53        | . "function"
   54 stmt: . routine k1_id formals block
   55     | . id id formals block
   62 exp: . exp "=" exp
   63    | . exp "=" exp modifiers
   64    | . lvalue "+=" exp
   65    | . lvalue "-=" exp
   66    | . lvalue "*=" exp
   67    | . lvalue "/=" exp
   68    | . lvalue "^=" exp
   69    | . lvalue "%=" exp
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
   73 stmt: . "at" identifiers "(" exp tilda.opt ")" stmt onleave.opt
   74     | . "at" identifiers "(" event_match ")" stmt onleave.opt
   75     | . "every" "(" exp ")" stmt
   76     | . "if" "(" stmts ")" stmt else.opt
   77     | . "freezeif" "(" exp ")" stmt
   78     | . "stopif" "(" exp ")" stmt
   79     | . "switch" "(" exp ")" "{" cases default.opt "}"
   80     | . "timeout" "(" exp ")" stmt catch.opt else.opt finally.opt
   81     | . "return" exp.opt
   82     | . "break"
   83     | . "continue"
   84     | . "waituntil" "(" exp tilda.opt ")"
   85     | . "waituntil" "(" event_match ")"
   86     | . "whenever" "(" exp tilda.opt ")" stmt else.opt
   87     | . "whenever" "(" event_match ")" stmt else.opt
   93 onleave.opt: "onleave" . stmt
  108 stmt: . "try" block catches.1 else.opt finally.opt
  109     | . "try" block "finally" block
  110     | . "throw" exp.opt
  111     | . "loop" stmt
  112     | . "for" "(" exp ")" stmt
  113     | . "for" "(" stmt.opt ";" exp ";" stmt.opt ")" stmt
  114     | . "for" "(" "var" "identifier" in_or_colon exp ")" stmt
  115     | . "while" "(" exp ")" stmt
  118 primary-exp: . block
  119            | . "do" "(" exp ")" block
  120 detach: . "detach"
  121       | . "disown"
  122 primary-exp: . "assert" "(" exp ")"
  123            | . "assert" "{" claims "}"
  124            | . detach "(" exp ")"
  125            | . detach block
  126            | . "isdef" "(" k1_id ")"
  127            | . "watch" "(" exp ")"
  128 lvalue: . id
  129       | . primary-exp "." id
  130       | . primary-exp "." "*"
  131 primary-exp: . "&" id
  132            | . primary-exp "." "&" id
  133 id: . "identifier"
  134 bitor-exp: . "var" bitor-exp
  135          | . "const" "var" bitor-exp
  136 primary-exp: . lvalue
  137            | . lvalue args
  138 new: . "new" "identifier" args.opt
  139 bitor-exp: . new
  140 id: . "new"
  141 primary-exp: . routine formals block
  142 float-exp: . "float"
  143 duration: . "duration"
  144         | . duration "duration"
  150 dictionary: . "[" assocs "]"
  154 tuple: . "(" tuple.exps ")"
  155 literal-exp: . float-exp
  156            | . "angle"
  157            | . duration
  158            | . string
  159            | . "[" exps "]"
  160            | . dictionary
  161            | . tuple
  162 string: . "string"
  163       | . string "string"
  164 literal-exp: . "__HERE__"
  170 lvalue: . primary-exp "[" exps "]"
  171 literal-exp: . "this"
  172            | . "call"
  173 primary-exp: . literal-exp
  174            | . "(" exp ")"
  175            | . "(" error ")"
  176            | . primary-exp "**" primary-exp
  177 unary-exp: . primary-exp
  178          | . "--" lvalue
  179          | . "++" lvalue
  180          | . "+" unary-exp
  181          | . "-" unary-exp
  182          | . "!" unary-exp
  183          | . "compl" unary-exp
  184 bitor-exp: . unary-exp
  185          | . bitor-exp "+" bitor-exp
  186          | . bitor-exp "-" bitor-exp
  187          | . bitor-exp "*" bitor-exp
  188          | . bitor-exp "/" bitor-exp
  189          | . bitor-exp "%" bitor-exp
  190          | . bitor-exp "^" bitor-exp
  191          | . bitor-exp "<<" bitor-exp
  192          | . bitor-exp "bitand" bitor-exp
  193          | . bitor-exp "bitor" bitor-exp
  194          | . bitor-exp ">>" bitor-exp
  205 rel-exp: . bitor-exp rel-ops
  208 exp: . rel-exp
  209    | . exp "&&" exp
  210    | . exp "||" exp
  211    | . exp "in" exp
  212    | . exp "!" "in" exp
  216    | . "%unscope:" unsigned
  217 primary-exp: . "%exp:" unsigned
  218 lvalue: . "%lvalue:" unsigned
  219       | . "%id:" unsigned
  220       | . primary-exp "." "%id:" unsigned
  221 primary-exp: . lvalue "(" "%exps:" unsigned ")"

    "__HERE__"    shift, and go to state 7
    "break"       shift, and go to state 8
    "closure"     shift, and go to state 9
    "const"       shift, and go to state 10
    "continue"    shift, and go to state 11
    "freezeif"    shift, and go to state 12
    "function"    shift, and go to state 13
    "if"          shift, and go to state 14
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "return"      shift, and go to state 19
    "stopif"      shift, and go to state 20
    "switch"      shift, and go to state 21
    "throw"       shift, and go to state 22
    "timeout"     shift, and go to state 23
    "try"         shift, and go to state 24
    "var"         shift, and go to state 25
    "waituntil"   shift, and go to state 26
    "watch"       shift, and go to state 27
    "whenever"    shift, and go to state 28
    "&"           shift, and go to state 29
    "every"       shift, and go to state 30
    "for"         shift, and go to state 31
    "loop"        shift, and go to state 32
    "while"       shift, and go to state 33
    "at"          shift, and go to state 34
    "identifier"  shift, and go to state 35
    "class"       shift, and go to state 36
    "package"     shift, and go to state 37
    "enum"        shift, and go to state 38
    "external"    shift, and go to state 39
    "import"      shift, and go to state 40
    "--"          shift, and go to state 41
    "++"          shift, and go to state 42
    "do"          shift, and go to state 43
    "assert"      shift, and go to state 44
    "detach"      shift, and go to state 45
    "disown"      shift, and go to state 46
    "new"         shift, and go to state 47
    "angle"       shift, and go to state 48
    "duration"    shift, and go to state 49
    "float"       shift, and go to state 50
    "string"      shift, and go to state 51
    "call"        shift, and go to state 52
    "this"        shift, and go to state 53
    "!"           shift, and go to state 54
    "compl"       shift, and go to state 55
    "-"           shift, and go to state 56
    "+"           shift, and go to state 57
    "%unscope:"   shift, and go to state 58
    "%exp:"       shift, and go to state 59
    "%lvalue:"    shift, and go to state 60
    "%id:"        shift, and go to state 61

    stmt         go to state 479
    block        go to state 66
    exp          go to state 67
    routine      go to state 68
    primary-exp  go to state 69
    detach       go to state 70
    lvalue       go to state 71
    id           go to state 72
    bitor-exp    go to state 73
    new          go to state 74
    float-exp    go to state 75
    duration     go to state 76
    dictionary   go to state 77
    tuple        go to state 78
    literal-exp  go to state 79
    string       go to state 80
    unary-exp    go to state 81
    rel-exp      go to state 82


state 467

   74 stmt: "at" identifiers "(" event_match ")" stmt onleave.opt .

    $default  reduce using rule 74 (stmt)


state 468

   48 stmt: "external" "var" "identifier" "." "identifier" from "identifier" .

    $default  reduce using rule 48 (stmt)


state 469

   49 stmt: "external" event_or_function "(" unsigned ")" "identifier" "." . "identifier" from "identifier"

    "identifier"  shift, and go to state 480


state 470

  240 formal: var.opt "identifier" "=" exp typespec.opt .

    $default  reduce using rule 240 (formal)


state 471

   96 case: "case" match . ":" stmts

    ":"  shift, and go to state 481


state 472

   12 stmts: . cstmt.opt
   13      | . stmts ";" cstmt.opt
   14      | . stmts "," cstmt.opt
   15 cstmt.opt: .  ["}", ",", ";"]
   16          | . cstmt
   17          | . cstmt "|"
   18 cstmt: . stmt
   19      | . cstmt "|" cstmt
   20      | . cstmt "&" cstmt
   23 stmt: . primary-exp ":" stmt
   24     | . exp
   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   37 exp: . "class" lvalue protos block
   38    | . "package" lvalue protos block
   43 stmt: . "enum" id "{" id.0 "}"
   47     | . "external" "identifier" "identifier"
   48     | . "external" "var" "identifier" "." "identifier" from "identifier"
   49     | . "external" event_or_function "(" unsigned ")" "identifier" "." "identifier" from "identifier"
   50     | . "import" lvalue
   51     | . exp "!" args.opt tilda.opt
   52 routine: . "closure"
   53        | . "function"
   54 stmt: . routine k1_id formals block
   55     | . id id formals block
   62 exp: . exp "=" exp
   63    | . exp "=" exp modifiers
   64    | . lvalue "+=" exp
   65    | . lvalue "-=" exp
   66    | . lvalue "*=" exp
   67    | . lvalue "/=" exp
   68    | . lvalue "^=" exp
   69    | . lvalue "%=" exp
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
   73 stmt: . "at" identifiers "(" exp tilda.opt ")" stmt onleave.opt
   74     | . "at" identifiers "(" event_match ")" stmt onleave.opt
   75     | . "every" "(" exp ")" stmt
   76     | . "if" "(" stmts ")" stmt else.opt
   77     | . "freezeif" "(" exp ")" stmt
   78     | . "stopif" "(" exp ")" stmt
   79     | . "switch" "(" exp ")" "{" cases default.opt "}"
   80     | . "timeout" "(" exp ")" stmt catch.opt else.opt finally.opt
   81     | . "return" exp.opt
   82     | . "break"
   83     | . "continue"
   84     | . "waituntil" "(" exp tilda.opt ")"
   85     | . "waituntil" "(" event_match ")"
   86     | . "whenever" "(" exp tilda.opt ")" stmt else.opt
   87     | . "whenever" "(" event_match ")" stmt else.opt
   89 default.opt: "default" ":" . stmts
  108 stmt: . "try" block catches.1 else.opt finally.opt
  109     | . "try" block "finally" block
  110     | . "throw" exp.opt
  111     | . "loop" stmt
  112     | . "for" "(" exp ")" stmt
  113     | . "for" "(" stmt.opt ";" exp ";" stmt.opt ")" stmt
  114     | . "for" "(" "var" "identifier" in_or_colon exp ")" stmt
  115     | . "while" "(" exp ")" stmt
  118 primary-exp: . block
  119            | . "do" "(" exp ")" block
  120 detach: . "detach"
  121       | . "disown"
  122 primary-exp: . "assert" "(" exp ")"
  123            | . "assert" "{" claims "}"
  124            | . detach "(" exp ")"
  125            | . detach block
  126            | . "isdef" "(" k1_id ")"
  127            | . "watch" "(" exp ")"
  128 lvalue: . id
  129       | . primary-exp "." id
  130       | . primary-exp "." "*"
  131 primary-exp: . "&" id
  132            | . primary-exp "." "&" id
  133 id: . "identifier"
  134 bitor-exp: . "var" bitor-exp
  135          | . "const" "var" bitor-exp
  136 primary-exp: . lvalue
  137            | . lvalue args
  138 new: . "new" "identifier" args.opt
  139 bitor-exp: . new
  140 id: . "new"
  141 primary-exp: . routine formals block
  142 float-exp: . "float"
  143 duration: . "duration"
  144         | . duration "duration"
  150 dictionary: . "[" assocs "]"
  154 tuple: . "(" tuple.exps ")"
  155 literal-exp: . float-exp
  156            | . "angle"
  157            | . duration
  158            | . string
  159            | . "[" exps "]"
  160            | . dictionary
  161            | . tuple
  162 string: . "string"
  163       | . string "string"
  164 literal-exp: . "__HERE__"
  170 lvalue: . primary-exp "[" exps "]"
  171 literal-exp: . "this"
  172            | . "call"
  173 primary-exp: . literal-exp
  174            | . "(" exp ")"
  175            | . "(" error ")"
  176            | . primary-exp "**" primary-exp
  177 unary-exp: . primary-exp
  178          | . "--" lvalue
  179          | . "++" lvalue
  180          | . "+" unary-exp
  181          | . "-" unary-exp
  182          | . "!" unary-exp
  183          | . "compl" unary-exp
  184 bitor-exp: . unary-exp
  185          | . bitor-exp "+" bitor-exp
  186          | . bitor-exp "-" bitor-exp
  187          | . bitor-exp "*" bitor-exp
  188          | . bitor-exp "/" bitor-exp
  189          | . bitor-exp "%" bitor-exp
  190          | . bitor-exp "^" bitor-exp
  191          | . bitor-exp "<<" bitor-exp
  192          | . bitor-exp "bitand" bitor-exp
  193          | . bitor-exp "bitor" bitor-exp
  194          | . bitor-exp ">>" bitor-exp
  205 rel-exp: . bitor-exp rel-ops
  208 exp: . rel-exp
  209    | . exp "&&" exp
  210    | . exp "||" exp
  211    | . exp "in" exp
  212    | . exp "!" "in" exp
  216    | . "%unscope:" unsigned
  217 primary-exp: . "%exp:" unsigned
  218 lvalue: . "%lvalue:" unsigned
  219       | . "%id:" unsigned
  220       | . primary-exp "." "%id:" unsigned
  221 primary-exp: . lvalue "(" "%exps:" unsigned ")"

    "__HERE__"    shift, and go to state 7
    "break"       shift, and go to state 8
    "closure"     shift, and go to state 9
    "const"       shift, and go to state 10
    "continue"    shift, and go to state 11
    "freezeif"    shift, and go to state 12
    "function"    shift, and go to state 13
    "if"          shift, and go to state 14
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "return"      shift, and go to state 19
    "stopif"      shift, and go to state 20
    "switch"      shift, and go to state 21
    "throw"       shift, and go to state 22
    "timeout"     shift, and go to state 23
    "try"         shift, and go to state 24
    "var"         shift, and go to state 25
    "waituntil"   shift, and go to state 26
    "watch"       shift, and go to state 27
    "whenever"    shift, and go to state 28
    "&"           shift, and go to state 29
    "every"       shift, and go to state 30
    "for"         shift, and go to state 31
    "loop"        shift, and go to state 32
    "while"       shift, and go to state 33
    "at"          shift, and go to state 34
    "identifier"  shift, and go to state 35
    "class"       shift, and go to state 36
    "package"     shift, and go to state 37
    "enum"        shift, and go to state 38
    "external"    shift, and go to state 39
    "import"      shift, and go to state 40
    "--"          shift, and go to state 41
    "++"          shift, and go to state 42
    "do"          shift, and go to state 43
    "assert"      shift, and go to state 44
    "detach"      shift, and go to state 45
    "disown"      shift, and go to state 46
    "new"         shift, and go to state 47
    "angle"       shift, and go to state 48
    "duration"    shift, and go to state 49
    "float"       shift, and go to state 50
    "string"      shift, and go to state 51
    "call"        shift, and go to state 52
    "this"        shift, and go to state 53
    "!"           shift, and go to state 54
    "compl"       shift, and go to state 55
    "-"           shift, and go to state 56
    "+"           shift, and go to state 57
    "%unscope:"   shift, and go to state 58
    "%exp:"       shift, and go to state 59
    "%lvalue:"    shift, and go to state 60
    "%id:"        shift, and go to state 61

    $default  reduce using rule 15 (cstmt.opt)

    stmts        go to state 482
    cstmt.opt    go to state 85
    cstmt        go to state 64
    stmt         go to state 65
    block        go to state 66
    exp          go to state 67
    routine      go to state 68
    primary-exp  go to state 69
    detach       go to state 70
    lvalue       go to state 71
    id           go to state 72
    bitor-exp    go to state 73
    new          go to state 74
    float-exp    go to state 75
    duration     go to state 76
    dictionary   go to state 77
    tuple        go to state 78
    literal-exp  go to state 79
    string       go to state 80
    unary-exp    go to state 81
    rel-exp      go to state 82


state 473

   79 stmt: "switch" "(" exp ")" "{" cases default.opt "}" .

    $default  reduce using rule 79 (stmt)


state 474

   80 stmt: "timeout" "(" exp ")" stmt catch.opt else.opt finally.opt .

    $default  reduce using rule 80 (stmt)


state 475

   62 exp: exp . "=" exp
   63    | exp . "=" exp modifiers
  167 guard.opt: "if" exp .  [")"]
  209 exp: exp . "&&" exp
  210    | exp . "||" exp
  211    | exp . "in" exp
  212    | exp . "!" "in" exp

    "="   shift, and go to state 160
    "in"  shift, and go to state 161
    "!"   shift, and go to state 211
    "&&"  shift, and go to state 163
    "||"  shift, and go to state 164

    $default  reduce using rule 167 (guard.opt)


state 476

  114 stmt: "for" "(" "var" "identifier" in_or_colon exp ")" stmt .

    $default  reduce using rule 114 (stmt)


state 477

   23 stmt: . primary-exp ":" stmt
   24     | . exp
   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   37 exp: . "class" lvalue protos block
   38    | . "package" lvalue protos block
   43 stmt: . "enum" id "{" id.0 "}"
   47     | . "external" "identifier" "identifier"
   48     | . "external" "var" "identifier" "." "identifier" from "identifier"
   49     | . "external" event_or_function "(" unsigned ")" "identifier" "." "identifier" from "identifier"
   50     | . "import" lvalue
   51     | . exp "!" args.opt tilda.opt
   52 routine: . "closure"
   53        | . "function"
   54 stmt: . routine k1_id formals block
   55     | . id id formals block
   62 exp: . exp "=" exp
   63    | . exp "=" exp modifiers
   64    | . lvalue "+=" exp
   65    | . lvalue "-=" exp
   66    | . lvalue "*=" exp
   67    | . lvalue "/=" exp
   68    | . lvalue "^=" exp
   69    | . lvalue "%=" exp
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
   73 stmt: . "at" identifiers "(" exp tilda.opt ")" stmt onleave.opt
   74     | . "at" identifiers "(" event_match ")" stmt onleave.opt
   75     | . "every" "(" exp ")" stmt
   76     | . "if" "(" stmts ")" stmt else.opt
   77     | . "freezeif" "(" exp ")" stmt
   78     | . "stopif" "(" exp ")" stmt
   79     | . "switch" "(" exp ")" "{" cases default.opt "}"
   80     | . "timeout" "(" exp ")" stmt catch.opt else.opt finally.opt
   81     | . "return" exp.opt
   82     | . "break"
   83     | . "continue"
   84     | . "waituntil" "(" exp tilda.opt ")"
   85     | . "waituntil" "(" event_match ")"
   86     | . "whenever" "(" exp tilda.opt ")" stmt else.opt
   87     | . "whenever" "(" event_match ")" stmt else.opt
  108     | . "try" block catches.1 else.opt finally.opt
  109     | . "try" block "finally" block
  110     | . "throw" exp.opt
  111     | . "loop" stmt
  112     | . "for" "(" exp ")" stmt
  113     | . "for" "(" stmt.opt ";" exp ";" stmt.opt ")" stmt
  113     | "for" "(" stmt.opt ";" exp ";" stmt.opt ")" . stmt
  114     | . "for" "(" "var" "identifier" in_or_colon exp ")" stmt
  115     | . "while" "(" exp ")" stmt
  118 primary-exp: . block
  119            | . "do" "(" exp ")" block
  120 detach: . "detach"
  121       | . "disown"
  122 primary-exp: . "assert" "(" exp ")"
  123            | . "assert" "{" claims "}"
  124            | . detach "(" exp ")"
  125            | . detach block
  126            | . "isdef" "(" k1_id ")"
  127            | . "watch" "(" exp ")"
  128 lvalue: . id
  129       | . primary-exp "." id
  130       | . primary-exp "." "*"
  131 primary-exp: . "&" id
  132            | . primary-exp "." "&" id
  133 id: . "identifier"
  134 bitor-exp: . "var" bitor-exp
  135          | . "const" "var" bitor-exp
  136 primary-exp: . lvalue
  137            | . lvalue args
  138 new: . "new" "identifier" args.opt
  139 bitor-exp: . new
  140 id: . "new"
  141 primary-exp: . routine formals block
  142 float-exp: . "float"
  143 duration: . "duration"
  144         | . duration "duration"
  150 dictionary: . "[" assocs "]"
  154 tuple: . "(" tuple.exps ")"
  155 literal-exp: . float-exp
  156            | . "angle"
  157            | . duration
  158            | . string
  159            | . "[" exps "]"
  160            | . dictionary
  161            | . tuple
  162 string: . "string"
  163       | . string "string"
  164 literal-exp: . "__HERE__"
  170 lvalue: . primary-exp "[" exps "]"
  171 literal-exp: . "this"
  172            | . "call"
  173 primary-exp: . literal-exp
  174            | . "(" exp ")"
  175            | . "(" error ")"
  176            | . primary-exp "**" primary-exp
  177 unary-exp: . primary-exp
  178          | . "--" lvalue
  179          | . "++" lvalue
  180          | . "+" unary-exp
  181          | . "-" unary-exp
  182          | . "!" unary-exp
  183          | . "compl" unary-exp
  184 bitor-exp: . unary-exp
  185          | . bitor-exp "+" bitor-exp
  186          | . bitor-exp "-" bitor-exp
  187          | . bitor-exp "*" bitor-exp
  188          | . bitor-exp "/" bitor-exp
  189          | . bitor-exp "%" bitor-exp
  190          | . bitor-exp "^" bitor-exp
  191          | . bitor-exp "<<" bitor-exp
  192          | . bitor-exp "bitand" bitor-exp
  193          | . bitor-exp "bitor" bitor-exp
  194          | . bitor-exp ">>" bitor-exp
  205 rel-exp: . bitor-exp rel-ops
  208 exp: . rel-exp
  209    | . exp "&&" exp
  210    | . exp "||" exp
  211    | . exp "in" exp
  212    | . exp "!" "in" exp
  216    | . "%unscope:" unsigned
  217 primary-exp: . "%exp:" unsigned
  218 lvalue: . "%lvalue:" unsigned
  219       | . "%id:" unsigned
  220       | . primary-exp "." "%id:" unsigned
  221 primary-exp: . lvalue "(" "%exps:" unsigned ")"

    "__HERE__"    shift, and go to state 7
    "break"       shift, and go to state 8
    "closure"     shift, and go to state 9
    "const"       shift, and go to state 10
    "continue"    shift, and go to state 11
    "freezeif"    shift, and go to state 12
    "function"    shift, and go to state 13
    "if"          shift, and go to state 14
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "return"      shift, and go to state 19
    "stopif"      shift, and go to state 20
    "switch"      shift, and go to state 21
    "throw"       shift, and go to state 22
    "timeout"     shift, and go to state 23
    "try"         shift, and go to state 24
    "var"         shift, and go to state 25
    "waituntil"   shift, and go to state 26
    "watch"       shift, and go to state 27
    "whenever"    shift, and go to state 28
    "&"           shift, and go to state 29
    "every"       shift, and go to state 30
    "for"         shift, and go to state 31
    "loop"        shift, and go to state 32
    "while"       shift, and go to state 33
    "at"          shift, and go to state 34
    "identifier"  shift, and go to state 35
    "class"       shift, and go to state 36
    "package"     shift, and go to state 37
    "enum"        shift, and go to state 38
    "external"    shift, and go to state 39
    "import"      shift, and go to state 40
    "--"          shift, and go to state 41
    "++"          shift, and go to state 42
    "do"          shift, and go to state 43
    "assert"      shift, and go to state 44
    "detach"      shift, and go to state 45
    "disown"      shift, and go to state 46
    "new"         shift, and go to state 47
    "angle"       shift, and go to state 48
    "duration"    shift, and go to state 49
    "float"       shift, and go to state 50
    "string"      shift, and go to state 51
    "call"        shift, and go to state 52
    "this"        shift, and go to state 53
    "!"           shift, and go to state 54
    "compl"       shift, and go to state 55
    "-"           shift, and go to state 56
    "+"           shift, and go to state 57
    "%unscope:"   shift, and go to state 58
    "%exp:"       shift, and go to state 59
    "%lvalue:"    shift, and go to state 60
    "%id:"        shift, and go to state 61

    stmt         go to state 483
    block        go to state 66
    exp          go to state 67
    routine      go to state 68
    primary-exp  go to state 69
    detach       go to state 70
    lvalue       go to state 71
    id           go to state 72
    bitor-exp    go to state 73
    new          go to state 74
    float-exp    go to state 75
    duration     go to state 76
    dictionary   go to state 77
    tuple        go to state 78
    literal-exp  go to state 79
    string       go to state 80
    unary-exp    go to state 81
    rel-exp      go to state 82


state 478

   73 stmt: "at" identifiers "(" exp tilda.opt ")" stmt onleave.opt .

    $default  reduce using rule 73 (stmt)


state 479

   93 onleave.opt: "onleave" stmt .

    $default  reduce using rule 93 (onleave.opt)


state 480

   44 from: . "identifier"
   49 stmt: "external" event_or_function "(" unsigned ")" "identifier" "." "identifier" . from "identifier"

    "identifier"  shift, and go to state 446

    from  go to state 484


state 481

   12 stmts: . cstmt.opt
   13      | . stmts ";" cstmt.opt
   14      | . stmts "," cstmt.opt
   15 cstmt.opt: .  ["case", "default", "}", ",", ";"]
   16          | . cstmt
   17          | . cstmt "|"
   18 cstmt: . stmt
   19      | . cstmt "|" cstmt
   20      | . cstmt "&" cstmt
   23 stmt: . primary-exp ":" stmt
   24     | . exp
   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   37 exp: . "class" lvalue protos block
   38    | . "package" lvalue protos block
   43 stmt: . "enum" id "{" id.0 "}"
   47     | . "external" "identifier" "identifier"
   48     | . "external" "var" "identifier" "." "identifier" from "identifier"
   49     | . "external" event_or_function "(" unsigned ")" "identifier" "." "identifier" from "identifier"
   50     | . "import" lvalue
   51     | . exp "!" args.opt tilda.opt
   52 routine: . "closure"
   53        | . "function"
   54 stmt: . routine k1_id formals block
   55     | . id id formals block
   62 exp: . exp "=" exp
   63    | . exp "=" exp modifiers
   64    | . lvalue "+=" exp
   65    | . lvalue "-=" exp
   66    | . lvalue "*=" exp
   67    | . lvalue "/=" exp
   68    | . lvalue "^=" exp
   69    | . lvalue "%=" exp
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
   73 stmt: . "at" identifiers "(" exp tilda.opt ")" stmt onleave.opt
   74     | . "at" identifiers "(" event_match ")" stmt onleave.opt
   75     | . "every" "(" exp ")" stmt
   76     | . "if" "(" stmts ")" stmt else.opt
   77     | . "freezeif" "(" exp ")" stmt
   78     | . "stopif" "(" exp ")" stmt
   79     | . "switch" "(" exp ")" "{" cases default.opt "}"
   80     | . "timeout" "(" exp ")" stmt catch.opt else.opt finally.opt
   81     | . "return" exp.opt
   82     | . "break"
   83     | . "continue"
   84     | . "waituntil" "(" exp tilda.opt ")"
   85     | . "waituntil" "(" event_match ")"
   86     | . "whenever" "(" exp tilda.opt ")" stmt else.opt
   87     | . "whenever" "(" event_match ")" stmt else.opt
   96 case: "case" match ":" . stmts
  108 stmt: . "try" block catches.1 else.opt finally.opt
  109     | . "try" block "finally" block
  110     | . "throw" exp.opt
  111     | . "loop" stmt
  112     | . "for" "(" exp ")" stmt
  113     | . "for" "(" stmt.opt ";" exp ";" stmt.opt ")" stmt
  114     | . "for" "(" "var" "identifier" in_or_colon exp ")" stmt
  115     | . "while" "(" exp ")" stmt
  118 primary-exp: . block
  119            | . "do" "(" exp ")" block
  120 detach: . "detach"
  121       | . "disown"
  122 primary-exp: . "assert" "(" exp ")"
  123            | . "assert" "{" claims "}"
  124            | . detach "(" exp ")"
  125            | . detach block
  126            | . "isdef" "(" k1_id ")"
  127            | . "watch" "(" exp ")"
  128 lvalue: . id
  129       | . primary-exp "." id
  130       | . primary-exp "." "*"
  131 primary-exp: . "&" id
  132            | . primary-exp "." "&" id
  133 id: . "identifier"
  134 bitor-exp: . "var" bitor-exp
  135          | . "const" "var" bitor-exp
  136 primary-exp: . lvalue
  137            | . lvalue args
  138 new: . "new" "identifier" args.opt
  139 bitor-exp: . new
  140 id: . "new"
  141 primary-exp: . routine formals block
  142 float-exp: . "float"
  143 duration: . "duration"
  144         | . duration "duration"
  150 dictionary: . "[" assocs "]"
  154 tuple: . "(" tuple.exps ")"
  155 literal-exp: . float-exp
  156            | . "angle"
  157            | . duration
  158            | . string
  159            | . "[" exps "]"
  160            | . dictionary
  161            | . tuple
  162 string: . "string"
  163       | . string "string"
  164 literal-exp: . "__HERE__"
  170 lvalue: . primary-exp "[" exps "]"
  171 literal-exp: . "this"
  172            | . "call"
  173 primary-exp: . literal-exp
  174            | . "(" exp ")"
  175            | . "(" error ")"
  176            | . primary-exp "**" primary-exp
  177 unary-exp: . primary-exp
  178          | . "--" lvalue
  179          | . "++" lvalue
  180          | . "+" unary-exp
  181          | . "-" unary-exp
  182          | . "!" unary-exp
  183          | . "compl" unary-exp
  184 bitor-exp: . unary-exp
  185          | . bitor-exp "+" bitor-exp
  186          | . bitor-exp "-" bitor-exp
  187          | . bitor-exp "*" bitor-exp
  188          | . bitor-exp "/" bitor-exp
  189          | . bitor-exp "%" bitor-exp
  190          | . bitor-exp "^" bitor-exp
  191          | . bitor-exp "<<" bitor-exp
  192          | . bitor-exp "bitand" bitor-exp
  193          | . bitor-exp "bitor" bitor-exp
  194          | . bitor-exp ">>" bitor-exp
  205 rel-exp: . bitor-exp rel-ops
  208 exp: . rel-exp
  209    | . exp "&&" exp
  210    | . exp "||" exp
  211    | . exp "in" exp
  212    | . exp "!" "in" exp
  216    | . "%unscope:" unsigned
  217 primary-exp: . "%exp:" unsigned
  218 lvalue: . "%lvalue:" unsigned
  219       | . "%id:" unsigned
  220       | . primary-exp "." "%id:" unsigned
  221 primary-exp: . lvalue "(" "%exps:" unsigned ")"

    "__HERE__"    shift, and go to state 7
    "break"       shift, and go to state 8
    "closure"     shift, and go to state 9
    "const"       shift, and go to state 10
    "continue"    shift, and go to state 11
    "freezeif"    shift, and go to state 12
    "function"    shift, and go to state 13
    "if"          shift, and go to state 14
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "return"      shift, and go to state 19
    "stopif"      shift, and go to state 20
    "switch"      shift, and go to state 21
    "throw"       shift, and go to state 22
    "timeout"     shift, and go to state 23
    "try"         shift, and go to state 24
    "var"         shift, and go to state 25
    "waituntil"   shift, and go to state 26
    "watch"       shift, and go to state 27
    "whenever"    shift, and go to state 28
    "&"           shift, and go to state 29
    "every"       shift, and go to state 30
    "for"         shift, and go to state 31
    "loop"        shift, and go to state 32
    "while"       shift, and go to state 33
    "at"          shift, and go to state 34
    "identifier"  shift, and go to state 35
    "class"       shift, and go to state 36
    "package"     shift, and go to state 37
    "enum"        shift, and go to state 38
    "external"    shift, and go to state 39
    "import"      shift, and go to state 40
    "--"          shift, and go to state 41
    "++"          shift, and go to state 42
    "do"          shift, and go to state 43
    "assert"      shift, and go to state 44
    "detach"      shift, and go to state 45
    "disown"      shift, and go to state 46
    "new"         shift, and go to state 47
    "angle"       shift, and go to state 48
    "duration"    shift, and go to state 49
    "float"       shift, and go to state 50
    "string"      shift, and go to state 51
    "call"        shift, and go to state 52
    "this"        shift, and go to state 53
    "!"           shift, and go to state 54
    "compl"       shift, and go to state 55
    "-"           shift, and go to state 56
    "+"           shift, and go to state 57
    "%unscope:"   shift, and go to state 58
    "%exp:"       shift, and go to state 59
    "%lvalue:"    shift, and go to state 60
    "%id:"        shift, and go to state 61

    $default  reduce using rule 15 (cstmt.opt)

    stmts        go to state 485
    cstmt.opt    go to state 85
    cstmt        go to state 64
    stmt         go to state 65
    block        go to state 66
    exp          go to state 67
    routine      go to state 68
    primary-exp  go to state 69
    detach       go to state 70
    lvalue       go to state 71
    id           go to state 72
    bitor-exp    go to state 73
    new          go to state 74
    float-exp    go to state 75
    duration     go to state 76
    dictionary   go to state 77
    tuple        go to state 78
    literal-exp  go to state 79
    string       go to state 80
    unary-exp    go to state 81
    rel-exp      go to state 82


state 482

   13 stmts: stmts . ";" cstmt.opt
   14      | stmts . "," cstmt.opt
   89 default.opt: "default" ":" stmts .  ["}"]

    ","  shift, and go to state 201
    ";"  shift, and go to state 202

    $default  reduce using rule 89 (default.opt)


state 483

  113 stmt: "for" "(" stmt.opt ";" exp ";" stmt.opt ")" stmt .

    $default  reduce using rule 113 (stmt)


state 484

   49 stmt: "external" event_or_function "(" unsigned ")" "identifier" "." "identifier" from . "identifier"

    "identifier"  shift, and go to state 486


state 485

   13 stmts: stmts . ";" cstmt.opt
   14      | stmts . "," cstmt.opt
   96 case: "case" match ":" stmts .  ["case", "default", "}"]

    ","  shift, and go to state 201
    ";"  shift, and go to state 202

    $default  reduce using rule 96 (case)


state 486

   49 stmt: "external" event_or_function "(" unsigned ")" "identifier" "." "identifier" from "identifier" .

    $default  reduce using rule 49 (stmt)
