Terminals unused in grammar

   UNARY


Grammar

    0 $accept: start "end of command"

    1 start: root

    2 root: error
    3     | MODE_EXP root_exp
    4     | MODE_EXPS root_exps

    5 root_exp: cstmt.opt ";"
    6         | cstmt.opt ","
    7         | cstmt.opt "end of command"
    8         | error ";"
    9         | error ","
   10         | error "end of command"

   11 root_exps: stmts

   12 stmts: cstmt.opt
   13      | stmts ";" cstmt.opt
   14      | stmts "," cstmt.opt

   15 cstmt.opt: /* empty */
   16          | cstmt
   17          | cstmt "|"

   18 cstmt: stmt
   19      | cstmt "|" cstmt
   20      | cstmt "&" cstmt

   21 stmt.opt: /* empty */
   22         | stmt

   23 stmt: primary-exp ":" stmt
   24     | exp

   25 block: "{" stmts "}"
   26      | "{" error "}"
   27      | "{" id "~" id "}"

   28 visibility: /* empty */
   29           | "private"
   30           | "protected"
   31           | "public"

   32 proto: visibility exp

   33 protos.1: proto
   34         | protos.1 "," proto

   35 protos: /* empty */
   36       | ":" protos.1

   37 exp: "class" lvalue protos block
   38    | "package" lvalue protos block

   39 id.0: /* empty */
   40     | id.1 comma.opt

   41 id.1: id
   42     | id.1 "," id

   43 stmt: "enum" id "{" id.0 "}"

   44 from: "identifier"

   45 event_or_function: "function"
   46                  | "identifier"

   47 stmt: "external" "identifier" "identifier"
   48     | "external" "var" "identifier" "." "identifier" from "identifier"
   49     | "external" event_or_function "(" unsigned ")" "identifier" "." "identifier" from "identifier"
   50     | "import" lvalue
   51     | exp "!" args.opt tilda.opt

   52 routine: "closure"
   53        | "function"

   54 stmt: routine k1_id formals block
   55     | id id formals block

   56 k1_id: "identifier"
   57      | "this" "." "identifier"
   58      | k1_id "." "identifier"

   59 modifier: "identifier" ":" exp

   60 modifiers: modifier
   61          | modifiers modifier

   62 exp: exp "=" exp
   63    | exp "=" exp modifiers
   64    | lvalue "+=" exp
   65    | lvalue "-=" exp
   66    | lvalue "*=" exp
   67    | lvalue "/=" exp
   68    | lvalue "^=" exp
   69    | lvalue "%=" exp

   70 primary-exp: lvalue "--"
   71            | lvalue "++"
   72            | lvalue "->" id

   73 stmt: "at" identifiers "(" exp tilda.opt ")" stmt onleave.opt
   74     | "at" identifiers "(" event_match ")" stmt onleave.opt
   75     | "every" "(" exp ")" stmt
   76     | "if" "(" stmts ")" stmt else.opt
   77     | "freezeif" "(" exp ")" stmt
   78     | "stopif" "(" exp ")" stmt
   79     | "switch" "(" exp ")" "{" cases default.opt "}"
   80     | "timeout" "(" exp ")" stmt catch.opt else.opt finally.opt
   81     | "return" exp.opt
   82     | "break"
   83     | "continue"
   84     | "waituntil" "(" exp tilda.opt ")"
   85     | "waituntil" "(" event_match ")"
   86     | "whenever" "(" exp tilda.opt ")" stmt else.opt
   87     | "whenever" "(" event_match ")" stmt else.opt

   88 default.opt: /* empty */
   89            | "default" ":" stmts

   90 else.opt: /* empty */
   91         | "else" stmt

   92 onleave.opt: /* empty */
   93            | "onleave" stmt

   94 cases: /* empty */
   95      | cases case

   96 case: "case" match ":" stmts

   97 catches.1: catch
   98          | catches.1 catch

   99 match: exp
  100      | exp "if" exp

  101 match.opt: /* empty */
  102          | "(" match ")"

  103 catch: "catch" match.opt block

  104 catch.opt: /* empty */
  105          | "catch" block

  106 finally.opt: /* empty */
  107            | "finally" block

  108 stmt: "try" block catches.1 else.opt finally.opt
  109     | "try" block "finally" block
  110     | "throw" exp.opt
  111     | "loop" stmt
  112     | "for" "(" exp ")" stmt
  113     | "for" "(" stmt.opt ";" exp ";" stmt.opt ")" stmt
  114     | "for" "(" "var" "identifier" in_or_colon exp ")" stmt
  115     | "while" "(" exp ")" stmt

  116 in_or_colon: "in"
  117            | ":"

  118 primary-exp: block
  119            | "do" "(" exp ")" block

  120 detach: "detach"
  121       | "disown"

  122 primary-exp: "assert" "(" exp ")"
  123            | "assert" "{" claims "}"
  124            | detach "(" exp ")"
  125            | detach block
  126            | "isdef" "(" k1_id ")"
  127            | "watch" "(" exp ")"

  128 lvalue: id
  129       | primary-exp "." id
  130       | primary-exp "." "*"

  131 primary-exp: "&" id
  132            | primary-exp "." "&" id

  133 id: "identifier"

  134 bitor-exp: "var" bitor-exp
  135          | "const" "var" bitor-exp

  136 primary-exp: lvalue
  137            | lvalue args

  138 new: "new" "identifier" args.opt

  139 bitor-exp: new

  140 id: "new"

  141 primary-exp: routine formals block

  142 float-exp: "float"

  143 duration: "duration"
  144         | duration "duration"

  145 assoc: exp "=>" exp

  146 assocs.1: assoc
  147         | assocs.1 "," assoc

  148 assocs: "=>"
  149       | assocs.1 comma.opt

  150 dictionary: "[" assocs "]"

  151 tuple.exps: /* empty */
  152           | exps.1 ","
  153           | exps.2

  154 tuple: "(" tuple.exps ")"

  155 bitor-exps: /* empty */
  156           | bitor-exps.1 comma.opt

  157 bitor-exps.1: bitor-exp
  158             | bitor-exps.1 "," bitor-exp

  159 literal-exp: float-exp
  160            | "angle"
  161            | duration
  162            | string
  163            | "[" exps "]"
  164            | "<" bitor-exps ">"
  165            | dictionary
  166            | tuple

  167 string: "string"
  168       | string "string"

  169 literal-exp: "__HERE__"

  170 event_match: exp "?" args.opt tilda.opt guard.opt

  171 guard.opt: /* empty */
  172          | "if" exp

  173 tilda.opt: /* empty */
  174          | "~" exp

  175 lvalue: primary-exp "[" exps "]"

  176 literal-exp: "this"
  177            | "call"

  178 primary-exp: literal-exp
  179            | "(" exp ")"
  180            | "(" error ")"
  181            | primary-exp "**" primary-exp

  182 unary-exp: primary-exp
  183          | "--" lvalue
  184          | "++" lvalue
  185          | "+" unary-exp
  186          | "-" unary-exp
  187          | "!" unary-exp
  188          | "compl" unary-exp

  189 bitor-exp: unary-exp
  190          | bitor-exp "+" bitor-exp
  191          | bitor-exp "-" bitor-exp
  192          | bitor-exp "*" bitor-exp
  193          | bitor-exp "/" bitor-exp
  194          | bitor-exp "%" bitor-exp
  195          | bitor-exp "^" bitor-exp
  196          | bitor-exp "<<" bitor-exp
  197          | bitor-exp "bitand" bitor-exp
  198          | bitor-exp "bitor" bitor-exp
  199          | bitor-exp ">>" bitor-exp

  200 rel-op: "!="
  201       | "!=="
  202       | "<"
  203       | "<="
  204       | "=="
  205       | "==="
  206       | "=~="
  207       | ">"
  208       | ">="
  209       | "~="

  210 rel-exp: bitor-exp rel-ops

  211 rel-ops: /* empty */
  212        | rel-ops rel-op bitor-exp

  213 exp: rel-exp
  214    | exp "&&" exp
  215    | exp "||" exp
  216    | exp "in" exp
  217    | exp "!" "in" exp

  218 exp.opt: /* empty */
  219        | exp

  220 unsigned: "float"

  221 exp: "%unscope:" unsigned

  222 primary-exp: "%exp:" unsigned

  223 lvalue: "%lvalue:" unsigned
  224       | "%id:" unsigned
  225       | primary-exp "." "%id:" unsigned

  226 primary-exp: lvalue "(" "%exps:" unsigned ")"

  227 claims: /* empty */
  228       | claims.1 semi.opt

  229 claims.1: exp
  230         | claims.1 ";" exp

  231 exps: /* empty */
  232     | exps.1 comma.opt

  233 exps.1: exp
  234       | exps.1 "," exp

  235 exps.2: exps.1 "," exp

  236 args: "(" exps ")"

  237 args.opt: /* empty */
  238         | args

  239 identifiers: /* empty */
  240            | identifiers "identifier"

  241 typespec: ":" exp

  242 typespec.opt: /* empty */
  243             | typespec

  244 formal: var.opt "identifier" typespec.opt
  245       | var.opt "identifier" "=" exp typespec.opt
  246       | var.opt "identifier" "[" "]"

  247 formals.1: formal
  248          | formals.1 "," formal

  249 formals.0: /* empty */
  250          | formals.1 comma.opt

  251 formals: /* empty */
  252        | "(" formals.0 ")"

  253 comma.opt: /* empty */
  254          | ","

  255 semi.opt: /* empty */
  256         | ";"

  257 var.opt: /* empty */
  258        | "var"


Terminals, with rules where they appear

"end of command" (0) 0 7 10
error (256) 2 8 9 10 26 180
MODE_EXP (258) 3
MODE_EXPS (259) 4
"__HERE__" (260) 169
"=" (261) 62 63 245
"break" (262) 82
"case" (263) 96
"catch" (264) 103 105
"closure" (265) 52
"const" (266) 135
"continue" (267) 83
":" (268) 23 36 59 89 96 117 241
"default" (269) 89
"else" (270) 91
"finally" (271) 107 109
"freezeif" (272) 77
"function" (273) 45 53
"if" (274) 76 100 172
"in" (275) 116 216 217
"isdef" (276) 126
"{" (277) 25 26 27 43 79 123
"[" (278) 150 163 175 246
"(" (279) 49 73 74 75 76 77 78 79 80 84 85 86 87 102 112 113 114 115
    119 122 124 126 127 154 179 180 226 236 252
"onleave" (280) 93
"." (281) 48 49 57 58 129 130 132 225
"}" (282) 25 26 27 43 79 123
"]" (283) 150 163 175 246
"return" (284) 81
")" (285) 49 73 74 75 76 77 78 79 80 84 85 86 87 102 112 113 114 115
    119 122 124 126 127 154 179 180 226 236 252
"stopif" (286) 78
"switch" (287) 79
"throw" (288) 110
"~" (289) 27 174
"timeout" (290) 80
"try" (291) 108 109
"var" (292) 48 114 134 135 258
"waituntil" (293) 84 85
"watch" (294) 127
"whenever" (295) 86 87
"," (296) 6 9 14 34 42 147 152 158 234 235 248 254
";" (297) 5 8 13 113 230 256
"&" (298) 20 131 132
"|" (299) 17 19
"every" (300) 75
"for" (301) 112 113 114
"loop" (302) 111
"while" (303) 115
"at" (304) 73 74
"identifier" (305) 44 46 47 48 49 56 57 58 59 114 133 138 240 244 245
    246
ASSIGN (306)
EMPTY (307)
UNARY (308)
"private" (309) 29
"protected" (310) 30
"public" (311) 31
"class" (312) 37
"package" (313) 38
"enum" (314) 43
"external" (315) 47 48 49
"import" (316) 50
"^=" (317) 68
"-=" (318) 65
"%=" (319) 69
"+=" (320) 64
"/=" (321) 67
"*=" (322) 66
"--" (323) 70 183
"++" (324) 71 184
"->" (325) 72
"do" (326) 119
"assert" (327) 122 123
"detach" (328) 120
"disown" (329) 121
"new" (330) 138 140
"angle" (331) 160
"duration" (332) 143 144
"float" (333) 142 220
"=>" (334) 145 148
"string" (335) 167 168
"?" (336) 170
"call" (337) 177
"this" (338) 57 176
"!" (339) 51 187 217
"bitand" (340) 197
"bitor" (341) 198
"^" (342) 195
"compl" (343) 188
">>" (344) 199
"<<" (345) 196
"-" (346) 186 191
"%" (347) 194
"+" (348) 185 190
"/" (349) 193
"*" (350) 130 192
"**" (351) 181
"=~=" (352) 206
"==" (353) 204
"===" (354) 205
">=" (355) 208
">" (356) 164 207
"<=" (357) 203
"<" (358) 164 202
"!=" (359) 200
"!==" (360) 201
"~=" (361) 209
"&&" (362) 214
"||" (363) 215
"%unscope:" (364) 221
"%exp:" (365) 222
"%lvalue:" (366) 223
"%id:" (367) 224 225
"%exps:" (368) 226


Nonterminals, with rules where they appear

$accept (114)
    on left: 0
start (115)
    on left: 1, on right: 0
root (116)
    on left: 2 3 4, on right: 1
root_exp (117)
    on left: 5 6 7 8 9 10, on right: 3
root_exps (118)
    on left: 11, on right: 4
stmts (119)
    on left: 12 13 14, on right: 11 13 14 25 76 89 96
cstmt.opt (120)
    on left: 15 16 17, on right: 5 6 7 12 13 14
cstmt (121)
    on left: 18 19 20, on right: 16 17 19 20
stmt.opt (122)
    on left: 21 22, on right: 113
stmt (123)
    on left: 23 24 43 47 48 49 50 51 54 55 73 74 75 76 77 78 79 80
    81 82 83 84 85 86 87 108 109 110 111 112 113 114 115, on right:
    18 22 23 73 74 75 76 77 78 80 86 87 91 93 111 112 113 114 115
block (124)
    on left: 25 26 27, on right: 37 38 54 55 103 105 107 108 109 118
    119 125 141
visibility (125)
    on left: 28 29 30 31, on right: 32
proto (126)
    on left: 32, on right: 33 34
protos.1 (127)
    on left: 33 34, on right: 34 36
protos (128)
    on left: 35 36, on right: 37 38
exp (129)
    on left: 37 38 62 63 64 65 66 67 68 69 213 214 215 216 217 221,
    on right: 24 32 51 59 62 63 64 65 66 67 68 69 73 75 77 78 79 80
    84 86 99 100 112 113 114 115 119 122 124 127 145 170 172 174 179
    214 215 216 217 219 229 230 233 234 235 241 245
id.0 (130)
    on left: 39 40, on right: 43
id.1 (131)
    on left: 41 42, on right: 40 42
from (132)
    on left: 44, on right: 48 49
event_or_function (133)
    on left: 45 46, on right: 49
routine (134)
    on left: 52 53, on right: 54 141
k1_id (135)
    on left: 56 57 58, on right: 54 58 126
modifier (136)
    on left: 59, on right: 60 61
modifiers (137)
    on left: 60 61, on right: 61 63
primary-exp (138)
    on left: 70 71 72 118 119 122 123 124 125 126 127 131 132 136 137
    141 178 179 180 181 222 226, on right: 23 129 130 132 175 181 182
    225
default.opt (139)
    on left: 88 89, on right: 79
else.opt (140)
    on left: 90 91, on right: 76 80 86 87 108
onleave.opt (141)
    on left: 92 93, on right: 73 74
cases (142)
    on left: 94 95, on right: 79 95
case (143)
    on left: 96, on right: 95
catches.1 (144)
    on left: 97 98, on right: 98 108
match (145)
    on left: 99 100, on right: 96 102
match.opt (146)
    on left: 101 102, on right: 103
catch (147)
    on left: 103, on right: 97 98
catch.opt (148)
    on left: 104 105, on right: 80
finally.opt (149)
    on left: 106 107, on right: 80 108
in_or_colon (150)
    on left: 116 117, on right: 114
detach (151)
    on left: 120 121, on right: 124 125
lvalue (152)
    on left: 128 129 130 175 223 224 225, on right: 37 38 50 64 65
    66 67 68 69 70 71 72 136 137 183 184 226
id (153)
    on left: 133 140, on right: 27 41 42 43 55 72 128 129 131 132
bitor-exp (154)
    on left: 134 135 139 189 190 191 192 193 194 195 196 197 198 199,
    on right: 134 135 157 158 190 191 192 193 194 195 196 197 198 199
    210 212
new (155)
    on left: 138, on right: 139
float-exp (156)
    on left: 142, on right: 159
duration (157)
    on left: 143 144, on right: 144 161
assoc (158)
    on left: 145, on right: 146 147
assocs.1 (159)
    on left: 146 147, on right: 147 149
assocs (160)
    on left: 148 149, on right: 150
dictionary (161)
    on left: 150, on right: 165
tuple.exps (162)
    on left: 151 152 153, on right: 154
tuple (163)
    on left: 154, on right: 166
bitor-exps (164)
    on left: 155 156, on right: 164
bitor-exps.1 (165)
    on left: 157 158, on right: 156 158
literal-exp (166)
    on left: 159 160 161 162 163 164 165 166 169 176 177, on right:
    178
string (167)
    on left: 167 168, on right: 162 168
event_match (168)
    on left: 170, on right: 74 85 87
guard.opt (169)
    on left: 171 172, on right: 170
tilda.opt (170)
    on left: 173 174, on right: 51 73 84 86 170
unary-exp (171)
    on left: 182 183 184 185 186 187 188, on right: 185 186 187 188
    189
rel-op (172)
    on left: 200 201 202 203 204 205 206 207 208 209, on right: 212
rel-exp (173)
    on left: 210, on right: 213
rel-ops (174)
    on left: 211 212, on right: 210 212
exp.opt (175)
    on left: 218 219, on right: 81 110
unsigned (176)
    on left: 220, on right: 49 221 222 223 224 225 226
claims (177)
    on left: 227 228, on right: 123
claims.1 (178)
    on left: 229 230, on right: 228 230
exps (179)
    on left: 231 232, on right: 163 175 236
exps.1 (180)
    on left: 233 234, on right: 152 232 234 235
exps.2 (181)
    on left: 235, on right: 153
args (182)
    on left: 236, on right: 137 238
args.opt (183)
    on left: 237 238, on right: 51 138 170
identifiers (184)
    on left: 239 240, on right: 73 74 240
typespec (185)
    on left: 241, on right: 243
typespec.opt (186)
    on left: 242 243, on right: 244 245
formal (187)
    on left: 244 245 246, on right: 247 248
formals.1 (188)
    on left: 247 248, on right: 248 250
formals.0 (189)
    on left: 249 250, on right: 252
formals (190)
    on left: 251 252, on right: 54 55 141
comma.opt (191)
    on left: 253 254, on right: 40 149 156 232 250
semi.opt (192)
    on left: 255 256, on right: 228
var.opt (193)
    on left: 257 258, on right: 244 245 246


state 0

    0 $accept: . start "end of command"
    1 start: . root
    2 root: . error
    3     | . MODE_EXP root_exp
    4     | . MODE_EXPS root_exps

    error      shift, and go to state 1
    MODE_EXP   shift, and go to state 2
    MODE_EXPS  shift, and go to state 3

    start  go to state 4
    root   go to state 5


state 1

    2 root: error .

    $default  reduce using rule 2 (root)


state 2

    3 root: MODE_EXP . root_exp
    5 root_exp: . cstmt.opt ";"
    6         | . cstmt.opt ","
    7         | . cstmt.opt "end of command"
    8         | . error ";"
    9         | . error ","
   10         | . error "end of command"
   15 cstmt.opt: .  ["end of command", ",", ";"]
   16          | . cstmt
   17          | . cstmt "|"
   18 cstmt: . stmt
   19      | . cstmt "|" cstmt
   20      | . cstmt "&" cstmt
   23 stmt: . primary-exp ":" stmt
   24     | . exp
   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   37 exp: . "class" lvalue protos block
   38    | . "package" lvalue protos block
   43 stmt: . "enum" id "{" id.0 "}"
   47     | . "external" "identifier" "identifier"
   48     | . "external" "var" "identifier" "." "identifier" from "identifier"
   49     | . "external" event_or_function "(" unsigned ")" "identifier" "." "identifier" from "identifier"
   50     | . "import" lvalue
   51     | . exp "!" args.opt tilda.opt
   52 routine: . "closure"
   53        | . "function"
   54 stmt: . routine k1_id formals block
   55     | . id id formals block
   62 exp: . exp "=" exp
   63    | . exp "=" exp modifiers
   64    | . lvalue "+=" exp
   65    | . lvalue "-=" exp
   66    | . lvalue "*=" exp
   67    | . lvalue "/=" exp
   68    | . lvalue "^=" exp
   69    | . lvalue "%=" exp
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
   73 stmt: . "at" identifiers "(" exp tilda.opt ")" stmt onleave.opt
   74     | . "at" identifiers "(" event_match ")" stmt onleave.opt
   75     | . "every" "(" exp ")" stmt
   76     | . "if" "(" stmts ")" stmt else.opt
   77     | . "freezeif" "(" exp ")" stmt
   78     | . "stopif" "(" exp ")" stmt
   79     | . "switch" "(" exp ")" "{" cases default.opt "}"
   80     | . "timeout" "(" exp ")" stmt catch.opt else.opt finally.opt
   81     | . "return" exp.opt
   82     | . "break"
   83     | . "continue"
   84     | . "waituntil" "(" exp tilda.opt ")"
   85     | . "waituntil" "(" event_match ")"
   86     | . "whenever" "(" exp tilda.opt ")" stmt else.opt
   87     | . "whenever" "(" event_match ")" stmt else.opt
  108     | . "try" block catches.1 else.opt finally.opt
  109     | . "try" block "finally" block
  110     | . "throw" exp.opt
  111     | . "loop" stmt
  112     | . "for" "(" exp ")" stmt
  113     | . "for" "(" stmt.opt ";" exp ";" stmt.opt ")" stmt
  114     | . "for" "(" "var" "identifier" in_or_colon exp ")" stmt
  115     | . "while" "(" exp ")" stmt
  118 primary-exp: . block
  119            | . "do" "(" exp ")" block
  120 detach: . "detach"
  121       | . "disown"
  122 primary-exp: . "assert" "(" exp ")"
  123            | . "assert" "{" claims "}"
  124            | . detach "(" exp ")"
  125            | . detach block
  126            | . "isdef" "(" k1_id ")"
  127            | . "watch" "(" exp ")"
  128 lvalue: . id
  129       | . primary-exp "." id
  130       | . primary-exp "." "*"
  131 primary-exp: . "&" id
  132            | . primary-exp "." "&" id
  133 id: . "identifier"
  134 bitor-exp: . "var" bitor-exp
  135          | . "const" "var" bitor-exp
  136 primary-exp: . lvalue
  137            | . lvalue args
  138 new: . "new" "identifier" args.opt
  139 bitor-exp: . new
  140 id: . "new"
  141 primary-exp: . routine formals block
  142 float-exp: . "float"
  143 duration: . "duration"
  144         | . duration "duration"
  150 dictionary: . "[" assocs "]"
  154 tuple: . "(" tuple.exps ")"
  159 literal-exp: . float-exp
  160            | . "angle"
  161            | . duration
  162            | . string
  163            | . "[" exps "]"
  164            | . "<" bitor-exps ">"
  165            | . dictionary
  166            | . tuple
  167 string: . "string"
  168       | . string "string"
  169 literal-exp: . "__HERE__"
  175 lvalue: . primary-exp "[" exps "]"
  176 literal-exp: . "this"
  177            | . "call"
  178 primary-exp: . literal-exp
  179            | . "(" exp ")"
  180            | . "(" error ")"
  181            | . primary-exp "**" primary-exp
  182 unary-exp: . primary-exp
  183          | . "--" lvalue
  184          | . "++" lvalue
  185          | . "+" unary-exp
  186          | . "-" unary-exp
  187          | . "!" unary-exp
  188          | . "compl" unary-exp
  189 bitor-exp: . unary-exp
  190          | . bitor-exp "+" bitor-exp
  191          | . bitor-exp "-" bitor-exp
  192          | . bitor-exp "*" bitor-exp
  193          | . bitor-exp "/" bitor-exp
  194          | . bitor-exp "%" bitor-exp
  195          | . bitor-exp "^" bitor-exp
  196          | . bitor-exp "<<" bitor-exp
  197          | . bitor-exp "bitand" bitor-exp
  198          | . bitor-exp "bitor" bitor-exp
  199          | . bitor-exp ">>" bitor-exp
  210 rel-exp: . bitor-exp rel-ops
  213 exp: . rel-exp
  214    | . exp "&&" exp
  215    | . exp "||" exp
  216    | . exp "in" exp
  217    | . exp "!" "in" exp
  221    | . "%unscope:" unsigned
  222 primary-exp: . "%exp:" unsigned
  223 lvalue: . "%lvalue:" unsigned
  224       | . "%id:" unsigned
  225       | . primary-exp "." "%id:" unsigned
  226 primary-exp: . lvalue "(" "%exps:" unsigned ")"

    error         shift, and go to state 6
    "__HERE__"    shift, and go to state 7
    "break"       shift, and go to state 8
    "closure"     shift, and go to state 9
    "const"       shift, and go to state 10
    "continue"    shift, and go to state 11
    "freezeif"    shift, and go to state 12
    "function"    shift, and go to state 13
    "if"          shift, and go to state 14
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "return"      shift, and go to state 19
    "stopif"      shift, and go to state 20
    "switch"      shift, and go to state 21
    "throw"       shift, and go to state 22
    "timeout"     shift, and go to state 23
    "try"         shift, and go to state 24
    "var"         shift, and go to state 25
    "waituntil"   shift, and go to state 26
    "watch"       shift, and go to state 27
    "whenever"    shift, and go to state 28
    "&"           shift, and go to state 29
    "every"       shift, and go to state 30
    "for"         shift, and go to state 31
    "loop"        shift, and go to state 32
    "while"       shift, and go to state 33
    "at"          shift, and go to state 34
    "identifier"  shift, and go to state 35
    "class"       shift, and go to state 36
    "package"     shift, and go to state 37
    "enum"        shift, and go to state 38
    "external"    shift, and go to state 39
    "import"      shift, and go to state 40
    "--"          shift, and go to state 41
    "++"          shift, and go to state 42
    "do"          shift, and go to state 43
    "assert"      shift, and go to state 44
    "detach"      shift, and go to state 45
    "disown"      shift, and go to state 46
    "new"         shift, and go to state 47
    "angle"       shift, and go to state 48
    "duration"    shift, and go to state 49
    "float"       shift, and go to state 50
    "string"      shift, and go to state 51
    "call"        shift, and go to state 52
    "this"        shift, and go to state 53
    "!"           shift, and go to state 54
    "compl"       shift, and go to state 55
    "-"           shift, and go to state 56
    "+"           shift, and go to state 57
    "<"           shift, and go to state 58
    "%unscope:"   shift, and go to state 59
    "%exp:"       shift, and go to state 60
    "%lvalue:"    shift, and go to state 61
    "%id:"        shift, and go to state 62

    "end of command"  reduce using rule 15 (cstmt.opt)
    ","               reduce using rule 15 (cstmt.opt)
    ";"               reduce using rule 15 (cstmt.opt)

    root_exp     go to state 63
    cstmt.opt    go to state 64
    cstmt        go to state 65
    stmt         go to state 66
    block        go to state 67
    exp          go to state 68
    routine      go to state 69
    primary-exp  go to state 70
    detach       go to state 71
    lvalue       go to state 72
    id           go to state 73
    bitor-exp    go to state 74
    new          go to state 75
    float-exp    go to state 76
    duration     go to state 77
    dictionary   go to state 78
    tuple        go to state 79
    literal-exp  go to state 80
    string       go to state 81
    unary-exp    go to state 82
    rel-exp      go to state 83


state 3

    4 root: MODE_EXPS . root_exps
   11 root_exps: . stmts
   12 stmts: . cstmt.opt
   13      | . stmts ";" cstmt.opt
   14      | . stmts "," cstmt.opt
   15 cstmt.opt: .  ["end of command", ",", ";"]
   16          | . cstmt
   17          | . cstmt "|"
   18 cstmt: . stmt
   19      | . cstmt "|" cstmt
   20      | . cstmt "&" cstmt
   23 stmt: . primary-exp ":" stmt
   24     | . exp
   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   37 exp: . "class" lvalue protos block
   38    | . "package" lvalue protos block
   43 stmt: . "enum" id "{" id.0 "}"
   47     | . "external" "identifier" "identifier"
   48     | . "external" "var" "identifier" "." "identifier" from "identifier"
   49     | . "external" event_or_function "(" unsigned ")" "identifier" "." "identifier" from "identifier"
   50     | . "import" lvalue
   51     | . exp "!" args.opt tilda.opt
   52 routine: . "closure"
   53        | . "function"
   54 stmt: . routine k1_id formals block
   55     | . id id formals block
   62 exp: . exp "=" exp
   63    | . exp "=" exp modifiers
   64    | . lvalue "+=" exp
   65    | . lvalue "-=" exp
   66    | . lvalue "*=" exp
   67    | . lvalue "/=" exp
   68    | . lvalue "^=" exp
   69    | . lvalue "%=" exp
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
   73 stmt: . "at" identifiers "(" exp tilda.opt ")" stmt onleave.opt
   74     | . "at" identifiers "(" event_match ")" stmt onleave.opt
   75     | . "every" "(" exp ")" stmt
   76     | . "if" "(" stmts ")" stmt else.opt
   77     | . "freezeif" "(" exp ")" stmt
   78     | . "stopif" "(" exp ")" stmt
   79     | . "switch" "(" exp ")" "{" cases default.opt "}"
   80     | . "timeout" "(" exp ")" stmt catch.opt else.opt finally.opt
   81     | . "return" exp.opt
   82     | . "break"
   83     | . "continue"
   84     | . "waituntil" "(" exp tilda.opt ")"
   85     | . "waituntil" "(" event_match ")"
   86     | . "whenever" "(" exp tilda.opt ")" stmt else.opt
   87     | . "whenever" "(" event_match ")" stmt else.opt
  108     | . "try" block catches.1 else.opt finally.opt
  109     | . "try" block "finally" block
  110     | . "throw" exp.opt
  111     | . "loop" stmt
  112     | . "for" "(" exp ")" stmt
  113     | . "for" "(" stmt.opt ";" exp ";" stmt.opt ")" stmt
  114     | . "for" "(" "var" "identifier" in_or_colon exp ")" stmt
  115     | . "while" "(" exp ")" stmt
  118 primary-exp: . block
  119            | . "do" "(" exp ")" block
  120 detach: . "detach"
  121       | . "disown"
  122 primary-exp: . "assert" "(" exp ")"
  123            | . "assert" "{" claims "}"
  124            | . detach "(" exp ")"
  125            | . detach block
  126            | . "isdef" "(" k1_id ")"
  127            | . "watch" "(" exp ")"
  128 lvalue: . id
  129       | . primary-exp "." id
  130       | . primary-exp "." "*"
  131 primary-exp: . "&" id
  132            | . primary-exp "." "&" id
  133 id: . "identifier"
  134 bitor-exp: . "var" bitor-exp
  135          | . "const" "var" bitor-exp
  136 primary-exp: . lvalue
  137            | . lvalue args
  138 new: . "new" "identifier" args.opt
  139 bitor-exp: . new
  140 id: . "new"
  141 primary-exp: . routine formals block
  142 float-exp: . "float"
  143 duration: . "duration"
  144         | . duration "duration"
  150 dictionary: . "[" assocs "]"
  154 tuple: . "(" tuple.exps ")"
  159 literal-exp: . float-exp
  160            | . "angle"
  161            | . duration
  162            | . string
  163            | . "[" exps "]"
  164            | . "<" bitor-exps ">"
  165            | . dictionary
  166            | . tuple
  167 string: . "string"
  168       | . string "string"
  169 literal-exp: . "__HERE__"
  175 lvalue: . primary-exp "[" exps "]"
  176 literal-exp: . "this"
  177            | . "call"
  178 primary-exp: . literal-exp
  179            | . "(" exp ")"
  180            | . "(" error ")"
  181            | . primary-exp "**" primary-exp
  182 unary-exp: . primary-exp
  183          | . "--" lvalue
  184          | . "++" lvalue
  185          | . "+" unary-exp
  186          | . "-" unary-exp
  187          | . "!" unary-exp
  188          | . "compl" unary-exp
  189 bitor-exp: . unary-exp
  190          | . bitor-exp "+" bitor-exp
  191          | . bitor-exp "-" bitor-exp
  192          | . bitor-exp "*" bitor-exp
  193          | . bitor-exp "/" bitor-exp
  194          | . bitor-exp "%" bitor-exp
  195          | . bitor-exp "^" bitor-exp
  196          | . bitor-exp "<<" bitor-exp
  197          | . bitor-exp "bitand" bitor-exp
  198          | . bitor-exp "bitor" bitor-exp
  199          | . bitor-exp ">>" bitor-exp
  210 rel-exp: . bitor-exp rel-ops
  213 exp: . rel-exp
  214    | . exp "&&" exp
  215    | . exp "||" exp
  216    | . exp "in" exp
  217    | . exp "!" "in" exp
  221    | . "%unscope:" unsigned
  222 primary-exp: . "%exp:" unsigned
  223 lvalue: . "%lvalue:" unsigned
  224       | . "%id:" unsigned
  225       | . primary-exp "." "%id:" unsigned
  226 primary-exp: . lvalue "(" "%exps:" unsigned ")"

    "__HERE__"    shift, and go to state 7
    "break"       shift, and go to state 8
    "closure"     shift, and go to state 9
    "const"       shift, and go to state 10
    "continue"    shift, and go to state 11
    "freezeif"    shift, and go to state 12
    "function"    shift, and go to state 13
    "if"          shift, and go to state 14
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "return"      shift, and go to state 19
    "stopif"      shift, and go to state 20
    "switch"      shift, and go to state 21
    "throw"       shift, and go to state 22
    "timeout"     shift, and go to state 23
    "try"         shift, and go to state 24
    "var"         shift, and go to state 25
    "waituntil"   shift, and go to state 26
    "watch"       shift, and go to state 27
    "whenever"    shift, and go to state 28
    "&"           shift, and go to state 29
    "every"       shift, and go to state 30
    "for"         shift, and go to state 31
    "loop"        shift, and go to state 32
    "while"       shift, and go to state 33
    "at"          shift, and go to state 34
    "identifier"  shift, and go to state 35
    "class"       shift, and go to state 36
    "package"     shift, and go to state 37
    "enum"        shift, and go to state 38
    "external"    shift, and go to state 39
    "import"      shift, and go to state 40
    "--"          shift, and go to state 41
    "++"          shift, and go to state 42
    "do"          shift, and go to state 43
    "assert"      shift, and go to state 44
    "detach"      shift, and go to state 45
    "disown"      shift, and go to state 46
    "new"         shift, and go to state 47
    "angle"       shift, and go to state 48
    "duration"    shift, and go to state 49
    "float"       shift, and go to state 50
    "string"      shift, and go to state 51
    "call"        shift, and go to state 52
    "this"        shift, and go to state 53
    "!"           shift, and go to state 54
    "compl"       shift, and go to state 55
    "-"           shift, and go to state 56
    "+"           shift, and go to state 57
    "<"           shift, and go to state 58
    "%unscope:"   shift, and go to state 59
    "%exp:"       shift, and go to state 60
    "%lvalue:"    shift, and go to state 61
    "%id:"        shift, and go to state 62

    $default  reduce using rule 15 (cstmt.opt)

    root_exps    go to state 84
    stmts        go to state 85
    cstmt.opt    go to state 86
    cstmt        go to state 65
    stmt         go to state 66
    block        go to state 67
    exp          go to state 68
    routine      go to state 69
    primary-exp  go to state 70
    detach       go to state 71
    lvalue       go to state 72
    id           go to state 73
    bitor-exp    go to state 74
    new          go to state 75
    float-exp    go to state 76
    duration     go to state 77
    dictionary   go to state 78
    tuple        go to state 79
    literal-exp  go to state 80
    string       go to state 81
    unary-exp    go to state 82
    rel-exp      go to state 83


state 4

    0 $accept: start . "end of command"

    "end of command"  shift, and go to state 87


state 5

    1 start: root .

    $default  reduce using rule 1 (start)


state 6

    8 root_exp: error . ";"
    9         | error . ","
   10         | error . "end of command"

    "end of command"  shift, and go to state 88
    ","               shift, and go to state 89
    ";"               shift, and go to state 90


state 7

  169 literal-exp: "__HERE__" .

    $default  reduce using rule 169 (literal-exp)


state 8

   82 stmt: "break" .

    $default  reduce using rule 82 (stmt)


state 9

   52 routine: "closure" .

    $default  reduce using rule 52 (routine)


state 10

  135 bitor-exp: "const" . "var" bitor-exp

    "var"  shift, and go to state 91


state 11

   83 stmt: "continue" .

    $default  reduce using rule 83 (stmt)


state 12

   77 stmt: "freezeif" . "(" exp ")" stmt

    "("  shift, and go to state 92


state 13

   53 routine: "function" .

    $default  reduce using rule 53 (routine)


state 14

   76 stmt: "if" . "(" stmts ")" stmt else.opt

    "("  shift, and go to state 93


state 15

  126 primary-exp: "isdef" . "(" k1_id ")"

    "("  shift, and go to state 94


state 16

   12 stmts: . cstmt.opt
   13      | . stmts ";" cstmt.opt
   14      | . stmts "," cstmt.opt
   15 cstmt.opt: .  ["}", ",", ";"]
   16          | . cstmt
   17          | . cstmt "|"
   18 cstmt: . stmt
   19      | . cstmt "|" cstmt
   20      | . cstmt "&" cstmt
   23 stmt: . primary-exp ":" stmt
   24     | . exp
   25 block: . "{" stmts "}"
   25      | "{" . stmts "}"
   26      | . "{" error "}"
   26      | "{" . error "}"
   27      | . "{" id "~" id "}"
   27      | "{" . id "~" id "}"
   37 exp: . "class" lvalue protos block
   38    | . "package" lvalue protos block
   43 stmt: . "enum" id "{" id.0 "}"
   47     | . "external" "identifier" "identifier"
   48     | . "external" "var" "identifier" "." "identifier" from "identifier"
   49     | . "external" event_or_function "(" unsigned ")" "identifier" "." "identifier" from "identifier"
   50     | . "import" lvalue
   51     | . exp "!" args.opt tilda.opt
   52 routine: . "closure"
   53        | . "function"
   54 stmt: . routine k1_id formals block
   55     | . id id formals block
   62 exp: . exp "=" exp
   63    | . exp "=" exp modifiers
   64    | . lvalue "+=" exp
   65    | . lvalue "-=" exp
   66    | . lvalue "*=" exp
   67    | . lvalue "/=" exp
   68    | . lvalue "^=" exp
   69    | . lvalue "%=" exp
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
   73 stmt: . "at" identifiers "(" exp tilda.opt ")" stmt onleave.opt
   74     | . "at" identifiers "(" event_match ")" stmt onleave.opt
   75     | . "every" "(" exp ")" stmt
   76     | . "if" "(" stmts ")" stmt else.opt
   77     | . "freezeif" "(" exp ")" stmt
   78     | . "stopif" "(" exp ")" stmt
   79     | . "switch" "(" exp ")" "{" cases default.opt "}"
   80     | . "timeout" "(" exp ")" stmt catch.opt else.opt finally.opt
   81     | . "return" exp.opt
   82     | . "break"
   83     | . "continue"
   84     | . "waituntil" "(" exp tilda.opt ")"
   85     | . "waituntil" "(" event_match ")"
   86     | . "whenever" "(" exp tilda.opt ")" stmt else.opt
   87     | . "whenever" "(" event_match ")" stmt else.opt
  108     | . "try" block catches.1 else.opt finally.opt
  109     | . "try" block "finally" block
  110     | . "throw" exp.opt
  111     | . "loop" stmt
  112     | . "for" "(" exp ")" stmt
  113     | . "for" "(" stmt.opt ";" exp ";" stmt.opt ")" stmt
  114     | . "for" "(" "var" "identifier" in_or_colon exp ")" stmt
  115     | . "while" "(" exp ")" stmt
  118 primary-exp: . block
  119            | . "do" "(" exp ")" block
  120 detach: . "detach"
  121       | . "disown"
  122 primary-exp: . "assert" "(" exp ")"
  123            | . "assert" "{" claims "}"
  124            | . detach "(" exp ")"
  125            | . detach block
  126            | . "isdef" "(" k1_id ")"
  127            | . "watch" "(" exp ")"
  128 lvalue: . id
  129       | . primary-exp "." id
  130       | . primary-exp "." "*"
  131 primary-exp: . "&" id
  132            | . primary-exp "." "&" id
  133 id: . "identifier"
  134 bitor-exp: . "var" bitor-exp
  135          | . "const" "var" bitor-exp
  136 primary-exp: . lvalue
  137            | . lvalue args
  138 new: . "new" "identifier" args.opt
  139 bitor-exp: . new
  140 id: . "new"
  141 primary-exp: . routine formals block
  142 float-exp: . "float"
  143 duration: . "duration"
  144         | . duration "duration"
  150 dictionary: . "[" assocs "]"
  154 tuple: . "(" tuple.exps ")"
  159 literal-exp: . float-exp
  160            | . "angle"
  161            | . duration
  162            | . string
  163            | . "[" exps "]"
  164            | . "<" bitor-exps ">"
  165            | . dictionary
  166            | . tuple
  167 string: . "string"
  168       | . string "string"
  169 literal-exp: . "__HERE__"
  175 lvalue: . primary-exp "[" exps "]"
  176 literal-exp: . "this"
  177            | . "call"
  178 primary-exp: . literal-exp
  179            | . "(" exp ")"
  180            | . "(" error ")"
  181            | . primary-exp "**" primary-exp
  182 unary-exp: . primary-exp
  183          | . "--" lvalue
  184          | . "++" lvalue
  185          | . "+" unary-exp
  186          | . "-" unary-exp
  187          | . "!" unary-exp
  188          | . "compl" unary-exp
  189 bitor-exp: . unary-exp
  190          | . bitor-exp "+" bitor-exp
  191          | . bitor-exp "-" bitor-exp
  192          | . bitor-exp "*" bitor-exp
  193          | . bitor-exp "/" bitor-exp
  194          | . bitor-exp "%" bitor-exp
  195          | . bitor-exp "^" bitor-exp
  196          | . bitor-exp "<<" bitor-exp
  197          | . bitor-exp "bitand" bitor-exp
  198          | . bitor-exp "bitor" bitor-exp
  199          | . bitor-exp ">>" bitor-exp
  210 rel-exp: . bitor-exp rel-ops
  213 exp: . rel-exp
  214    | . exp "&&" exp
  215    | . exp "||" exp
  216    | . exp "in" exp
  217    | . exp "!" "in" exp
  221    | . "%unscope:" unsigned
  222 primary-exp: . "%exp:" unsigned
  223 lvalue: . "%lvalue:" unsigned
  224       | . "%id:" unsigned
  225       | . primary-exp "." "%id:" unsigned
  226 primary-exp: . lvalue "(" "%exps:" unsigned ")"

    error         shift, and go to state 95
    "__HERE__"    shift, and go to state 7
    "break"       shift, and go to state 8
    "closure"     shift, and go to state 9
    "const"       shift, and go to state 10
    "continue"    shift, and go to state 11
    "freezeif"    shift, and go to state 12
    "function"    shift, and go to state 13
    "if"          shift, and go to state 14
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "return"      shift, and go to state 19
    "stopif"      shift, and go to state 20
    "switch"      shift, and go to state 21
    "throw"       shift, and go to state 22
    "timeout"     shift, and go to state 23
    "try"         shift, and go to state 24
    "var"         shift, and go to state 25
    "waituntil"   shift, and go to state 26
    "watch"       shift, and go to state 27
    "whenever"    shift, and go to state 28
    "&"           shift, and go to state 29
    "every"       shift, and go to state 30
    "for"         shift, and go to state 31
    "loop"        shift, and go to state 32
    "while"       shift, and go to state 33
    "at"          shift, and go to state 34
    "identifier"  shift, and go to state 35
    "class"       shift, and go to state 36
    "package"     shift, and go to state 37
    "enum"        shift, and go to state 38
    "external"    shift, and go to state 39
    "import"      shift, and go to state 40
    "--"          shift, and go to state 41
    "++"          shift, and go to state 42
    "do"          shift, and go to state 43
    "assert"      shift, and go to state 44
    "detach"      shift, and go to state 45
    "disown"      shift, and go to state 46
    "new"         shift, and go to state 47
    "angle"       shift, and go to state 48
    "duration"    shift, and go to state 49
    "float"       shift, and go to state 50
    "string"      shift, and go to state 51
    "call"        shift, and go to state 52
    "this"        shift, and go to state 53
    "!"           shift, and go to state 54
    "compl"       shift, and go to state 55
    "-"           shift, and go to state 56
    "+"           shift, and go to state 57
    "<"           shift, and go to state 58
    "%unscope:"   shift, and go to state 59
    "%exp:"       shift, and go to state 60
    "%lvalue:"    shift, and go to state 61
    "%id:"        shift, and go to state 62

    "}"  reduce using rule 15 (cstmt.opt)
    ","  reduce using rule 15 (cstmt.opt)
    ";"  reduce using rule 15 (cstmt.opt)

    stmts        go to state 96
    cstmt.opt    go to state 86
    cstmt        go to state 65
    stmt         go to state 66
    block        go to state 67
    exp          go to state 68
    routine      go to state 69
    primary-exp  go to state 70
    detach       go to state 71
    lvalue       go to state 72
    id           go to state 97
    bitor-exp    go to state 74
    new          go to state 75
    float-exp    go to state 76
    duration     go to state 77
    dictionary   go to state 78
    tuple        go to state 79
    literal-exp  go to state 80
    string       go to state 81
    unary-exp    go to state 82
    rel-exp      go to state 83


state 17

   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   37 exp: . "class" lvalue protos block
   38    | . "package" lvalue protos block
   52 routine: . "closure"
   53        | . "function"
   62 exp: . exp "=" exp
   63    | . exp "=" exp modifiers
   64    | . lvalue "+=" exp
   65    | . lvalue "-=" exp
   66    | . lvalue "*=" exp
   67    | . lvalue "/=" exp
   68    | . lvalue "^=" exp
   69    | . lvalue "%=" exp
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
  118            | . block
  119            | . "do" "(" exp ")" block
  120 detach: . "detach"
  121       | . "disown"
  122 primary-exp: . "assert" "(" exp ")"
  123            | . "assert" "{" claims "}"
  124            | . detach "(" exp ")"
  125            | . detach block
  126            | . "isdef" "(" k1_id ")"
  127            | . "watch" "(" exp ")"
  128 lvalue: . id
  129       | . primary-exp "." id
  130       | . primary-exp "." "*"
  131 primary-exp: . "&" id
  132            | . primary-exp "." "&" id
  133 id: . "identifier"
  134 bitor-exp: . "var" bitor-exp
  135          | . "const" "var" bitor-exp
  136 primary-exp: . lvalue
  137            | . lvalue args
  138 new: . "new" "identifier" args.opt
  139 bitor-exp: . new
  140 id: . "new"
  141 primary-exp: . routine formals block
  142 float-exp: . "float"
  143 duration: . "duration"
  144         | . duration "duration"
  145 assoc: . exp "=>" exp
  146 assocs.1: . assoc
  147         | . assocs.1 "," assoc
  148 assocs: . "=>"
  149       | . assocs.1 comma.opt
  150 dictionary: . "[" assocs "]"
  150           | "[" . assocs "]"
  154 tuple: . "(" tuple.exps ")"
  159 literal-exp: . float-exp
  160            | . "angle"
  161            | . duration
  162            | . string
  163            | . "[" exps "]"
  163            | "[" . exps "]"
  164            | . "<" bitor-exps ">"
  165            | . dictionary
  166            | . tuple
  167 string: . "string"
  168       | . string "string"
  169 literal-exp: . "__HERE__"
  175 lvalue: . primary-exp "[" exps "]"
  176 literal-exp: . "this"
  177            | . "call"
  178 primary-exp: . literal-exp
  179            | . "(" exp ")"
  180            | . "(" error ")"
  181            | . primary-exp "**" primary-exp
  182 unary-exp: . primary-exp
  183          | . "--" lvalue
  184          | . "++" lvalue
  185          | . "+" unary-exp
  186          | . "-" unary-exp
  187          | . "!" unary-exp
  188          | . "compl" unary-exp
  189 bitor-exp: . unary-exp
  190          | . bitor-exp "+" bitor-exp
  191          | . bitor-exp "-" bitor-exp
  192          | . bitor-exp "*" bitor-exp
  193          | . bitor-exp "/" bitor-exp
  194          | . bitor-exp "%" bitor-exp
  195          | . bitor-exp "^" bitor-exp
  196          | . bitor-exp "<<" bitor-exp
  197          | . bitor-exp "bitand" bitor-exp
  198          | . bitor-exp "bitor" bitor-exp
  199          | . bitor-exp ">>" bitor-exp
  210 rel-exp: . bitor-exp rel-ops
  213 exp: . rel-exp
  214    | . exp "&&" exp
  215    | . exp "||" exp
  216    | . exp "in" exp
  217    | . exp "!" "in" exp
  221    | . "%unscope:" unsigned
  222 primary-exp: . "%exp:" unsigned
  223 lvalue: . "%lvalue:" unsigned
  224       | . "%id:" unsigned
  225       | . primary-exp "." "%id:" unsigned
  226 primary-exp: . lvalue "(" "%exps:" unsigned ")"
  231 exps: .  ["]"]
  232     | . exps.1 comma.opt
  233 exps.1: . exp
  234       | . exps.1 "," exp

    "__HERE__"    shift, and go to state 7
    "closure"     shift, and go to state 9
    "const"       shift, and go to state 10
    "function"    shift, and go to state 13
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "var"         shift, and go to state 25
    "watch"       shift, and go to state 27
    "&"           shift, and go to state 29
    "identifier"  shift, and go to state 35
    "class"       shift, and go to state 36
    "package"     shift, and go to state 37
    "--"          shift, and go to state 41
    "++"          shift, and go to state 42
    "do"          shift, and go to state 43
    "assert"      shift, and go to state 44
    "detach"      shift, and go to state 45
    "disown"      shift, and go to state 46
    "new"         shift, and go to state 47
    "angle"       shift, and go to state 48
    "duration"    shift, and go to state 49
    "float"       shift, and go to state 50
    "=>"          shift, and go to state 98
    "string"      shift, and go to state 51
    "call"        shift, and go to state 52
    "this"        shift, and go to state 53
    "!"           shift, and go to state 54
    "compl"       shift, and go to state 55
    "-"           shift, and go to state 56
    "+"           shift, and go to state 57
    "<"           shift, and go to state 58
    "%unscope:"   shift, and go to state 59
    "%exp:"       shift, and go to state 60
    "%lvalue:"    shift, and go to state 61
    "%id:"        shift, and go to state 62

    $default  reduce using rule 231 (exps)

    block        go to state 67
    exp          go to state 99
    routine      go to state 100
    primary-exp  go to state 101
    detach       go to state 71
    lvalue       go to state 72
    id           go to state 102
    bitor-exp    go to state 74
    new          go to state 75
    float-exp    go to state 76
    duration     go to state 77
    assoc        go to state 103
    assocs.1     go to state 104
    assocs       go to state 105
    dictionary   go to state 78
    tuple        go to state 79
    literal-exp  go to state 80
    string       go to state 81
    unary-exp    go to state 82
    rel-exp      go to state 83
    exps         go to state 106
    exps.1       go to state 107


state 18

   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   37 exp: . "class" lvalue protos block
   38    | . "package" lvalue protos block
   52 routine: . "closure"
   53        | . "function"
   62 exp: . exp "=" exp
   63    | . exp "=" exp modifiers
   64    | . lvalue "+=" exp
   65    | . lvalue "-=" exp
   66    | . lvalue "*=" exp
   67    | . lvalue "/=" exp
   68    | . lvalue "^=" exp
   69    | . lvalue "%=" exp
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
  118            | . block
  119            | . "do" "(" exp ")" block
  120 detach: . "detach"
  121       | . "disown"
  122 primary-exp: . "assert" "(" exp ")"
  123            | . "assert" "{" claims "}"
  124            | . detach "(" exp ")"
  125            | . detach block
  126            | . "isdef" "(" k1_id ")"
  127            | . "watch" "(" exp ")"
  128 lvalue: . id
  129       | . primary-exp "." id
  130       | . primary-exp "." "*"
  131 primary-exp: . "&" id
  132            | . primary-exp "." "&" id
  133 id: . "identifier"
  134 bitor-exp: . "var" bitor-exp
  135          | . "const" "var" bitor-exp
  136 primary-exp: . lvalue
  137            | . lvalue args
  138 new: . "new" "identifier" args.opt
  139 bitor-exp: . new
  140 id: . "new"
  141 primary-exp: . routine formals block
  142 float-exp: . "float"
  143 duration: . "duration"
  144         | . duration "duration"
  150 dictionary: . "[" assocs "]"
  151 tuple.exps: .  [")"]
  152           | . exps.1 ","
  153           | . exps.2
  154 tuple: . "(" tuple.exps ")"
  154      | "(" . tuple.exps ")"
  159 literal-exp: . float-exp
  160            | . "angle"
  161            | . duration
  162            | . string
  163            | . "[" exps "]"
  164            | . "<" bitor-exps ">"
  165            | . dictionary
  166            | . tuple
  167 string: . "string"
  168       | . string "string"
  169 literal-exp: . "__HERE__"
  175 lvalue: . primary-exp "[" exps "]"
  176 literal-exp: . "this"
  177            | . "call"
  178 primary-exp: . literal-exp
  179            | . "(" exp ")"
  179            | "(" . exp ")"
  180            | . "(" error ")"
  180            | "(" . error ")"
  181            | . primary-exp "**" primary-exp
  182 unary-exp: . primary-exp
  183          | . "--" lvalue
  184          | . "++" lvalue
  185          | . "+" unary-exp
  186          | . "-" unary-exp
  187          | . "!" unary-exp
  188          | . "compl" unary-exp
  189 bitor-exp: . unary-exp
  190          | . bitor-exp "+" bitor-exp
  191          | . bitor-exp "-" bitor-exp
  192          | . bitor-exp "*" bitor-exp
  193          | . bitor-exp "/" bitor-exp
  194          | . bitor-exp "%" bitor-exp
  195          | . bitor-exp "^" bitor-exp
  196          | . bitor-exp "<<" bitor-exp
  197          | . bitor-exp "bitand" bitor-exp
  198          | . bitor-exp "bitor" bitor-exp
  199          | . bitor-exp ">>" bitor-exp
  210 rel-exp: . bitor-exp rel-ops
  213 exp: . rel-exp
  214    | . exp "&&" exp
  215    | . exp "||" exp
  216    | . exp "in" exp
  217    | . exp "!" "in" exp
  221    | . "%unscope:" unsigned
  222 primary-exp: . "%exp:" unsigned
  223 lvalue: . "%lvalue:" unsigned
  224       | . "%id:" unsigned
  225       | . primary-exp "." "%id:" unsigned
  226 primary-exp: . lvalue "(" "%exps:" unsigned ")"
  233 exps.1: . exp
  234       | . exps.1 "," exp
  235 exps.2: . exps.1 "," exp

    error         shift, and go to state 108
    "__HERE__"    shift, and go to state 7
    "closure"     shift, and go to state 9
    "const"       shift, and go to state 10
    "function"    shift, and go to state 13
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "var"         shift, and go to state 25
    "watch"       shift, and go to state 27
    "&"           shift, and go to state 29
    "identifier"  shift, and go to state 35
    "class"       shift, and go to state 36
    "package"     shift, and go to state 37
    "--"          shift, and go to state 41
    "++"          shift, and go to state 42
    "do"          shift, and go to state 43
    "assert"      shift, and go to state 44
    "detach"      shift, and go to state 45
    "disown"      shift, and go to state 46
    "new"         shift, and go to state 47
    "angle"       shift, and go to state 48
    "duration"    shift, and go to state 49
    "float"       shift, and go to state 50
    "string"      shift, and go to state 51
    "call"        shift, and go to state 52
    "this"        shift, and go to state 53
    "!"           shift, and go to state 54
    "compl"       shift, and go to state 55
    "-"           shift, and go to state 56
    "+"           shift, and go to state 57
    "<"           shift, and go to state 58
    "%unscope:"   shift, and go to state 59
    "%exp:"       shift, and go to state 60
    "%lvalue:"    shift, and go to state 61
    "%id:"        shift, and go to state 62

    ")"  reduce using rule 151 (tuple.exps)

    block        go to state 67
    exp          go to state 109
    routine      go to state 100
    primary-exp  go to state 101
    detach       go to state 71
    lvalue       go to state 72
    id           go to state 102
    bitor-exp    go to state 74
    new          go to state 75
    float-exp    go to state 76
    duration     go to state 77
    dictionary   go to state 78
    tuple.exps   go to state 110
    tuple        go to state 79
    literal-exp  go to state 80
    string       go to state 81
    unary-exp    go to state 82
    rel-exp      go to state 83
    exps.1       go to state 111
    exps.2       go to state 112


state 19

   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   37 exp: . "class" lvalue protos block
   38    | . "package" lvalue protos block
   52 routine: . "closure"
   53        | . "function"
   62 exp: . exp "=" exp
   63    | . exp "=" exp modifiers
   64    | . lvalue "+=" exp
   65    | . lvalue "-=" exp
   66    | . lvalue "*=" exp
   67    | . lvalue "/=" exp
   68    | . lvalue "^=" exp
   69    | . lvalue "%=" exp
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
   81 stmt: "return" . exp.opt
  118 primary-exp: . block
  119            | . "do" "(" exp ")" block
  120 detach: . "detach"
  121       | . "disown"
  122 primary-exp: . "assert" "(" exp ")"
  123            | . "assert" "{" claims "}"
  124            | . detach "(" exp ")"
  125            | . detach block
  126            | . "isdef" "(" k1_id ")"
  127            | . "watch" "(" exp ")"
  128 lvalue: . id
  129       | . primary-exp "." id
  130       | . primary-exp "." "*"
  131 primary-exp: . "&" id
  132            | . primary-exp "." "&" id
  133 id: . "identifier"
  134 bitor-exp: . "var" bitor-exp
  135          | . "const" "var" bitor-exp
  136 primary-exp: . lvalue
  137            | . lvalue args
  138 new: . "new" "identifier" args.opt
  139 bitor-exp: . new
  140 id: . "new"
  141 primary-exp: . routine formals block
  142 float-exp: . "float"
  143 duration: . "duration"
  144         | . duration "duration"
  150 dictionary: . "[" assocs "]"
  154 tuple: . "(" tuple.exps ")"
  159 literal-exp: . float-exp
  160            | . "angle"
  161            | . duration
  162            | . string
  163            | . "[" exps "]"
  164            | . "<" bitor-exps ">"
  165            | . dictionary
  166            | . tuple
  167 string: . "string"
  168       | . string "string"
  169 literal-exp: . "__HERE__"
  175 lvalue: . primary-exp "[" exps "]"
  176 literal-exp: . "this"
  177            | . "call"
  178 primary-exp: . literal-exp
  179            | . "(" exp ")"
  180            | . "(" error ")"
  181            | . primary-exp "**" primary-exp
  182 unary-exp: . primary-exp
  183          | . "--" lvalue
  184          | . "++" lvalue
  185          | . "+" unary-exp
  186          | . "-" unary-exp
  187          | . "!" unary-exp
  188          | . "compl" unary-exp
  189 bitor-exp: . unary-exp
  190          | . bitor-exp "+" bitor-exp
  191          | . bitor-exp "-" bitor-exp
  192          | . bitor-exp "*" bitor-exp
  193          | . bitor-exp "/" bitor-exp
  194          | . bitor-exp "%" bitor-exp
  195          | . bitor-exp "^" bitor-exp
  196          | . bitor-exp "<<" bitor-exp
  197          | . bitor-exp "bitand" bitor-exp
  198          | . bitor-exp "bitor" bitor-exp
  199          | . bitor-exp ">>" bitor-exp
  210 rel-exp: . bitor-exp rel-ops
  213 exp: . rel-exp
  214    | . exp "&&" exp
  215    | . exp "||" exp
  216    | . exp "in" exp
  217    | . exp "!" "in" exp
  218 exp.opt: .  ["end of command", "case", "catch", "default", "else", "finally", "onleave", "}", ")", ",", ";", "&", "|"]
  219        | . exp
  221 exp: . "%unscope:" unsigned
  222 primary-exp: . "%exp:" unsigned
  223 lvalue: . "%lvalue:" unsigned
  224       | . "%id:" unsigned
  225       | . primary-exp "." "%id:" unsigned
  226 primary-exp: . lvalue "(" "%exps:" unsigned ")"

    "__HERE__"    shift, and go to state 7
    "closure"     shift, and go to state 9
    "const"       shift, and go to state 10
    "function"    shift, and go to state 13
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "var"         shift, and go to state 25
    "watch"       shift, and go to state 27
    "identifier"  shift, and go to state 35
    "class"       shift, and go to state 36
    "package"     shift, and go to state 37
    "--"          shift, and go to state 41
    "++"          shift, and go to state 42
    "do"          shift, and go to state 43
    "assert"      shift, and go to state 44
    "detach"      shift, and go to state 45
    "disown"      shift, and go to state 46
    "new"         shift, and go to state 47
    "angle"       shift, and go to state 48
    "duration"    shift, and go to state 49
    "float"       shift, and go to state 50
    "string"      shift, and go to state 51
    "call"        shift, and go to state 52
    "this"        shift, and go to state 53
    "!"           shift, and go to state 54
    "compl"       shift, and go to state 55
    "-"           shift, and go to state 56
    "+"           shift, and go to state 57
    "<"           shift, and go to state 58
    "%unscope:"   shift, and go to state 59
    "%exp:"       shift, and go to state 60
    "%lvalue:"    shift, and go to state 61
    "%id:"        shift, and go to state 62

    $default  reduce using rule 218 (exp.opt)

    block        go to state 67
    exp          go to state 113
    routine      go to state 100
    primary-exp  go to state 101
    detach       go to state 71
    lvalue       go to state 72
    id           go to state 102
    bitor-exp    go to state 74
    new          go to state 75
    float-exp    go to state 76
    duration     go to state 77
    dictionary   go to state 78
    tuple        go to state 79
    literal-exp  go to state 80
    string       go to state 81
    unary-exp    go to state 82
    rel-exp      go to state 83
    exp.opt      go to state 114

    Conflict between rule 218 and token "&" resolved as reduce ("&" < EMPTY).


state 20

   78 stmt: "stopif" . "(" exp ")" stmt

    "("  shift, and go to state 115


state 21

   79 stmt: "switch" . "(" exp ")" "{" cases default.opt "}"

    "("  shift, and go to state 116


state 22

   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   37 exp: . "class" lvalue protos block
   38    | . "package" lvalue protos block
   52 routine: . "closure"
   53        | . "function"
   62 exp: . exp "=" exp
   63    | . exp "=" exp modifiers
   64    | . lvalue "+=" exp
   65    | . lvalue "-=" exp
   66    | . lvalue "*=" exp
   67    | . lvalue "/=" exp
   68    | . lvalue "^=" exp
   69    | . lvalue "%=" exp
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
  110 stmt: "throw" . exp.opt
  118 primary-exp: . block
  119            | . "do" "(" exp ")" block
  120 detach: . "detach"
  121       | . "disown"
  122 primary-exp: . "assert" "(" exp ")"
  123            | . "assert" "{" claims "}"
  124            | . detach "(" exp ")"
  125            | . detach block
  126            | . "isdef" "(" k1_id ")"
  127            | . "watch" "(" exp ")"
  128 lvalue: . id
  129       | . primary-exp "." id
  130       | . primary-exp "." "*"
  131 primary-exp: . "&" id
  132            | . primary-exp "." "&" id
  133 id: . "identifier"
  134 bitor-exp: . "var" bitor-exp
  135          | . "const" "var" bitor-exp
  136 primary-exp: . lvalue
  137            | . lvalue args
  138 new: . "new" "identifier" args.opt
  139 bitor-exp: . new
  140 id: . "new"
  141 primary-exp: . routine formals block
  142 float-exp: . "float"
  143 duration: . "duration"
  144         | . duration "duration"
  150 dictionary: . "[" assocs "]"
  154 tuple: . "(" tuple.exps ")"
  159 literal-exp: . float-exp
  160            | . "angle"
  161            | . duration
  162            | . string
  163            | . "[" exps "]"
  164            | . "<" bitor-exps ">"
  165            | . dictionary
  166            | . tuple
  167 string: . "string"
  168       | . string "string"
  169 literal-exp: . "__HERE__"
  175 lvalue: . primary-exp "[" exps "]"
  176 literal-exp: . "this"
  177            | . "call"
  178 primary-exp: . literal-exp
  179            | . "(" exp ")"
  180            | . "(" error ")"
  181            | . primary-exp "**" primary-exp
  182 unary-exp: . primary-exp
  183          | . "--" lvalue
  184          | . "++" lvalue
  185          | . "+" unary-exp
  186          | . "-" unary-exp
  187          | . "!" unary-exp
  188          | . "compl" unary-exp
  189 bitor-exp: . unary-exp
  190          | . bitor-exp "+" bitor-exp
  191          | . bitor-exp "-" bitor-exp
  192          | . bitor-exp "*" bitor-exp
  193          | . bitor-exp "/" bitor-exp
  194          | . bitor-exp "%" bitor-exp
  195          | . bitor-exp "^" bitor-exp
  196          | . bitor-exp "<<" bitor-exp
  197          | . bitor-exp "bitand" bitor-exp
  198          | . bitor-exp "bitor" bitor-exp
  199          | . bitor-exp ">>" bitor-exp
  210 rel-exp: . bitor-exp rel-ops
  213 exp: . rel-exp
  214    | . exp "&&" exp
  215    | . exp "||" exp
  216    | . exp "in" exp
  217    | . exp "!" "in" exp
  218 exp.opt: .  ["end of command", "case", "catch", "default", "else", "finally", "onleave", "}", ")", ",", ";", "&", "|"]
  219        | . exp
  221 exp: . "%unscope:" unsigned
  222 primary-exp: . "%exp:" unsigned
  223 lvalue: . "%lvalue:" unsigned
  224       | . "%id:" unsigned
  225       | . primary-exp "." "%id:" unsigned
  226 primary-exp: . lvalue "(" "%exps:" unsigned ")"

    "__HERE__"    shift, and go to state 7
    "closure"     shift, and go to state 9
    "const"       shift, and go to state 10
    "function"    shift, and go to state 13
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "var"         shift, and go to state 25
    "watch"       shift, and go to state 27
    "identifier"  shift, and go to state 35
    "class"       shift, and go to state 36
    "package"     shift, and go to state 37
    "--"          shift, and go to state 41
    "++"          shift, and go to state 42
    "do"          shift, and go to state 43
    "assert"      shift, and go to state 44
    "detach"      shift, and go to state 45
    "disown"      shift, and go to state 46
    "new"         shift, and go to state 47
    "angle"       shift, and go to state 48
    "duration"    shift, and go to state 49
    "float"       shift, and go to state 50
    "string"      shift, and go to state 51
    "call"        shift, and go to state 52
    "this"        shift, and go to state 53
    "!"           shift, and go to state 54
    "compl"       shift, and go to state 55
    "-"           shift, and go to state 56
    "+"           shift, and go to state 57
    "<"           shift, and go to state 58
    "%unscope:"   shift, and go to state 59
    "%exp:"       shift, and go to state 60
    "%lvalue:"    shift, and go to state 61
    "%id:"        shift, and go to state 62

    $default  reduce using rule 218 (exp.opt)

    block        go to state 67
    exp          go to state 113
    routine      go to state 100
    primary-exp  go to state 101
    detach       go to state 71
    lvalue       go to state 72
    id           go to state 102
    bitor-exp    go to state 74
    new          go to state 75
    float-exp    go to state 76
    duration     go to state 77
    dictionary   go to state 78
    tuple        go to state 79
    literal-exp  go to state 80
    string       go to state 81
    unary-exp    go to state 82
    rel-exp      go to state 83
    exp.opt      go to state 117

    Conflict between rule 218 and token "&" resolved as reduce ("&" < EMPTY).


state 23

   80 stmt: "timeout" . "(" exp ")" stmt catch.opt else.opt finally.opt

    "("  shift, and go to state 118


state 24

   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
  108 stmt: "try" . block catches.1 else.opt finally.opt
  109     | "try" . block "finally" block

    "{"  shift, and go to state 16

    block  go to state 119


state 25

   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   52 routine: . "closure"
   53        | . "function"
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
  118            | . block
  119            | . "do" "(" exp ")" block
  120 detach: . "detach"
  121       | . "disown"
  122 primary-exp: . "assert" "(" exp ")"
  123            | . "assert" "{" claims "}"
  124            | . detach "(" exp ")"
  125            | . detach block
  126            | . "isdef" "(" k1_id ")"
  127            | . "watch" "(" exp ")"
  128 lvalue: . id
  129       | . primary-exp "." id
  130       | . primary-exp "." "*"
  131 primary-exp: . "&" id
  132            | . primary-exp "." "&" id
  133 id: . "identifier"
  134 bitor-exp: . "var" bitor-exp
  134          | "var" . bitor-exp
  135          | . "const" "var" bitor-exp
  136 primary-exp: . lvalue
  137            | . lvalue args
  138 new: . "new" "identifier" args.opt
  139 bitor-exp: . new
  140 id: . "new"
  141 primary-exp: . routine formals block
  142 float-exp: . "float"
  143 duration: . "duration"
  144         | . duration "duration"
  150 dictionary: . "[" assocs "]"
  154 tuple: . "(" tuple.exps ")"
  159 literal-exp: . float-exp
  160            | . "angle"
  161            | . duration
  162            | . string
  163            | . "[" exps "]"
  164            | . "<" bitor-exps ">"
  165            | . dictionary
  166            | . tuple
  167 string: . "string"
  168       | . string "string"
  169 literal-exp: . "__HERE__"
  175 lvalue: . primary-exp "[" exps "]"
  176 literal-exp: . "this"
  177            | . "call"
  178 primary-exp: . literal-exp
  179            | . "(" exp ")"
  180            | . "(" error ")"
  181            | . primary-exp "**" primary-exp
  182 unary-exp: . primary-exp
  183          | . "--" lvalue
  184          | . "++" lvalue
  185          | . "+" unary-exp
  186          | . "-" unary-exp
  187          | . "!" unary-exp
  188          | . "compl" unary-exp
  189 bitor-exp: . unary-exp
  190          | . bitor-exp "+" bitor-exp
  191          | . bitor-exp "-" bitor-exp
  192          | . bitor-exp "*" bitor-exp
  193          | . bitor-exp "/" bitor-exp
  194          | . bitor-exp "%" bitor-exp
  195          | . bitor-exp "^" bitor-exp
  196          | . bitor-exp "<<" bitor-exp
  197          | . bitor-exp "bitand" bitor-exp
  198          | . bitor-exp "bitor" bitor-exp
  199          | . bitor-exp ">>" bitor-exp
  222 primary-exp: . "%exp:" unsigned
  223 lvalue: . "%lvalue:" unsigned
  224       | . "%id:" unsigned
  225       | . primary-exp "." "%id:" unsigned
  226 primary-exp: . lvalue "(" "%exps:" unsigned ")"

    "__HERE__"    shift, and go to state 7
    "closure"     shift, and go to state 9
    "const"       shift, and go to state 10
    "function"    shift, and go to state 13
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "var"         shift, and go to state 25
    "watch"       shift, and go to state 27
    "&"           shift, and go to state 29
    "identifier"  shift, and go to state 35
    "--"          shift, and go to state 41
    "++"          shift, and go to state 42
    "do"          shift, and go to state 43
    "assert"      shift, and go to state 44
    "detach"      shift, and go to state 45
    "disown"      shift, and go to state 46
    "new"         shift, and go to state 47
    "angle"       shift, and go to state 48
    "duration"    shift, and go to state 49
    "float"       shift, and go to state 50
    "string"      shift, and go to state 51
    "call"        shift, and go to state 52
    "this"        shift, and go to state 53
    "!"           shift, and go to state 54
    "compl"       shift, and go to state 55
    "-"           shift, and go to state 56
    "+"           shift, and go to state 57
    "<"           shift, and go to state 58
    "%exp:"       shift, and go to state 60
    "%lvalue:"    shift, and go to state 61
    "%id:"        shift, and go to state 62

    block        go to state 67
    routine      go to state 100
    primary-exp  go to state 101
    detach       go to state 71
    lvalue       go to state 120
    id           go to state 102
    bitor-exp    go to state 121
    new          go to state 75
    float-exp    go to state 76
    duration     go to state 77
    dictionary   go to state 78
    tuple        go to state 79
    literal-exp  go to state 80
    string       go to state 81
    unary-exp    go to state 82


state 26

   84 stmt: "waituntil" . "(" exp tilda.opt ")"
   85     | "waituntil" . "(" event_match ")"

    "("  shift, and go to state 122


state 27

  127 primary-exp: "watch" . "(" exp ")"

    "("  shift, and go to state 123


state 28

   86 stmt: "whenever" . "(" exp tilda.opt ")" stmt else.opt
   87     | "whenever" . "(" event_match ")" stmt else.opt

    "("  shift, and go to state 124


state 29

  131 primary-exp: "&" . id
  133 id: . "identifier"
  140   | . "new"

    "identifier"  shift, and go to state 35
    "new"         shift, and go to state 125

    id  go to state 126


state 30

   75 stmt: "every" . "(" exp ")" stmt

    "("  shift, and go to state 127


state 31

  112 stmt: "for" . "(" exp ")" stmt
  113     | "for" . "(" stmt.opt ";" exp ";" stmt.opt ")" stmt
  114     | "for" . "(" "var" "identifier" in_or_colon exp ")" stmt

    "("  shift, and go to state 128


state 32

   23 stmt: . primary-exp ":" stmt
   24     | . exp
   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   37 exp: . "class" lvalue protos block
   38    | . "package" lvalue protos block
   43 stmt: . "enum" id "{" id.0 "}"
   47     | . "external" "identifier" "identifier"
   48     | . "external" "var" "identifier" "." "identifier" from "identifier"
   49     | . "external" event_or_function "(" unsigned ")" "identifier" "." "identifier" from "identifier"
   50     | . "import" lvalue
   51     | . exp "!" args.opt tilda.opt
   52 routine: . "closure"
   53        | . "function"
   54 stmt: . routine k1_id formals block
   55     | . id id formals block
   62 exp: . exp "=" exp
   63    | . exp "=" exp modifiers
   64    | . lvalue "+=" exp
   65    | . lvalue "-=" exp
   66    | . lvalue "*=" exp
   67    | . lvalue "/=" exp
   68    | . lvalue "^=" exp
   69    | . lvalue "%=" exp
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
   73 stmt: . "at" identifiers "(" exp tilda.opt ")" stmt onleave.opt
   74     | . "at" identifiers "(" event_match ")" stmt onleave.opt
   75     | . "every" "(" exp ")" stmt
   76     | . "if" "(" stmts ")" stmt else.opt
   77     | . "freezeif" "(" exp ")" stmt
   78     | . "stopif" "(" exp ")" stmt
   79     | . "switch" "(" exp ")" "{" cases default.opt "}"
   80     | . "timeout" "(" exp ")" stmt catch.opt else.opt finally.opt
   81     | . "return" exp.opt
   82     | . "break"
   83     | . "continue"
   84     | . "waituntil" "(" exp tilda.opt ")"
   85     | . "waituntil" "(" event_match ")"
   86     | . "whenever" "(" exp tilda.opt ")" stmt else.opt
   87     | . "whenever" "(" event_match ")" stmt else.opt
  108     | . "try" block catches.1 else.opt finally.opt
  109     | . "try" block "finally" block
  110     | . "throw" exp.opt
  111     | . "loop" stmt
  111     | "loop" . stmt
  112     | . "for" "(" exp ")" stmt
  113     | . "for" "(" stmt.opt ";" exp ";" stmt.opt ")" stmt
  114     | . "for" "(" "var" "identifier" in_or_colon exp ")" stmt
  115     | . "while" "(" exp ")" stmt
  118 primary-exp: . block
  119            | . "do" "(" exp ")" block
  120 detach: . "detach"
  121       | . "disown"
  122 primary-exp: . "assert" "(" exp ")"
  123            | . "assert" "{" claims "}"
  124            | . detach "(" exp ")"
  125            | . detach block
  126            | . "isdef" "(" k1_id ")"
  127            | . "watch" "(" exp ")"
  128 lvalue: . id
  129       | . primary-exp "." id
  130       | . primary-exp "." "*"
  131 primary-exp: . "&" id
  132            | . primary-exp "." "&" id
  133 id: . "identifier"
  134 bitor-exp: . "var" bitor-exp
  135          | . "const" "var" bitor-exp
  136 primary-exp: . lvalue
  137            | . lvalue args
  138 new: . "new" "identifier" args.opt
  139 bitor-exp: . new
  140 id: . "new"
  141 primary-exp: . routine formals block
  142 float-exp: . "float"
  143 duration: . "duration"
  144         | . duration "duration"
  150 dictionary: . "[" assocs "]"
  154 tuple: . "(" tuple.exps ")"
  159 literal-exp: . float-exp
  160            | . "angle"
  161            | . duration
  162            | . string
  163            | . "[" exps "]"
  164            | . "<" bitor-exps ">"
  165            | . dictionary
  166            | . tuple
  167 string: . "string"
  168       | . string "string"
  169 literal-exp: . "__HERE__"
  175 lvalue: . primary-exp "[" exps "]"
  176 literal-exp: . "this"
  177            | . "call"
  178 primary-exp: . literal-exp
  179            | . "(" exp ")"
  180            | . "(" error ")"
  181            | . primary-exp "**" primary-exp
  182 unary-exp: . primary-exp
  183          | . "--" lvalue
  184          | . "++" lvalue
  185          | . "+" unary-exp
  186          | . "-" unary-exp
  187          | . "!" unary-exp
  188          | . "compl" unary-exp
  189 bitor-exp: . unary-exp
  190          | . bitor-exp "+" bitor-exp
  191          | . bitor-exp "-" bitor-exp
  192          | . bitor-exp "*" bitor-exp
  193          | . bitor-exp "/" bitor-exp
  194          | . bitor-exp "%" bitor-exp
  195          | . bitor-exp "^" bitor-exp
  196          | . bitor-exp "<<" bitor-exp
  197          | . bitor-exp "bitand" bitor-exp
  198          | . bitor-exp "bitor" bitor-exp
  199          | . bitor-exp ">>" bitor-exp
  210 rel-exp: . bitor-exp rel-ops
  213 exp: . rel-exp
  214    | . exp "&&" exp
  215    | . exp "||" exp
  216    | . exp "in" exp
  217    | . exp "!" "in" exp
  221    | . "%unscope:" unsigned
  222 primary-exp: . "%exp:" unsigned
  223 lvalue: . "%lvalue:" unsigned
  224       | . "%id:" unsigned
  225       | . primary-exp "." "%id:" unsigned
  226 primary-exp: . lvalue "(" "%exps:" unsigned ")"

    "__HERE__"    shift, and go to state 7
    "break"       shift, and go to state 8
    "closure"     shift, and go to state 9
    "const"       shift, and go to state 10
    "continue"    shift, and go to state 11
    "freezeif"    shift, and go to state 12
    "function"    shift, and go to state 13
    "if"          shift, and go to state 14
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "return"      shift, and go to state 19
    "stopif"      shift, and go to state 20
    "switch"      shift, and go to state 21
    "throw"       shift, and go to state 22
    "timeout"     shift, and go to state 23
    "try"         shift, and go to state 24
    "var"         shift, and go to state 25
    "waituntil"   shift, and go to state 26
    "watch"       shift, and go to state 27
    "whenever"    shift, and go to state 28
    "&"           shift, and go to state 29
    "every"       shift, and go to state 30
    "for"         shift, and go to state 31
    "loop"        shift, and go to state 32
    "while"       shift, and go to state 33
    "at"          shift, and go to state 34
    "identifier"  shift, and go to state 35
    "class"       shift, and go to state 36
    "package"     shift, and go to state 37
    "enum"        shift, and go to state 38
    "external"    shift, and go to state 39
    "import"      shift, and go to state 40
    "--"          shift, and go to state 41
    "++"          shift, and go to state 42
    "do"          shift, and go to state 43
    "assert"      shift, and go to state 44
    "detach"      shift, and go to state 45
    "disown"      shift, and go to state 46
    "new"         shift, and go to state 47
    "angle"       shift, and go to state 48
    "duration"    shift, and go to state 49
    "float"       shift, and go to state 50
    "string"      shift, and go to state 51
    "call"        shift, and go to state 52
    "this"        shift, and go to state 53
    "!"           shift, and go to state 54
    "compl"       shift, and go to state 55
    "-"           shift, and go to state 56
    "+"           shift, and go to state 57
    "<"           shift, and go to state 58
    "%unscope:"   shift, and go to state 59
    "%exp:"       shift, and go to state 60
    "%lvalue:"    shift, and go to state 61
    "%id:"        shift, and go to state 62

    stmt         go to state 129
    block        go to state 67
    exp          go to state 68
    routine      go to state 69
    primary-exp  go to state 70
    detach       go to state 71
    lvalue       go to state 72
    id           go to state 73
    bitor-exp    go to state 74
    new          go to state 75
    float-exp    go to state 76
    duration     go to state 77
    dictionary   go to state 78
    tuple        go to state 79
    literal-exp  go to state 80
    string       go to state 81
    unary-exp    go to state 82
    rel-exp      go to state 83


state 33

  115 stmt: "while" . "(" exp ")" stmt

    "("  shift, and go to state 130


state 34

   73 stmt: "at" . identifiers "(" exp tilda.opt ")" stmt onleave.opt
   74     | "at" . identifiers "(" event_match ")" stmt onleave.opt
  239 identifiers: .
  240            | . identifiers "identifier"

    $default  reduce using rule 239 (identifiers)

    identifiers  go to state 131


state 35

  133 id: "identifier" .

    $default  reduce using rule 133 (id)


state 36

   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   37 exp: "class" . lvalue protos block
   52 routine: . "closure"
   53        | . "function"
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
  118            | . block
  119            | . "do" "(" exp ")" block
  120 detach: . "detach"
  121       | . "disown"
  122 primary-exp: . "assert" "(" exp ")"
  123            | . "assert" "{" claims "}"
  124            | . detach "(" exp ")"
  125            | . detach block
  126            | . "isdef" "(" k1_id ")"
  127            | . "watch" "(" exp ")"
  128 lvalue: . id
  129       | . primary-exp "." id
  130       | . primary-exp "." "*"
  131 primary-exp: . "&" id
  132            | . primary-exp "." "&" id
  133 id: . "identifier"
  136 primary-exp: . lvalue
  137            | . lvalue args
  140 id: . "new"
  141 primary-exp: . routine formals block
  142 float-exp: . "float"
  143 duration: . "duration"
  144         | . duration "duration"
  150 dictionary: . "[" assocs "]"
  154 tuple: . "(" tuple.exps ")"
  159 literal-exp: . float-exp
  160            | . "angle"
  161            | . duration
  162            | . string
  163            | . "[" exps "]"
  164            | . "<" bitor-exps ">"
  165            | . dictionary
  166            | . tuple
  167 string: . "string"
  168       | . string "string"
  169 literal-exp: . "__HERE__"
  175 lvalue: . primary-exp "[" exps "]"
  176 literal-exp: . "this"
  177            | . "call"
  178 primary-exp: . literal-exp
  179            | . "(" exp ")"
  180            | . "(" error ")"
  181            | . primary-exp "**" primary-exp
  222            | . "%exp:" unsigned
  223 lvalue: . "%lvalue:" unsigned
  224       | . "%id:" unsigned
  225       | . primary-exp "." "%id:" unsigned
  226 primary-exp: . lvalue "(" "%exps:" unsigned ")"

    "__HERE__"    shift, and go to state 7
    "closure"     shift, and go to state 9
    "function"    shift, and go to state 13
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "watch"       shift, and go to state 27
    "&"           shift, and go to state 29
    "identifier"  shift, and go to state 35
    "do"          shift, and go to state 43
    "assert"      shift, and go to state 44
    "detach"      shift, and go to state 45
    "disown"      shift, and go to state 46
    "new"         shift, and go to state 125
    "angle"       shift, and go to state 48
    "duration"    shift, and go to state 49
    "float"       shift, and go to state 50
    "string"      shift, and go to state 51
    "call"        shift, and go to state 52
    "this"        shift, and go to state 53
    "<"           shift, and go to state 58
    "%exp:"       shift, and go to state 60
    "%lvalue:"    shift, and go to state 61
    "%id:"        shift, and go to state 62

    block        go to state 67
    routine      go to state 100
    primary-exp  go to state 132
    detach       go to state 71
    lvalue       go to state 133
    id           go to state 102
    float-exp    go to state 76
    duration     go to state 77
    dictionary   go to state 78
    tuple        go to state 79
    literal-exp  go to state 80
    string       go to state 81


state 37

   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   38 exp: "package" . lvalue protos block
   52 routine: . "closure"
   53        | . "function"
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
  118            | . block
  119            | . "do" "(" exp ")" block
  120 detach: . "detach"
  121       | . "disown"
  122 primary-exp: . "assert" "(" exp ")"
  123            | . "assert" "{" claims "}"
  124            | . detach "(" exp ")"
  125            | . detach block
  126            | . "isdef" "(" k1_id ")"
  127            | . "watch" "(" exp ")"
  128 lvalue: . id
  129       | . primary-exp "." id
  130       | . primary-exp "." "*"
  131 primary-exp: . "&" id
  132            | . primary-exp "." "&" id
  133 id: . "identifier"
  136 primary-exp: . lvalue
  137            | . lvalue args
  140 id: . "new"
  141 primary-exp: . routine formals block
  142 float-exp: . "float"
  143 duration: . "duration"
  144         | . duration "duration"
  150 dictionary: . "[" assocs "]"
  154 tuple: . "(" tuple.exps ")"
  159 literal-exp: . float-exp
  160            | . "angle"
  161            | . duration
  162            | . string
  163            | . "[" exps "]"
  164            | . "<" bitor-exps ">"
  165            | . dictionary
  166            | . tuple
  167 string: . "string"
  168       | . string "string"
  169 literal-exp: . "__HERE__"
  175 lvalue: . primary-exp "[" exps "]"
  176 literal-exp: . "this"
  177            | . "call"
  178 primary-exp: . literal-exp
  179            | . "(" exp ")"
  180            | . "(" error ")"
  181            | . primary-exp "**" primary-exp
  222            | . "%exp:" unsigned
  223 lvalue: . "%lvalue:" unsigned
  224       | . "%id:" unsigned
  225       | . primary-exp "." "%id:" unsigned
  226 primary-exp: . lvalue "(" "%exps:" unsigned ")"

    "__HERE__"    shift, and go to state 7
    "closure"     shift, and go to state 9
    "function"    shift, and go to state 13
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "watch"       shift, and go to state 27
    "&"           shift, and go to state 29
    "identifier"  shift, and go to state 35
    "do"          shift, and go to state 43
    "assert"      shift, and go to state 44
    "detach"      shift, and go to state 45
    "disown"      shift, and go to state 46
    "new"         shift, and go to state 125
    "angle"       shift, and go to state 48
    "duration"    shift, and go to state 49
    "float"       shift, and go to state 50
    "string"      shift, and go to state 51
    "call"        shift, and go to state 52
    "this"        shift, and go to state 53
    "<"           shift, and go to state 58
    "%exp:"       shift, and go to state 60
    "%lvalue:"    shift, and go to state 61
    "%id:"        shift, and go to state 62

    block        go to state 67
    routine      go to state 100
    primary-exp  go to state 132
    detach       go to state 71
    lvalue       go to state 134
    id           go to state 102
    float-exp    go to state 76
    duration     go to state 77
    dictionary   go to state 78
    tuple        go to state 79
    literal-exp  go to state 80
    string       go to state 81


state 38

   43 stmt: "enum" . id "{" id.0 "}"
  133 id: . "identifier"
  140   | . "new"

    "identifier"  shift, and go to state 35
    "new"         shift, and go to state 125

    id  go to state 135


state 39

   45 event_or_function: . "function"
   46                  | . "identifier"
   47 stmt: "external" . "identifier" "identifier"
   48     | "external" . "var" "identifier" "." "identifier" from "identifier"
   49     | "external" . event_or_function "(" unsigned ")" "identifier" "." "identifier" from "identifier"

    "function"    shift, and go to state 136
    "var"         shift, and go to state 137
    "identifier"  shift, and go to state 138

    event_or_function  go to state 139


state 40

   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   50 stmt: "import" . lvalue
   52 routine: . "closure"
   53        | . "function"
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
  118            | . block
  119            | . "do" "(" exp ")" block
  120 detach: . "detach"
  121       | . "disown"
  122 primary-exp: . "assert" "(" exp ")"
  123            | . "assert" "{" claims "}"
  124            | . detach "(" exp ")"
  125            | . detach block
  126            | . "isdef" "(" k1_id ")"
  127            | . "watch" "(" exp ")"
  128 lvalue: . id
  129       | . primary-exp "." id
  130       | . primary-exp "." "*"
  131 primary-exp: . "&" id
  132            | . primary-exp "." "&" id
  133 id: . "identifier"
  136 primary-exp: . lvalue
  137            | . lvalue args
  140 id: . "new"
  141 primary-exp: . routine formals block
  142 float-exp: . "float"
  143 duration: . "duration"
  144         | . duration "duration"
  150 dictionary: . "[" assocs "]"
  154 tuple: . "(" tuple.exps ")"
  159 literal-exp: . float-exp
  160            | . "angle"
  161            | . duration
  162            | . string
  163            | . "[" exps "]"
  164            | . "<" bitor-exps ">"
  165            | . dictionary
  166            | . tuple
  167 string: . "string"
  168       | . string "string"
  169 literal-exp: . "__HERE__"
  175 lvalue: . primary-exp "[" exps "]"
  176 literal-exp: . "this"
  177            | . "call"
  178 primary-exp: . literal-exp
  179            | . "(" exp ")"
  180            | . "(" error ")"
  181            | . primary-exp "**" primary-exp
  222            | . "%exp:" unsigned
  223 lvalue: . "%lvalue:" unsigned
  224       | . "%id:" unsigned
  225       | . primary-exp "." "%id:" unsigned
  226 primary-exp: . lvalue "(" "%exps:" unsigned ")"

    "__HERE__"    shift, and go to state 7
    "closure"     shift, and go to state 9
    "function"    shift, and go to state 13
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "watch"       shift, and go to state 27
    "&"           shift, and go to state 29
    "identifier"  shift, and go to state 35
    "do"          shift, and go to state 43
    "assert"      shift, and go to state 44
    "detach"      shift, and go to state 45
    "disown"      shift, and go to state 46
    "new"         shift, and go to state 125
    "angle"       shift, and go to state 48
    "duration"    shift, and go to state 49
    "float"       shift, and go to state 50
    "string"      shift, and go to state 51
    "call"        shift, and go to state 52
    "this"        shift, and go to state 53
    "<"           shift, and go to state 58
    "%exp:"       shift, and go to state 60
    "%lvalue:"    shift, and go to state 61
    "%id:"        shift, and go to state 62

    block        go to state 67
    routine      go to state 100
    primary-exp  go to state 132
    detach       go to state 71
    lvalue       go to state 140
    id           go to state 102
    float-exp    go to state 76
    duration     go to state 77
    dictionary   go to state 78
    tuple        go to state 79
    literal-exp  go to state 80
    string       go to state 81


state 41

   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   52 routine: . "closure"
   53        | . "function"
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
  118            | . block
  119            | . "do" "(" exp ")" block
  120 detach: . "detach"
  121       | . "disown"
  122 primary-exp: . "assert" "(" exp ")"
  123            | . "assert" "{" claims "}"
  124            | . detach "(" exp ")"
  125            | . detach block
  126            | . "isdef" "(" k1_id ")"
  127            | . "watch" "(" exp ")"
  128 lvalue: . id
  129       | . primary-exp "." id
  130       | . primary-exp "." "*"
  131 primary-exp: . "&" id
  132            | . primary-exp "." "&" id
  133 id: . "identifier"
  136 primary-exp: . lvalue
  137            | . lvalue args
  140 id: . "new"
  141 primary-exp: . routine formals block
  142 float-exp: . "float"
  143 duration: . "duration"
  144         | . duration "duration"
  150 dictionary: . "[" assocs "]"
  154 tuple: . "(" tuple.exps ")"
  159 literal-exp: . float-exp
  160            | . "angle"
  161            | . duration
  162            | . string
  163            | . "[" exps "]"
  164            | . "<" bitor-exps ">"
  165            | . dictionary
  166            | . tuple
  167 string: . "string"
  168       | . string "string"
  169 literal-exp: . "__HERE__"
  175 lvalue: . primary-exp "[" exps "]"
  176 literal-exp: . "this"
  177            | . "call"
  178 primary-exp: . literal-exp
  179            | . "(" exp ")"
  180            | . "(" error ")"
  181            | . primary-exp "**" primary-exp
  183 unary-exp: "--" . lvalue
  222 primary-exp: . "%exp:" unsigned
  223 lvalue: . "%lvalue:" unsigned
  224       | . "%id:" unsigned
  225       | . primary-exp "." "%id:" unsigned
  226 primary-exp: . lvalue "(" "%exps:" unsigned ")"

    "__HERE__"    shift, and go to state 7
    "closure"     shift, and go to state 9
    "function"    shift, and go to state 13
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "watch"       shift, and go to state 27
    "&"           shift, and go to state 29
    "identifier"  shift, and go to state 35
    "do"          shift, and go to state 43
    "assert"      shift, and go to state 44
    "detach"      shift, and go to state 45
    "disown"      shift, and go to state 46
    "new"         shift, and go to state 125
    "angle"       shift, and go to state 48
    "duration"    shift, and go to state 49
    "float"       shift, and go to state 50
    "string"      shift, and go to state 51
    "call"        shift, and go to state 52
    "this"        shift, and go to state 53
    "<"           shift, and go to state 58
    "%exp:"       shift, and go to state 60
    "%lvalue:"    shift, and go to state 61
    "%id:"        shift, and go to state 62

    block        go to state 67
    routine      go to state 100
    primary-exp  go to state 132
    detach       go to state 71
    lvalue       go to state 141
    id           go to state 102
    float-exp    go to state 76
    duration     go to state 77
    dictionary   go to state 78
    tuple        go to state 79
    literal-exp  go to state 80
    string       go to state 81


state 42

   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   52 routine: . "closure"
   53        | . "function"
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
  118            | . block
  119            | . "do" "(" exp ")" block
  120 detach: . "detach"
  121       | . "disown"
  122 primary-exp: . "assert" "(" exp ")"
  123            | . "assert" "{" claims "}"
  124            | . detach "(" exp ")"
  125            | . detach block
  126            | . "isdef" "(" k1_id ")"
  127            | . "watch" "(" exp ")"
  128 lvalue: . id
  129       | . primary-exp "." id
  130       | . primary-exp "." "*"
  131 primary-exp: . "&" id
  132            | . primary-exp "." "&" id
  133 id: . "identifier"
  136 primary-exp: . lvalue
  137            | . lvalue args
  140 id: . "new"
  141 primary-exp: . routine formals block
  142 float-exp: . "float"
  143 duration: . "duration"
  144         | . duration "duration"
  150 dictionary: . "[" assocs "]"
  154 tuple: . "(" tuple.exps ")"
  159 literal-exp: . float-exp
  160            | . "angle"
  161            | . duration
  162            | . string
  163            | . "[" exps "]"
  164            | . "<" bitor-exps ">"
  165            | . dictionary
  166            | . tuple
  167 string: . "string"
  168       | . string "string"
  169 literal-exp: . "__HERE__"
  175 lvalue: . primary-exp "[" exps "]"
  176 literal-exp: . "this"
  177            | . "call"
  178 primary-exp: . literal-exp
  179            | . "(" exp ")"
  180            | . "(" error ")"
  181            | . primary-exp "**" primary-exp
  184 unary-exp: "++" . lvalue
  222 primary-exp: . "%exp:" unsigned
  223 lvalue: . "%lvalue:" unsigned
  224       | . "%id:" unsigned
  225       | . primary-exp "." "%id:" unsigned
  226 primary-exp: . lvalue "(" "%exps:" unsigned ")"

    "__HERE__"    shift, and go to state 7
    "closure"     shift, and go to state 9
    "function"    shift, and go to state 13
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "watch"       shift, and go to state 27
    "&"           shift, and go to state 29
    "identifier"  shift, and go to state 35
    "do"          shift, and go to state 43
    "assert"      shift, and go to state 44
    "detach"      shift, and go to state 45
    "disown"      shift, and go to state 46
    "new"         shift, and go to state 125
    "angle"       shift, and go to state 48
    "duration"    shift, and go to state 49
    "float"       shift, and go to state 50
    "string"      shift, and go to state 51
    "call"        shift, and go to state 52
    "this"        shift, and go to state 53
    "<"           shift, and go to state 58
    "%exp:"       shift, and go to state 60
    "%lvalue:"    shift, and go to state 61
    "%id:"        shift, and go to state 62

    block        go to state 67
    routine      go to state 100
    primary-exp  go to state 132
    detach       go to state 71
    lvalue       go to state 142
    id           go to state 102
    float-exp    go to state 76
    duration     go to state 77
    dictionary   go to state 78
    tuple        go to state 79
    literal-exp  go to state 80
    string       go to state 81


state 43

  119 primary-exp: "do" . "(" exp ")" block

    "("  shift, and go to state 143


state 44

  122 primary-exp: "assert" . "(" exp ")"
  123            | "assert" . "{" claims "}"

    "{"  shift, and go to state 144
    "("  shift, and go to state 145


state 45

  120 detach: "detach" .

    $default  reduce using rule 120 (detach)


state 46

  121 detach: "disown" .

    $default  reduce using rule 121 (detach)


state 47

  138 new: "new" . "identifier" args.opt
  140 id: "new" .  ["end of command", "=", "case", "catch", ":", "default", "else", "finally", "if", "in", "{", "[", "(", "onleave", ".", "}", "]", ")", "~", ",", ";", "&", "|", "^=", "-=", "%=", "+=", "/=", "*=", "--", "++", "->", "new", "=>", "?", "!", "bitand", "bitor", "^", ">>", "<<", "-", "%", "+", "/", "*", "**", "=~=", "==", "===", ">=", ">", "<=", "<", "!=", "!==", "~=", "&&", "||"]

    "identifier"  shift, and go to state 146

    $default  reduce using rule 140 (id)

    Conflict between rule 140 and token "identifier" resolved as shift ("new" < "identifier").


state 48

  160 literal-exp: "angle" .

    $default  reduce using rule 160 (literal-exp)


state 49

  143 duration: "duration" .

    $default  reduce using rule 143 (duration)


state 50

  142 float-exp: "float" .

    $default  reduce using rule 142 (float-exp)


state 51

  167 string: "string" .

    $default  reduce using rule 167 (string)


state 52

  177 literal-exp: "call" .

    $default  reduce using rule 177 (literal-exp)


state 53

  176 literal-exp: "this" .

    $default  reduce using rule 176 (literal-exp)


state 54

   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   52 routine: . "closure"
   53        | . "function"
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
  118            | . block
  119            | . "do" "(" exp ")" block
  120 detach: . "detach"
  121       | . "disown"
  122 primary-exp: . "assert" "(" exp ")"
  123            | . "assert" "{" claims "}"
  124            | . detach "(" exp ")"
  125            | . detach block
  126            | . "isdef" "(" k1_id ")"
  127            | . "watch" "(" exp ")"
  128 lvalue: . id
  129       | . primary-exp "." id
  130       | . primary-exp "." "*"
  131 primary-exp: . "&" id
  132            | . primary-exp "." "&" id
  133 id: . "identifier"
  136 primary-exp: . lvalue
  137            | . lvalue args
  140 id: . "new"
  141 primary-exp: . routine formals block
  142 float-exp: . "float"
  143 duration: . "duration"
  144         | . duration "duration"
  150 dictionary: . "[" assocs "]"
  154 tuple: . "(" tuple.exps ")"
  159 literal-exp: . float-exp
  160            | . "angle"
  161            | . duration
  162            | . string
  163            | . "[" exps "]"
  164            | . "<" bitor-exps ">"
  165            | . dictionary
  166            | . tuple
  167 string: . "string"
  168       | . string "string"
  169 literal-exp: . "__HERE__"
  175 lvalue: . primary-exp "[" exps "]"
  176 literal-exp: . "this"
  177            | . "call"
  178 primary-exp: . literal-exp
  179            | . "(" exp ")"
  180            | . "(" error ")"
  181            | . primary-exp "**" primary-exp
  182 unary-exp: . primary-exp
  183          | . "--" lvalue
  184          | . "++" lvalue
  185          | . "+" unary-exp
  186          | . "-" unary-exp
  187          | . "!" unary-exp
  187          | "!" . unary-exp
  188          | . "compl" unary-exp
  222 primary-exp: . "%exp:" unsigned
  223 lvalue: . "%lvalue:" unsigned
  224       | . "%id:" unsigned
  225       | . primary-exp "." "%id:" unsigned
  226 primary-exp: . lvalue "(" "%exps:" unsigned ")"

    "__HERE__"    shift, and go to state 7
    "closure"     shift, and go to state 9
    "function"    shift, and go to state 13
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "watch"       shift, and go to state 27
    "&"           shift, and go to state 29
    "identifier"  shift, and go to state 35
    "--"          shift, and go to state 41
    "++"          shift, and go to state 42
    "do"          shift, and go to state 43
    "assert"      shift, and go to state 44
    "detach"      shift, and go to state 45
    "disown"      shift, and go to state 46
    "new"         shift, and go to state 125
    "angle"       shift, and go to state 48
    "duration"    shift, and go to state 49
    "float"       shift, and go to state 50
    "string"      shift, and go to state 51
    "call"        shift, and go to state 52
    "this"        shift, and go to state 53
    "!"           shift, and go to state 54
    "compl"       shift, and go to state 55
    "-"           shift, and go to state 56
    "+"           shift, and go to state 57
    "<"           shift, and go to state 58
    "%exp:"       shift, and go to state 60
    "%lvalue:"    shift, and go to state 61
    "%id:"        shift, and go to state 62

    block        go to state 67
    routine      go to state 100
    primary-exp  go to state 101
    detach       go to state 71
    lvalue       go to state 120
    id           go to state 102
    float-exp    go to state 76
    duration     go to state 77
    dictionary   go to state 78
    tuple        go to state 79
    literal-exp  go to state 80
    string       go to state 81
    unary-exp    go to state 147


state 55

   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   52 routine: . "closure"
   53        | . "function"
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
  118            | . block
  119            | . "do" "(" exp ")" block
  120 detach: . "detach"
  121       | . "disown"
  122 primary-exp: . "assert" "(" exp ")"
  123            | . "assert" "{" claims "}"
  124            | . detach "(" exp ")"
  125            | . detach block
  126            | . "isdef" "(" k1_id ")"
  127            | . "watch" "(" exp ")"
  128 lvalue: . id
  129       | . primary-exp "." id
  130       | . primary-exp "." "*"
  131 primary-exp: . "&" id
  132            | . primary-exp "." "&" id
  133 id: . "identifier"
  136 primary-exp: . lvalue
  137            | . lvalue args
  140 id: . "new"
  141 primary-exp: . routine formals block
  142 float-exp: . "float"
  143 duration: . "duration"
  144         | . duration "duration"
  150 dictionary: . "[" assocs "]"
  154 tuple: . "(" tuple.exps ")"
  159 literal-exp: . float-exp
  160            | . "angle"
  161            | . duration
  162            | . string
  163            | . "[" exps "]"
  164            | . "<" bitor-exps ">"
  165            | . dictionary
  166            | . tuple
  167 string: . "string"
  168       | . string "string"
  169 literal-exp: . "__HERE__"
  175 lvalue: . primary-exp "[" exps "]"
  176 literal-exp: . "this"
  177            | . "call"
  178 primary-exp: . literal-exp
  179            | . "(" exp ")"
  180            | . "(" error ")"
  181            | . primary-exp "**" primary-exp
  182 unary-exp: . primary-exp
  183          | . "--" lvalue
  184          | . "++" lvalue
  185          | . "+" unary-exp
  186          | . "-" unary-exp
  187          | . "!" unary-exp
  188          | . "compl" unary-exp
  188          | "compl" . unary-exp
  222 primary-exp: . "%exp:" unsigned
  223 lvalue: . "%lvalue:" unsigned
  224       | . "%id:" unsigned
  225       | . primary-exp "." "%id:" unsigned
  226 primary-exp: . lvalue "(" "%exps:" unsigned ")"

    "__HERE__"    shift, and go to state 7
    "closure"     shift, and go to state 9
    "function"    shift, and go to state 13
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "watch"       shift, and go to state 27
    "&"           shift, and go to state 29
    "identifier"  shift, and go to state 35
    "--"          shift, and go to state 41
    "++"          shift, and go to state 42
    "do"          shift, and go to state 43
    "assert"      shift, and go to state 44
    "detach"      shift, and go to state 45
    "disown"      shift, and go to state 46
    "new"         shift, and go to state 125
    "angle"       shift, and go to state 48
    "duration"    shift, and go to state 49
    "float"       shift, and go to state 50
    "string"      shift, and go to state 51
    "call"        shift, and go to state 52
    "this"        shift, and go to state 53
    "!"           shift, and go to state 54
    "compl"       shift, and go to state 55
    "-"           shift, and go to state 56
    "+"           shift, and go to state 57
    "<"           shift, and go to state 58
    "%exp:"       shift, and go to state 60
    "%lvalue:"    shift, and go to state 61
    "%id:"        shift, and go to state 62

    block        go to state 67
    routine      go to state 100
    primary-exp  go to state 101
    detach       go to state 71
    lvalue       go to state 120
    id           go to state 102
    float-exp    go to state 76
    duration     go to state 77
    dictionary   go to state 78
    tuple        go to state 79
    literal-exp  go to state 80
    string       go to state 81
    unary-exp    go to state 148


state 56

   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   52 routine: . "closure"
   53        | . "function"
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
  118            | . block
  119            | . "do" "(" exp ")" block
  120 detach: . "detach"
  121       | . "disown"
  122 primary-exp: . "assert" "(" exp ")"
  123            | . "assert" "{" claims "}"
  124            | . detach "(" exp ")"
  125            | . detach block
  126            | . "isdef" "(" k1_id ")"
  127            | . "watch" "(" exp ")"
  128 lvalue: . id
  129       | . primary-exp "." id
  130       | . primary-exp "." "*"
  131 primary-exp: . "&" id
  132            | . primary-exp "." "&" id
  133 id: . "identifier"
  136 primary-exp: . lvalue
  137            | . lvalue args
  140 id: . "new"
  141 primary-exp: . routine formals block
  142 float-exp: . "float"
  143 duration: . "duration"
  144         | . duration "duration"
  150 dictionary: . "[" assocs "]"
  154 tuple: . "(" tuple.exps ")"
  159 literal-exp: . float-exp
  160            | . "angle"
  161            | . duration
  162            | . string
  163            | . "[" exps "]"
  164            | . "<" bitor-exps ">"
  165            | . dictionary
  166            | . tuple
  167 string: . "string"
  168       | . string "string"
  169 literal-exp: . "__HERE__"
  175 lvalue: . primary-exp "[" exps "]"
  176 literal-exp: . "this"
  177            | . "call"
  178 primary-exp: . literal-exp
  179            | . "(" exp ")"
  180            | . "(" error ")"
  181            | . primary-exp "**" primary-exp
  182 unary-exp: . primary-exp
  183          | . "--" lvalue
  184          | . "++" lvalue
  185          | . "+" unary-exp
  186          | . "-" unary-exp
  186          | "-" . unary-exp
  187          | . "!" unary-exp
  188          | . "compl" unary-exp
  222 primary-exp: . "%exp:" unsigned
  223 lvalue: . "%lvalue:" unsigned
  224       | . "%id:" unsigned
  225       | . primary-exp "." "%id:" unsigned
  226 primary-exp: . lvalue "(" "%exps:" unsigned ")"

    "__HERE__"    shift, and go to state 7
    "closure"     shift, and go to state 9
    "function"    shift, and go to state 13
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "watch"       shift, and go to state 27
    "&"           shift, and go to state 29
    "identifier"  shift, and go to state 35
    "--"          shift, and go to state 41
    "++"          shift, and go to state 42
    "do"          shift, and go to state 43
    "assert"      shift, and go to state 44
    "detach"      shift, and go to state 45
    "disown"      shift, and go to state 46
    "new"         shift, and go to state 125
    "angle"       shift, and go to state 48
    "duration"    shift, and go to state 49
    "float"       shift, and go to state 50
    "string"      shift, and go to state 51
    "call"        shift, and go to state 52
    "this"        shift, and go to state 53
    "!"           shift, and go to state 54
    "compl"       shift, and go to state 55
    "-"           shift, and go to state 56
    "+"           shift, and go to state 57
    "<"           shift, and go to state 58
    "%exp:"       shift, and go to state 60
    "%lvalue:"    shift, and go to state 61
    "%id:"        shift, and go to state 62

    block        go to state 67
    routine      go to state 100
    primary-exp  go to state 101
    detach       go to state 71
    lvalue       go to state 120
    id           go to state 102
    float-exp    go to state 76
    duration     go to state 77
    dictionary   go to state 78
    tuple        go to state 79
    literal-exp  go to state 80
    string       go to state 81
    unary-exp    go to state 149


state 57

   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   52 routine: . "closure"
   53        | . "function"
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
  118            | . block
  119            | . "do" "(" exp ")" block
  120 detach: . "detach"
  121       | . "disown"
  122 primary-exp: . "assert" "(" exp ")"
  123            | . "assert" "{" claims "}"
  124            | . detach "(" exp ")"
  125            | . detach block
  126            | . "isdef" "(" k1_id ")"
  127            | . "watch" "(" exp ")"
  128 lvalue: . id
  129       | . primary-exp "." id
  130       | . primary-exp "." "*"
  131 primary-exp: . "&" id
  132            | . primary-exp "." "&" id
  133 id: . "identifier"
  136 primary-exp: . lvalue
  137            | . lvalue args
  140 id: . "new"
  141 primary-exp: . routine formals block
  142 float-exp: . "float"
  143 duration: . "duration"
  144         | . duration "duration"
  150 dictionary: . "[" assocs "]"
  154 tuple: . "(" tuple.exps ")"
  159 literal-exp: . float-exp
  160            | . "angle"
  161            | . duration
  162            | . string
  163            | . "[" exps "]"
  164            | . "<" bitor-exps ">"
  165            | . dictionary
  166            | . tuple
  167 string: . "string"
  168       | . string "string"
  169 literal-exp: . "__HERE__"
  175 lvalue: . primary-exp "[" exps "]"
  176 literal-exp: . "this"
  177            | . "call"
  178 primary-exp: . literal-exp
  179            | . "(" exp ")"
  180            | . "(" error ")"
  181            | . primary-exp "**" primary-exp
  182 unary-exp: . primary-exp
  183          | . "--" lvalue
  184          | . "++" lvalue
  185          | . "+" unary-exp
  185          | "+" . unary-exp
  186          | . "-" unary-exp
  187          | . "!" unary-exp
  188          | . "compl" unary-exp
  222 primary-exp: . "%exp:" unsigned
  223 lvalue: . "%lvalue:" unsigned
  224       | . "%id:" unsigned
  225       | . primary-exp "." "%id:" unsigned
  226 primary-exp: . lvalue "(" "%exps:" unsigned ")"

    "__HERE__"    shift, and go to state 7
    "closure"     shift, and go to state 9
    "function"    shift, and go to state 13
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "watch"       shift, and go to state 27
    "&"           shift, and go to state 29
    "identifier"  shift, and go to state 35
    "--"          shift, and go to state 41
    "++"          shift, and go to state 42
    "do"          shift, and go to state 43
    "assert"      shift, and go to state 44
    "detach"      shift, and go to state 45
    "disown"      shift, and go to state 46
    "new"         shift, and go to state 125
    "angle"       shift, and go to state 48
    "duration"    shift, and go to state 49
    "float"       shift, and go to state 50
    "string"      shift, and go to state 51
    "call"        shift, and go to state 52
    "this"        shift, and go to state 53
    "!"           shift, and go to state 54
    "compl"       shift, and go to state 55
    "-"           shift, and go to state 56
    "+"           shift, and go to state 57
    "<"           shift, and go to state 58
    "%exp:"       shift, and go to state 60
    "%lvalue:"    shift, and go to state 61
    "%id:"        shift, and go to state 62

    block        go to state 67
    routine      go to state 100
    primary-exp  go to state 101
    detach       go to state 71
    lvalue       go to state 120
    id           go to state 102
    float-exp    go to state 76
    duration     go to state 77
    dictionary   go to state 78
    tuple        go to state 79
    literal-exp  go to state 80
    string       go to state 81
    unary-exp    go to state 150


state 58

   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   52 routine: . "closure"
   53        | . "function"
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
  118            | . block
  119            | . "do" "(" exp ")" block
  120 detach: . "detach"
  121       | . "disown"
  122 primary-exp: . "assert" "(" exp ")"
  123            | . "assert" "{" claims "}"
  124            | . detach "(" exp ")"
  125            | . detach block
  126            | . "isdef" "(" k1_id ")"
  127            | . "watch" "(" exp ")"
  128 lvalue: . id
  129       | . primary-exp "." id
  130       | . primary-exp "." "*"
  131 primary-exp: . "&" id
  132            | . primary-exp "." "&" id
  133 id: . "identifier"
  134 bitor-exp: . "var" bitor-exp
  135          | . "const" "var" bitor-exp
  136 primary-exp: . lvalue
  137            | . lvalue args
  138 new: . "new" "identifier" args.opt
  139 bitor-exp: . new
  140 id: . "new"
  141 primary-exp: . routine formals block
  142 float-exp: . "float"
  143 duration: . "duration"
  144         | . duration "duration"
  150 dictionary: . "[" assocs "]"
  154 tuple: . "(" tuple.exps ")"
  155 bitor-exps: .  [">"]
  156           | . bitor-exps.1 comma.opt
  157 bitor-exps.1: . bitor-exp
  158             | . bitor-exps.1 "," bitor-exp
  159 literal-exp: . float-exp
  160            | . "angle"
  161            | . duration
  162            | . string
  163            | . "[" exps "]"
  164            | . "<" bitor-exps ">"
  164            | "<" . bitor-exps ">"
  165            | . dictionary
  166            | . tuple
  167 string: . "string"
  168       | . string "string"
  169 literal-exp: . "__HERE__"
  175 lvalue: . primary-exp "[" exps "]"
  176 literal-exp: . "this"
  177            | . "call"
  178 primary-exp: . literal-exp
  179            | . "(" exp ")"
  180            | . "(" error ")"
  181            | . primary-exp "**" primary-exp
  182 unary-exp: . primary-exp
  183          | . "--" lvalue
  184          | . "++" lvalue
  185          | . "+" unary-exp
  186          | . "-" unary-exp
  187          | . "!" unary-exp
  188          | . "compl" unary-exp
  189 bitor-exp: . unary-exp
  190          | . bitor-exp "+" bitor-exp
  191          | . bitor-exp "-" bitor-exp
  192          | . bitor-exp "*" bitor-exp
  193          | . bitor-exp "/" bitor-exp
  194          | . bitor-exp "%" bitor-exp
  195          | . bitor-exp "^" bitor-exp
  196          | . bitor-exp "<<" bitor-exp
  197          | . bitor-exp "bitand" bitor-exp
  198          | . bitor-exp "bitor" bitor-exp
  199          | . bitor-exp ">>" bitor-exp
  222 primary-exp: . "%exp:" unsigned
  223 lvalue: . "%lvalue:" unsigned
  224       | . "%id:" unsigned
  225       | . primary-exp "." "%id:" unsigned
  226 primary-exp: . lvalue "(" "%exps:" unsigned ")"

    "__HERE__"    shift, and go to state 7
    "closure"     shift, and go to state 9
    "const"       shift, and go to state 10
    "function"    shift, and go to state 13
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "var"         shift, and go to state 25
    "watch"       shift, and go to state 27
    "&"           shift, and go to state 29
    "identifier"  shift, and go to state 35
    "--"          shift, and go to state 41
    "++"          shift, and go to state 42
    "do"          shift, and go to state 43
    "assert"      shift, and go to state 44
    "detach"      shift, and go to state 45
    "disown"      shift, and go to state 46
    "new"         shift, and go to state 47
    "angle"       shift, and go to state 48
    "duration"    shift, and go to state 49
    "float"       shift, and go to state 50
    "string"      shift, and go to state 51
    "call"        shift, and go to state 52
    "this"        shift, and go to state 53
    "!"           shift, and go to state 54
    "compl"       shift, and go to state 55
    "-"           shift, and go to state 56
    "+"           shift, and go to state 57
    "<"           shift, and go to state 58
    "%exp:"       shift, and go to state 60
    "%lvalue:"    shift, and go to state 61
    "%id:"        shift, and go to state 62

    $default  reduce using rule 155 (bitor-exps)

    block         go to state 67
    routine       go to state 100
    primary-exp   go to state 101
    detach        go to state 71
    lvalue        go to state 120
    id            go to state 102
    bitor-exp     go to state 151
    new           go to state 75
    float-exp     go to state 76
    duration      go to state 77
    dictionary    go to state 78
    tuple         go to state 79
    bitor-exps    go to state 152
    bitor-exps.1  go to state 153
    literal-exp   go to state 80
    string        go to state 81
    unary-exp     go to state 82


state 59

  220 unsigned: . "float"
  221 exp: "%unscope:" . unsigned

    "float"  shift, and go to state 154

    unsigned  go to state 155


state 60

  220 unsigned: . "float"
  222 primary-exp: "%exp:" . unsigned

    "float"  shift, and go to state 154

    unsigned  go to state 156


state 61

  220 unsigned: . "float"
  223 lvalue: "%lvalue:" . unsigned

    "float"  shift, and go to state 154

    unsigned  go to state 157


state 62

  220 unsigned: . "float"
  224 lvalue: "%id:" . unsigned

    "float"  shift, and go to state 154

    unsigned  go to state 158


state 63

    3 root: MODE_EXP root_exp .

    $default  reduce using rule 3 (root)


state 64

    5 root_exp: cstmt.opt . ";"
    6         | cstmt.opt . ","
    7         | cstmt.opt . "end of command"

    "end of command"  shift, and go to state 159
    ","               shift, and go to state 160
    ";"               shift, and go to state 161


state 65

   16 cstmt.opt: cstmt .  ["end of command", "case", "default", "}", ")", ",", ";"]
   17          | cstmt . "|"
   19 cstmt: cstmt . "|" cstmt
   20      | cstmt . "&" cstmt

    "&"  shift, and go to state 162
    "|"  shift, and go to state 163

    $default  reduce using rule 16 (cstmt.opt)


state 66

   18 cstmt: stmt .

    $default  reduce using rule 18 (cstmt)


state 67

  118 primary-exp: block .

    $default  reduce using rule 118 (primary-exp)


state 68

   24 stmt: exp .  ["end of command", "case", "catch", "default", "else", "finally", "onleave", "}", ")", ",", ";", "&", "|"]
   51     | exp . "!" args.opt tilda.opt
   62 exp: exp . "=" exp
   63    | exp . "=" exp modifiers
  214    | exp . "&&" exp
  215    | exp . "||" exp
  216    | exp . "in" exp
  217    | exp . "!" "in" exp

    "="   shift, and go to state 164
    "in"  shift, and go to state 165
    "!"   shift, and go to state 166
    "&&"  shift, and go to state 167
    "||"  shift, and go to state 168

    $default  reduce using rule 24 (stmt)


state 69

   54 stmt: routine . k1_id formals block
   56 k1_id: . "identifier"
   57      | . "this" "." "identifier"
   58      | . k1_id "." "identifier"
  141 primary-exp: routine . formals block
  251 formals: .  ["{"]
  252        | . "(" formals.0 ")"

    "("           shift, and go to state 169
    "identifier"  shift, and go to state 170
    "this"        shift, and go to state 171

    $default  reduce using rule 251 (formals)

    k1_id    go to state 172
    formals  go to state 173


state 70

   23 stmt: primary-exp . ":" stmt
  129 lvalue: primary-exp . "." id
  130       | primary-exp . "." "*"
  132 primary-exp: primary-exp . "." "&" id
  175 lvalue: primary-exp . "[" exps "]"
  181 primary-exp: primary-exp . "**" primary-exp
  182 unary-exp: primary-exp .  ["end of command", "=", "case", "catch", "default", "else", "finally", "in", "onleave", "}", ")", ",", ";", "&", "|", "!", "bitand", "bitor", "^", ">>", "<<", "-", "%", "+", "/", "*", "=~=", "==", "===", ">=", ">", "<=", "<", "!=", "!==", "~=", "&&", "||"]
  225 lvalue: primary-exp . "." "%id:" unsigned

    ":"   shift, and go to state 174
    "["   shift, and go to state 175
    "."   shift, and go to state 176
    "**"  shift, and go to state 177

    $default  reduce using rule 182 (unary-exp)


state 71

   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
  124 primary-exp: detach . "(" exp ")"
  125            | detach . block

    "{"  shift, and go to state 16
    "("  shift, and go to state 178

    block  go to state 179


state 72

   64 exp: lvalue . "+=" exp
   65    | lvalue . "-=" exp
   66    | lvalue . "*=" exp
   67    | lvalue . "/=" exp
   68    | lvalue . "^=" exp
   69    | lvalue . "%=" exp
   70 primary-exp: lvalue . "--"
   71            | lvalue . "++"
   72            | lvalue . "->" id
  136            | lvalue .  ["end of command", "=", "case", "catch", ":", "default", "else", "finally", "if", "in", "{", "[", "onleave", ".", "}", "]", ")", "~", ",", ";", "&", "|", "identifier", "=>", "?", "!", "bitand", "bitor", "^", ">>", "<<", "-", "%", "+", "/", "*", "**", "=~=", "==", "===", ">=", ">", "<=", "<", "!=", "!==", "~=", "&&", "||"]
  137            | lvalue . args
  226            | lvalue . "(" "%exps:" unsigned ")"
  236 args: . "(" exps ")"

    "("   shift, and go to state 180
    "^="  shift, and go to state 181
    "-="  shift, and go to state 182
    "%="  shift, and go to state 183
    "+="  shift, and go to state 184
    "/="  shift, and go to state 185
    "*="  shift, and go to state 186
    "--"  shift, and go to state 187
    "++"  shift, and go to state 188
    "->"  shift, and go to state 189

    $default  reduce using rule 136 (primary-exp)

    args  go to state 190


state 73

   55 stmt: id . id formals block
  128 lvalue: id .  ["end of command", "=", "case", "catch", ":", "default", "else", "finally", "in", "[", "(", "onleave", ".", "}", ")", ",", ";", "&", "|", "^=", "-=", "%=", "+=", "/=", "*=", "--", "++", "->", "!", "bitand", "bitor", "^", ">>", "<<", "-", "%", "+", "/", "*", "**", "=~=", "==", "===", ">=", ">", "<=", "<", "!=", "!==", "~=", "&&", "||"]
  133 id: . "identifier"
  140   | . "new"

    "identifier"  shift, and go to state 35
    "new"         shift, and go to state 125

    $default  reduce using rule 128 (lvalue)

    id  go to state 191


state 74

  190 bitor-exp: bitor-exp . "+" bitor-exp
  191          | bitor-exp . "-" bitor-exp
  192          | bitor-exp . "*" bitor-exp
  193          | bitor-exp . "/" bitor-exp
  194          | bitor-exp . "%" bitor-exp
  195          | bitor-exp . "^" bitor-exp
  196          | bitor-exp . "<<" bitor-exp
  197          | bitor-exp . "bitand" bitor-exp
  198          | bitor-exp . "bitor" bitor-exp
  199          | bitor-exp . ">>" bitor-exp
  210 rel-exp: bitor-exp . rel-ops
  211 rel-ops: .  ["end of command", "=", "case", "catch", ":", "default", "else", "finally", "if", "in", "{", "onleave", "}", "]", ")", "~", ",", ";", "&", "|", "identifier", "=>", "?", "!", "=~=", "==", "===", ">=", ">", "<=", "<", "!=", "!==", "~=", "&&", "||"]
  212        | . rel-ops rel-op bitor-exp

    "bitand"  shift, and go to state 192
    "bitor"   shift, and go to state 193
    "^"       shift, and go to state 194
    ">>"      shift, and go to state 195
    "<<"      shift, and go to state 196
    "-"       shift, and go to state 197
    "%"       shift, and go to state 198
    "+"       shift, and go to state 199
    "/"       shift, and go to state 200
    "*"       shift, and go to state 201

    $default  reduce using rule 211 (rel-ops)

    rel-ops  go to state 202


state 75

  139 bitor-exp: new .

    $default  reduce using rule 139 (bitor-exp)


state 76

  159 literal-exp: float-exp .

    $default  reduce using rule 159 (literal-exp)


state 77

  144 duration: duration . "duration"
  161 literal-exp: duration .  ["end of command", "=", "case", "catch", ":", "default", "else", "finally", "if", "in", "{", "[", "onleave", ".", "}", "]", ")", "~", ",", ";", "&", "|", "identifier", "=>", "?", "!", "bitand", "bitor", "^", ">>", "<<", "-", "%", "+", "/", "*", "**", "=~=", "==", "===", ">=", ">", "<=", "<", "!=", "!==", "~=", "&&", "||"]

    "duration"  shift, and go to state 203

    $default  reduce using rule 161 (literal-exp)


state 78

  165 literal-exp: dictionary .

    $default  reduce using rule 165 (literal-exp)


state 79

  166 literal-exp: tuple .

    $default  reduce using rule 166 (literal-exp)


state 80

  178 primary-exp: literal-exp .

    $default  reduce using rule 178 (primary-exp)


state 81

  162 literal-exp: string .  ["end of command", "=", "case", "catch", ":", "default", "else", "finally", "if", "in", "{", "[", "onleave", ".", "}", "]", ")", "~", ",", ";", "&", "|", "identifier", "=>", "?", "!", "bitand", "bitor", "^", ">>", "<<", "-", "%", "+", "/", "*", "**", "=~=", "==", "===", ">=", ">", "<=", "<", "!=", "!==", "~=", "&&", "||"]
  168 string: string . "string"

    "string"  shift, and go to state 204

    $default  reduce using rule 162 (literal-exp)


state 82

  189 bitor-exp: unary-exp .

    $default  reduce using rule 189 (bitor-exp)


state 83

  213 exp: rel-exp .

    $default  reduce using rule 213 (exp)


state 84

    4 root: MODE_EXPS root_exps .

    $default  reduce using rule 4 (root)


state 85

   11 root_exps: stmts .  ["end of command"]
   13 stmts: stmts . ";" cstmt.opt
   14      | stmts . "," cstmt.opt

    ","  shift, and go to state 205
    ";"  shift, and go to state 206

    $default  reduce using rule 11 (root_exps)


state 86

   12 stmts: cstmt.opt .

    $default  reduce using rule 12 (stmts)


state 87

    0 $accept: start "end of command" .

    $default  accept


state 88

   10 root_exp: error "end of command" .

    $default  reduce using rule 10 (root_exp)


state 89

    9 root_exp: error "," .

    $default  reduce using rule 9 (root_exp)


state 90

    8 root_exp: error ";" .

    $default  reduce using rule 8 (root_exp)


state 91

   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   52 routine: . "closure"
   53        | . "function"
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
  118            | . block
  119            | . "do" "(" exp ")" block
  120 detach: . "detach"
  121       | . "disown"
  122 primary-exp: . "assert" "(" exp ")"
  123            | . "assert" "{" claims "}"
  124            | . detach "(" exp ")"
  125            | . detach block
  126            | . "isdef" "(" k1_id ")"
  127            | . "watch" "(" exp ")"
  128 lvalue: . id
  129       | . primary-exp "." id
  130       | . primary-exp "." "*"
  131 primary-exp: . "&" id
  132            | . primary-exp "." "&" id
  133 id: . "identifier"
  134 bitor-exp: . "var" bitor-exp
  135          | . "const" "var" bitor-exp
  135          | "const" "var" . bitor-exp
  136 primary-exp: . lvalue
  137            | . lvalue args
  138 new: . "new" "identifier" args.opt
  139 bitor-exp: . new
  140 id: . "new"
  141 primary-exp: . routine formals block
  142 float-exp: . "float"
  143 duration: . "duration"
  144         | . duration "duration"
  150 dictionary: . "[" assocs "]"
  154 tuple: . "(" tuple.exps ")"
  159 literal-exp: . float-exp
  160            | . "angle"
  161            | . duration
  162            | . string
  163            | . "[" exps "]"
  164            | . "<" bitor-exps ">"
  165            | . dictionary
  166            | . tuple
  167 string: . "string"
  168       | . string "string"
  169 literal-exp: . "__HERE__"
  175 lvalue: . primary-exp "[" exps "]"
  176 literal-exp: . "this"
  177            | . "call"
  178 primary-exp: . literal-exp
  179            | . "(" exp ")"
  180            | . "(" error ")"
  181            | . primary-exp "**" primary-exp
  182 unary-exp: . primary-exp
  183          | . "--" lvalue
  184          | . "++" lvalue
  185          | . "+" unary-exp
  186          | . "-" unary-exp
  187          | . "!" unary-exp
  188          | . "compl" unary-exp
  189 bitor-exp: . unary-exp
  190          | . bitor-exp "+" bitor-exp
  191          | . bitor-exp "-" bitor-exp
  192          | . bitor-exp "*" bitor-exp
  193          | . bitor-exp "/" bitor-exp
  194          | . bitor-exp "%" bitor-exp
  195          | . bitor-exp "^" bitor-exp
  196          | . bitor-exp "<<" bitor-exp
  197          | . bitor-exp "bitand" bitor-exp
  198          | . bitor-exp "bitor" bitor-exp
  199          | . bitor-exp ">>" bitor-exp
  222 primary-exp: . "%exp:" unsigned
  223 lvalue: . "%lvalue:" unsigned
  224       | . "%id:" unsigned
  225       | . primary-exp "." "%id:" unsigned
  226 primary-exp: . lvalue "(" "%exps:" unsigned ")"

    "__HERE__"    shift, and go to state 7
    "closure"     shift, and go to state 9
    "const"       shift, and go to state 10
    "function"    shift, and go to state 13
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "var"         shift, and go to state 25
    "watch"       shift, and go to state 27
    "&"           shift, and go to state 29
    "identifier"  shift, and go to state 35
    "--"          shift, and go to state 41
    "++"          shift, and go to state 42
    "do"          shift, and go to state 43
    "assert"      shift, and go to state 44
    "detach"      shift, and go to state 45
    "disown"      shift, and go to state 46
    "new"         shift, and go to state 47
    "angle"       shift, and go to state 48
    "duration"    shift, and go to state 49
    "float"       shift, and go to state 50
    "string"      shift, and go to state 51
    "call"        shift, and go to state 52
    "this"        shift, and go to state 53
    "!"           shift, and go to state 54
    "compl"       shift, and go to state 55
    "-"           shift, and go to state 56
    "+"           shift, and go to state 57
    "<"           shift, and go to state 58
    "%exp:"       shift, and go to state 60
    "%lvalue:"    shift, and go to state 61
    "%id:"        shift, and go to state 62

    block        go to state 67
    routine      go to state 100
    primary-exp  go to state 101
    detach       go to state 71
    lvalue       go to state 120
    id           go to state 102
    bitor-exp    go to state 207
    new          go to state 75
    float-exp    go to state 76
    duration     go to state 77
    dictionary   go to state 78
    tuple        go to state 79
    literal-exp  go to state 80
    string       go to state 81
    unary-exp    go to state 82


state 92

   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   37 exp: . "class" lvalue protos block
   38    | . "package" lvalue protos block
   52 routine: . "closure"
   53        | . "function"
   62 exp: . exp "=" exp
   63    | . exp "=" exp modifiers
   64    | . lvalue "+=" exp
   65    | . lvalue "-=" exp
   66    | . lvalue "*=" exp
   67    | . lvalue "/=" exp
   68    | . lvalue "^=" exp
   69    | . lvalue "%=" exp
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
   77 stmt: "freezeif" "(" . exp ")" stmt
  118 primary-exp: . block
  119            | . "do" "(" exp ")" block
  120 detach: . "detach"
  121       | . "disown"
  122 primary-exp: . "assert" "(" exp ")"
  123            | . "assert" "{" claims "}"
  124            | . detach "(" exp ")"
  125            | . detach block
  126            | . "isdef" "(" k1_id ")"
  127            | . "watch" "(" exp ")"
  128 lvalue: . id
  129       | . primary-exp "." id
  130       | . primary-exp "." "*"
  131 primary-exp: . "&" id
  132            | . primary-exp "." "&" id
  133 id: . "identifier"
  134 bitor-exp: . "var" bitor-exp
  135          | . "const" "var" bitor-exp
  136 primary-exp: . lvalue
  137            | . lvalue args
  138 new: . "new" "identifier" args.opt
  139 bitor-exp: . new
  140 id: . "new"
  141 primary-exp: . routine formals block
  142 float-exp: . "float"
  143 duration: . "duration"
  144         | . duration "duration"
  150 dictionary: . "[" assocs "]"
  154 tuple: . "(" tuple.exps ")"
  159 literal-exp: . float-exp
  160            | . "angle"
  161            | . duration
  162            | . string
  163            | . "[" exps "]"
  164            | . "<" bitor-exps ">"
  165            | . dictionary
  166            | . tuple
  167 string: . "string"
  168       | . string "string"
  169 literal-exp: . "__HERE__"
  175 lvalue: . primary-exp "[" exps "]"
  176 literal-exp: . "this"
  177            | . "call"
  178 primary-exp: . literal-exp
  179            | . "(" exp ")"
  180            | . "(" error ")"
  181            | . primary-exp "**" primary-exp
  182 unary-exp: . primary-exp
  183          | . "--" lvalue
  184          | . "++" lvalue
  185          | . "+" unary-exp
  186          | . "-" unary-exp
  187          | . "!" unary-exp
  188          | . "compl" unary-exp
  189 bitor-exp: . unary-exp
  190          | . bitor-exp "+" bitor-exp
  191          | . bitor-exp "-" bitor-exp
  192          | . bitor-exp "*" bitor-exp
  193          | . bitor-exp "/" bitor-exp
  194          | . bitor-exp "%" bitor-exp
  195          | . bitor-exp "^" bitor-exp
  196          | . bitor-exp "<<" bitor-exp
  197          | . bitor-exp "bitand" bitor-exp
  198          | . bitor-exp "bitor" bitor-exp
  199          | . bitor-exp ">>" bitor-exp
  210 rel-exp: . bitor-exp rel-ops
  213 exp: . rel-exp
  214    | . exp "&&" exp
  215    | . exp "||" exp
  216    | . exp "in" exp
  217    | . exp "!" "in" exp
  221    | . "%unscope:" unsigned
  222 primary-exp: . "%exp:" unsigned
  223 lvalue: . "%lvalue:" unsigned
  224       | . "%id:" unsigned
  225       | . primary-exp "." "%id:" unsigned
  226 primary-exp: . lvalue "(" "%exps:" unsigned ")"

    "__HERE__"    shift, and go to state 7
    "closure"     shift, and go to state 9
    "const"       shift, and go to state 10
    "function"    shift, and go to state 13
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "var"         shift, and go to state 25
    "watch"       shift, and go to state 27
    "&"           shift, and go to state 29
    "identifier"  shift, and go to state 35
    "class"       shift, and go to state 36
    "package"     shift, and go to state 37
    "--"          shift, and go to state 41
    "++"          shift, and go to state 42
    "do"          shift, and go to state 43
    "assert"      shift, and go to state 44
    "detach"      shift, and go to state 45
    "disown"      shift, and go to state 46
    "new"         shift, and go to state 47
    "angle"       shift, and go to state 48
    "duration"    shift, and go to state 49
    "float"       shift, and go to state 50
    "string"      shift, and go to state 51
    "call"        shift, and go to state 52
    "this"        shift, and go to state 53
    "!"           shift, and go to state 54
    "compl"       shift, and go to state 55
    "-"           shift, and go to state 56
    "+"           shift, and go to state 57
    "<"           shift, and go to state 58
    "%unscope:"   shift, and go to state 59
    "%exp:"       shift, and go to state 60
    "%lvalue:"    shift, and go to state 61
    "%id:"        shift, and go to state 62

    block        go to state 67
    exp          go to state 208
    routine      go to state 100
    primary-exp  go to state 101
    detach       go to state 71
    lvalue       go to state 72
    id           go to state 102
    bitor-exp    go to state 74
    new          go to state 75
    float-exp    go to state 76
    duration     go to state 77
    dictionary   go to state 78
    tuple        go to state 79
    literal-exp  go to state 80
    string       go to state 81
    unary-exp    go to state 82
    rel-exp      go to state 83


state 93

   12 stmts: . cstmt.opt
   13      | . stmts ";" cstmt.opt
   14      | . stmts "," cstmt.opt
   15 cstmt.opt: .  [")", ",", ";"]
   16          | . cstmt
   17          | . cstmt "|"
   18 cstmt: . stmt
   19      | . cstmt "|" cstmt
   20      | . cstmt "&" cstmt
   23 stmt: . primary-exp ":" stmt
   24     | . exp
   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   37 exp: . "class" lvalue protos block
   38    | . "package" lvalue protos block
   43 stmt: . "enum" id "{" id.0 "}"
   47     | . "external" "identifier" "identifier"
   48     | . "external" "var" "identifier" "." "identifier" from "identifier"
   49     | . "external" event_or_function "(" unsigned ")" "identifier" "." "identifier" from "identifier"
   50     | . "import" lvalue
   51     | . exp "!" args.opt tilda.opt
   52 routine: . "closure"
   53        | . "function"
   54 stmt: . routine k1_id formals block
   55     | . id id formals block
   62 exp: . exp "=" exp
   63    | . exp "=" exp modifiers
   64    | . lvalue "+=" exp
   65    | . lvalue "-=" exp
   66    | . lvalue "*=" exp
   67    | . lvalue "/=" exp
   68    | . lvalue "^=" exp
   69    | . lvalue "%=" exp
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
   73 stmt: . "at" identifiers "(" exp tilda.opt ")" stmt onleave.opt
   74     | . "at" identifiers "(" event_match ")" stmt onleave.opt
   75     | . "every" "(" exp ")" stmt
   76     | . "if" "(" stmts ")" stmt else.opt
   76     | "if" "(" . stmts ")" stmt else.opt
   77     | . "freezeif" "(" exp ")" stmt
   78     | . "stopif" "(" exp ")" stmt
   79     | . "switch" "(" exp ")" "{" cases default.opt "}"
   80     | . "timeout" "(" exp ")" stmt catch.opt else.opt finally.opt
   81     | . "return" exp.opt
   82     | . "break"
   83     | . "continue"
   84     | . "waituntil" "(" exp tilda.opt ")"
   85     | . "waituntil" "(" event_match ")"
   86     | . "whenever" "(" exp tilda.opt ")" stmt else.opt
   87     | . "whenever" "(" event_match ")" stmt else.opt
  108     | . "try" block catches.1 else.opt finally.opt
  109     | . "try" block "finally" block
  110     | . "throw" exp.opt
  111     | . "loop" stmt
  112     | . "for" "(" exp ")" stmt
  113     | . "for" "(" stmt.opt ";" exp ";" stmt.opt ")" stmt
  114     | . "for" "(" "var" "identifier" in_or_colon exp ")" stmt
  115     | . "while" "(" exp ")" stmt
  118 primary-exp: . block
  119            | . "do" "(" exp ")" block
  120 detach: . "detach"
  121       | . "disown"
  122 primary-exp: . "assert" "(" exp ")"
  123            | . "assert" "{" claims "}"
  124            | . detach "(" exp ")"
  125            | . detach block
  126            | . "isdef" "(" k1_id ")"
  127            | . "watch" "(" exp ")"
  128 lvalue: . id
  129       | . primary-exp "." id
  130       | . primary-exp "." "*"
  131 primary-exp: . "&" id
  132            | . primary-exp "." "&" id
  133 id: . "identifier"
  134 bitor-exp: . "var" bitor-exp
  135          | . "const" "var" bitor-exp
  136 primary-exp: . lvalue
  137            | . lvalue args
  138 new: . "new" "identifier" args.opt
  139 bitor-exp: . new
  140 id: . "new"
  141 primary-exp: . routine formals block
  142 float-exp: . "float"
  143 duration: . "duration"
  144         | . duration "duration"
  150 dictionary: . "[" assocs "]"
  154 tuple: . "(" tuple.exps ")"
  159 literal-exp: . float-exp
  160            | . "angle"
  161            | . duration
  162            | . string
  163            | . "[" exps "]"
  164            | . "<" bitor-exps ">"
  165            | . dictionary
  166            | . tuple
  167 string: . "string"
  168       | . string "string"
  169 literal-exp: . "__HERE__"
  175 lvalue: . primary-exp "[" exps "]"
  176 literal-exp: . "this"
  177            | . "call"
  178 primary-exp: . literal-exp
  179            | . "(" exp ")"
  180            | . "(" error ")"
  181            | . primary-exp "**" primary-exp
  182 unary-exp: . primary-exp
  183          | . "--" lvalue
  184          | . "++" lvalue
  185          | . "+" unary-exp
  186          | . "-" unary-exp
  187          | . "!" unary-exp
  188          | . "compl" unary-exp
  189 bitor-exp: . unary-exp
  190          | . bitor-exp "+" bitor-exp
  191          | . bitor-exp "-" bitor-exp
  192          | . bitor-exp "*" bitor-exp
  193          | . bitor-exp "/" bitor-exp
  194          | . bitor-exp "%" bitor-exp
  195          | . bitor-exp "^" bitor-exp
  196          | . bitor-exp "<<" bitor-exp
  197          | . bitor-exp "bitand" bitor-exp
  198          | . bitor-exp "bitor" bitor-exp
  199          | . bitor-exp ">>" bitor-exp
  210 rel-exp: . bitor-exp rel-ops
  213 exp: . rel-exp
  214    | . exp "&&" exp
  215    | . exp "||" exp
  216    | . exp "in" exp
  217    | . exp "!" "in" exp
  221    | . "%unscope:" unsigned
  222 primary-exp: . "%exp:" unsigned
  223 lvalue: . "%lvalue:" unsigned
  224       | . "%id:" unsigned
  225       | . primary-exp "." "%id:" unsigned
  226 primary-exp: . lvalue "(" "%exps:" unsigned ")"

    "__HERE__"    shift, and go to state 7
    "break"       shift, and go to state 8
    "closure"     shift, and go to state 9
    "const"       shift, and go to state 10
    "continue"    shift, and go to state 11
    "freezeif"    shift, and go to state 12
    "function"    shift, and go to state 13
    "if"          shift, and go to state 14
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "return"      shift, and go to state 19
    "stopif"      shift, and go to state 20
    "switch"      shift, and go to state 21
    "throw"       shift, and go to state 22
    "timeout"     shift, and go to state 23
    "try"         shift, and go to state 24
    "var"         shift, and go to state 25
    "waituntil"   shift, and go to state 26
    "watch"       shift, and go to state 27
    "whenever"    shift, and go to state 28
    "&"           shift, and go to state 29
    "every"       shift, and go to state 30
    "for"         shift, and go to state 31
    "loop"        shift, and go to state 32
    "while"       shift, and go to state 33
    "at"          shift, and go to state 34
    "identifier"  shift, and go to state 35
    "class"       shift, and go to state 36
    "package"     shift, and go to state 37
    "enum"        shift, and go to state 38
    "external"    shift, and go to state 39
    "import"      shift, and go to state 40
    "--"          shift, and go to state 41
    "++"          shift, and go to state 42
    "do"          shift, and go to state 43
    "assert"      shift, and go to state 44
    "detach"      shift, and go to state 45
    "disown"      shift, and go to state 46
    "new"         shift, and go to state 47
    "angle"       shift, and go to state 48
    "duration"    shift, and go to state 49
    "float"       shift, and go to state 50
    "string"      shift, and go to state 51
    "call"        shift, and go to state 52
    "this"        shift, and go to state 53
    "!"           shift, and go to state 54
    "compl"       shift, and go to state 55
    "-"           shift, and go to state 56
    "+"           shift, and go to state 57
    "<"           shift, and go to state 58
    "%unscope:"   shift, and go to state 59
    "%exp:"       shift, and go to state 60
    "%lvalue:"    shift, and go to state 61
    "%id:"        shift, and go to state 62

    $default  reduce using rule 15 (cstmt.opt)

    stmts        go to state 209
    cstmt.opt    go to state 86
    cstmt        go to state 65
    stmt         go to state 66
    block        go to state 67
    exp          go to state 68
    routine      go to state 69
    primary-exp  go to state 70
    detach       go to state 71
    lvalue       go to state 72
    id           go to state 73
    bitor-exp    go to state 74
    new          go to state 75
    float-exp    go to state 76
    duration     go to state 77
    dictionary   go to state 78
    tuple        go to state 79
    literal-exp  go to state 80
    string       go to state 81
    unary-exp    go to state 82
    rel-exp      go to state 83


state 94

   56 k1_id: . "identifier"
   57      | . "this" "." "identifier"
   58      | . k1_id "." "identifier"
  126 primary-exp: "isdef" "(" . k1_id ")"

    "identifier"  shift, and go to state 170
    "this"        shift, and go to state 171

    k1_id  go to state 210


state 95

   26 block: "{" error . "}"

    "}"  shift, and go to state 211


state 96

   13 stmts: stmts . ";" cstmt.opt
   14      | stmts . "," cstmt.opt
   25 block: "{" stmts . "}"

    "}"  shift, and go to state 212
    ","  shift, and go to state 205
    ";"  shift, and go to state 206


state 97

   27 block: "{" id . "~" id "}"
   55 stmt: id . id formals block
  128 lvalue: id .  ["=", ":", "in", "[", "(", ".", "}", ",", ";", "&", "|", "^=", "-=", "%=", "+=", "/=", "*=", "--", "++", "->", "!", "bitand", "bitor", "^", ">>", "<<", "-", "%", "+", "/", "*", "**", "=~=", "==", "===", ">=", ">", "<=", "<", "!=", "!==", "~=", "&&", "||"]
  133 id: . "identifier"
  140   | . "new"

    "~"           shift, and go to state 213
    "identifier"  shift, and go to state 35
    "new"         shift, and go to state 125

    $default  reduce using rule 128 (lvalue)

    id  go to state 191


state 98

  148 assocs: "=>" .

    $default  reduce using rule 148 (assocs)


state 99

   62 exp: exp . "=" exp
   63    | exp . "=" exp modifiers
  145 assoc: exp . "=>" exp
  214 exp: exp . "&&" exp
  215    | exp . "||" exp
  216    | exp . "in" exp
  217    | exp . "!" "in" exp
  233 exps.1: exp .  ["]", ","]

    "="   shift, and go to state 164
    "in"  shift, and go to state 165
    "=>"  shift, and go to state 214
    "!"   shift, and go to state 215
    "&&"  shift, and go to state 167
    "||"  shift, and go to state 168

    $default  reduce using rule 233 (exps.1)


state 100

  141 primary-exp: routine . formals block
  251 formals: .  ["{"]
  252        | . "(" formals.0 ")"

    "("  shift, and go to state 169

    $default  reduce using rule 251 (formals)

    formals  go to state 173


state 101

  129 lvalue: primary-exp . "." id
  130       | primary-exp . "." "*"
  132 primary-exp: primary-exp . "." "&" id
  175 lvalue: primary-exp . "[" exps "]"
  181 primary-exp: primary-exp . "**" primary-exp
  182 unary-exp: primary-exp .  ["end of command", "=", "case", "catch", ":", "default", "else", "finally", "if", "in", "{", "onleave", "}", "]", ")", "~", ",", ";", "&", "|", "identifier", "=>", "?", "!", "bitand", "bitor", "^", ">>", "<<", "-", "%", "+", "/", "*", "=~=", "==", "===", ">=", ">", "<=", "<", "!=", "!==", "~=", "&&", "||"]
  225 lvalue: primary-exp . "." "%id:" unsigned

    "["   shift, and go to state 175
    "."   shift, and go to state 176
    "**"  shift, and go to state 177

    $default  reduce using rule 182 (unary-exp)


state 102

  128 lvalue: id .

    $default  reduce using rule 128 (lvalue)


state 103

  146 assocs.1: assoc .

    $default  reduce using rule 146 (assocs.1)


state 104

  147 assocs.1: assocs.1 . "," assoc
  149 assocs: assocs.1 . comma.opt
  253 comma.opt: .  ["]"]
  254          | . ","

    ","  shift, and go to state 216

    $default  reduce using rule 253 (comma.opt)

    comma.opt  go to state 217


state 105

  150 dictionary: "[" assocs . "]"

    "]"  shift, and go to state 218


state 106

  163 literal-exp: "[" exps . "]"

    "]"  shift, and go to state 219


state 107

  232 exps: exps.1 . comma.opt
  234 exps.1: exps.1 . "," exp
  253 comma.opt: .  ["]", ")"]
  254          | . ","

    ","  shift, and go to state 220

    $default  reduce using rule 253 (comma.opt)

    comma.opt  go to state 221


state 108

  180 primary-exp: "(" error . ")"

    ")"  shift, and go to state 222


state 109

   62 exp: exp . "=" exp
   63    | exp . "=" exp modifiers
  179 primary-exp: "(" exp . ")"
  214 exp: exp . "&&" exp
  215    | exp . "||" exp
  216    | exp . "in" exp
  217    | exp . "!" "in" exp
  233 exps.1: exp .  [","]

    "="   shift, and go to state 164
    "in"  shift, and go to state 165
    ")"   shift, and go to state 223
    "!"   shift, and go to state 215
    "&&"  shift, and go to state 167
    "||"  shift, and go to state 168

    $default  reduce using rule 233 (exps.1)


state 110

  154 tuple: "(" tuple.exps . ")"

    ")"  shift, and go to state 224


state 111

  152 tuple.exps: exps.1 . ","
  234 exps.1: exps.1 . "," exp
  235 exps.2: exps.1 . "," exp

    ","  shift, and go to state 225


state 112

  153 tuple.exps: exps.2 .

    $default  reduce using rule 153 (tuple.exps)


state 113

   62 exp: exp . "=" exp
   63    | exp . "=" exp modifiers
  214    | exp . "&&" exp
  215    | exp . "||" exp
  216    | exp . "in" exp
  217    | exp . "!" "in" exp
  219 exp.opt: exp .  ["end of command", "case", "catch", "default", "else", "finally", "onleave", "}", ")", ",", ";", "&", "|"]

    "="   shift, and go to state 164
    "in"  shift, and go to state 165
    "!"   shift, and go to state 215
    "&&"  shift, and go to state 167
    "||"  shift, and go to state 168

    $default  reduce using rule 219 (exp.opt)


state 114

   81 stmt: "return" exp.opt .

    $default  reduce using rule 81 (stmt)


state 115

   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   37 exp: . "class" lvalue protos block
   38    | . "package" lvalue protos block
   52 routine: . "closure"
   53        | . "function"
   62 exp: . exp "=" exp
   63    | . exp "=" exp modifiers
   64    | . lvalue "+=" exp
   65    | . lvalue "-=" exp
   66    | . lvalue "*=" exp
   67    | . lvalue "/=" exp
   68    | . lvalue "^=" exp
   69    | . lvalue "%=" exp
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
   78 stmt: "stopif" "(" . exp ")" stmt
  118 primary-exp: . block
  119            | . "do" "(" exp ")" block
  120 detach: . "detach"
  121       | . "disown"
  122 primary-exp: . "assert" "(" exp ")"
  123            | . "assert" "{" claims "}"
  124            | . detach "(" exp ")"
  125            | . detach block
  126            | . "isdef" "(" k1_id ")"
  127            | . "watch" "(" exp ")"
  128 lvalue: . id
  129       | . primary-exp "." id
  130       | . primary-exp "." "*"
  131 primary-exp: . "&" id
  132            | . primary-exp "." "&" id
  133 id: . "identifier"
  134 bitor-exp: . "var" bitor-exp
  135          | . "const" "var" bitor-exp
  136 primary-exp: . lvalue
  137            | . lvalue args
  138 new: . "new" "identifier" args.opt
  139 bitor-exp: . new
  140 id: . "new"
  141 primary-exp: . routine formals block
  142 float-exp: . "float"
  143 duration: . "duration"
  144         | . duration "duration"
  150 dictionary: . "[" assocs "]"
  154 tuple: . "(" tuple.exps ")"
  159 literal-exp: . float-exp
  160            | . "angle"
  161            | . duration
  162            | . string
  163            | . "[" exps "]"
  164            | . "<" bitor-exps ">"
  165            | . dictionary
  166            | . tuple
  167 string: . "string"
  168       | . string "string"
  169 literal-exp: . "__HERE__"
  175 lvalue: . primary-exp "[" exps "]"
  176 literal-exp: . "this"
  177            | . "call"
  178 primary-exp: . literal-exp
  179            | . "(" exp ")"
  180            | . "(" error ")"
  181            | . primary-exp "**" primary-exp
  182 unary-exp: . primary-exp
  183          | . "--" lvalue
  184          | . "++" lvalue
  185          | . "+" unary-exp
  186          | . "-" unary-exp
  187          | . "!" unary-exp
  188          | . "compl" unary-exp
  189 bitor-exp: . unary-exp
  190          | . bitor-exp "+" bitor-exp
  191          | . bitor-exp "-" bitor-exp
  192          | . bitor-exp "*" bitor-exp
  193          | . bitor-exp "/" bitor-exp
  194          | . bitor-exp "%" bitor-exp
  195          | . bitor-exp "^" bitor-exp
  196          | . bitor-exp "<<" bitor-exp
  197          | . bitor-exp "bitand" bitor-exp
  198          | . bitor-exp "bitor" bitor-exp
  199          | . bitor-exp ">>" bitor-exp
  210 rel-exp: . bitor-exp rel-ops
  213 exp: . rel-exp
  214    | . exp "&&" exp
  215    | . exp "||" exp
  216    | . exp "in" exp
  217    | . exp "!" "in" exp
  221    | . "%unscope:" unsigned
  222 primary-exp: . "%exp:" unsigned
  223 lvalue: . "%lvalue:" unsigned
  224       | . "%id:" unsigned
  225       | . primary-exp "." "%id:" unsigned
  226 primary-exp: . lvalue "(" "%exps:" unsigned ")"

    "__HERE__"    shift, and go to state 7
    "closure"     shift, and go to state 9
    "const"       shift, and go to state 10
    "function"    shift, and go to state 13
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "var"         shift, and go to state 25
    "watch"       shift, and go to state 27
    "&"           shift, and go to state 29
    "identifier"  shift, and go to state 35
    "class"       shift, and go to state 36
    "package"     shift, and go to state 37
    "--"          shift, and go to state 41
    "++"          shift, and go to state 42
    "do"          shift, and go to state 43
    "assert"      shift, and go to state 44
    "detach"      shift, and go to state 45
    "disown"      shift, and go to state 46
    "new"         shift, and go to state 47
    "angle"       shift, and go to state 48
    "duration"    shift, and go to state 49
    "float"       shift, and go to state 50
    "string"      shift, and go to state 51
    "call"        shift, and go to state 52
    "this"        shift, and go to state 53
    "!"           shift, and go to state 54
    "compl"       shift, and go to state 55
    "-"           shift, and go to state 56
    "+"           shift, and go to state 57
    "<"           shift, and go to state 58
    "%unscope:"   shift, and go to state 59
    "%exp:"       shift, and go to state 60
    "%lvalue:"    shift, and go to state 61
    "%id:"        shift, and go to state 62

    block        go to state 67
    exp          go to state 226
    routine      go to state 100
    primary-exp  go to state 101
    detach       go to state 71
    lvalue       go to state 72
    id           go to state 102
    bitor-exp    go to state 74
    new          go to state 75
    float-exp    go to state 76
    duration     go to state 77
    dictionary   go to state 78
    tuple        go to state 79
    literal-exp  go to state 80
    string       go to state 81
    unary-exp    go to state 82
    rel-exp      go to state 83


state 116

   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   37 exp: . "class" lvalue protos block
   38    | . "package" lvalue protos block
   52 routine: . "closure"
   53        | . "function"
   62 exp: . exp "=" exp
   63    | . exp "=" exp modifiers
   64    | . lvalue "+=" exp
   65    | . lvalue "-=" exp
   66    | . lvalue "*=" exp
   67    | . lvalue "/=" exp
   68    | . lvalue "^=" exp
   69    | . lvalue "%=" exp
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
   79 stmt: "switch" "(" . exp ")" "{" cases default.opt "}"
  118 primary-exp: . block
  119            | . "do" "(" exp ")" block
  120 detach: . "detach"
  121       | . "disown"
  122 primary-exp: . "assert" "(" exp ")"
  123            | . "assert" "{" claims "}"
  124            | . detach "(" exp ")"
  125            | . detach block
  126            | . "isdef" "(" k1_id ")"
  127            | . "watch" "(" exp ")"
  128 lvalue: . id
  129       | . primary-exp "." id
  130       | . primary-exp "." "*"
  131 primary-exp: . "&" id
  132            | . primary-exp "." "&" id
  133 id: . "identifier"
  134 bitor-exp: . "var" bitor-exp
  135          | . "const" "var" bitor-exp
  136 primary-exp: . lvalue
  137            | . lvalue args
  138 new: . "new" "identifier" args.opt
  139 bitor-exp: . new
  140 id: . "new"
  141 primary-exp: . routine formals block
  142 float-exp: . "float"
  143 duration: . "duration"
  144         | . duration "duration"
  150 dictionary: . "[" assocs "]"
  154 tuple: . "(" tuple.exps ")"
  159 literal-exp: . float-exp
  160            | . "angle"
  161            | . duration
  162            | . string
  163            | . "[" exps "]"
  164            | . "<" bitor-exps ">"
  165            | . dictionary
  166            | . tuple
  167 string: . "string"
  168       | . string "string"
  169 literal-exp: . "__HERE__"
  175 lvalue: . primary-exp "[" exps "]"
  176 literal-exp: . "this"
  177            | . "call"
  178 primary-exp: . literal-exp
  179            | . "(" exp ")"
  180            | . "(" error ")"
  181            | . primary-exp "**" primary-exp
  182 unary-exp: . primary-exp
  183          | . "--" lvalue
  184          | . "++" lvalue
  185          | . "+" unary-exp
  186          | . "-" unary-exp
  187          | . "!" unary-exp
  188          | . "compl" unary-exp
  189 bitor-exp: . unary-exp
  190          | . bitor-exp "+" bitor-exp
  191          | . bitor-exp "-" bitor-exp
  192          | . bitor-exp "*" bitor-exp
  193          | . bitor-exp "/" bitor-exp
  194          | . bitor-exp "%" bitor-exp
  195          | . bitor-exp "^" bitor-exp
  196          | . bitor-exp "<<" bitor-exp
  197          | . bitor-exp "bitand" bitor-exp
  198          | . bitor-exp "bitor" bitor-exp
  199          | . bitor-exp ">>" bitor-exp
  210 rel-exp: . bitor-exp rel-ops
  213 exp: . rel-exp
  214    | . exp "&&" exp
  215    | . exp "||" exp
  216    | . exp "in" exp
  217    | . exp "!" "in" exp
  221    | . "%unscope:" unsigned
  222 primary-exp: . "%exp:" unsigned
  223 lvalue: . "%lvalue:" unsigned
  224       | . "%id:" unsigned
  225       | . primary-exp "." "%id:" unsigned
  226 primary-exp: . lvalue "(" "%exps:" unsigned ")"

    "__HERE__"    shift, and go to state 7
    "closure"     shift, and go to state 9
    "const"       shift, and go to state 10
    "function"    shift, and go to state 13
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "var"         shift, and go to state 25
    "watch"       shift, and go to state 27
    "&"           shift, and go to state 29
    "identifier"  shift, and go to state 35
    "class"       shift, and go to state 36
    "package"     shift, and go to state 37
    "--"          shift, and go to state 41
    "++"          shift, and go to state 42
    "do"          shift, and go to state 43
    "assert"      shift, and go to state 44
    "detach"      shift, and go to state 45
    "disown"      shift, and go to state 46
    "new"         shift, and go to state 47
    "angle"       shift, and go to state 48
    "duration"    shift, and go to state 49
    "float"       shift, and go to state 50
    "string"      shift, and go to state 51
    "call"        shift, and go to state 52
    "this"        shift, and go to state 53
    "!"           shift, and go to state 54
    "compl"       shift, and go to state 55
    "-"           shift, and go to state 56
    "+"           shift, and go to state 57
    "<"           shift, and go to state 58
    "%unscope:"   shift, and go to state 59
    "%exp:"       shift, and go to state 60
    "%lvalue:"    shift, and go to state 61
    "%id:"        shift, and go to state 62

    block        go to state 67
    exp          go to state 227
    routine      go to state 100
    primary-exp  go to state 101
    detach       go to state 71
    lvalue       go to state 72
    id           go to state 102
    bitor-exp    go to state 74
    new          go to state 75
    float-exp    go to state 76
    duration     go to state 77
    dictionary   go to state 78
    tuple        go to state 79
    literal-exp  go to state 80
    string       go to state 81
    unary-exp    go to state 82
    rel-exp      go to state 83


state 117

  110 stmt: "throw" exp.opt .

    $default  reduce using rule 110 (stmt)


state 118

   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   37 exp: . "class" lvalue protos block
   38    | . "package" lvalue protos block
   52 routine: . "closure"
   53        | . "function"
   62 exp: . exp "=" exp
   63    | . exp "=" exp modifiers
   64    | . lvalue "+=" exp
   65    | . lvalue "-=" exp
   66    | . lvalue "*=" exp
   67    | . lvalue "/=" exp
   68    | . lvalue "^=" exp
   69    | . lvalue "%=" exp
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
   80 stmt: "timeout" "(" . exp ")" stmt catch.opt else.opt finally.opt
  118 primary-exp: . block
  119            | . "do" "(" exp ")" block
  120 detach: . "detach"
  121       | . "disown"
  122 primary-exp: . "assert" "(" exp ")"
  123            | . "assert" "{" claims "}"
  124            | . detach "(" exp ")"
  125            | . detach block
  126            | . "isdef" "(" k1_id ")"
  127            | . "watch" "(" exp ")"
  128 lvalue: . id
  129       | . primary-exp "." id
  130       | . primary-exp "." "*"
  131 primary-exp: . "&" id
  132            | . primary-exp "." "&" id
  133 id: . "identifier"
  134 bitor-exp: . "var" bitor-exp
  135          | . "const" "var" bitor-exp
  136 primary-exp: . lvalue
  137            | . lvalue args
  138 new: . "new" "identifier" args.opt
  139 bitor-exp: . new
  140 id: . "new"
  141 primary-exp: . routine formals block
  142 float-exp: . "float"
  143 duration: . "duration"
  144         | . duration "duration"
  150 dictionary: . "[" assocs "]"
  154 tuple: . "(" tuple.exps ")"
  159 literal-exp: . float-exp
  160            | . "angle"
  161            | . duration
  162            | . string
  163            | . "[" exps "]"
  164            | . "<" bitor-exps ">"
  165            | . dictionary
  166            | . tuple
  167 string: . "string"
  168       | . string "string"
  169 literal-exp: . "__HERE__"
  175 lvalue: . primary-exp "[" exps "]"
  176 literal-exp: . "this"
  177            | . "call"
  178 primary-exp: . literal-exp
  179            | . "(" exp ")"
  180            | . "(" error ")"
  181            | . primary-exp "**" primary-exp
  182 unary-exp: . primary-exp
  183          | . "--" lvalue
  184          | . "++" lvalue
  185          | . "+" unary-exp
  186          | . "-" unary-exp
  187          | . "!" unary-exp
  188          | . "compl" unary-exp
  189 bitor-exp: . unary-exp
  190          | . bitor-exp "+" bitor-exp
  191          | . bitor-exp "-" bitor-exp
  192          | . bitor-exp "*" bitor-exp
  193          | . bitor-exp "/" bitor-exp
  194          | . bitor-exp "%" bitor-exp
  195          | . bitor-exp "^" bitor-exp
  196          | . bitor-exp "<<" bitor-exp
  197          | . bitor-exp "bitand" bitor-exp
  198          | . bitor-exp "bitor" bitor-exp
  199          | . bitor-exp ">>" bitor-exp
  210 rel-exp: . bitor-exp rel-ops
  213 exp: . rel-exp
  214    | . exp "&&" exp
  215    | . exp "||" exp
  216    | . exp "in" exp
  217    | . exp "!" "in" exp
  221    | . "%unscope:" unsigned
  222 primary-exp: . "%exp:" unsigned
  223 lvalue: . "%lvalue:" unsigned
  224       | . "%id:" unsigned
  225       | . primary-exp "." "%id:" unsigned
  226 primary-exp: . lvalue "(" "%exps:" unsigned ")"

    "__HERE__"    shift, and go to state 7
    "closure"     shift, and go to state 9
    "const"       shift, and go to state 10
    "function"    shift, and go to state 13
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "var"         shift, and go to state 25
    "watch"       shift, and go to state 27
    "&"           shift, and go to state 29
    "identifier"  shift, and go to state 35
    "class"       shift, and go to state 36
    "package"     shift, and go to state 37
    "--"          shift, and go to state 41
    "++"          shift, and go to state 42
    "do"          shift, and go to state 43
    "assert"      shift, and go to state 44
    "detach"      shift, and go to state 45
    "disown"      shift, and go to state 46
    "new"         shift, and go to state 47
    "angle"       shift, and go to state 48
    "duration"    shift, and go to state 49
    "float"       shift, and go to state 50
    "string"      shift, and go to state 51
    "call"        shift, and go to state 52
    "this"        shift, and go to state 53
    "!"           shift, and go to state 54
    "compl"       shift, and go to state 55
    "-"           shift, and go to state 56
    "+"           shift, and go to state 57
    "<"           shift, and go to state 58
    "%unscope:"   shift, and go to state 59
    "%exp:"       shift, and go to state 60
    "%lvalue:"    shift, and go to state 61
    "%id:"        shift, and go to state 62

    block        go to state 67
    exp          go to state 228
    routine      go to state 100
    primary-exp  go to state 101
    detach       go to state 71
    lvalue       go to state 72
    id           go to state 102
    bitor-exp    go to state 74
    new          go to state 75
    float-exp    go to state 76
    duration     go to state 77
    dictionary   go to state 78
    tuple        go to state 79
    literal-exp  go to state 80
    string       go to state 81
    unary-exp    go to state 82
    rel-exp      go to state 83


state 119

   97 catches.1: . catch
   98          | . catches.1 catch
  103 catch: . "catch" match.opt block
  108 stmt: "try" block . catches.1 else.opt finally.opt
  109     | "try" block . "finally" block

    "catch"    shift, and go to state 229
    "finally"  shift, and go to state 230

    catches.1  go to state 231
    catch      go to state 232


state 120

   70 primary-exp: lvalue . "--"
   71            | lvalue . "++"
   72            | lvalue . "->" id
  136            | lvalue .  ["end of command", "=", "case", "catch", ":", "default", "else", "finally", "if", "in", "{", "[", "onleave", ".", "}", "]", ")", "~", ",", ";", "&", "|", "identifier", "=>", "?", "!", "bitand", "bitor", "^", ">>", "<<", "-", "%", "+", "/", "*", "**", "=~=", "==", "===", ">=", ">", "<=", "<", "!=", "!==", "~=", "&&", "||"]
  137            | lvalue . args
  226            | lvalue . "(" "%exps:" unsigned ")"
  236 args: . "(" exps ")"

    "("   shift, and go to state 180
    "--"  shift, and go to state 187
    "++"  shift, and go to state 188
    "->"  shift, and go to state 189

    $default  reduce using rule 136 (primary-exp)

    args  go to state 190


state 121

  134 bitor-exp: "var" bitor-exp .  ["end of command", "=", "case", "catch", ":", "default", "else", "finally", "if", "in", "{", "onleave", "}", "]", ")", "~", ",", ";", "&", "|", "identifier", "=>", "?", "!", "=~=", "==", "===", ">=", ">", "<=", "<", "!=", "!==", "~=", "&&", "||"]
  190          | bitor-exp . "+" bitor-exp
  191          | bitor-exp . "-" bitor-exp
  192          | bitor-exp . "*" bitor-exp
  193          | bitor-exp . "/" bitor-exp
  194          | bitor-exp . "%" bitor-exp
  195          | bitor-exp . "^" bitor-exp
  196          | bitor-exp . "<<" bitor-exp
  197          | bitor-exp . "bitand" bitor-exp
  198          | bitor-exp . "bitor" bitor-exp
  199          | bitor-exp . ">>" bitor-exp

    "bitand"  shift, and go to state 192
    "bitor"   shift, and go to state 193
    "^"       shift, and go to state 194
    ">>"      shift, and go to state 195
    "<<"      shift, and go to state 196
    "-"       shift, and go to state 197
    "%"       shift, and go to state 198
    "+"       shift, and go to state 199
    "/"       shift, and go to state 200
    "*"       shift, and go to state 201

    $default  reduce using rule 134 (bitor-exp)

    Conflict between rule 134 and token "bitand" resolved as shift ("var" < "bitand").
    Conflict between rule 134 and token "bitor" resolved as shift ("var" < "bitor").
    Conflict between rule 134 and token "^" resolved as shift ("var" < "^").
    Conflict between rule 134 and token ">>" resolved as shift ("var" < ">>").
    Conflict between rule 134 and token "<<" resolved as shift ("var" < "<<").
    Conflict between rule 134 and token "-" resolved as shift ("var" < "-").
    Conflict between rule 134 and token "%" resolved as shift ("var" < "%").
    Conflict between rule 134 and token "+" resolved as shift ("var" < "+").
    Conflict between rule 134 and token "/" resolved as shift ("var" < "/").
    Conflict between rule 134 and token "*" resolved as shift ("var" < "*").


state 122

   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   37 exp: . "class" lvalue protos block
   38    | . "package" lvalue protos block
   52 routine: . "closure"
   53        | . "function"
   62 exp: . exp "=" exp
   63    | . exp "=" exp modifiers
   64    | . lvalue "+=" exp
   65    | . lvalue "-=" exp
   66    | . lvalue "*=" exp
   67    | . lvalue "/=" exp
   68    | . lvalue "^=" exp
   69    | . lvalue "%=" exp
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
   84 stmt: "waituntil" "(" . exp tilda.opt ")"
   85     | "waituntil" "(" . event_match ")"
  118 primary-exp: . block
  119            | . "do" "(" exp ")" block
  120 detach: . "detach"
  121       | . "disown"
  122 primary-exp: . "assert" "(" exp ")"
  123            | . "assert" "{" claims "}"
  124            | . detach "(" exp ")"
  125            | . detach block
  126            | . "isdef" "(" k1_id ")"
  127            | . "watch" "(" exp ")"
  128 lvalue: . id
  129       | . primary-exp "." id
  130       | . primary-exp "." "*"
  131 primary-exp: . "&" id
  132            | . primary-exp "." "&" id
  133 id: . "identifier"
  134 bitor-exp: . "var" bitor-exp
  135          | . "const" "var" bitor-exp
  136 primary-exp: . lvalue
  137            | . lvalue args
  138 new: . "new" "identifier" args.opt
  139 bitor-exp: . new
  140 id: . "new"
  141 primary-exp: . routine formals block
  142 float-exp: . "float"
  143 duration: . "duration"
  144         | . duration "duration"
  150 dictionary: . "[" assocs "]"
  154 tuple: . "(" tuple.exps ")"
  159 literal-exp: . float-exp
  160            | . "angle"
  161            | . duration
  162            | . string
  163            | . "[" exps "]"
  164            | . "<" bitor-exps ">"
  165            | . dictionary
  166            | . tuple
  167 string: . "string"
  168       | . string "string"
  169 literal-exp: . "__HERE__"
  170 event_match: . exp "?" args.opt tilda.opt guard.opt
  175 lvalue: . primary-exp "[" exps "]"
  176 literal-exp: . "this"
  177            | . "call"
  178 primary-exp: . literal-exp
  179            | . "(" exp ")"
  180            | . "(" error ")"
  181            | . primary-exp "**" primary-exp
  182 unary-exp: . primary-exp
  183          | . "--" lvalue
  184          | . "++" lvalue
  185          | . "+" unary-exp
  186          | . "-" unary-exp
  187          | . "!" unary-exp
  188          | . "compl" unary-exp
  189 bitor-exp: . unary-exp
  190          | . bitor-exp "+" bitor-exp
  191          | . bitor-exp "-" bitor-exp
  192          | . bitor-exp "*" bitor-exp
  193          | . bitor-exp "/" bitor-exp
  194          | . bitor-exp "%" bitor-exp
  195          | . bitor-exp "^" bitor-exp
  196          | . bitor-exp "<<" bitor-exp
  197          | . bitor-exp "bitand" bitor-exp
  198          | . bitor-exp "bitor" bitor-exp
  199          | . bitor-exp ">>" bitor-exp
  210 rel-exp: . bitor-exp rel-ops
  213 exp: . rel-exp
  214    | . exp "&&" exp
  215    | . exp "||" exp
  216    | . exp "in" exp
  217    | . exp "!" "in" exp
  221    | . "%unscope:" unsigned
  222 primary-exp: . "%exp:" unsigned
  223 lvalue: . "%lvalue:" unsigned
  224       | . "%id:" unsigned
  225       | . primary-exp "." "%id:" unsigned
  226 primary-exp: . lvalue "(" "%exps:" unsigned ")"

    "__HERE__"    shift, and go to state 7
    "closure"     shift, and go to state 9
    "const"       shift, and go to state 10
    "function"    shift, and go to state 13
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "var"         shift, and go to state 25
    "watch"       shift, and go to state 27
    "&"           shift, and go to state 29
    "identifier"  shift, and go to state 35
    "class"       shift, and go to state 36
    "package"     shift, and go to state 37
    "--"          shift, and go to state 41
    "++"          shift, and go to state 42
    "do"          shift, and go to state 43
    "assert"      shift, and go to state 44
    "detach"      shift, and go to state 45
    "disown"      shift, and go to state 46
    "new"         shift, and go to state 47
    "angle"       shift, and go to state 48
    "duration"    shift, and go to state 49
    "float"       shift, and go to state 50
    "string"      shift, and go to state 51
    "call"        shift, and go to state 52
    "this"        shift, and go to state 53
    "!"           shift, and go to state 54
    "compl"       shift, and go to state 55
    "-"           shift, and go to state 56
    "+"           shift, and go to state 57
    "<"           shift, and go to state 58
    "%unscope:"   shift, and go to state 59
    "%exp:"       shift, and go to state 60
    "%lvalue:"    shift, and go to state 61
    "%id:"        shift, and go to state 62

    block        go to state 67
    exp          go to state 233
    routine      go to state 100
    primary-exp  go to state 101
    detach       go to state 71
    lvalue       go to state 72
    id           go to state 102
    bitor-exp    go to state 74
    new          go to state 75
    float-exp    go to state 76
    duration     go to state 77
    dictionary   go to state 78
    tuple        go to state 79
    literal-exp  go to state 80
    string       go to state 81
    event_match  go to state 234
    unary-exp    go to state 82
    rel-exp      go to state 83


state 123

   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   37 exp: . "class" lvalue protos block
   38    | . "package" lvalue protos block
   52 routine: . "closure"
   53        | . "function"
   62 exp: . exp "=" exp
   63    | . exp "=" exp modifiers
   64    | . lvalue "+=" exp
   65    | . lvalue "-=" exp
   66    | . lvalue "*=" exp
   67    | . lvalue "/=" exp
   68    | . lvalue "^=" exp
   69    | . lvalue "%=" exp
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
  118            | . block
  119            | . "do" "(" exp ")" block
  120 detach: . "detach"
  121       | . "disown"
  122 primary-exp: . "assert" "(" exp ")"
  123            | . "assert" "{" claims "}"
  124            | . detach "(" exp ")"
  125            | . detach block
  126            | . "isdef" "(" k1_id ")"
  127            | . "watch" "(" exp ")"
  127            | "watch" "(" . exp ")"
  128 lvalue: . id
  129       | . primary-exp "." id
  130       | . primary-exp "." "*"
  131 primary-exp: . "&" id
  132            | . primary-exp "." "&" id
  133 id: . "identifier"
  134 bitor-exp: . "var" bitor-exp
  135          | . "const" "var" bitor-exp
  136 primary-exp: . lvalue
  137            | . lvalue args
  138 new: . "new" "identifier" args.opt
  139 bitor-exp: . new
  140 id: . "new"
  141 primary-exp: . routine formals block
  142 float-exp: . "float"
  143 duration: . "duration"
  144         | . duration "duration"
  150 dictionary: . "[" assocs "]"
  154 tuple: . "(" tuple.exps ")"
  159 literal-exp: . float-exp
  160            | . "angle"
  161            | . duration
  162            | . string
  163            | . "[" exps "]"
  164            | . "<" bitor-exps ">"
  165            | . dictionary
  166            | . tuple
  167 string: . "string"
  168       | . string "string"
  169 literal-exp: . "__HERE__"
  175 lvalue: . primary-exp "[" exps "]"
  176 literal-exp: . "this"
  177            | . "call"
  178 primary-exp: . literal-exp
  179            | . "(" exp ")"
  180            | . "(" error ")"
  181            | . primary-exp "**" primary-exp
  182 unary-exp: . primary-exp
  183          | . "--" lvalue
  184          | . "++" lvalue
  185          | . "+" unary-exp
  186          | . "-" unary-exp
  187          | . "!" unary-exp
  188          | . "compl" unary-exp
  189 bitor-exp: . unary-exp
  190          | . bitor-exp "+" bitor-exp
  191          | . bitor-exp "-" bitor-exp
  192          | . bitor-exp "*" bitor-exp
  193          | . bitor-exp "/" bitor-exp
  194          | . bitor-exp "%" bitor-exp
  195          | . bitor-exp "^" bitor-exp
  196          | . bitor-exp "<<" bitor-exp
  197          | . bitor-exp "bitand" bitor-exp
  198          | . bitor-exp "bitor" bitor-exp
  199          | . bitor-exp ">>" bitor-exp
  210 rel-exp: . bitor-exp rel-ops
  213 exp: . rel-exp
  214    | . exp "&&" exp
  215    | . exp "||" exp
  216    | . exp "in" exp
  217    | . exp "!" "in" exp
  221    | . "%unscope:" unsigned
  222 primary-exp: . "%exp:" unsigned
  223 lvalue: . "%lvalue:" unsigned
  224       | . "%id:" unsigned
  225       | . primary-exp "." "%id:" unsigned
  226 primary-exp: . lvalue "(" "%exps:" unsigned ")"

    "__HERE__"    shift, and go to state 7
    "closure"     shift, and go to state 9
    "const"       shift, and go to state 10
    "function"    shift, and go to state 13
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "var"         shift, and go to state 25
    "watch"       shift, and go to state 27
    "&"           shift, and go to state 29
    "identifier"  shift, and go to state 35
    "class"       shift, and go to state 36
    "package"     shift, and go to state 37
    "--"          shift, and go to state 41
    "++"          shift, and go to state 42
    "do"          shift, and go to state 43
    "assert"      shift, and go to state 44
    "detach"      shift, and go to state 45
    "disown"      shift, and go to state 46
    "new"         shift, and go to state 47
    "angle"       shift, and go to state 48
    "duration"    shift, and go to state 49
    "float"       shift, and go to state 50
    "string"      shift, and go to state 51
    "call"        shift, and go to state 52
    "this"        shift, and go to state 53
    "!"           shift, and go to state 54
    "compl"       shift, and go to state 55
    "-"           shift, and go to state 56
    "+"           shift, and go to state 57
    "<"           shift, and go to state 58
    "%unscope:"   shift, and go to state 59
    "%exp:"       shift, and go to state 60
    "%lvalue:"    shift, and go to state 61
    "%id:"        shift, and go to state 62

    block        go to state 67
    exp          go to state 235
    routine      go to state 100
    primary-exp  go to state 101
    detach       go to state 71
    lvalue       go to state 72
    id           go to state 102
    bitor-exp    go to state 74
    new          go to state 75
    float-exp    go to state 76
    duration     go to state 77
    dictionary   go to state 78
    tuple        go to state 79
    literal-exp  go to state 80
    string       go to state 81
    unary-exp    go to state 82
    rel-exp      go to state 83


state 124

   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   37 exp: . "class" lvalue protos block
   38    | . "package" lvalue protos block
   52 routine: . "closure"
   53        | . "function"
   62 exp: . exp "=" exp
   63    | . exp "=" exp modifiers
   64    | . lvalue "+=" exp
   65    | . lvalue "-=" exp
   66    | . lvalue "*=" exp
   67    | . lvalue "/=" exp
   68    | . lvalue "^=" exp
   69    | . lvalue "%=" exp
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
   86 stmt: "whenever" "(" . exp tilda.opt ")" stmt else.opt
   87     | "whenever" "(" . event_match ")" stmt else.opt
  118 primary-exp: . block
  119            | . "do" "(" exp ")" block
  120 detach: . "detach"
  121       | . "disown"
  122 primary-exp: . "assert" "(" exp ")"
  123            | . "assert" "{" claims "}"
  124            | . detach "(" exp ")"
  125            | . detach block
  126            | . "isdef" "(" k1_id ")"
  127            | . "watch" "(" exp ")"
  128 lvalue: . id
  129       | . primary-exp "." id
  130       | . primary-exp "." "*"
  131 primary-exp: . "&" id
  132            | . primary-exp "." "&" id
  133 id: . "identifier"
  134 bitor-exp: . "var" bitor-exp
  135          | . "const" "var" bitor-exp
  136 primary-exp: . lvalue
  137            | . lvalue args
  138 new: . "new" "identifier" args.opt
  139 bitor-exp: . new
  140 id: . "new"
  141 primary-exp: . routine formals block
  142 float-exp: . "float"
  143 duration: . "duration"
  144         | . duration "duration"
  150 dictionary: . "[" assocs "]"
  154 tuple: . "(" tuple.exps ")"
  159 literal-exp: . float-exp
  160            | . "angle"
  161            | . duration
  162            | . string
  163            | . "[" exps "]"
  164            | . "<" bitor-exps ">"
  165            | . dictionary
  166            | . tuple
  167 string: . "string"
  168       | . string "string"
  169 literal-exp: . "__HERE__"
  170 event_match: . exp "?" args.opt tilda.opt guard.opt
  175 lvalue: . primary-exp "[" exps "]"
  176 literal-exp: . "this"
  177            | . "call"
  178 primary-exp: . literal-exp
  179            | . "(" exp ")"
  180            | . "(" error ")"
  181            | . primary-exp "**" primary-exp
  182 unary-exp: . primary-exp
  183          | . "--" lvalue
  184          | . "++" lvalue
  185          | . "+" unary-exp
  186          | . "-" unary-exp
  187          | . "!" unary-exp
  188          | . "compl" unary-exp
  189 bitor-exp: . unary-exp
  190          | . bitor-exp "+" bitor-exp
  191          | . bitor-exp "-" bitor-exp
  192          | . bitor-exp "*" bitor-exp
  193          | . bitor-exp "/" bitor-exp
  194          | . bitor-exp "%" bitor-exp
  195          | . bitor-exp "^" bitor-exp
  196          | . bitor-exp "<<" bitor-exp
  197          | . bitor-exp "bitand" bitor-exp
  198          | . bitor-exp "bitor" bitor-exp
  199          | . bitor-exp ">>" bitor-exp
  210 rel-exp: . bitor-exp rel-ops
  213 exp: . rel-exp
  214    | . exp "&&" exp
  215    | . exp "||" exp
  216    | . exp "in" exp
  217    | . exp "!" "in" exp
  221    | . "%unscope:" unsigned
  222 primary-exp: . "%exp:" unsigned
  223 lvalue: . "%lvalue:" unsigned
  224       | . "%id:" unsigned
  225       | . primary-exp "." "%id:" unsigned
  226 primary-exp: . lvalue "(" "%exps:" unsigned ")"

    "__HERE__"    shift, and go to state 7
    "closure"     shift, and go to state 9
    "const"       shift, and go to state 10
    "function"    shift, and go to state 13
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "var"         shift, and go to state 25
    "watch"       shift, and go to state 27
    "&"           shift, and go to state 29
    "identifier"  shift, and go to state 35
    "class"       shift, and go to state 36
    "package"     shift, and go to state 37
    "--"          shift, and go to state 41
    "++"          shift, and go to state 42
    "do"          shift, and go to state 43
    "assert"      shift, and go to state 44
    "detach"      shift, and go to state 45
    "disown"      shift, and go to state 46
    "new"         shift, and go to state 47
    "angle"       shift, and go to state 48
    "duration"    shift, and go to state 49
    "float"       shift, and go to state 50
    "string"      shift, and go to state 51
    "call"        shift, and go to state 52
    "this"        shift, and go to state 53
    "!"           shift, and go to state 54
    "compl"       shift, and go to state 55
    "-"           shift, and go to state 56
    "+"           shift, and go to state 57
    "<"           shift, and go to state 58
    "%unscope:"   shift, and go to state 59
    "%exp:"       shift, and go to state 60
    "%lvalue:"    shift, and go to state 61
    "%id:"        shift, and go to state 62

    block        go to state 67
    exp          go to state 236
    routine      go to state 100
    primary-exp  go to state 101
    detach       go to state 71
    lvalue       go to state 72
    id           go to state 102
    bitor-exp    go to state 74
    new          go to state 75
    float-exp    go to state 76
    duration     go to state 77
    dictionary   go to state 78
    tuple        go to state 79
    literal-exp  go to state 80
    string       go to state 81
    event_match  go to state 237
    unary-exp    go to state 82
    rel-exp      go to state 83


state 125

  140 id: "new" .

    $default  reduce using rule 140 (id)


state 126

  131 primary-exp: "&" id .

    $default  reduce using rule 131 (primary-exp)


state 127

   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   37 exp: . "class" lvalue protos block
   38    | . "package" lvalue protos block
   52 routine: . "closure"
   53        | . "function"
   62 exp: . exp "=" exp
   63    | . exp "=" exp modifiers
   64    | . lvalue "+=" exp
   65    | . lvalue "-=" exp
   66    | . lvalue "*=" exp
   67    | . lvalue "/=" exp
   68    | . lvalue "^=" exp
   69    | . lvalue "%=" exp
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
   75 stmt: "every" "(" . exp ")" stmt
  118 primary-exp: . block
  119            | . "do" "(" exp ")" block
  120 detach: . "detach"
  121       | . "disown"
  122 primary-exp: . "assert" "(" exp ")"
  123            | . "assert" "{" claims "}"
  124            | . detach "(" exp ")"
  125            | . detach block
  126            | . "isdef" "(" k1_id ")"
  127            | . "watch" "(" exp ")"
  128 lvalue: . id
  129       | . primary-exp "." id
  130       | . primary-exp "." "*"
  131 primary-exp: . "&" id
  132            | . primary-exp "." "&" id
  133 id: . "identifier"
  134 bitor-exp: . "var" bitor-exp
  135          | . "const" "var" bitor-exp
  136 primary-exp: . lvalue
  137            | . lvalue args
  138 new: . "new" "identifier" args.opt
  139 bitor-exp: . new
  140 id: . "new"
  141 primary-exp: . routine formals block
  142 float-exp: . "float"
  143 duration: . "duration"
  144         | . duration "duration"
  150 dictionary: . "[" assocs "]"
  154 tuple: . "(" tuple.exps ")"
  159 literal-exp: . float-exp
  160            | . "angle"
  161            | . duration
  162            | . string
  163            | . "[" exps "]"
  164            | . "<" bitor-exps ">"
  165            | . dictionary
  166            | . tuple
  167 string: . "string"
  168       | . string "string"
  169 literal-exp: . "__HERE__"
  175 lvalue: . primary-exp "[" exps "]"
  176 literal-exp: . "this"
  177            | . "call"
  178 primary-exp: . literal-exp
  179            | . "(" exp ")"
  180            | . "(" error ")"
  181            | . primary-exp "**" primary-exp
  182 unary-exp: . primary-exp
  183          | . "--" lvalue
  184          | . "++" lvalue
  185          | . "+" unary-exp
  186          | . "-" unary-exp
  187          | . "!" unary-exp
  188          | . "compl" unary-exp
  189 bitor-exp: . unary-exp
  190          | . bitor-exp "+" bitor-exp
  191          | . bitor-exp "-" bitor-exp
  192          | . bitor-exp "*" bitor-exp
  193          | . bitor-exp "/" bitor-exp
  194          | . bitor-exp "%" bitor-exp
  195          | . bitor-exp "^" bitor-exp
  196          | . bitor-exp "<<" bitor-exp
  197          | . bitor-exp "bitand" bitor-exp
  198          | . bitor-exp "bitor" bitor-exp
  199          | . bitor-exp ">>" bitor-exp
  210 rel-exp: . bitor-exp rel-ops
  213 exp: . rel-exp
  214    | . exp "&&" exp
  215    | . exp "||" exp
  216    | . exp "in" exp
  217    | . exp "!" "in" exp
  221    | . "%unscope:" unsigned
  222 primary-exp: . "%exp:" unsigned
  223 lvalue: . "%lvalue:" unsigned
  224       | . "%id:" unsigned
  225       | . primary-exp "." "%id:" unsigned
  226 primary-exp: . lvalue "(" "%exps:" unsigned ")"

    "__HERE__"    shift, and go to state 7
    "closure"     shift, and go to state 9
    "const"       shift, and go to state 10
    "function"    shift, and go to state 13
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "var"         shift, and go to state 25
    "watch"       shift, and go to state 27
    "&"           shift, and go to state 29
    "identifier"  shift, and go to state 35
    "class"       shift, and go to state 36
    "package"     shift, and go to state 37
    "--"          shift, and go to state 41
    "++"          shift, and go to state 42
    "do"          shift, and go to state 43
    "assert"      shift, and go to state 44
    "detach"      shift, and go to state 45
    "disown"      shift, and go to state 46
    "new"         shift, and go to state 47
    "angle"       shift, and go to state 48
    "duration"    shift, and go to state 49
    "float"       shift, and go to state 50
    "string"      shift, and go to state 51
    "call"        shift, and go to state 52
    "this"        shift, and go to state 53
    "!"           shift, and go to state 54
    "compl"       shift, and go to state 55
    "-"           shift, and go to state 56
    "+"           shift, and go to state 57
    "<"           shift, and go to state 58
    "%unscope:"   shift, and go to state 59
    "%exp:"       shift, and go to state 60
    "%lvalue:"    shift, and go to state 61
    "%id:"        shift, and go to state 62

    block        go to state 67
    exp          go to state 238
    routine      go to state 100
    primary-exp  go to state 101
    detach       go to state 71
    lvalue       go to state 72
    id           go to state 102
    bitor-exp    go to state 74
    new          go to state 75
    float-exp    go to state 76
    duration     go to state 77
    dictionary   go to state 78
    tuple        go to state 79
    literal-exp  go to state 80
    string       go to state 81
    unary-exp    go to state 82
    rel-exp      go to state 83


state 128

   21 stmt.opt: .  [";"]
   22         | . stmt
   23 stmt: . primary-exp ":" stmt
   24     | . exp
   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   37 exp: . "class" lvalue protos block
   38    | . "package" lvalue protos block
   43 stmt: . "enum" id "{" id.0 "}"
   47     | . "external" "identifier" "identifier"
   48     | . "external" "var" "identifier" "." "identifier" from "identifier"
   49     | . "external" event_or_function "(" unsigned ")" "identifier" "." "identifier" from "identifier"
   50     | . "import" lvalue
   51     | . exp "!" args.opt tilda.opt
   52 routine: . "closure"
   53        | . "function"
   54 stmt: . routine k1_id formals block
   55     | . id id formals block
   62 exp: . exp "=" exp
   63    | . exp "=" exp modifiers
   64    | . lvalue "+=" exp
   65    | . lvalue "-=" exp
   66    | . lvalue "*=" exp
   67    | . lvalue "/=" exp
   68    | . lvalue "^=" exp
   69    | . lvalue "%=" exp
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
   73 stmt: . "at" identifiers "(" exp tilda.opt ")" stmt onleave.opt
   74     | . "at" identifiers "(" event_match ")" stmt onleave.opt
   75     | . "every" "(" exp ")" stmt
   76     | . "if" "(" stmts ")" stmt else.opt
   77     | . "freezeif" "(" exp ")" stmt
   78     | . "stopif" "(" exp ")" stmt
   79     | . "switch" "(" exp ")" "{" cases default.opt "}"
   80     | . "timeout" "(" exp ")" stmt catch.opt else.opt finally.opt
   81     | . "return" exp.opt
   82     | . "break"
   83     | . "continue"
   84     | . "waituntil" "(" exp tilda.opt ")"
   85     | . "waituntil" "(" event_match ")"
   86     | . "whenever" "(" exp tilda.opt ")" stmt else.opt
   87     | . "whenever" "(" event_match ")" stmt else.opt
  108     | . "try" block catches.1 else.opt finally.opt
  109     | . "try" block "finally" block
  110     | . "throw" exp.opt
  111     | . "loop" stmt
  112     | . "for" "(" exp ")" stmt
  112     | "for" "(" . exp ")" stmt
  113     | . "for" "(" stmt.opt ";" exp ";" stmt.opt ")" stmt
  113     | "for" "(" . stmt.opt ";" exp ";" stmt.opt ")" stmt
  114     | . "for" "(" "var" "identifier" in_or_colon exp ")" stmt
  114     | "for" "(" . "var" "identifier" in_or_colon exp ")" stmt
  115     | . "while" "(" exp ")" stmt
  118 primary-exp: . block
  119            | . "do" "(" exp ")" block
  120 detach: . "detach"
  121       | . "disown"
  122 primary-exp: . "assert" "(" exp ")"
  123            | . "assert" "{" claims "}"
  124            | . detach "(" exp ")"
  125            | . detach block
  126            | . "isdef" "(" k1_id ")"
  127            | . "watch" "(" exp ")"
  128 lvalue: . id
  129       | . primary-exp "." id
  130       | . primary-exp "." "*"
  131 primary-exp: . "&" id
  132            | . primary-exp "." "&" id
  133 id: . "identifier"
  134 bitor-exp: . "var" bitor-exp
  135          | . "const" "var" bitor-exp
  136 primary-exp: . lvalue
  137            | . lvalue args
  138 new: . "new" "identifier" args.opt
  139 bitor-exp: . new
  140 id: . "new"
  141 primary-exp: . routine formals block
  142 float-exp: . "float"
  143 duration: . "duration"
  144         | . duration "duration"
  150 dictionary: . "[" assocs "]"
  154 tuple: . "(" tuple.exps ")"
  159 literal-exp: . float-exp
  160            | . "angle"
  161            | . duration
  162            | . string
  163            | . "[" exps "]"
  164            | . "<" bitor-exps ">"
  165            | . dictionary
  166            | . tuple
  167 string: . "string"
  168       | . string "string"
  169 literal-exp: . "__HERE__"
  175 lvalue: . primary-exp "[" exps "]"
  176 literal-exp: . "this"
  177            | . "call"
  178 primary-exp: . literal-exp
  179            | . "(" exp ")"
  180            | . "(" error ")"
  181            | . primary-exp "**" primary-exp
  182 unary-exp: . primary-exp
  183          | . "--" lvalue
  184          | . "++" lvalue
  185          | . "+" unary-exp
  186          | . "-" unary-exp
  187          | . "!" unary-exp
  188          | . "compl" unary-exp
  189 bitor-exp: . unary-exp
  190          | . bitor-exp "+" bitor-exp
  191          | . bitor-exp "-" bitor-exp
  192          | . bitor-exp "*" bitor-exp
  193          | . bitor-exp "/" bitor-exp
  194          | . bitor-exp "%" bitor-exp
  195          | . bitor-exp "^" bitor-exp
  196          | . bitor-exp "<<" bitor-exp
  197          | . bitor-exp "bitand" bitor-exp
  198          | . bitor-exp "bitor" bitor-exp
  199          | . bitor-exp ">>" bitor-exp
  210 rel-exp: . bitor-exp rel-ops
  213 exp: . rel-exp
  214    | . exp "&&" exp
  215    | . exp "||" exp
  216    | . exp "in" exp
  217    | . exp "!" "in" exp
  221    | . "%unscope:" unsigned
  222 primary-exp: . "%exp:" unsigned
  223 lvalue: . "%lvalue:" unsigned
  224       | . "%id:" unsigned
  225       | . primary-exp "." "%id:" unsigned
  226 primary-exp: . lvalue "(" "%exps:" unsigned ")"

    "__HERE__"    shift, and go to state 7
    "break"       shift, and go to state 8
    "closure"     shift, and go to state 9
    "const"       shift, and go to state 10
    "continue"    shift, and go to state 11
    "freezeif"    shift, and go to state 12
    "function"    shift, and go to state 13
    "if"          shift, and go to state 14
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "return"      shift, and go to state 19
    "stopif"      shift, and go to state 20
    "switch"      shift, and go to state 21
    "throw"       shift, and go to state 22
    "timeout"     shift, and go to state 23
    "try"         shift, and go to state 24
    "var"         shift, and go to state 239
    "waituntil"   shift, and go to state 26
    "watch"       shift, and go to state 27
    "whenever"    shift, and go to state 28
    "&"           shift, and go to state 29
    "every"       shift, and go to state 30
    "for"         shift, and go to state 31
    "loop"        shift, and go to state 32
    "while"       shift, and go to state 33
    "at"          shift, and go to state 34
    "identifier"  shift, and go to state 35
    "class"       shift, and go to state 36
    "package"     shift, and go to state 37
    "enum"        shift, and go to state 38
    "external"    shift, and go to state 39
    "import"      shift, and go to state 40
    "--"          shift, and go to state 41
    "++"          shift, and go to state 42
    "do"          shift, and go to state 43
    "assert"      shift, and go to state 44
    "detach"      shift, and go to state 45
    "disown"      shift, and go to state 46
    "new"         shift, and go to state 47
    "angle"       shift, and go to state 48
    "duration"    shift, and go to state 49
    "float"       shift, and go to state 50
    "string"      shift, and go to state 51
    "call"        shift, and go to state 52
    "this"        shift, and go to state 53
    "!"           shift, and go to state 54
    "compl"       shift, and go to state 55
    "-"           shift, and go to state 56
    "+"           shift, and go to state 57
    "<"           shift, and go to state 58
    "%unscope:"   shift, and go to state 59
    "%exp:"       shift, and go to state 60
    "%lvalue:"    shift, and go to state 61
    "%id:"        shift, and go to state 62

    $default  reduce using rule 21 (stmt.opt)

    stmt.opt     go to state 240
    stmt         go to state 241
    block        go to state 67
    exp          go to state 242
    routine      go to state 69
    primary-exp  go to state 70
    detach       go to state 71
    lvalue       go to state 72
    id           go to state 73
    bitor-exp    go to state 74
    new          go to state 75
    float-exp    go to state 76
    duration     go to state 77
    dictionary   go to state 78
    tuple        go to state 79
    literal-exp  go to state 80
    string       go to state 81
    unary-exp    go to state 82
    rel-exp      go to state 83


state 129

  111 stmt: "loop" stmt .

    $default  reduce using rule 111 (stmt)


state 130

   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   37 exp: . "class" lvalue protos block
   38    | . "package" lvalue protos block
   52 routine: . "closure"
   53        | . "function"
   62 exp: . exp "=" exp
   63    | . exp "=" exp modifiers
   64    | . lvalue "+=" exp
   65    | . lvalue "-=" exp
   66    | . lvalue "*=" exp
   67    | . lvalue "/=" exp
   68    | . lvalue "^=" exp
   69    | . lvalue "%=" exp
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
  115 stmt: "while" "(" . exp ")" stmt
  118 primary-exp: . block
  119            | . "do" "(" exp ")" block
  120 detach: . "detach"
  121       | . "disown"
  122 primary-exp: . "assert" "(" exp ")"
  123            | . "assert" "{" claims "}"
  124            | . detach "(" exp ")"
  125            | . detach block
  126            | . "isdef" "(" k1_id ")"
  127            | . "watch" "(" exp ")"
  128 lvalue: . id
  129       | . primary-exp "." id
  130       | . primary-exp "." "*"
  131 primary-exp: . "&" id
  132            | . primary-exp "." "&" id
  133 id: . "identifier"
  134 bitor-exp: . "var" bitor-exp
  135          | . "const" "var" bitor-exp
  136 primary-exp: . lvalue
  137            | . lvalue args
  138 new: . "new" "identifier" args.opt
  139 bitor-exp: . new
  140 id: . "new"
  141 primary-exp: . routine formals block
  142 float-exp: . "float"
  143 duration: . "duration"
  144         | . duration "duration"
  150 dictionary: . "[" assocs "]"
  154 tuple: . "(" tuple.exps ")"
  159 literal-exp: . float-exp
  160            | . "angle"
  161            | . duration
  162            | . string
  163            | . "[" exps "]"
  164            | . "<" bitor-exps ">"
  165            | . dictionary
  166            | . tuple
  167 string: . "string"
  168       | . string "string"
  169 literal-exp: . "__HERE__"
  175 lvalue: . primary-exp "[" exps "]"
  176 literal-exp: . "this"
  177            | . "call"
  178 primary-exp: . literal-exp
  179            | . "(" exp ")"
  180            | . "(" error ")"
  181            | . primary-exp "**" primary-exp
  182 unary-exp: . primary-exp
  183          | . "--" lvalue
  184          | . "++" lvalue
  185          | . "+" unary-exp
  186          | . "-" unary-exp
  187          | . "!" unary-exp
  188          | . "compl" unary-exp
  189 bitor-exp: . unary-exp
  190          | . bitor-exp "+" bitor-exp
  191          | . bitor-exp "-" bitor-exp
  192          | . bitor-exp "*" bitor-exp
  193          | . bitor-exp "/" bitor-exp
  194          | . bitor-exp "%" bitor-exp
  195          | . bitor-exp "^" bitor-exp
  196          | . bitor-exp "<<" bitor-exp
  197          | . bitor-exp "bitand" bitor-exp
  198          | . bitor-exp "bitor" bitor-exp
  199          | . bitor-exp ">>" bitor-exp
  210 rel-exp: . bitor-exp rel-ops
  213 exp: . rel-exp
  214    | . exp "&&" exp
  215    | . exp "||" exp
  216    | . exp "in" exp
  217    | . exp "!" "in" exp
  221    | . "%unscope:" unsigned
  222 primary-exp: . "%exp:" unsigned
  223 lvalue: . "%lvalue:" unsigned
  224       | . "%id:" unsigned
  225       | . primary-exp "." "%id:" unsigned
  226 primary-exp: . lvalue "(" "%exps:" unsigned ")"

    "__HERE__"    shift, and go to state 7
    "closure"     shift, and go to state 9
    "const"       shift, and go to state 10
    "function"    shift, and go to state 13
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "var"         shift, and go to state 25
    "watch"       shift, and go to state 27
    "&"           shift, and go to state 29
    "identifier"  shift, and go to state 35
    "class"       shift, and go to state 36
    "package"     shift, and go to state 37
    "--"          shift, and go to state 41
    "++"          shift, and go to state 42
    "do"          shift, and go to state 43
    "assert"      shift, and go to state 44
    "detach"      shift, and go to state 45
    "disown"      shift, and go to state 46
    "new"         shift, and go to state 47
    "angle"       shift, and go to state 48
    "duration"    shift, and go to state 49
    "float"       shift, and go to state 50
    "string"      shift, and go to state 51
    "call"        shift, and go to state 52
    "this"        shift, and go to state 53
    "!"           shift, and go to state 54
    "compl"       shift, and go to state 55
    "-"           shift, and go to state 56
    "+"           shift, and go to state 57
    "<"           shift, and go to state 58
    "%unscope:"   shift, and go to state 59
    "%exp:"       shift, and go to state 60
    "%lvalue:"    shift, and go to state 61
    "%id:"        shift, and go to state 62

    block        go to state 67
    exp          go to state 243
    routine      go to state 100
    primary-exp  go to state 101
    detach       go to state 71
    lvalue       go to state 72
    id           go to state 102
    bitor-exp    go to state 74
    new          go to state 75
    float-exp    go to state 76
    duration     go to state 77
    dictionary   go to state 78
    tuple        go to state 79
    literal-exp  go to state 80
    string       go to state 81
    unary-exp    go to state 82
    rel-exp      go to state 83


state 131

   73 stmt: "at" identifiers . "(" exp tilda.opt ")" stmt onleave.opt
   74     | "at" identifiers . "(" event_match ")" stmt onleave.opt
  240 identifiers: identifiers . "identifier"

    "("           shift, and go to state 244
    "identifier"  shift, and go to state 245


state 132

  129 lvalue: primary-exp . "." id
  130       | primary-exp . "." "*"
  132 primary-exp: primary-exp . "." "&" id
  175 lvalue: primary-exp . "[" exps "]"
  181 primary-exp: primary-exp . "**" primary-exp
  225 lvalue: primary-exp . "." "%id:" unsigned

    "["   shift, and go to state 175
    "."   shift, and go to state 176
    "**"  shift, and go to state 177


state 133

   35 protos: .  ["{"]
   36       | . ":" protos.1
   37 exp: "class" lvalue . protos block
   70 primary-exp: lvalue . "--"
   71            | lvalue . "++"
   72            | lvalue . "->" id
  136            | lvalue .  ["[", ".", "**"]
  137            | lvalue . args
  226            | lvalue . "(" "%exps:" unsigned ")"
  236 args: . "(" exps ")"

    ":"   shift, and go to state 246
    "("   shift, and go to state 180
    "--"  shift, and go to state 187
    "++"  shift, and go to state 188
    "->"  shift, and go to state 189

    "{"       reduce using rule 35 (protos)
    $default  reduce using rule 136 (primary-exp)

    protos  go to state 247
    args    go to state 190


state 134

   35 protos: .  ["{"]
   36       | . ":" protos.1
   38 exp: "package" lvalue . protos block
   70 primary-exp: lvalue . "--"
   71            | lvalue . "++"
   72            | lvalue . "->" id
  136            | lvalue .  ["[", ".", "**"]
  137            | lvalue . args
  226            | lvalue . "(" "%exps:" unsigned ")"
  236 args: . "(" exps ")"

    ":"   shift, and go to state 246
    "("   shift, and go to state 180
    "--"  shift, and go to state 187
    "++"  shift, and go to state 188
    "->"  shift, and go to state 189

    "{"       reduce using rule 35 (protos)
    $default  reduce using rule 136 (primary-exp)

    protos  go to state 248
    args    go to state 190


state 135

   43 stmt: "enum" id . "{" id.0 "}"

    "{"  shift, and go to state 249


state 136

   45 event_or_function: "function" .

    $default  reduce using rule 45 (event_or_function)


state 137

   48 stmt: "external" "var" . "identifier" "." "identifier" from "identifier"

    "identifier"  shift, and go to state 250


state 138

   46 event_or_function: "identifier" .  ["("]
   47 stmt: "external" "identifier" . "identifier"

    "identifier"  shift, and go to state 251

    $default  reduce using rule 46 (event_or_function)


state 139

   49 stmt: "external" event_or_function . "(" unsigned ")" "identifier" "." "identifier" from "identifier"

    "("  shift, and go to state 252


state 140

   50 stmt: "import" lvalue .  ["end of command", "case", "catch", "default", "else", "finally", "onleave", "}", ")", ",", ";", "&", "|"]
   70 primary-exp: lvalue . "--"
   71            | lvalue . "++"
   72            | lvalue . "->" id
  136            | lvalue .  ["[", ".", "**"]
  137            | lvalue . args
  226            | lvalue . "(" "%exps:" unsigned ")"
  236 args: . "(" exps ")"

    "("   shift, and go to state 180
    "--"  shift, and go to state 187
    "++"  shift, and go to state 188
    "->"  shift, and go to state 189

    "["       reduce using rule 136 (primary-exp)
    "."       reduce using rule 136 (primary-exp)
    "**"      reduce using rule 136 (primary-exp)
    $default  reduce using rule 50 (stmt)

    args  go to state 190


state 141

   70 primary-exp: lvalue . "--"
   71            | lvalue . "++"
   72            | lvalue . "->" id
  136            | lvalue .  ["[", ".", "**"]
  137            | lvalue . args
  183 unary-exp: "--" lvalue .  ["end of command", "=", "case", "catch", ":", "default", "else", "finally", "if", "in", "{", "onleave", "}", "]", ")", "~", ",", ";", "&", "|", "identifier", "=>", "?", "!", "bitand", "bitor", "^", ">>", "<<", "-", "%", "+", "/", "*", "=~=", "==", "===", ">=", ">", "<=", "<", "!=", "!==", "~=", "&&", "||"]
  226 primary-exp: lvalue . "(" "%exps:" unsigned ")"
  236 args: . "(" exps ")"

    "("   shift, and go to state 180
    "--"  shift, and go to state 187
    "++"  shift, and go to state 188
    "->"  shift, and go to state 189

    "["       reduce using rule 136 (primary-exp)
    "."       reduce using rule 136 (primary-exp)
    "**"      reduce using rule 136 (primary-exp)
    $default  reduce using rule 183 (unary-exp)

    args  go to state 190


state 142

   70 primary-exp: lvalue . "--"
   71            | lvalue . "++"
   72            | lvalue . "->" id
  136            | lvalue .  ["[", ".", "**"]
  137            | lvalue . args
  184 unary-exp: "++" lvalue .  ["end of command", "=", "case", "catch", ":", "default", "else", "finally", "if", "in", "{", "onleave", "}", "]", ")", "~", ",", ";", "&", "|", "identifier", "=>", "?", "!", "bitand", "bitor", "^", ">>", "<<", "-", "%", "+", "/", "*", "=~=", "==", "===", ">=", ">", "<=", "<", "!=", "!==", "~=", "&&", "||"]
  226 primary-exp: lvalue . "(" "%exps:" unsigned ")"
  236 args: . "(" exps ")"

    "("   shift, and go to state 180
    "--"  shift, and go to state 187
    "++"  shift, and go to state 188
    "->"  shift, and go to state 189

    "["       reduce using rule 136 (primary-exp)
    "."       reduce using rule 136 (primary-exp)
    "**"      reduce using rule 136 (primary-exp)
    $default  reduce using rule 184 (unary-exp)

    args  go to state 190


state 143

   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   37 exp: . "class" lvalue protos block
   38    | . "package" lvalue protos block
   52 routine: . "closure"
   53        | . "function"
   62 exp: . exp "=" exp
   63    | . exp "=" exp modifiers
   64    | . lvalue "+=" exp
   65    | . lvalue "-=" exp
   66    | . lvalue "*=" exp
   67    | . lvalue "/=" exp
   68    | . lvalue "^=" exp
   69    | . lvalue "%=" exp
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
  118            | . block
  119            | . "do" "(" exp ")" block
  119            | "do" "(" . exp ")" block
  120 detach: . "detach"
  121       | . "disown"
  122 primary-exp: . "assert" "(" exp ")"
  123            | . "assert" "{" claims "}"
  124            | . detach "(" exp ")"
  125            | . detach block
  126            | . "isdef" "(" k1_id ")"
  127            | . "watch" "(" exp ")"
  128 lvalue: . id
  129       | . primary-exp "." id
  130       | . primary-exp "." "*"
  131 primary-exp: . "&" id
  132            | . primary-exp "." "&" id
  133 id: . "identifier"
  134 bitor-exp: . "var" bitor-exp
  135          | . "const" "var" bitor-exp
  136 primary-exp: . lvalue
  137            | . lvalue args
  138 new: . "new" "identifier" args.opt
  139 bitor-exp: . new
  140 id: . "new"
  141 primary-exp: . routine formals block
  142 float-exp: . "float"
  143 duration: . "duration"
  144         | . duration "duration"
  150 dictionary: . "[" assocs "]"
  154 tuple: . "(" tuple.exps ")"
  159 literal-exp: . float-exp
  160            | . "angle"
  161            | . duration
  162            | . string
  163            | . "[" exps "]"
  164            | . "<" bitor-exps ">"
  165            | . dictionary
  166            | . tuple
  167 string: . "string"
  168       | . string "string"
  169 literal-exp: . "__HERE__"
  175 lvalue: . primary-exp "[" exps "]"
  176 literal-exp: . "this"
  177            | . "call"
  178 primary-exp: . literal-exp
  179            | . "(" exp ")"
  180            | . "(" error ")"
  181            | . primary-exp "**" primary-exp
  182 unary-exp: . primary-exp
  183          | . "--" lvalue
  184          | . "++" lvalue
  185          | . "+" unary-exp
  186          | . "-" unary-exp
  187          | . "!" unary-exp
  188          | . "compl" unary-exp
  189 bitor-exp: . unary-exp
  190          | . bitor-exp "+" bitor-exp
  191          | . bitor-exp "-" bitor-exp
  192          | . bitor-exp "*" bitor-exp
  193          | . bitor-exp "/" bitor-exp
  194          | . bitor-exp "%" bitor-exp
  195          | . bitor-exp "^" bitor-exp
  196          | . bitor-exp "<<" bitor-exp
  197          | . bitor-exp "bitand" bitor-exp
  198          | . bitor-exp "bitor" bitor-exp
  199          | . bitor-exp ">>" bitor-exp
  210 rel-exp: . bitor-exp rel-ops
  213 exp: . rel-exp
  214    | . exp "&&" exp
  215    | . exp "||" exp
  216    | . exp "in" exp
  217    | . exp "!" "in" exp
  221    | . "%unscope:" unsigned
  222 primary-exp: . "%exp:" unsigned
  223 lvalue: . "%lvalue:" unsigned
  224       | . "%id:" unsigned
  225       | . primary-exp "." "%id:" unsigned
  226 primary-exp: . lvalue "(" "%exps:" unsigned ")"

    "__HERE__"    shift, and go to state 7
    "closure"     shift, and go to state 9
    "const"       shift, and go to state 10
    "function"    shift, and go to state 13
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "var"         shift, and go to state 25
    "watch"       shift, and go to state 27
    "&"           shift, and go to state 29
    "identifier"  shift, and go to state 35
    "class"       shift, and go to state 36
    "package"     shift, and go to state 37
    "--"          shift, and go to state 41
    "++"          shift, and go to state 42
    "do"          shift, and go to state 43
    "assert"      shift, and go to state 44
    "detach"      shift, and go to state 45
    "disown"      shift, and go to state 46
    "new"         shift, and go to state 47
    "angle"       shift, and go to state 48
    "duration"    shift, and go to state 49
    "float"       shift, and go to state 50
    "string"      shift, and go to state 51
    "call"        shift, and go to state 52
    "this"        shift, and go to state 53
    "!"           shift, and go to state 54
    "compl"       shift, and go to state 55
    "-"           shift, and go to state 56
    "+"           shift, and go to state 57
    "<"           shift, and go to state 58
    "%unscope:"   shift, and go to state 59
    "%exp:"       shift, and go to state 60
    "%lvalue:"    shift, and go to state 61
    "%id:"        shift, and go to state 62

    block        go to state 67
    exp          go to state 253
    routine      go to state 100
    primary-exp  go to state 101
    detach       go to state 71
    lvalue       go to state 72
    id           go to state 102
    bitor-exp    go to state 74
    new          go to state 75
    float-exp    go to state 76
    duration     go to state 77
    dictionary   go to state 78
    tuple        go to state 79
    literal-exp  go to state 80
    string       go to state 81
    unary-exp    go to state 82
    rel-exp      go to state 83


state 144

   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   37 exp: . "class" lvalue protos block
   38    | . "package" lvalue protos block
   52 routine: . "closure"
   53        | . "function"
   62 exp: . exp "=" exp
   63    | . exp "=" exp modifiers
   64    | . lvalue "+=" exp
   65    | . lvalue "-=" exp
   66    | . lvalue "*=" exp
   67    | . lvalue "/=" exp
   68    | . lvalue "^=" exp
   69    | . lvalue "%=" exp
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
  118            | . block
  119            | . "do" "(" exp ")" block
  120 detach: . "detach"
  121       | . "disown"
  122 primary-exp: . "assert" "(" exp ")"
  123            | . "assert" "{" claims "}"
  123            | "assert" "{" . claims "}"
  124            | . detach "(" exp ")"
  125            | . detach block
  126            | . "isdef" "(" k1_id ")"
  127            | . "watch" "(" exp ")"
  128 lvalue: . id
  129       | . primary-exp "." id
  130       | . primary-exp "." "*"
  131 primary-exp: . "&" id
  132            | . primary-exp "." "&" id
  133 id: . "identifier"
  134 bitor-exp: . "var" bitor-exp
  135          | . "const" "var" bitor-exp
  136 primary-exp: . lvalue
  137            | . lvalue args
  138 new: . "new" "identifier" args.opt
  139 bitor-exp: . new
  140 id: . "new"
  141 primary-exp: . routine formals block
  142 float-exp: . "float"
  143 duration: . "duration"
  144         | . duration "duration"
  150 dictionary: . "[" assocs "]"
  154 tuple: . "(" tuple.exps ")"
  159 literal-exp: . float-exp
  160            | . "angle"
  161            | . duration
  162            | . string
  163            | . "[" exps "]"
  164            | . "<" bitor-exps ">"
  165            | . dictionary
  166            | . tuple
  167 string: . "string"
  168       | . string "string"
  169 literal-exp: . "__HERE__"
  175 lvalue: . primary-exp "[" exps "]"
  176 literal-exp: . "this"
  177            | . "call"
  178 primary-exp: . literal-exp
  179            | . "(" exp ")"
  180            | . "(" error ")"
  181            | . primary-exp "**" primary-exp
  182 unary-exp: . primary-exp
  183          | . "--" lvalue
  184          | . "++" lvalue
  185          | . "+" unary-exp
  186          | . "-" unary-exp
  187          | . "!" unary-exp
  188          | . "compl" unary-exp
  189 bitor-exp: . unary-exp
  190          | . bitor-exp "+" bitor-exp
  191          | . bitor-exp "-" bitor-exp
  192          | . bitor-exp "*" bitor-exp
  193          | . bitor-exp "/" bitor-exp
  194          | . bitor-exp "%" bitor-exp
  195          | . bitor-exp "^" bitor-exp
  196          | . bitor-exp "<<" bitor-exp
  197          | . bitor-exp "bitand" bitor-exp
  198          | . bitor-exp "bitor" bitor-exp
  199          | . bitor-exp ">>" bitor-exp
  210 rel-exp: . bitor-exp rel-ops
  213 exp: . rel-exp
  214    | . exp "&&" exp
  215    | . exp "||" exp
  216    | . exp "in" exp
  217    | . exp "!" "in" exp
  221    | . "%unscope:" unsigned
  222 primary-exp: . "%exp:" unsigned
  223 lvalue: . "%lvalue:" unsigned
  224       | . "%id:" unsigned
  225       | . primary-exp "." "%id:" unsigned
  226 primary-exp: . lvalue "(" "%exps:" unsigned ")"
  227 claims: .  ["}"]
  228       | . claims.1 semi.opt
  229 claims.1: . exp
  230         | . claims.1 ";" exp

    "__HERE__"    shift, and go to state 7
    "closure"     shift, and go to state 9
    "const"       shift, and go to state 10
    "function"    shift, and go to state 13
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "var"         shift, and go to state 25
    "watch"       shift, and go to state 27
    "&"           shift, and go to state 29
    "identifier"  shift, and go to state 35
    "class"       shift, and go to state 36
    "package"     shift, and go to state 37
    "--"          shift, and go to state 41
    "++"          shift, and go to state 42
    "do"          shift, and go to state 43
    "assert"      shift, and go to state 44
    "detach"      shift, and go to state 45
    "disown"      shift, and go to state 46
    "new"         shift, and go to state 47
    "angle"       shift, and go to state 48
    "duration"    shift, and go to state 49
    "float"       shift, and go to state 50
    "string"      shift, and go to state 51
    "call"        shift, and go to state 52
    "this"        shift, and go to state 53
    "!"           shift, and go to state 54
    "compl"       shift, and go to state 55
    "-"           shift, and go to state 56
    "+"           shift, and go to state 57
    "<"           shift, and go to state 58
    "%unscope:"   shift, and go to state 59
    "%exp:"       shift, and go to state 60
    "%lvalue:"    shift, and go to state 61
    "%id:"        shift, and go to state 62

    $default  reduce using rule 227 (claims)

    block        go to state 67
    exp          go to state 254
    routine      go to state 100
    primary-exp  go to state 101
    detach       go to state 71
    lvalue       go to state 72
    id           go to state 102
    bitor-exp    go to state 74
    new          go to state 75
    float-exp    go to state 76
    duration     go to state 77
    dictionary   go to state 78
    tuple        go to state 79
    literal-exp  go to state 80
    string       go to state 81
    unary-exp    go to state 82
    rel-exp      go to state 83
    claims       go to state 255
    claims.1     go to state 256


state 145

   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   37 exp: . "class" lvalue protos block
   38    | . "package" lvalue protos block
   52 routine: . "closure"
   53        | . "function"
   62 exp: . exp "=" exp
   63    | . exp "=" exp modifiers
   64    | . lvalue "+=" exp
   65    | . lvalue "-=" exp
   66    | . lvalue "*=" exp
   67    | . lvalue "/=" exp
   68    | . lvalue "^=" exp
   69    | . lvalue "%=" exp
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
  118            | . block
  119            | . "do" "(" exp ")" block
  120 detach: . "detach"
  121       | . "disown"
  122 primary-exp: . "assert" "(" exp ")"
  122            | "assert" "(" . exp ")"
  123            | . "assert" "{" claims "}"
  124            | . detach "(" exp ")"
  125            | . detach block
  126            | . "isdef" "(" k1_id ")"
  127            | . "watch" "(" exp ")"
  128 lvalue: . id
  129       | . primary-exp "." id
  130       | . primary-exp "." "*"
  131 primary-exp: . "&" id
  132            | . primary-exp "." "&" id
  133 id: . "identifier"
  134 bitor-exp: . "var" bitor-exp
  135          | . "const" "var" bitor-exp
  136 primary-exp: . lvalue
  137            | . lvalue args
  138 new: . "new" "identifier" args.opt
  139 bitor-exp: . new
  140 id: . "new"
  141 primary-exp: . routine formals block
  142 float-exp: . "float"
  143 duration: . "duration"
  144         | . duration "duration"
  150 dictionary: . "[" assocs "]"
  154 tuple: . "(" tuple.exps ")"
  159 literal-exp: . float-exp
  160            | . "angle"
  161            | . duration
  162            | . string
  163            | . "[" exps "]"
  164            | . "<" bitor-exps ">"
  165            | . dictionary
  166            | . tuple
  167 string: . "string"
  168       | . string "string"
  169 literal-exp: . "__HERE__"
  175 lvalue: . primary-exp "[" exps "]"
  176 literal-exp: . "this"
  177            | . "call"
  178 primary-exp: . literal-exp
  179            | . "(" exp ")"
  180            | . "(" error ")"
  181            | . primary-exp "**" primary-exp
  182 unary-exp: . primary-exp
  183          | . "--" lvalue
  184          | . "++" lvalue
  185          | . "+" unary-exp
  186          | . "-" unary-exp
  187          | . "!" unary-exp
  188          | . "compl" unary-exp
  189 bitor-exp: . unary-exp
  190          | . bitor-exp "+" bitor-exp
  191          | . bitor-exp "-" bitor-exp
  192          | . bitor-exp "*" bitor-exp
  193          | . bitor-exp "/" bitor-exp
  194          | . bitor-exp "%" bitor-exp
  195          | . bitor-exp "^" bitor-exp
  196          | . bitor-exp "<<" bitor-exp
  197          | . bitor-exp "bitand" bitor-exp
  198          | . bitor-exp "bitor" bitor-exp
  199          | . bitor-exp ">>" bitor-exp
  210 rel-exp: . bitor-exp rel-ops
  213 exp: . rel-exp
  214    | . exp "&&" exp
  215    | . exp "||" exp
  216    | . exp "in" exp
  217    | . exp "!" "in" exp
  221    | . "%unscope:" unsigned
  222 primary-exp: . "%exp:" unsigned
  223 lvalue: . "%lvalue:" unsigned
  224       | . "%id:" unsigned
  225       | . primary-exp "." "%id:" unsigned
  226 primary-exp: . lvalue "(" "%exps:" unsigned ")"

    "__HERE__"    shift, and go to state 7
    "closure"     shift, and go to state 9
    "const"       shift, and go to state 10
    "function"    shift, and go to state 13
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "var"         shift, and go to state 25
    "watch"       shift, and go to state 27
    "&"           shift, and go to state 29
    "identifier"  shift, and go to state 35
    "class"       shift, and go to state 36
    "package"     shift, and go to state 37
    "--"          shift, and go to state 41
    "++"          shift, and go to state 42
    "do"          shift, and go to state 43
    "assert"      shift, and go to state 44
    "detach"      shift, and go to state 45
    "disown"      shift, and go to state 46
    "new"         shift, and go to state 47
    "angle"       shift, and go to state 48
    "duration"    shift, and go to state 49
    "float"       shift, and go to state 50
    "string"      shift, and go to state 51
    "call"        shift, and go to state 52
    "this"        shift, and go to state 53
    "!"           shift, and go to state 54
    "compl"       shift, and go to state 55
    "-"           shift, and go to state 56
    "+"           shift, and go to state 57
    "<"           shift, and go to state 58
    "%unscope:"   shift, and go to state 59
    "%exp:"       shift, and go to state 60
    "%lvalue:"    shift, and go to state 61
    "%id:"        shift, and go to state 62

    block        go to state 67
    exp          go to state 257
    routine      go to state 100
    primary-exp  go to state 101
    detach       go to state 71
    lvalue       go to state 72
    id           go to state 102
    bitor-exp    go to state 74
    new          go to state 75
    float-exp    go to state 76
    duration     go to state 77
    dictionary   go to state 78
    tuple        go to state 79
    literal-exp  go to state 80
    string       go to state 81
    unary-exp    go to state 82
    rel-exp      go to state 83


state 146

  138 new: "new" "identifier" . args.opt
  236 args: . "(" exps ")"
  237 args.opt: .  ["end of command", "=", "case", "catch", ":", "default", "else", "finally", "if", "in", "{", "onleave", "}", "]", ")", "~", ",", ";", "&", "|", "identifier", "=>", "?", "!", "bitand", "bitor", "^", ">>", "<<", "-", "%", "+", "/", "*", "=~=", "==", "===", ">=", ">", "<=", "<", "!=", "!==", "~=", "&&", "||"]
  238         | . args

    "("  shift, and go to state 258

    $default  reduce using rule 237 (args.opt)

    args      go to state 259
    args.opt  go to state 260


state 147

  187 unary-exp: "!" unary-exp .

    $default  reduce using rule 187 (unary-exp)


state 148

  188 unary-exp: "compl" unary-exp .

    $default  reduce using rule 188 (unary-exp)


state 149

  186 unary-exp: "-" unary-exp .

    $default  reduce using rule 186 (unary-exp)


state 150

  185 unary-exp: "+" unary-exp .

    $default  reduce using rule 185 (unary-exp)


state 151

  157 bitor-exps.1: bitor-exp .  [",", ">"]
  190 bitor-exp: bitor-exp . "+" bitor-exp
  191          | bitor-exp . "-" bitor-exp
  192          | bitor-exp . "*" bitor-exp
  193          | bitor-exp . "/" bitor-exp
  194          | bitor-exp . "%" bitor-exp
  195          | bitor-exp . "^" bitor-exp
  196          | bitor-exp . "<<" bitor-exp
  197          | bitor-exp . "bitand" bitor-exp
  198          | bitor-exp . "bitor" bitor-exp
  199          | bitor-exp . ">>" bitor-exp

    "bitand"  shift, and go to state 192
    "bitor"   shift, and go to state 193
    "^"       shift, and go to state 194
    ">>"      shift, and go to state 195
    "<<"      shift, and go to state 196
    "-"       shift, and go to state 197
    "%"       shift, and go to state 198
    "+"       shift, and go to state 199
    "/"       shift, and go to state 200
    "*"       shift, and go to state 201

    $default  reduce using rule 157 (bitor-exps.1)


state 152

  164 literal-exp: "<" bitor-exps . ">"

    ">"  shift, and go to state 261


state 153

  156 bitor-exps: bitor-exps.1 . comma.opt
  158 bitor-exps.1: bitor-exps.1 . "," bitor-exp
  253 comma.opt: .  [">"]
  254          | . ","

    ","  shift, and go to state 262

    $default  reduce using rule 253 (comma.opt)

    comma.opt  go to state 263


state 154

  220 unsigned: "float" .

    $default  reduce using rule 220 (unsigned)


state 155

  221 exp: "%unscope:" unsigned .

    $default  reduce using rule 221 (exp)


state 156

  222 primary-exp: "%exp:" unsigned .

    $default  reduce using rule 222 (primary-exp)


state 157

  223 lvalue: "%lvalue:" unsigned .

    $default  reduce using rule 223 (lvalue)


state 158

  224 lvalue: "%id:" unsigned .

    $default  reduce using rule 224 (lvalue)


state 159

    7 root_exp: cstmt.opt "end of command" .

    $default  reduce using rule 7 (root_exp)


state 160

    6 root_exp: cstmt.opt "," .

    $default  reduce using rule 6 (root_exp)


state 161

    5 root_exp: cstmt.opt ";" .

    $default  reduce using rule 5 (root_exp)


state 162

   18 cstmt: . stmt
   19      | . cstmt "|" cstmt
   20      | . cstmt "&" cstmt
   20      | cstmt "&" . cstmt
   23 stmt: . primary-exp ":" stmt
   24     | . exp
   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   37 exp: . "class" lvalue protos block
   38    | . "package" lvalue protos block
   43 stmt: . "enum" id "{" id.0 "}"
   47     | . "external" "identifier" "identifier"
   48     | . "external" "var" "identifier" "." "identifier" from "identifier"
   49     | . "external" event_or_function "(" unsigned ")" "identifier" "." "identifier" from "identifier"
   50     | . "import" lvalue
   51     | . exp "!" args.opt tilda.opt
   52 routine: . "closure"
   53        | . "function"
   54 stmt: . routine k1_id formals block
   55     | . id id formals block
   62 exp: . exp "=" exp
   63    | . exp "=" exp modifiers
   64    | . lvalue "+=" exp
   65    | . lvalue "-=" exp
   66    | . lvalue "*=" exp
   67    | . lvalue "/=" exp
   68    | . lvalue "^=" exp
   69    | . lvalue "%=" exp
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
   73 stmt: . "at" identifiers "(" exp tilda.opt ")" stmt onleave.opt
   74     | . "at" identifiers "(" event_match ")" stmt onleave.opt
   75     | . "every" "(" exp ")" stmt
   76     | . "if" "(" stmts ")" stmt else.opt
   77     | . "freezeif" "(" exp ")" stmt
   78     | . "stopif" "(" exp ")" stmt
   79     | . "switch" "(" exp ")" "{" cases default.opt "}"
   80     | . "timeout" "(" exp ")" stmt catch.opt else.opt finally.opt
   81     | . "return" exp.opt
   82     | . "break"
   83     | . "continue"
   84     | . "waituntil" "(" exp tilda.opt ")"
   85     | . "waituntil" "(" event_match ")"
   86     | . "whenever" "(" exp tilda.opt ")" stmt else.opt
   87     | . "whenever" "(" event_match ")" stmt else.opt
  108     | . "try" block catches.1 else.opt finally.opt
  109     | . "try" block "finally" block
  110     | . "throw" exp.opt
  111     | . "loop" stmt
  112     | . "for" "(" exp ")" stmt
  113     | . "for" "(" stmt.opt ";" exp ";" stmt.opt ")" stmt
  114     | . "for" "(" "var" "identifier" in_or_colon exp ")" stmt
  115     | . "while" "(" exp ")" stmt
  118 primary-exp: . block
  119            | . "do" "(" exp ")" block
  120 detach: . "detach"
  121       | . "disown"
  122 primary-exp: . "assert" "(" exp ")"
  123            | . "assert" "{" claims "}"
  124            | . detach "(" exp ")"
  125            | . detach block
  126            | . "isdef" "(" k1_id ")"
  127            | . "watch" "(" exp ")"
  128 lvalue: . id
  129       | . primary-exp "." id
  130       | . primary-exp "." "*"
  131 primary-exp: . "&" id
  132            | . primary-exp "." "&" id
  133 id: . "identifier"
  134 bitor-exp: . "var" bitor-exp
  135          | . "const" "var" bitor-exp
  136 primary-exp: . lvalue
  137            | . lvalue args
  138 new: . "new" "identifier" args.opt
  139 bitor-exp: . new
  140 id: . "new"
  141 primary-exp: . routine formals block
  142 float-exp: . "float"
  143 duration: . "duration"
  144         | . duration "duration"
  150 dictionary: . "[" assocs "]"
  154 tuple: . "(" tuple.exps ")"
  159 literal-exp: . float-exp
  160            | . "angle"
  161            | . duration
  162            | . string
  163            | . "[" exps "]"
  164            | . "<" bitor-exps ">"
  165            | . dictionary
  166            | . tuple
  167 string: . "string"
  168       | . string "string"
  169 literal-exp: . "__HERE__"
  175 lvalue: . primary-exp "[" exps "]"
  176 literal-exp: . "this"
  177            | . "call"
  178 primary-exp: . literal-exp
  179            | . "(" exp ")"
  180            | . "(" error ")"
  181            | . primary-exp "**" primary-exp
  182 unary-exp: . primary-exp
  183          | . "--" lvalue
  184          | . "++" lvalue
  185          | . "+" unary-exp
  186          | . "-" unary-exp
  187          | . "!" unary-exp
  188          | . "compl" unary-exp
  189 bitor-exp: . unary-exp
  190          | . bitor-exp "+" bitor-exp
  191          | . bitor-exp "-" bitor-exp
  192          | . bitor-exp "*" bitor-exp
  193          | . bitor-exp "/" bitor-exp
  194          | . bitor-exp "%" bitor-exp
  195          | . bitor-exp "^" bitor-exp
  196          | . bitor-exp "<<" bitor-exp
  197          | . bitor-exp "bitand" bitor-exp
  198          | . bitor-exp "bitor" bitor-exp
  199          | . bitor-exp ">>" bitor-exp
  210 rel-exp: . bitor-exp rel-ops
  213 exp: . rel-exp
  214    | . exp "&&" exp
  215    | . exp "||" exp
  216    | . exp "in" exp
  217    | . exp "!" "in" exp
  221    | . "%unscope:" unsigned
  222 primary-exp: . "%exp:" unsigned
  223 lvalue: . "%lvalue:" unsigned
  224       | . "%id:" unsigned
  225       | . primary-exp "." "%id:" unsigned
  226 primary-exp: . lvalue "(" "%exps:" unsigned ")"

    "__HERE__"    shift, and go to state 7
    "break"       shift, and go to state 8
    "closure"     shift, and go to state 9
    "const"       shift, and go to state 10
    "continue"    shift, and go to state 11
    "freezeif"    shift, and go to state 12
    "function"    shift, and go to state 13
    "if"          shift, and go to state 14
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "return"      shift, and go to state 19
    "stopif"      shift, and go to state 20
    "switch"      shift, and go to state 21
    "throw"       shift, and go to state 22
    "timeout"     shift, and go to state 23
    "try"         shift, and go to state 24
    "var"         shift, and go to state 25
    "waituntil"   shift, and go to state 26
    "watch"       shift, and go to state 27
    "whenever"    shift, and go to state 28
    "&"           shift, and go to state 29
    "every"       shift, and go to state 30
    "for"         shift, and go to state 31
    "loop"        shift, and go to state 32
    "while"       shift, and go to state 33
    "at"          shift, and go to state 34
    "identifier"  shift, and go to state 35
    "class"       shift, and go to state 36
    "package"     shift, and go to state 37
    "enum"        shift, and go to state 38
    "external"    shift, and go to state 39
    "import"      shift, and go to state 40
    "--"          shift, and go to state 41
    "++"          shift, and go to state 42
    "do"          shift, and go to state 43
    "assert"      shift, and go to state 44
    "detach"      shift, and go to state 45
    "disown"      shift, and go to state 46
    "new"         shift, and go to state 47
    "angle"       shift, and go to state 48
    "duration"    shift, and go to state 49
    "float"       shift, and go to state 50
    "string"      shift, and go to state 51
    "call"        shift, and go to state 52
    "this"        shift, and go to state 53
    "!"           shift, and go to state 54
    "compl"       shift, and go to state 55
    "-"           shift, and go to state 56
    "+"           shift, and go to state 57
    "<"           shift, and go to state 58
    "%unscope:"   shift, and go to state 59
    "%exp:"       shift, and go to state 60
    "%lvalue:"    shift, and go to state 61
    "%id:"        shift, and go to state 62

    cstmt        go to state 264
    stmt         go to state 66
    block        go to state 67
    exp          go to state 68
    routine      go to state 69
    primary-exp  go to state 70
    detach       go to state 71
    lvalue       go to state 72
    id           go to state 73
    bitor-exp    go to state 74
    new          go to state 75
    float-exp    go to state 76
    duration     go to state 77
    dictionary   go to state 78
    tuple        go to state 79
    literal-exp  go to state 80
    string       go to state 81
    unary-exp    go to state 82
    rel-exp      go to state 83


state 163

   17 cstmt.opt: cstmt "|" .  ["end of command", "case", "default", "}", ")", ",", ";"]
   18 cstmt: . stmt
   19      | . cstmt "|" cstmt
   19      | cstmt "|" . cstmt
   20      | . cstmt "&" cstmt
   23 stmt: . primary-exp ":" stmt
   24     | . exp
   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   37 exp: . "class" lvalue protos block
   38    | . "package" lvalue protos block
   43 stmt: . "enum" id "{" id.0 "}"
   47     | . "external" "identifier" "identifier"
   48     | . "external" "var" "identifier" "." "identifier" from "identifier"
   49     | . "external" event_or_function "(" unsigned ")" "identifier" "." "identifier" from "identifier"
   50     | . "import" lvalue
   51     | . exp "!" args.opt tilda.opt
   52 routine: . "closure"
   53        | . "function"
   54 stmt: . routine k1_id formals block
   55     | . id id formals block
   62 exp: . exp "=" exp
   63    | . exp "=" exp modifiers
   64    | . lvalue "+=" exp
   65    | . lvalue "-=" exp
   66    | . lvalue "*=" exp
   67    | . lvalue "/=" exp
   68    | . lvalue "^=" exp
   69    | . lvalue "%=" exp
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
   73 stmt: . "at" identifiers "(" exp tilda.opt ")" stmt onleave.opt
   74     | . "at" identifiers "(" event_match ")" stmt onleave.opt
   75     | . "every" "(" exp ")" stmt
   76     | . "if" "(" stmts ")" stmt else.opt
   77     | . "freezeif" "(" exp ")" stmt
   78     | . "stopif" "(" exp ")" stmt
   79     | . "switch" "(" exp ")" "{" cases default.opt "}"
   80     | . "timeout" "(" exp ")" stmt catch.opt else.opt finally.opt
   81     | . "return" exp.opt
   82     | . "break"
   83     | . "continue"
   84     | . "waituntil" "(" exp tilda.opt ")"
   85     | . "waituntil" "(" event_match ")"
   86     | . "whenever" "(" exp tilda.opt ")" stmt else.opt
   87     | . "whenever" "(" event_match ")" stmt else.opt
  108     | . "try" block catches.1 else.opt finally.opt
  109     | . "try" block "finally" block
  110     | . "throw" exp.opt
  111     | . "loop" stmt
  112     | . "for" "(" exp ")" stmt
  113     | . "for" "(" stmt.opt ";" exp ";" stmt.opt ")" stmt
  114     | . "for" "(" "var" "identifier" in_or_colon exp ")" stmt
  115     | . "while" "(" exp ")" stmt
  118 primary-exp: . block
  119            | . "do" "(" exp ")" block
  120 detach: . "detach"
  121       | . "disown"
  122 primary-exp: . "assert" "(" exp ")"
  123            | . "assert" "{" claims "}"
  124            | . detach "(" exp ")"
  125            | . detach block
  126            | . "isdef" "(" k1_id ")"
  127            | . "watch" "(" exp ")"
  128 lvalue: . id
  129       | . primary-exp "." id
  130       | . primary-exp "." "*"
  131 primary-exp: . "&" id
  132            | . primary-exp "." "&" id
  133 id: . "identifier"
  134 bitor-exp: . "var" bitor-exp
  135          | . "const" "var" bitor-exp
  136 primary-exp: . lvalue
  137            | . lvalue args
  138 new: . "new" "identifier" args.opt
  139 bitor-exp: . new
  140 id: . "new"
  141 primary-exp: . routine formals block
  142 float-exp: . "float"
  143 duration: . "duration"
  144         | . duration "duration"
  150 dictionary: . "[" assocs "]"
  154 tuple: . "(" tuple.exps ")"
  159 literal-exp: . float-exp
  160            | . "angle"
  161            | . duration
  162            | . string
  163            | . "[" exps "]"
  164            | . "<" bitor-exps ">"
  165            | . dictionary
  166            | . tuple
  167 string: . "string"
  168       | . string "string"
  169 literal-exp: . "__HERE__"
  175 lvalue: . primary-exp "[" exps "]"
  176 literal-exp: . "this"
  177            | . "call"
  178 primary-exp: . literal-exp
  179            | . "(" exp ")"
  180            | . "(" error ")"
  181            | . primary-exp "**" primary-exp
  182 unary-exp: . primary-exp
  183          | . "--" lvalue
  184          | . "++" lvalue
  185          | . "+" unary-exp
  186          | . "-" unary-exp
  187          | . "!" unary-exp
  188          | . "compl" unary-exp
  189 bitor-exp: . unary-exp
  190          | . bitor-exp "+" bitor-exp
  191          | . bitor-exp "-" bitor-exp
  192          | . bitor-exp "*" bitor-exp
  193          | . bitor-exp "/" bitor-exp
  194          | . bitor-exp "%" bitor-exp
  195          | . bitor-exp "^" bitor-exp
  196          | . bitor-exp "<<" bitor-exp
  197          | . bitor-exp "bitand" bitor-exp
  198          | . bitor-exp "bitor" bitor-exp
  199          | . bitor-exp ">>" bitor-exp
  210 rel-exp: . bitor-exp rel-ops
  213 exp: . rel-exp
  214    | . exp "&&" exp
  215    | . exp "||" exp
  216    | . exp "in" exp
  217    | . exp "!" "in" exp
  221    | . "%unscope:" unsigned
  222 primary-exp: . "%exp:" unsigned
  223 lvalue: . "%lvalue:" unsigned
  224       | . "%id:" unsigned
  225       | . primary-exp "." "%id:" unsigned
  226 primary-exp: . lvalue "(" "%exps:" unsigned ")"

    "__HERE__"    shift, and go to state 7
    "break"       shift, and go to state 8
    "closure"     shift, and go to state 9
    "const"       shift, and go to state 10
    "continue"    shift, and go to state 11
    "freezeif"    shift, and go to state 12
    "function"    shift, and go to state 13
    "if"          shift, and go to state 14
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "return"      shift, and go to state 19
    "stopif"      shift, and go to state 20
    "switch"      shift, and go to state 21
    "throw"       shift, and go to state 22
    "timeout"     shift, and go to state 23
    "try"         shift, and go to state 24
    "var"         shift, and go to state 25
    "waituntil"   shift, and go to state 26
    "watch"       shift, and go to state 27
    "whenever"    shift, and go to state 28
    "&"           shift, and go to state 29
    "every"       shift, and go to state 30
    "for"         shift, and go to state 31
    "loop"        shift, and go to state 32
    "while"       shift, and go to state 33
    "at"          shift, and go to state 34
    "identifier"  shift, and go to state 35
    "class"       shift, and go to state 36
    "package"     shift, and go to state 37
    "enum"        shift, and go to state 38
    "external"    shift, and go to state 39
    "import"      shift, and go to state 40
    "--"          shift, and go to state 41
    "++"          shift, and go to state 42
    "do"          shift, and go to state 43
    "assert"      shift, and go to state 44
    "detach"      shift, and go to state 45
    "disown"      shift, and go to state 46
    "new"         shift, and go to state 47
    "angle"       shift, and go to state 48
    "duration"    shift, and go to state 49
    "float"       shift, and go to state 50
    "string"      shift, and go to state 51
    "call"        shift, and go to state 52
    "this"        shift, and go to state 53
    "!"           shift, and go to state 54
    "compl"       shift, and go to state 55
    "-"           shift, and go to state 56
    "+"           shift, and go to state 57
    "<"           shift, and go to state 58
    "%unscope:"   shift, and go to state 59
    "%exp:"       shift, and go to state 60
    "%lvalue:"    shift, and go to state 61
    "%id:"        shift, and go to state 62

    $default  reduce using rule 17 (cstmt.opt)

    cstmt        go to state 265
    stmt         go to state 66
    block        go to state 67
    exp          go to state 68
    routine      go to state 69
    primary-exp  go to state 70
    detach       go to state 71
    lvalue       go to state 72
    id           go to state 73
    bitor-exp    go to state 74
    new          go to state 75
    float-exp    go to state 76
    duration     go to state 77
    dictionary   go to state 78
    tuple        go to state 79
    literal-exp  go to state 80
    string       go to state 81
    unary-exp    go to state 82
    rel-exp      go to state 83


state 164

   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   37 exp: . "class" lvalue protos block
   38    | . "package" lvalue protos block
   52 routine: . "closure"
   53        | . "function"
   62 exp: . exp "=" exp
   62    | exp "=" . exp
   63    | . exp "=" exp modifiers
   63    | exp "=" . exp modifiers
   64    | . lvalue "+=" exp
   65    | . lvalue "-=" exp
   66    | . lvalue "*=" exp
   67    | . lvalue "/=" exp
   68    | . lvalue "^=" exp
   69    | . lvalue "%=" exp
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
  118            | . block
  119            | . "do" "(" exp ")" block
  120 detach: . "detach"
  121       | . "disown"
  122 primary-exp: . "assert" "(" exp ")"
  123            | . "assert" "{" claims "}"
  124            | . detach "(" exp ")"
  125            | . detach block
  126            | . "isdef" "(" k1_id ")"
  127            | . "watch" "(" exp ")"
  128 lvalue: . id
  129       | . primary-exp "." id
  130       | . primary-exp "." "*"
  131 primary-exp: . "&" id
  132            | . primary-exp "." "&" id
  133 id: . "identifier"
  134 bitor-exp: . "var" bitor-exp
  135          | . "const" "var" bitor-exp
  136 primary-exp: . lvalue
  137            | . lvalue args
  138 new: . "new" "identifier" args.opt
  139 bitor-exp: . new
  140 id: . "new"
  141 primary-exp: . routine formals block
  142 float-exp: . "float"
  143 duration: . "duration"
  144         | . duration "duration"
  150 dictionary: . "[" assocs "]"
  154 tuple: . "(" tuple.exps ")"
  159 literal-exp: . float-exp
  160            | . "angle"
  161            | . duration
  162            | . string
  163            | . "[" exps "]"
  164            | . "<" bitor-exps ">"
  165            | . dictionary
  166            | . tuple
  167 string: . "string"
  168       | . string "string"
  169 literal-exp: . "__HERE__"
  175 lvalue: . primary-exp "[" exps "]"
  176 literal-exp: . "this"
  177            | . "call"
  178 primary-exp: . literal-exp
  179            | . "(" exp ")"
  180            | . "(" error ")"
  181            | . primary-exp "**" primary-exp
  182 unary-exp: . primary-exp
  183          | . "--" lvalue
  184          | . "++" lvalue
  185          | . "+" unary-exp
  186          | . "-" unary-exp
  187          | . "!" unary-exp
  188          | . "compl" unary-exp
  189 bitor-exp: . unary-exp
  190          | . bitor-exp "+" bitor-exp
  191          | . bitor-exp "-" bitor-exp
  192          | . bitor-exp "*" bitor-exp
  193          | . bitor-exp "/" bitor-exp
  194          | . bitor-exp "%" bitor-exp
  195          | . bitor-exp "^" bitor-exp
  196          | . bitor-exp "<<" bitor-exp
  197          | . bitor-exp "bitand" bitor-exp
  198          | . bitor-exp "bitor" bitor-exp
  199          | . bitor-exp ">>" bitor-exp
  210 rel-exp: . bitor-exp rel-ops
  213 exp: . rel-exp
  214    | . exp "&&" exp
  215    | . exp "||" exp
  216    | . exp "in" exp
  217    | . exp "!" "in" exp
  221    | . "%unscope:" unsigned
  222 primary-exp: . "%exp:" unsigned
  223 lvalue: . "%lvalue:" unsigned
  224       | . "%id:" unsigned
  225       | . primary-exp "." "%id:" unsigned
  226 primary-exp: . lvalue "(" "%exps:" unsigned ")"

    "__HERE__"    shift, and go to state 7
    "closure"     shift, and go to state 9
    "const"       shift, and go to state 10
    "function"    shift, and go to state 13
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "var"         shift, and go to state 25
    "watch"       shift, and go to state 27
    "&"           shift, and go to state 29
    "identifier"  shift, and go to state 35
    "class"       shift, and go to state 36
    "package"     shift, and go to state 37
    "--"          shift, and go to state 41
    "++"          shift, and go to state 42
    "do"          shift, and go to state 43
    "assert"      shift, and go to state 44
    "detach"      shift, and go to state 45
    "disown"      shift, and go to state 46
    "new"         shift, and go to state 47
    "angle"       shift, and go to state 48
    "duration"    shift, and go to state 49
    "float"       shift, and go to state 50
    "string"      shift, and go to state 51
    "call"        shift, and go to state 52
    "this"        shift, and go to state 53
    "!"           shift, and go to state 54
    "compl"       shift, and go to state 55
    "-"           shift, and go to state 56
    "+"           shift, and go to state 57
    "<"           shift, and go to state 58
    "%unscope:"   shift, and go to state 59
    "%exp:"       shift, and go to state 60
    "%lvalue:"    shift, and go to state 61
    "%id:"        shift, and go to state 62

    block        go to state 67
    exp          go to state 266
    routine      go to state 100
    primary-exp  go to state 101
    detach       go to state 71
    lvalue       go to state 72
    id           go to state 102
    bitor-exp    go to state 74
    new          go to state 75
    float-exp    go to state 76
    duration     go to state 77
    dictionary   go to state 78
    tuple        go to state 79
    literal-exp  go to state 80
    string       go to state 81
    unary-exp    go to state 82
    rel-exp      go to state 83


state 165

   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   37 exp: . "class" lvalue protos block
   38    | . "package" lvalue protos block
   52 routine: . "closure"
   53        | . "function"
   62 exp: . exp "=" exp
   63    | . exp "=" exp modifiers
   64    | . lvalue "+=" exp
   65    | . lvalue "-=" exp
   66    | . lvalue "*=" exp
   67    | . lvalue "/=" exp
   68    | . lvalue "^=" exp
   69    | . lvalue "%=" exp
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
  118            | . block
  119            | . "do" "(" exp ")" block
  120 detach: . "detach"
  121       | . "disown"
  122 primary-exp: . "assert" "(" exp ")"
  123            | . "assert" "{" claims "}"
  124            | . detach "(" exp ")"
  125            | . detach block
  126            | . "isdef" "(" k1_id ")"
  127            | . "watch" "(" exp ")"
  128 lvalue: . id
  129       | . primary-exp "." id
  130       | . primary-exp "." "*"
  131 primary-exp: . "&" id
  132            | . primary-exp "." "&" id
  133 id: . "identifier"
  134 bitor-exp: . "var" bitor-exp
  135          | . "const" "var" bitor-exp
  136 primary-exp: . lvalue
  137            | . lvalue args
  138 new: . "new" "identifier" args.opt
  139 bitor-exp: . new
  140 id: . "new"
  141 primary-exp: . routine formals block
  142 float-exp: . "float"
  143 duration: . "duration"
  144         | . duration "duration"
  150 dictionary: . "[" assocs "]"
  154 tuple: . "(" tuple.exps ")"
  159 literal-exp: . float-exp
  160            | . "angle"
  161            | . duration
  162            | . string
  163            | . "[" exps "]"
  164            | . "<" bitor-exps ">"
  165            | . dictionary
  166            | . tuple
  167 string: . "string"
  168       | . string "string"
  169 literal-exp: . "__HERE__"
  175 lvalue: . primary-exp "[" exps "]"
  176 literal-exp: . "this"
  177            | . "call"
  178 primary-exp: . literal-exp
  179            | . "(" exp ")"
  180            | . "(" error ")"
  181            | . primary-exp "**" primary-exp
  182 unary-exp: . primary-exp
  183          | . "--" lvalue
  184          | . "++" lvalue
  185          | . "+" unary-exp
  186          | . "-" unary-exp
  187          | . "!" unary-exp
  188          | . "compl" unary-exp
  189 bitor-exp: . unary-exp
  190          | . bitor-exp "+" bitor-exp
  191          | . bitor-exp "-" bitor-exp
  192          | . bitor-exp "*" bitor-exp
  193          | . bitor-exp "/" bitor-exp
  194          | . bitor-exp "%" bitor-exp
  195          | . bitor-exp "^" bitor-exp
  196          | . bitor-exp "<<" bitor-exp
  197          | . bitor-exp "bitand" bitor-exp
  198          | . bitor-exp "bitor" bitor-exp
  199          | . bitor-exp ">>" bitor-exp
  210 rel-exp: . bitor-exp rel-ops
  213 exp: . rel-exp
  214    | . exp "&&" exp
  215    | . exp "||" exp
  216    | . exp "in" exp
  216    | exp "in" . exp
  217    | . exp "!" "in" exp
  221    | . "%unscope:" unsigned
  222 primary-exp: . "%exp:" unsigned
  223 lvalue: . "%lvalue:" unsigned
  224       | . "%id:" unsigned
  225       | . primary-exp "." "%id:" unsigned
  226 primary-exp: . lvalue "(" "%exps:" unsigned ")"

    "__HERE__"    shift, and go to state 7
    "closure"     shift, and go to state 9
    "const"       shift, and go to state 10
    "function"    shift, and go to state 13
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "var"         shift, and go to state 25
    "watch"       shift, and go to state 27
    "&"           shift, and go to state 29
    "identifier"  shift, and go to state 35
    "class"       shift, and go to state 36
    "package"     shift, and go to state 37
    "--"          shift, and go to state 41
    "++"          shift, and go to state 42
    "do"          shift, and go to state 43
    "assert"      shift, and go to state 44
    "detach"      shift, and go to state 45
    "disown"      shift, and go to state 46
    "new"         shift, and go to state 47
    "angle"       shift, and go to state 48
    "duration"    shift, and go to state 49
    "float"       shift, and go to state 50
    "string"      shift, and go to state 51
    "call"        shift, and go to state 52
    "this"        shift, and go to state 53
    "!"           shift, and go to state 54
    "compl"       shift, and go to state 55
    "-"           shift, and go to state 56
    "+"           shift, and go to state 57
    "<"           shift, and go to state 58
    "%unscope:"   shift, and go to state 59
    "%exp:"       shift, and go to state 60
    "%lvalue:"    shift, and go to state 61
    "%id:"        shift, and go to state 62

    block        go to state 67
    exp          go to state 267
    routine      go to state 100
    primary-exp  go to state 101
    detach       go to state 71
    lvalue       go to state 72
    id           go to state 102
    bitor-exp    go to state 74
    new          go to state 75
    float-exp    go to state 76
    duration     go to state 77
    dictionary   go to state 78
    tuple        go to state 79
    literal-exp  go to state 80
    string       go to state 81
    unary-exp    go to state 82
    rel-exp      go to state 83


state 166

   51 stmt: exp "!" . args.opt tilda.opt
  217 exp: exp "!" . "in" exp
  236 args: . "(" exps ")"
  237 args.opt: .  ["end of command", "case", "catch", "default", "else", "finally", "onleave", "}", ")", "~", ",", ";", "&", "|"]
  238         | . args

    "in"  shift, and go to state 268
    "("   shift, and go to state 258

    $default  reduce using rule 237 (args.opt)

    args      go to state 259
    args.opt  go to state 269


state 167

   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   37 exp: . "class" lvalue protos block
   38    | . "package" lvalue protos block
   52 routine: . "closure"
   53        | . "function"
   62 exp: . exp "=" exp
   63    | . exp "=" exp modifiers
   64    | . lvalue "+=" exp
   65    | . lvalue "-=" exp
   66    | . lvalue "*=" exp
   67    | . lvalue "/=" exp
   68    | . lvalue "^=" exp
   69    | . lvalue "%=" exp
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
  118            | . block
  119            | . "do" "(" exp ")" block
  120 detach: . "detach"
  121       | . "disown"
  122 primary-exp: . "assert" "(" exp ")"
  123            | . "assert" "{" claims "}"
  124            | . detach "(" exp ")"
  125            | . detach block
  126            | . "isdef" "(" k1_id ")"
  127            | . "watch" "(" exp ")"
  128 lvalue: . id
  129       | . primary-exp "." id
  130       | . primary-exp "." "*"
  131 primary-exp: . "&" id
  132            | . primary-exp "." "&" id
  133 id: . "identifier"
  134 bitor-exp: . "var" bitor-exp
  135          | . "const" "var" bitor-exp
  136 primary-exp: . lvalue
  137            | . lvalue args
  138 new: . "new" "identifier" args.opt
  139 bitor-exp: . new
  140 id: . "new"
  141 primary-exp: . routine formals block
  142 float-exp: . "float"
  143 duration: . "duration"
  144         | . duration "duration"
  150 dictionary: . "[" assocs "]"
  154 tuple: . "(" tuple.exps ")"
  159 literal-exp: . float-exp
  160            | . "angle"
  161            | . duration
  162            | . string
  163            | . "[" exps "]"
  164            | . "<" bitor-exps ">"
  165            | . dictionary
  166            | . tuple
  167 string: . "string"
  168       | . string "string"
  169 literal-exp: . "__HERE__"
  175 lvalue: . primary-exp "[" exps "]"
  176 literal-exp: . "this"
  177            | . "call"
  178 primary-exp: . literal-exp
  179            | . "(" exp ")"
  180            | . "(" error ")"
  181            | . primary-exp "**" primary-exp
  182 unary-exp: . primary-exp
  183          | . "--" lvalue
  184          | . "++" lvalue
  185          | . "+" unary-exp
  186          | . "-" unary-exp
  187          | . "!" unary-exp
  188          | . "compl" unary-exp
  189 bitor-exp: . unary-exp
  190          | . bitor-exp "+" bitor-exp
  191          | . bitor-exp "-" bitor-exp
  192          | . bitor-exp "*" bitor-exp
  193          | . bitor-exp "/" bitor-exp
  194          | . bitor-exp "%" bitor-exp
  195          | . bitor-exp "^" bitor-exp
  196          | . bitor-exp "<<" bitor-exp
  197          | . bitor-exp "bitand" bitor-exp
  198          | . bitor-exp "bitor" bitor-exp
  199          | . bitor-exp ">>" bitor-exp
  210 rel-exp: . bitor-exp rel-ops
  213 exp: . rel-exp
  214    | . exp "&&" exp
  214    | exp "&&" . exp
  215    | . exp "||" exp
  216    | . exp "in" exp
  217    | . exp "!" "in" exp
  221    | . "%unscope:" unsigned
  222 primary-exp: . "%exp:" unsigned
  223 lvalue: . "%lvalue:" unsigned
  224       | . "%id:" unsigned
  225       | . primary-exp "." "%id:" unsigned
  226 primary-exp: . lvalue "(" "%exps:" unsigned ")"

    "__HERE__"    shift, and go to state 7
    "closure"     shift, and go to state 9
    "const"       shift, and go to state 10
    "function"    shift, and go to state 13
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "var"         shift, and go to state 25
    "watch"       shift, and go to state 27
    "&"           shift, and go to state 29
    "identifier"  shift, and go to state 35
    "class"       shift, and go to state 36
    "package"     shift, and go to state 37
    "--"          shift, and go to state 41
    "++"          shift, and go to state 42
    "do"          shift, and go to state 43
    "assert"      shift, and go to state 44
    "detach"      shift, and go to state 45
    "disown"      shift, and go to state 46
    "new"         shift, and go to state 47
    "angle"       shift, and go to state 48
    "duration"    shift, and go to state 49
    "float"       shift, and go to state 50
    "string"      shift, and go to state 51
    "call"        shift, and go to state 52
    "this"        shift, and go to state 53
    "!"           shift, and go to state 54
    "compl"       shift, and go to state 55
    "-"           shift, and go to state 56
    "+"           shift, and go to state 57
    "<"           shift, and go to state 58
    "%unscope:"   shift, and go to state 59
    "%exp:"       shift, and go to state 60
    "%lvalue:"    shift, and go to state 61
    "%id:"        shift, and go to state 62

    block        go to state 67
    exp          go to state 270
    routine      go to state 100
    primary-exp  go to state 101
    detach       go to state 71
    lvalue       go to state 72
    id           go to state 102
    bitor-exp    go to state 74
    new          go to state 75
    float-exp    go to state 76
    duration     go to state 77
    dictionary   go to state 78
    tuple        go to state 79
    literal-exp  go to state 80
    string       go to state 81
    unary-exp    go to state 82
    rel-exp      go to state 83


state 168

   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   37 exp: . "class" lvalue protos block
   38    | . "package" lvalue protos block
   52 routine: . "closure"
   53        | . "function"
   62 exp: . exp "=" exp
   63    | . exp "=" exp modifiers
   64    | . lvalue "+=" exp
   65    | . lvalue "-=" exp
   66    | . lvalue "*=" exp
   67    | . lvalue "/=" exp
   68    | . lvalue "^=" exp
   69    | . lvalue "%=" exp
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
  118            | . block
  119            | . "do" "(" exp ")" block
  120 detach: . "detach"
  121       | . "disown"
  122 primary-exp: . "assert" "(" exp ")"
  123            | . "assert" "{" claims "}"
  124            | . detach "(" exp ")"
  125            | . detach block
  126            | . "isdef" "(" k1_id ")"
  127            | . "watch" "(" exp ")"
  128 lvalue: . id
  129       | . primary-exp "." id
  130       | . primary-exp "." "*"
  131 primary-exp: . "&" id
  132            | . primary-exp "." "&" id
  133 id: . "identifier"
  134 bitor-exp: . "var" bitor-exp
  135          | . "const" "var" bitor-exp
  136 primary-exp: . lvalue
  137            | . lvalue args
  138 new: . "new" "identifier" args.opt
  139 bitor-exp: . new
  140 id: . "new"
  141 primary-exp: . routine formals block
  142 float-exp: . "float"
  143 duration: . "duration"
  144         | . duration "duration"
  150 dictionary: . "[" assocs "]"
  154 tuple: . "(" tuple.exps ")"
  159 literal-exp: . float-exp
  160            | . "angle"
  161            | . duration
  162            | . string
  163            | . "[" exps "]"
  164            | . "<" bitor-exps ">"
  165            | . dictionary
  166            | . tuple
  167 string: . "string"
  168       | . string "string"
  169 literal-exp: . "__HERE__"
  175 lvalue: . primary-exp "[" exps "]"
  176 literal-exp: . "this"
  177            | . "call"
  178 primary-exp: . literal-exp
  179            | . "(" exp ")"
  180            | . "(" error ")"
  181            | . primary-exp "**" primary-exp
  182 unary-exp: . primary-exp
  183          | . "--" lvalue
  184          | . "++" lvalue
  185          | . "+" unary-exp
  186          | . "-" unary-exp
  187          | . "!" unary-exp
  188          | . "compl" unary-exp
  189 bitor-exp: . unary-exp
  190          | . bitor-exp "+" bitor-exp
  191          | . bitor-exp "-" bitor-exp
  192          | . bitor-exp "*" bitor-exp
  193          | . bitor-exp "/" bitor-exp
  194          | . bitor-exp "%" bitor-exp
  195          | . bitor-exp "^" bitor-exp
  196          | . bitor-exp "<<" bitor-exp
  197          | . bitor-exp "bitand" bitor-exp
  198          | . bitor-exp "bitor" bitor-exp
  199          | . bitor-exp ">>" bitor-exp
  210 rel-exp: . bitor-exp rel-ops
  213 exp: . rel-exp
  214    | . exp "&&" exp
  215    | . exp "||" exp
  215    | exp "||" . exp
  216    | . exp "in" exp
  217    | . exp "!" "in" exp
  221    | . "%unscope:" unsigned
  222 primary-exp: . "%exp:" unsigned
  223 lvalue: . "%lvalue:" unsigned
  224       | . "%id:" unsigned
  225       | . primary-exp "." "%id:" unsigned
  226 primary-exp: . lvalue "(" "%exps:" unsigned ")"

    "__HERE__"    shift, and go to state 7
    "closure"     shift, and go to state 9
    "const"       shift, and go to state 10
    "function"    shift, and go to state 13
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "var"         shift, and go to state 25
    "watch"       shift, and go to state 27
    "&"           shift, and go to state 29
    "identifier"  shift, and go to state 35
    "class"       shift, and go to state 36
    "package"     shift, and go to state 37
    "--"          shift, and go to state 41
    "++"          shift, and go to state 42
    "do"          shift, and go to state 43
    "assert"      shift, and go to state 44
    "detach"      shift, and go to state 45
    "disown"      shift, and go to state 46
    "new"         shift, and go to state 47
    "angle"       shift, and go to state 48
    "duration"    shift, and go to state 49
    "float"       shift, and go to state 50
    "string"      shift, and go to state 51
    "call"        shift, and go to state 52
    "this"        shift, and go to state 53
    "!"           shift, and go to state 54
    "compl"       shift, and go to state 55
    "-"           shift, and go to state 56
    "+"           shift, and go to state 57
    "<"           shift, and go to state 58
    "%unscope:"   shift, and go to state 59
    "%exp:"       shift, and go to state 60
    "%lvalue:"    shift, and go to state 61
    "%id:"        shift, and go to state 62

    block        go to state 67
    exp          go to state 271
    routine      go to state 100
    primary-exp  go to state 101
    detach       go to state 71
    lvalue       go to state 72
    id           go to state 102
    bitor-exp    go to state 74
    new          go to state 75
    float-exp    go to state 76
    duration     go to state 77
    dictionary   go to state 78
    tuple        go to state 79
    literal-exp  go to state 80
    string       go to state 81
    unary-exp    go to state 82
    rel-exp      go to state 83


state 169

  244 formal: . var.opt "identifier" typespec.opt
  245       | . var.opt "identifier" "=" exp typespec.opt
  246       | . var.opt "identifier" "[" "]"
  247 formals.1: . formal
  248          | . formals.1 "," formal
  249 formals.0: .  [")"]
  250          | . formals.1 comma.opt
  252 formals: "(" . formals.0 ")"
  257 var.opt: .  ["identifier"]
  258        | . "var"

    "var"  shift, and go to state 272

    "identifier"  reduce using rule 257 (var.opt)
    $default      reduce using rule 249 (formals.0)

    formal     go to state 273
    formals.1  go to state 274
    formals.0  go to state 275
    var.opt    go to state 276


state 170

   56 k1_id: "identifier" .

    $default  reduce using rule 56 (k1_id)


state 171

   57 k1_id: "this" . "." "identifier"

    "."  shift, and go to state 277


state 172

   54 stmt: routine k1_id . formals block
   58 k1_id: k1_id . "." "identifier"
  251 formals: .  ["{"]
  252        | . "(" formals.0 ")"

    "("  shift, and go to state 169
    "."  shift, and go to state 278

    $default  reduce using rule 251 (formals)

    formals  go to state 279


state 173

   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
  141 primary-exp: routine formals . block

    "{"  shift, and go to state 16

    block  go to state 280


state 174

   23 stmt: . primary-exp ":" stmt
   23     | primary-exp ":" . stmt
   24     | . exp
   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   37 exp: . "class" lvalue protos block
   38    | . "package" lvalue protos block
   43 stmt: . "enum" id "{" id.0 "}"
   47     | . "external" "identifier" "identifier"
   48     | . "external" "var" "identifier" "." "identifier" from "identifier"
   49     | . "external" event_or_function "(" unsigned ")" "identifier" "." "identifier" from "identifier"
   50     | . "import" lvalue
   51     | . exp "!" args.opt tilda.opt
   52 routine: . "closure"
   53        | . "function"
   54 stmt: . routine k1_id formals block
   55     | . id id formals block
   62 exp: . exp "=" exp
   63    | . exp "=" exp modifiers
   64    | . lvalue "+=" exp
   65    | . lvalue "-=" exp
   66    | . lvalue "*=" exp
   67    | . lvalue "/=" exp
   68    | . lvalue "^=" exp
   69    | . lvalue "%=" exp
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
   73 stmt: . "at" identifiers "(" exp tilda.opt ")" stmt onleave.opt
   74     | . "at" identifiers "(" event_match ")" stmt onleave.opt
   75     | . "every" "(" exp ")" stmt
   76     | . "if" "(" stmts ")" stmt else.opt
   77     | . "freezeif" "(" exp ")" stmt
   78     | . "stopif" "(" exp ")" stmt
   79     | . "switch" "(" exp ")" "{" cases default.opt "}"
   80     | . "timeout" "(" exp ")" stmt catch.opt else.opt finally.opt
   81     | . "return" exp.opt
   82     | . "break"
   83     | . "continue"
   84     | . "waituntil" "(" exp tilda.opt ")"
   85     | . "waituntil" "(" event_match ")"
   86     | . "whenever" "(" exp tilda.opt ")" stmt else.opt
   87     | . "whenever" "(" event_match ")" stmt else.opt
  108     | . "try" block catches.1 else.opt finally.opt
  109     | . "try" block "finally" block
  110     | . "throw" exp.opt
  111     | . "loop" stmt
  112     | . "for" "(" exp ")" stmt
  113     | . "for" "(" stmt.opt ";" exp ";" stmt.opt ")" stmt
  114     | . "for" "(" "var" "identifier" in_or_colon exp ")" stmt
  115     | . "while" "(" exp ")" stmt
  118 primary-exp: . block
  119            | . "do" "(" exp ")" block
  120 detach: . "detach"
  121       | . "disown"
  122 primary-exp: . "assert" "(" exp ")"
  123            | . "assert" "{" claims "}"
  124            | . detach "(" exp ")"
  125            | . detach block
  126            | . "isdef" "(" k1_id ")"
  127            | . "watch" "(" exp ")"
  128 lvalue: . id
  129       | . primary-exp "." id
  130       | . primary-exp "." "*"
  131 primary-exp: . "&" id
  132            | . primary-exp "." "&" id
  133 id: . "identifier"
  134 bitor-exp: . "var" bitor-exp
  135          | . "const" "var" bitor-exp
  136 primary-exp: . lvalue
  137            | . lvalue args
  138 new: . "new" "identifier" args.opt
  139 bitor-exp: . new
  140 id: . "new"
  141 primary-exp: . routine formals block
  142 float-exp: . "float"
  143 duration: . "duration"
  144         | . duration "duration"
  150 dictionary: . "[" assocs "]"
  154 tuple: . "(" tuple.exps ")"
  159 literal-exp: . float-exp
  160            | . "angle"
  161            | . duration
  162            | . string
  163            | . "[" exps "]"
  164            | . "<" bitor-exps ">"
  165            | . dictionary
  166            | . tuple
  167 string: . "string"
  168       | . string "string"
  169 literal-exp: . "__HERE__"
  175 lvalue: . primary-exp "[" exps "]"
  176 literal-exp: . "this"
  177            | . "call"
  178 primary-exp: . literal-exp
  179            | . "(" exp ")"
  180            | . "(" error ")"
  181            | . primary-exp "**" primary-exp
  182 unary-exp: . primary-exp
  183          | . "--" lvalue
  184          | . "++" lvalue
  185          | . "+" unary-exp
  186          | . "-" unary-exp
  187          | . "!" unary-exp
  188          | . "compl" unary-exp
  189 bitor-exp: . unary-exp
  190          | . bitor-exp "+" bitor-exp
  191          | . bitor-exp "-" bitor-exp
  192          | . bitor-exp "*" bitor-exp
  193          | . bitor-exp "/" bitor-exp
  194          | . bitor-exp "%" bitor-exp
  195          | . bitor-exp "^" bitor-exp
  196          | . bitor-exp "<<" bitor-exp
  197          | . bitor-exp "bitand" bitor-exp
  198          | . bitor-exp "bitor" bitor-exp
  199          | . bitor-exp ">>" bitor-exp
  210 rel-exp: . bitor-exp rel-ops
  213 exp: . rel-exp
  214    | . exp "&&" exp
  215    | . exp "||" exp
  216    | . exp "in" exp
  217    | . exp "!" "in" exp
  221    | . "%unscope:" unsigned
  222 primary-exp: . "%exp:" unsigned
  223 lvalue: . "%lvalue:" unsigned
  224       | . "%id:" unsigned
  225       | . primary-exp "." "%id:" unsigned
  226 primary-exp: . lvalue "(" "%exps:" unsigned ")"

    "__HERE__"    shift, and go to state 7
    "break"       shift, and go to state 8
    "closure"     shift, and go to state 9
    "const"       shift, and go to state 10
    "continue"    shift, and go to state 11
    "freezeif"    shift, and go to state 12
    "function"    shift, and go to state 13
    "if"          shift, and go to state 14
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "return"      shift, and go to state 19
    "stopif"      shift, and go to state 20
    "switch"      shift, and go to state 21
    "throw"       shift, and go to state 22
    "timeout"     shift, and go to state 23
    "try"         shift, and go to state 24
    "var"         shift, and go to state 25
    "waituntil"   shift, and go to state 26
    "watch"       shift, and go to state 27
    "whenever"    shift, and go to state 28
    "&"           shift, and go to state 29
    "every"       shift, and go to state 30
    "for"         shift, and go to state 31
    "loop"        shift, and go to state 32
    "while"       shift, and go to state 33
    "at"          shift, and go to state 34
    "identifier"  shift, and go to state 35
    "class"       shift, and go to state 36
    "package"     shift, and go to state 37
    "enum"        shift, and go to state 38
    "external"    shift, and go to state 39
    "import"      shift, and go to state 40
    "--"          shift, and go to state 41
    "++"          shift, and go to state 42
    "do"          shift, and go to state 43
    "assert"      shift, and go to state 44
    "detach"      shift, and go to state 45
    "disown"      shift, and go to state 46
    "new"         shift, and go to state 47
    "angle"       shift, and go to state 48
    "duration"    shift, and go to state 49
    "float"       shift, and go to state 50
    "string"      shift, and go to state 51
    "call"        shift, and go to state 52
    "this"        shift, and go to state 53
    "!"           shift, and go to state 54
    "compl"       shift, and go to state 55
    "-"           shift, and go to state 56
    "+"           shift, and go to state 57
    "<"           shift, and go to state 58
    "%unscope:"   shift, and go to state 59
    "%exp:"       shift, and go to state 60
    "%lvalue:"    shift, and go to state 61
    "%id:"        shift, and go to state 62

    stmt         go to state 281
    block        go to state 67
    exp          go to state 68
    routine      go to state 69
    primary-exp  go to state 70
    detach       go to state 71
    lvalue       go to state 72
    id           go to state 73
    bitor-exp    go to state 74
    new          go to state 75
    float-exp    go to state 76
    duration     go to state 77
    dictionary   go to state 78
    tuple        go to state 79
    literal-exp  go to state 80
    string       go to state 81
    unary-exp    go to state 82
    rel-exp      go to state 83


state 175

   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   37 exp: . "class" lvalue protos block
   38    | . "package" lvalue protos block
   52 routine: . "closure"
   53        | . "function"
   62 exp: . exp "=" exp
   63    | . exp "=" exp modifiers
   64    | . lvalue "+=" exp
   65    | . lvalue "-=" exp
   66    | . lvalue "*=" exp
   67    | . lvalue "/=" exp
   68    | . lvalue "^=" exp
   69    | . lvalue "%=" exp
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
  118            | . block
  119            | . "do" "(" exp ")" block
  120 detach: . "detach"
  121       | . "disown"
  122 primary-exp: . "assert" "(" exp ")"
  123            | . "assert" "{" claims "}"
  124            | . detach "(" exp ")"
  125            | . detach block
  126            | . "isdef" "(" k1_id ")"
  127            | . "watch" "(" exp ")"
  128 lvalue: . id
  129       | . primary-exp "." id
  130       | . primary-exp "." "*"
  131 primary-exp: . "&" id
  132            | . primary-exp "." "&" id
  133 id: . "identifier"
  134 bitor-exp: . "var" bitor-exp
  135          | . "const" "var" bitor-exp
  136 primary-exp: . lvalue
  137            | . lvalue args
  138 new: . "new" "identifier" args.opt
  139 bitor-exp: . new
  140 id: . "new"
  141 primary-exp: . routine formals block
  142 float-exp: . "float"
  143 duration: . "duration"
  144         | . duration "duration"
  150 dictionary: . "[" assocs "]"
  154 tuple: . "(" tuple.exps ")"
  159 literal-exp: . float-exp
  160            | . "angle"
  161            | . duration
  162            | . string
  163            | . "[" exps "]"
  164            | . "<" bitor-exps ">"
  165            | . dictionary
  166            | . tuple
  167 string: . "string"
  168       | . string "string"
  169 literal-exp: . "__HERE__"
  175 lvalue: . primary-exp "[" exps "]"
  175       | primary-exp "[" . exps "]"
  176 literal-exp: . "this"
  177            | . "call"
  178 primary-exp: . literal-exp
  179            | . "(" exp ")"
  180            | . "(" error ")"
  181            | . primary-exp "**" primary-exp
  182 unary-exp: . primary-exp
  183          | . "--" lvalue
  184          | . "++" lvalue
  185          | . "+" unary-exp
  186          | . "-" unary-exp
  187          | . "!" unary-exp
  188          | . "compl" unary-exp
  189 bitor-exp: . unary-exp
  190          | . bitor-exp "+" bitor-exp
  191          | . bitor-exp "-" bitor-exp
  192          | . bitor-exp "*" bitor-exp
  193          | . bitor-exp "/" bitor-exp
  194          | . bitor-exp "%" bitor-exp
  195          | . bitor-exp "^" bitor-exp
  196          | . bitor-exp "<<" bitor-exp
  197          | . bitor-exp "bitand" bitor-exp
  198          | . bitor-exp "bitor" bitor-exp
  199          | . bitor-exp ">>" bitor-exp
  210 rel-exp: . bitor-exp rel-ops
  213 exp: . rel-exp
  214    | . exp "&&" exp
  215    | . exp "||" exp
  216    | . exp "in" exp
  217    | . exp "!" "in" exp
  221    | . "%unscope:" unsigned
  222 primary-exp: . "%exp:" unsigned
  223 lvalue: . "%lvalue:" unsigned
  224       | . "%id:" unsigned
  225       | . primary-exp "." "%id:" unsigned
  226 primary-exp: . lvalue "(" "%exps:" unsigned ")"
  231 exps: .  ["]"]
  232     | . exps.1 comma.opt
  233 exps.1: . exp
  234       | . exps.1 "," exp

    "__HERE__"    shift, and go to state 7
    "closure"     shift, and go to state 9
    "const"       shift, and go to state 10
    "function"    shift, and go to state 13
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "var"         shift, and go to state 25
    "watch"       shift, and go to state 27
    "&"           shift, and go to state 29
    "identifier"  shift, and go to state 35
    "class"       shift, and go to state 36
    "package"     shift, and go to state 37
    "--"          shift, and go to state 41
    "++"          shift, and go to state 42
    "do"          shift, and go to state 43
    "assert"      shift, and go to state 44
    "detach"      shift, and go to state 45
    "disown"      shift, and go to state 46
    "new"         shift, and go to state 47
    "angle"       shift, and go to state 48
    "duration"    shift, and go to state 49
    "float"       shift, and go to state 50
    "string"      shift, and go to state 51
    "call"        shift, and go to state 52
    "this"        shift, and go to state 53
    "!"           shift, and go to state 54
    "compl"       shift, and go to state 55
    "-"           shift, and go to state 56
    "+"           shift, and go to state 57
    "<"           shift, and go to state 58
    "%unscope:"   shift, and go to state 59
    "%exp:"       shift, and go to state 60
    "%lvalue:"    shift, and go to state 61
    "%id:"        shift, and go to state 62

    $default  reduce using rule 231 (exps)

    block        go to state 67
    exp          go to state 282
    routine      go to state 100
    primary-exp  go to state 101
    detach       go to state 71
    lvalue       go to state 72
    id           go to state 102
    bitor-exp    go to state 74
    new          go to state 75
    float-exp    go to state 76
    duration     go to state 77
    dictionary   go to state 78
    tuple        go to state 79
    literal-exp  go to state 80
    string       go to state 81
    unary-exp    go to state 82
    rel-exp      go to state 83
    exps         go to state 283
    exps.1       go to state 107


state 176

  129 lvalue: primary-exp "." . id
  130       | primary-exp "." . "*"
  132 primary-exp: primary-exp "." . "&" id
  133 id: . "identifier"
  140   | . "new"
  225 lvalue: primary-exp "." . "%id:" unsigned

    "&"           shift, and go to state 284
    "identifier"  shift, and go to state 35
    "new"         shift, and go to state 125
    "*"           shift, and go to state 285
    "%id:"        shift, and go to state 286

    id  go to state 287


state 177

   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   52 routine: . "closure"
   53        | . "function"
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
  118            | . block
  119            | . "do" "(" exp ")" block
  120 detach: . "detach"
  121       | . "disown"
  122 primary-exp: . "assert" "(" exp ")"
  123            | . "assert" "{" claims "}"
  124            | . detach "(" exp ")"
  125            | . detach block
  126            | . "isdef" "(" k1_id ")"
  127            | . "watch" "(" exp ")"
  128 lvalue: . id
  129       | . primary-exp "." id
  130       | . primary-exp "." "*"
  131 primary-exp: . "&" id
  132            | . primary-exp "." "&" id
  133 id: . "identifier"
  136 primary-exp: . lvalue
  137            | . lvalue args
  140 id: . "new"
  141 primary-exp: . routine formals block
  142 float-exp: . "float"
  143 duration: . "duration"
  144         | . duration "duration"
  150 dictionary: . "[" assocs "]"
  154 tuple: . "(" tuple.exps ")"
  159 literal-exp: . float-exp
  160            | . "angle"
  161            | . duration
  162            | . string
  163            | . "[" exps "]"
  164            | . "<" bitor-exps ">"
  165            | . dictionary
  166            | . tuple
  167 string: . "string"
  168       | . string "string"
  169 literal-exp: . "__HERE__"
  175 lvalue: . primary-exp "[" exps "]"
  176 literal-exp: . "this"
  177            | . "call"
  178 primary-exp: . literal-exp
  179            | . "(" exp ")"
  180            | . "(" error ")"
  181            | . primary-exp "**" primary-exp
  181            | primary-exp "**" . primary-exp
  222            | . "%exp:" unsigned
  223 lvalue: . "%lvalue:" unsigned
  224       | . "%id:" unsigned
  225       | . primary-exp "." "%id:" unsigned
  226 primary-exp: . lvalue "(" "%exps:" unsigned ")"

    "__HERE__"    shift, and go to state 7
    "closure"     shift, and go to state 9
    "function"    shift, and go to state 13
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "watch"       shift, and go to state 27
    "&"           shift, and go to state 29
    "identifier"  shift, and go to state 35
    "do"          shift, and go to state 43
    "assert"      shift, and go to state 44
    "detach"      shift, and go to state 45
    "disown"      shift, and go to state 46
    "new"         shift, and go to state 125
    "angle"       shift, and go to state 48
    "duration"    shift, and go to state 49
    "float"       shift, and go to state 50
    "string"      shift, and go to state 51
    "call"        shift, and go to state 52
    "this"        shift, and go to state 53
    "<"           shift, and go to state 58
    "%exp:"       shift, and go to state 60
    "%lvalue:"    shift, and go to state 61
    "%id:"        shift, and go to state 62

    block        go to state 67
    routine      go to state 100
    primary-exp  go to state 288
    detach       go to state 71
    lvalue       go to state 120
    id           go to state 102
    float-exp    go to state 76
    duration     go to state 77
    dictionary   go to state 78
    tuple        go to state 79
    literal-exp  go to state 80
    string       go to state 81


state 178

   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   37 exp: . "class" lvalue protos block
   38    | . "package" lvalue protos block
   52 routine: . "closure"
   53        | . "function"
   62 exp: . exp "=" exp
   63    | . exp "=" exp modifiers
   64    | . lvalue "+=" exp
   65    | . lvalue "-=" exp
   66    | . lvalue "*=" exp
   67    | . lvalue "/=" exp
   68    | . lvalue "^=" exp
   69    | . lvalue "%=" exp
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
  118            | . block
  119            | . "do" "(" exp ")" block
  120 detach: . "detach"
  121       | . "disown"
  122 primary-exp: . "assert" "(" exp ")"
  123            | . "assert" "{" claims "}"
  124            | . detach "(" exp ")"
  124            | detach "(" . exp ")"
  125            | . detach block
  126            | . "isdef" "(" k1_id ")"
  127            | . "watch" "(" exp ")"
  128 lvalue: . id
  129       | . primary-exp "." id
  130       | . primary-exp "." "*"
  131 primary-exp: . "&" id
  132            | . primary-exp "." "&" id
  133 id: . "identifier"
  134 bitor-exp: . "var" bitor-exp
  135          | . "const" "var" bitor-exp
  136 primary-exp: . lvalue
  137            | . lvalue args
  138 new: . "new" "identifier" args.opt
  139 bitor-exp: . new
  140 id: . "new"
  141 primary-exp: . routine formals block
  142 float-exp: . "float"
  143 duration: . "duration"
  144         | . duration "duration"
  150 dictionary: . "[" assocs "]"
  154 tuple: . "(" tuple.exps ")"
  159 literal-exp: . float-exp
  160            | . "angle"
  161            | . duration
  162            | . string
  163            | . "[" exps "]"
  164            | . "<" bitor-exps ">"
  165            | . dictionary
  166            | . tuple
  167 string: . "string"
  168       | . string "string"
  169 literal-exp: . "__HERE__"
  175 lvalue: . primary-exp "[" exps "]"
  176 literal-exp: . "this"
  177            | . "call"
  178 primary-exp: . literal-exp
  179            | . "(" exp ")"
  180            | . "(" error ")"
  181            | . primary-exp "**" primary-exp
  182 unary-exp: . primary-exp
  183          | . "--" lvalue
  184          | . "++" lvalue
  185          | . "+" unary-exp
  186          | . "-" unary-exp
  187          | . "!" unary-exp
  188          | . "compl" unary-exp
  189 bitor-exp: . unary-exp
  190          | . bitor-exp "+" bitor-exp
  191          | . bitor-exp "-" bitor-exp
  192          | . bitor-exp "*" bitor-exp
  193          | . bitor-exp "/" bitor-exp
  194          | . bitor-exp "%" bitor-exp
  195          | . bitor-exp "^" bitor-exp
  196          | . bitor-exp "<<" bitor-exp
  197          | . bitor-exp "bitand" bitor-exp
  198          | . bitor-exp "bitor" bitor-exp
  199          | . bitor-exp ">>" bitor-exp
  210 rel-exp: . bitor-exp rel-ops
  213 exp: . rel-exp
  214    | . exp "&&" exp
  215    | . exp "||" exp
  216    | . exp "in" exp
  217    | . exp "!" "in" exp
  221    | . "%unscope:" unsigned
  222 primary-exp: . "%exp:" unsigned
  223 lvalue: . "%lvalue:" unsigned
  224       | . "%id:" unsigned
  225       | . primary-exp "." "%id:" unsigned
  226 primary-exp: . lvalue "(" "%exps:" unsigned ")"

    "__HERE__"    shift, and go to state 7
    "closure"     shift, and go to state 9
    "const"       shift, and go to state 10
    "function"    shift, and go to state 13
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "var"         shift, and go to state 25
    "watch"       shift, and go to state 27
    "&"           shift, and go to state 29
    "identifier"  shift, and go to state 35
    "class"       shift, and go to state 36
    "package"     shift, and go to state 37
    "--"          shift, and go to state 41
    "++"          shift, and go to state 42
    "do"          shift, and go to state 43
    "assert"      shift, and go to state 44
    "detach"      shift, and go to state 45
    "disown"      shift, and go to state 46
    "new"         shift, and go to state 47
    "angle"       shift, and go to state 48
    "duration"    shift, and go to state 49
    "float"       shift, and go to state 50
    "string"      shift, and go to state 51
    "call"        shift, and go to state 52
    "this"        shift, and go to state 53
    "!"           shift, and go to state 54
    "compl"       shift, and go to state 55
    "-"           shift, and go to state 56
    "+"           shift, and go to state 57
    "<"           shift, and go to state 58
    "%unscope:"   shift, and go to state 59
    "%exp:"       shift, and go to state 60
    "%lvalue:"    shift, and go to state 61
    "%id:"        shift, and go to state 62

    block        go to state 67
    exp          go to state 289
    routine      go to state 100
    primary-exp  go to state 101
    detach       go to state 71
    lvalue       go to state 72
    id           go to state 102
    bitor-exp    go to state 74
    new          go to state 75
    float-exp    go to state 76
    duration     go to state 77
    dictionary   go to state 78
    tuple        go to state 79
    literal-exp  go to state 80
    string       go to state 81
    unary-exp    go to state 82
    rel-exp      go to state 83


state 179

  125 primary-exp: detach block .

    $default  reduce using rule 125 (primary-exp)


state 180

   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   37 exp: . "class" lvalue protos block
   38    | . "package" lvalue protos block
   52 routine: . "closure"
   53        | . "function"
   62 exp: . exp "=" exp
   63    | . exp "=" exp modifiers
   64    | . lvalue "+=" exp
   65    | . lvalue "-=" exp
   66    | . lvalue "*=" exp
   67    | . lvalue "/=" exp
   68    | . lvalue "^=" exp
   69    | . lvalue "%=" exp
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
  118            | . block
  119            | . "do" "(" exp ")" block
  120 detach: . "detach"
  121       | . "disown"
  122 primary-exp: . "assert" "(" exp ")"
  123            | . "assert" "{" claims "}"
  124            | . detach "(" exp ")"
  125            | . detach block
  126            | . "isdef" "(" k1_id ")"
  127            | . "watch" "(" exp ")"
  128 lvalue: . id
  129       | . primary-exp "." id
  130       | . primary-exp "." "*"
  131 primary-exp: . "&" id
  132            | . primary-exp "." "&" id
  133 id: . "identifier"
  134 bitor-exp: . "var" bitor-exp
  135          | . "const" "var" bitor-exp
  136 primary-exp: . lvalue
  137            | . lvalue args
  138 new: . "new" "identifier" args.opt
  139 bitor-exp: . new
  140 id: . "new"
  141 primary-exp: . routine formals block
  142 float-exp: . "float"
  143 duration: . "duration"
  144         | . duration "duration"
  150 dictionary: . "[" assocs "]"
  154 tuple: . "(" tuple.exps ")"
  159 literal-exp: . float-exp
  160            | . "angle"
  161            | . duration
  162            | . string
  163            | . "[" exps "]"
  164            | . "<" bitor-exps ">"
  165            | . dictionary
  166            | . tuple
  167 string: . "string"
  168       | . string "string"
  169 literal-exp: . "__HERE__"
  175 lvalue: . primary-exp "[" exps "]"
  176 literal-exp: . "this"
  177            | . "call"
  178 primary-exp: . literal-exp
  179            | . "(" exp ")"
  180            | . "(" error ")"
  181            | . primary-exp "**" primary-exp
  182 unary-exp: . primary-exp
  183          | . "--" lvalue
  184          | . "++" lvalue
  185          | . "+" unary-exp
  186          | . "-" unary-exp
  187          | . "!" unary-exp
  188          | . "compl" unary-exp
  189 bitor-exp: . unary-exp
  190          | . bitor-exp "+" bitor-exp
  191          | . bitor-exp "-" bitor-exp
  192          | . bitor-exp "*" bitor-exp
  193          | . bitor-exp "/" bitor-exp
  194          | . bitor-exp "%" bitor-exp
  195          | . bitor-exp "^" bitor-exp
  196          | . bitor-exp "<<" bitor-exp
  197          | . bitor-exp "bitand" bitor-exp
  198          | . bitor-exp "bitor" bitor-exp
  199          | . bitor-exp ">>" bitor-exp
  210 rel-exp: . bitor-exp rel-ops
  213 exp: . rel-exp
  214    | . exp "&&" exp
  215    | . exp "||" exp
  216    | . exp "in" exp
  217    | . exp "!" "in" exp
  221    | . "%unscope:" unsigned
  222 primary-exp: . "%exp:" unsigned
  223 lvalue: . "%lvalue:" unsigned
  224       | . "%id:" unsigned
  225       | . primary-exp "." "%id:" unsigned
  226 primary-exp: . lvalue "(" "%exps:" unsigned ")"
  226            | lvalue "(" . "%exps:" unsigned ")"
  231 exps: .  [")"]
  232     | . exps.1 comma.opt
  233 exps.1: . exp
  234       | . exps.1 "," exp
  236 args: "(" . exps ")"

    "__HERE__"    shift, and go to state 7
    "closure"     shift, and go to state 9
    "const"       shift, and go to state 10
    "function"    shift, and go to state 13
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "var"         shift, and go to state 25
    "watch"       shift, and go to state 27
    "&"           shift, and go to state 29
    "identifier"  shift, and go to state 35
    "class"       shift, and go to state 36
    "package"     shift, and go to state 37
    "--"          shift, and go to state 41
    "++"          shift, and go to state 42
    "do"          shift, and go to state 43
    "assert"      shift, and go to state 44
    "detach"      shift, and go to state 45
    "disown"      shift, and go to state 46
    "new"         shift, and go to state 47
    "angle"       shift, and go to state 48
    "duration"    shift, and go to state 49
    "float"       shift, and go to state 50
    "string"      shift, and go to state 51
    "call"        shift, and go to state 52
    "this"        shift, and go to state 53
    "!"           shift, and go to state 54
    "compl"       shift, and go to state 55
    "-"           shift, and go to state 56
    "+"           shift, and go to state 57
    "<"           shift, and go to state 58
    "%unscope:"   shift, and go to state 59
    "%exp:"       shift, and go to state 60
    "%lvalue:"    shift, and go to state 61
    "%id:"        shift, and go to state 62
    "%exps:"      shift, and go to state 290

    $default  reduce using rule 231 (exps)

    block        go to state 67
    exp          go to state 282
    routine      go to state 100
    primary-exp  go to state 101
    detach       go to state 71
    lvalue       go to state 72
    id           go to state 102
    bitor-exp    go to state 74
    new          go to state 75
    float-exp    go to state 76
    duration     go to state 77
    dictionary   go to state 78
    tuple        go to state 79
    literal-exp  go to state 80
    string       go to state 81
    unary-exp    go to state 82
    rel-exp      go to state 83
    exps         go to state 291
    exps.1       go to state 107


state 181

   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   37 exp: . "class" lvalue protos block
   38    | . "package" lvalue protos block
   52 routine: . "closure"
   53        | . "function"
   62 exp: . exp "=" exp
   63    | . exp "=" exp modifiers
   64    | . lvalue "+=" exp
   65    | . lvalue "-=" exp
   66    | . lvalue "*=" exp
   67    | . lvalue "/=" exp
   68    | . lvalue "^=" exp
   68    | lvalue "^=" . exp
   69    | . lvalue "%=" exp
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
  118            | . block
  119            | . "do" "(" exp ")" block
  120 detach: . "detach"
  121       | . "disown"
  122 primary-exp: . "assert" "(" exp ")"
  123            | . "assert" "{" claims "}"
  124            | . detach "(" exp ")"
  125            | . detach block
  126            | . "isdef" "(" k1_id ")"
  127            | . "watch" "(" exp ")"
  128 lvalue: . id
  129       | . primary-exp "." id
  130       | . primary-exp "." "*"
  131 primary-exp: . "&" id
  132            | . primary-exp "." "&" id
  133 id: . "identifier"
  134 bitor-exp: . "var" bitor-exp
  135          | . "const" "var" bitor-exp
  136 primary-exp: . lvalue
  137            | . lvalue args
  138 new: . "new" "identifier" args.opt
  139 bitor-exp: . new
  140 id: . "new"
  141 primary-exp: . routine formals block
  142 float-exp: . "float"
  143 duration: . "duration"
  144         | . duration "duration"
  150 dictionary: . "[" assocs "]"
  154 tuple: . "(" tuple.exps ")"
  159 literal-exp: . float-exp
  160            | . "angle"
  161            | . duration
  162            | . string
  163            | . "[" exps "]"
  164            | . "<" bitor-exps ">"
  165            | . dictionary
  166            | . tuple
  167 string: . "string"
  168       | . string "string"
  169 literal-exp: . "__HERE__"
  175 lvalue: . primary-exp "[" exps "]"
  176 literal-exp: . "this"
  177            | . "call"
  178 primary-exp: . literal-exp
  179            | . "(" exp ")"
  180            | . "(" error ")"
  181            | . primary-exp "**" primary-exp
  182 unary-exp: . primary-exp
  183          | . "--" lvalue
  184          | . "++" lvalue
  185          | . "+" unary-exp
  186          | . "-" unary-exp
  187          | . "!" unary-exp
  188          | . "compl" unary-exp
  189 bitor-exp: . unary-exp
  190          | . bitor-exp "+" bitor-exp
  191          | . bitor-exp "-" bitor-exp
  192          | . bitor-exp "*" bitor-exp
  193          | . bitor-exp "/" bitor-exp
  194          | . bitor-exp "%" bitor-exp
  195          | . bitor-exp "^" bitor-exp
  196          | . bitor-exp "<<" bitor-exp
  197          | . bitor-exp "bitand" bitor-exp
  198          | . bitor-exp "bitor" bitor-exp
  199          | . bitor-exp ">>" bitor-exp
  210 rel-exp: . bitor-exp rel-ops
  213 exp: . rel-exp
  214    | . exp "&&" exp
  215    | . exp "||" exp
  216    | . exp "in" exp
  217    | . exp "!" "in" exp
  221    | . "%unscope:" unsigned
  222 primary-exp: . "%exp:" unsigned
  223 lvalue: . "%lvalue:" unsigned
  224       | . "%id:" unsigned
  225       | . primary-exp "." "%id:" unsigned
  226 primary-exp: . lvalue "(" "%exps:" unsigned ")"

    "__HERE__"    shift, and go to state 7
    "closure"     shift, and go to state 9
    "const"       shift, and go to state 10
    "function"    shift, and go to state 13
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "var"         shift, and go to state 25
    "watch"       shift, and go to state 27
    "&"           shift, and go to state 29
    "identifier"  shift, and go to state 35
    "class"       shift, and go to state 36
    "package"     shift, and go to state 37
    "--"          shift, and go to state 41
    "++"          shift, and go to state 42
    "do"          shift, and go to state 43
    "assert"      shift, and go to state 44
    "detach"      shift, and go to state 45
    "disown"      shift, and go to state 46
    "new"         shift, and go to state 47
    "angle"       shift, and go to state 48
    "duration"    shift, and go to state 49
    "float"       shift, and go to state 50
    "string"      shift, and go to state 51
    "call"        shift, and go to state 52
    "this"        shift, and go to state 53
    "!"           shift, and go to state 54
    "compl"       shift, and go to state 55
    "-"           shift, and go to state 56
    "+"           shift, and go to state 57
    "<"           shift, and go to state 58
    "%unscope:"   shift, and go to state 59
    "%exp:"       shift, and go to state 60
    "%lvalue:"    shift, and go to state 61
    "%id:"        shift, and go to state 62

    block        go to state 67
    exp          go to state 292
    routine      go to state 100
    primary-exp  go to state 101
    detach       go to state 71
    lvalue       go to state 72
    id           go to state 102
    bitor-exp    go to state 74
    new          go to state 75
    float-exp    go to state 76
    duration     go to state 77
    dictionary   go to state 78
    tuple        go to state 79
    literal-exp  go to state 80
    string       go to state 81
    unary-exp    go to state 82
    rel-exp      go to state 83


state 182

   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   37 exp: . "class" lvalue protos block
   38    | . "package" lvalue protos block
   52 routine: . "closure"
   53        | . "function"
   62 exp: . exp "=" exp
   63    | . exp "=" exp modifiers
   64    | . lvalue "+=" exp
   65    | . lvalue "-=" exp
   65    | lvalue "-=" . exp
   66    | . lvalue "*=" exp
   67    | . lvalue "/=" exp
   68    | . lvalue "^=" exp
   69    | . lvalue "%=" exp
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
  118            | . block
  119            | . "do" "(" exp ")" block
  120 detach: . "detach"
  121       | . "disown"
  122 primary-exp: . "assert" "(" exp ")"
  123            | . "assert" "{" claims "}"
  124            | . detach "(" exp ")"
  125            | . detach block
  126            | . "isdef" "(" k1_id ")"
  127            | . "watch" "(" exp ")"
  128 lvalue: . id
  129       | . primary-exp "." id
  130       | . primary-exp "." "*"
  131 primary-exp: . "&" id
  132            | . primary-exp "." "&" id
  133 id: . "identifier"
  134 bitor-exp: . "var" bitor-exp
  135          | . "const" "var" bitor-exp
  136 primary-exp: . lvalue
  137            | . lvalue args
  138 new: . "new" "identifier" args.opt
  139 bitor-exp: . new
  140 id: . "new"
  141 primary-exp: . routine formals block
  142 float-exp: . "float"
  143 duration: . "duration"
  144         | . duration "duration"
  150 dictionary: . "[" assocs "]"
  154 tuple: . "(" tuple.exps ")"
  159 literal-exp: . float-exp
  160            | . "angle"
  161            | . duration
  162            | . string
  163            | . "[" exps "]"
  164            | . "<" bitor-exps ">"
  165            | . dictionary
  166            | . tuple
  167 string: . "string"
  168       | . string "string"
  169 literal-exp: . "__HERE__"
  175 lvalue: . primary-exp "[" exps "]"
  176 literal-exp: . "this"
  177            | . "call"
  178 primary-exp: . literal-exp
  179            | . "(" exp ")"
  180            | . "(" error ")"
  181            | . primary-exp "**" primary-exp
  182 unary-exp: . primary-exp
  183          | . "--" lvalue
  184          | . "++" lvalue
  185          | . "+" unary-exp
  186          | . "-" unary-exp
  187          | . "!" unary-exp
  188          | . "compl" unary-exp
  189 bitor-exp: . unary-exp
  190          | . bitor-exp "+" bitor-exp
  191          | . bitor-exp "-" bitor-exp
  192          | . bitor-exp "*" bitor-exp
  193          | . bitor-exp "/" bitor-exp
  194          | . bitor-exp "%" bitor-exp
  195          | . bitor-exp "^" bitor-exp
  196          | . bitor-exp "<<" bitor-exp
  197          | . bitor-exp "bitand" bitor-exp
  198          | . bitor-exp "bitor" bitor-exp
  199          | . bitor-exp ">>" bitor-exp
  210 rel-exp: . bitor-exp rel-ops
  213 exp: . rel-exp
  214    | . exp "&&" exp
  215    | . exp "||" exp
  216    | . exp "in" exp
  217    | . exp "!" "in" exp
  221    | . "%unscope:" unsigned
  222 primary-exp: . "%exp:" unsigned
  223 lvalue: . "%lvalue:" unsigned
  224       | . "%id:" unsigned
  225       | . primary-exp "." "%id:" unsigned
  226 primary-exp: . lvalue "(" "%exps:" unsigned ")"

    "__HERE__"    shift, and go to state 7
    "closure"     shift, and go to state 9
    "const"       shift, and go to state 10
    "function"    shift, and go to state 13
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "var"         shift, and go to state 25
    "watch"       shift, and go to state 27
    "&"           shift, and go to state 29
    "identifier"  shift, and go to state 35
    "class"       shift, and go to state 36
    "package"     shift, and go to state 37
    "--"          shift, and go to state 41
    "++"          shift, and go to state 42
    "do"          shift, and go to state 43
    "assert"      shift, and go to state 44
    "detach"      shift, and go to state 45
    "disown"      shift, and go to state 46
    "new"         shift, and go to state 47
    "angle"       shift, and go to state 48
    "duration"    shift, and go to state 49
    "float"       shift, and go to state 50
    "string"      shift, and go to state 51
    "call"        shift, and go to state 52
    "this"        shift, and go to state 53
    "!"           shift, and go to state 54
    "compl"       shift, and go to state 55
    "-"           shift, and go to state 56
    "+"           shift, and go to state 57
    "<"           shift, and go to state 58
    "%unscope:"   shift, and go to state 59
    "%exp:"       shift, and go to state 60
    "%lvalue:"    shift, and go to state 61
    "%id:"        shift, and go to state 62

    block        go to state 67
    exp          go to state 293
    routine      go to state 100
    primary-exp  go to state 101
    detach       go to state 71
    lvalue       go to state 72
    id           go to state 102
    bitor-exp    go to state 74
    new          go to state 75
    float-exp    go to state 76
    duration     go to state 77
    dictionary   go to state 78
    tuple        go to state 79
    literal-exp  go to state 80
    string       go to state 81
    unary-exp    go to state 82
    rel-exp      go to state 83


state 183

   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   37 exp: . "class" lvalue protos block
   38    | . "package" lvalue protos block
   52 routine: . "closure"
   53        | . "function"
   62 exp: . exp "=" exp
   63    | . exp "=" exp modifiers
   64    | . lvalue "+=" exp
   65    | . lvalue "-=" exp
   66    | . lvalue "*=" exp
   67    | . lvalue "/=" exp
   68    | . lvalue "^=" exp
   69    | . lvalue "%=" exp
   69    | lvalue "%=" . exp
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
  118            | . block
  119            | . "do" "(" exp ")" block
  120 detach: . "detach"
  121       | . "disown"
  122 primary-exp: . "assert" "(" exp ")"
  123            | . "assert" "{" claims "}"
  124            | . detach "(" exp ")"
  125            | . detach block
  126            | . "isdef" "(" k1_id ")"
  127            | . "watch" "(" exp ")"
  128 lvalue: . id
  129       | . primary-exp "." id
  130       | . primary-exp "." "*"
  131 primary-exp: . "&" id
  132            | . primary-exp "." "&" id
  133 id: . "identifier"
  134 bitor-exp: . "var" bitor-exp
  135          | . "const" "var" bitor-exp
  136 primary-exp: . lvalue
  137            | . lvalue args
  138 new: . "new" "identifier" args.opt
  139 bitor-exp: . new
  140 id: . "new"
  141 primary-exp: . routine formals block
  142 float-exp: . "float"
  143 duration: . "duration"
  144         | . duration "duration"
  150 dictionary: . "[" assocs "]"
  154 tuple: . "(" tuple.exps ")"
  159 literal-exp: . float-exp
  160            | . "angle"
  161            | . duration
  162            | . string
  163            | . "[" exps "]"
  164            | . "<" bitor-exps ">"
  165            | . dictionary
  166            | . tuple
  167 string: . "string"
  168       | . string "string"
  169 literal-exp: . "__HERE__"
  175 lvalue: . primary-exp "[" exps "]"
  176 literal-exp: . "this"
  177            | . "call"
  178 primary-exp: . literal-exp
  179            | . "(" exp ")"
  180            | . "(" error ")"
  181            | . primary-exp "**" primary-exp
  182 unary-exp: . primary-exp
  183          | . "--" lvalue
  184          | . "++" lvalue
  185          | . "+" unary-exp
  186          | . "-" unary-exp
  187          | . "!" unary-exp
  188          | . "compl" unary-exp
  189 bitor-exp: . unary-exp
  190          | . bitor-exp "+" bitor-exp
  191          | . bitor-exp "-" bitor-exp
  192          | . bitor-exp "*" bitor-exp
  193          | . bitor-exp "/" bitor-exp
  194          | . bitor-exp "%" bitor-exp
  195          | . bitor-exp "^" bitor-exp
  196          | . bitor-exp "<<" bitor-exp
  197          | . bitor-exp "bitand" bitor-exp
  198          | . bitor-exp "bitor" bitor-exp
  199          | . bitor-exp ">>" bitor-exp
  210 rel-exp: . bitor-exp rel-ops
  213 exp: . rel-exp
  214    | . exp "&&" exp
  215    | . exp "||" exp
  216    | . exp "in" exp
  217    | . exp "!" "in" exp
  221    | . "%unscope:" unsigned
  222 primary-exp: . "%exp:" unsigned
  223 lvalue: . "%lvalue:" unsigned
  224       | . "%id:" unsigned
  225       | . primary-exp "." "%id:" unsigned
  226 primary-exp: . lvalue "(" "%exps:" unsigned ")"

    "__HERE__"    shift, and go to state 7
    "closure"     shift, and go to state 9
    "const"       shift, and go to state 10
    "function"    shift, and go to state 13
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "var"         shift, and go to state 25
    "watch"       shift, and go to state 27
    "&"           shift, and go to state 29
    "identifier"  shift, and go to state 35
    "class"       shift, and go to state 36
    "package"     shift, and go to state 37
    "--"          shift, and go to state 41
    "++"          shift, and go to state 42
    "do"          shift, and go to state 43
    "assert"      shift, and go to state 44
    "detach"      shift, and go to state 45
    "disown"      shift, and go to state 46
    "new"         shift, and go to state 47
    "angle"       shift, and go to state 48
    "duration"    shift, and go to state 49
    "float"       shift, and go to state 50
    "string"      shift, and go to state 51
    "call"        shift, and go to state 52
    "this"        shift, and go to state 53
    "!"           shift, and go to state 54
    "compl"       shift, and go to state 55
    "-"           shift, and go to state 56
    "+"           shift, and go to state 57
    "<"           shift, and go to state 58
    "%unscope:"   shift, and go to state 59
    "%exp:"       shift, and go to state 60
    "%lvalue:"    shift, and go to state 61
    "%id:"        shift, and go to state 62

    block        go to state 67
    exp          go to state 294
    routine      go to state 100
    primary-exp  go to state 101
    detach       go to state 71
    lvalue       go to state 72
    id           go to state 102
    bitor-exp    go to state 74
    new          go to state 75
    float-exp    go to state 76
    duration     go to state 77
    dictionary   go to state 78
    tuple        go to state 79
    literal-exp  go to state 80
    string       go to state 81
    unary-exp    go to state 82
    rel-exp      go to state 83


state 184

   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   37 exp: . "class" lvalue protos block
   38    | . "package" lvalue protos block
   52 routine: . "closure"
   53        | . "function"
   62 exp: . exp "=" exp
   63    | . exp "=" exp modifiers
   64    | . lvalue "+=" exp
   64    | lvalue "+=" . exp
   65    | . lvalue "-=" exp
   66    | . lvalue "*=" exp
   67    | . lvalue "/=" exp
   68    | . lvalue "^=" exp
   69    | . lvalue "%=" exp
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
  118            | . block
  119            | . "do" "(" exp ")" block
  120 detach: . "detach"
  121       | . "disown"
  122 primary-exp: . "assert" "(" exp ")"
  123            | . "assert" "{" claims "}"
  124            | . detach "(" exp ")"
  125            | . detach block
  126            | . "isdef" "(" k1_id ")"
  127            | . "watch" "(" exp ")"
  128 lvalue: . id
  129       | . primary-exp "." id
  130       | . primary-exp "." "*"
  131 primary-exp: . "&" id
  132            | . primary-exp "." "&" id
  133 id: . "identifier"
  134 bitor-exp: . "var" bitor-exp
  135          | . "const" "var" bitor-exp
  136 primary-exp: . lvalue
  137            | . lvalue args
  138 new: . "new" "identifier" args.opt
  139 bitor-exp: . new
  140 id: . "new"
  141 primary-exp: . routine formals block
  142 float-exp: . "float"
  143 duration: . "duration"
  144         | . duration "duration"
  150 dictionary: . "[" assocs "]"
  154 tuple: . "(" tuple.exps ")"
  159 literal-exp: . float-exp
  160            | . "angle"
  161            | . duration
  162            | . string
  163            | . "[" exps "]"
  164            | . "<" bitor-exps ">"
  165            | . dictionary
  166            | . tuple
  167 string: . "string"
  168       | . string "string"
  169 literal-exp: . "__HERE__"
  175 lvalue: . primary-exp "[" exps "]"
  176 literal-exp: . "this"
  177            | . "call"
  178 primary-exp: . literal-exp
  179            | . "(" exp ")"
  180            | . "(" error ")"
  181            | . primary-exp "**" primary-exp
  182 unary-exp: . primary-exp
  183          | . "--" lvalue
  184          | . "++" lvalue
  185          | . "+" unary-exp
  186          | . "-" unary-exp
  187          | . "!" unary-exp
  188          | . "compl" unary-exp
  189 bitor-exp: . unary-exp
  190          | . bitor-exp "+" bitor-exp
  191          | . bitor-exp "-" bitor-exp
  192          | . bitor-exp "*" bitor-exp
  193          | . bitor-exp "/" bitor-exp
  194          | . bitor-exp "%" bitor-exp
  195          | . bitor-exp "^" bitor-exp
  196          | . bitor-exp "<<" bitor-exp
  197          | . bitor-exp "bitand" bitor-exp
  198          | . bitor-exp "bitor" bitor-exp
  199          | . bitor-exp ">>" bitor-exp
  210 rel-exp: . bitor-exp rel-ops
  213 exp: . rel-exp
  214    | . exp "&&" exp
  215    | . exp "||" exp
  216    | . exp "in" exp
  217    | . exp "!" "in" exp
  221    | . "%unscope:" unsigned
  222 primary-exp: . "%exp:" unsigned
  223 lvalue: . "%lvalue:" unsigned
  224       | . "%id:" unsigned
  225       | . primary-exp "." "%id:" unsigned
  226 primary-exp: . lvalue "(" "%exps:" unsigned ")"

    "__HERE__"    shift, and go to state 7
    "closure"     shift, and go to state 9
    "const"       shift, and go to state 10
    "function"    shift, and go to state 13
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "var"         shift, and go to state 25
    "watch"       shift, and go to state 27
    "&"           shift, and go to state 29
    "identifier"  shift, and go to state 35
    "class"       shift, and go to state 36
    "package"     shift, and go to state 37
    "--"          shift, and go to state 41
    "++"          shift, and go to state 42
    "do"          shift, and go to state 43
    "assert"      shift, and go to state 44
    "detach"      shift, and go to state 45
    "disown"      shift, and go to state 46
    "new"         shift, and go to state 47
    "angle"       shift, and go to state 48
    "duration"    shift, and go to state 49
    "float"       shift, and go to state 50
    "string"      shift, and go to state 51
    "call"        shift, and go to state 52
    "this"        shift, and go to state 53
    "!"           shift, and go to state 54
    "compl"       shift, and go to state 55
    "-"           shift, and go to state 56
    "+"           shift, and go to state 57
    "<"           shift, and go to state 58
    "%unscope:"   shift, and go to state 59
    "%exp:"       shift, and go to state 60
    "%lvalue:"    shift, and go to state 61
    "%id:"        shift, and go to state 62

    block        go to state 67
    exp          go to state 295
    routine      go to state 100
    primary-exp  go to state 101
    detach       go to state 71
    lvalue       go to state 72
    id           go to state 102
    bitor-exp    go to state 74
    new          go to state 75
    float-exp    go to state 76
    duration     go to state 77
    dictionary   go to state 78
    tuple        go to state 79
    literal-exp  go to state 80
    string       go to state 81
    unary-exp    go to state 82
    rel-exp      go to state 83


state 185

   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   37 exp: . "class" lvalue protos block
   38    | . "package" lvalue protos block
   52 routine: . "closure"
   53        | . "function"
   62 exp: . exp "=" exp
   63    | . exp "=" exp modifiers
   64    | . lvalue "+=" exp
   65    | . lvalue "-=" exp
   66    | . lvalue "*=" exp
   67    | . lvalue "/=" exp
   67    | lvalue "/=" . exp
   68    | . lvalue "^=" exp
   69    | . lvalue "%=" exp
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
  118            | . block
  119            | . "do" "(" exp ")" block
  120 detach: . "detach"
  121       | . "disown"
  122 primary-exp: . "assert" "(" exp ")"
  123            | . "assert" "{" claims "}"
  124            | . detach "(" exp ")"
  125            | . detach block
  126            | . "isdef" "(" k1_id ")"
  127            | . "watch" "(" exp ")"
  128 lvalue: . id
  129       | . primary-exp "." id
  130       | . primary-exp "." "*"
  131 primary-exp: . "&" id
  132            | . primary-exp "." "&" id
  133 id: . "identifier"
  134 bitor-exp: . "var" bitor-exp
  135          | . "const" "var" bitor-exp
  136 primary-exp: . lvalue
  137            | . lvalue args
  138 new: . "new" "identifier" args.opt
  139 bitor-exp: . new
  140 id: . "new"
  141 primary-exp: . routine formals block
  142 float-exp: . "float"
  143 duration: . "duration"
  144         | . duration "duration"
  150 dictionary: . "[" assocs "]"
  154 tuple: . "(" tuple.exps ")"
  159 literal-exp: . float-exp
  160            | . "angle"
  161            | . duration
  162            | . string
  163            | . "[" exps "]"
  164            | . "<" bitor-exps ">"
  165            | . dictionary
  166            | . tuple
  167 string: . "string"
  168       | . string "string"
  169 literal-exp: . "__HERE__"
  175 lvalue: . primary-exp "[" exps "]"
  176 literal-exp: . "this"
  177            | . "call"
  178 primary-exp: . literal-exp
  179            | . "(" exp ")"
  180            | . "(" error ")"
  181            | . primary-exp "**" primary-exp
  182 unary-exp: . primary-exp
  183          | . "--" lvalue
  184          | . "++" lvalue
  185          | . "+" unary-exp
  186          | . "-" unary-exp
  187          | . "!" unary-exp
  188          | . "compl" unary-exp
  189 bitor-exp: . unary-exp
  190          | . bitor-exp "+" bitor-exp
  191          | . bitor-exp "-" bitor-exp
  192          | . bitor-exp "*" bitor-exp
  193          | . bitor-exp "/" bitor-exp
  194          | . bitor-exp "%" bitor-exp
  195          | . bitor-exp "^" bitor-exp
  196          | . bitor-exp "<<" bitor-exp
  197          | . bitor-exp "bitand" bitor-exp
  198          | . bitor-exp "bitor" bitor-exp
  199          | . bitor-exp ">>" bitor-exp
  210 rel-exp: . bitor-exp rel-ops
  213 exp: . rel-exp
  214    | . exp "&&" exp
  215    | . exp "||" exp
  216    | . exp "in" exp
  217    | . exp "!" "in" exp
  221    | . "%unscope:" unsigned
  222 primary-exp: . "%exp:" unsigned
  223 lvalue: . "%lvalue:" unsigned
  224       | . "%id:" unsigned
  225       | . primary-exp "." "%id:" unsigned
  226 primary-exp: . lvalue "(" "%exps:" unsigned ")"

    "__HERE__"    shift, and go to state 7
    "closure"     shift, and go to state 9
    "const"       shift, and go to state 10
    "function"    shift, and go to state 13
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "var"         shift, and go to state 25
    "watch"       shift, and go to state 27
    "&"           shift, and go to state 29
    "identifier"  shift, and go to state 35
    "class"       shift, and go to state 36
    "package"     shift, and go to state 37
    "--"          shift, and go to state 41
    "++"          shift, and go to state 42
    "do"          shift, and go to state 43
    "assert"      shift, and go to state 44
    "detach"      shift, and go to state 45
    "disown"      shift, and go to state 46
    "new"         shift, and go to state 47
    "angle"       shift, and go to state 48
    "duration"    shift, and go to state 49
    "float"       shift, and go to state 50
    "string"      shift, and go to state 51
    "call"        shift, and go to state 52
    "this"        shift, and go to state 53
    "!"           shift, and go to state 54
    "compl"       shift, and go to state 55
    "-"           shift, and go to state 56
    "+"           shift, and go to state 57
    "<"           shift, and go to state 58
    "%unscope:"   shift, and go to state 59
    "%exp:"       shift, and go to state 60
    "%lvalue:"    shift, and go to state 61
    "%id:"        shift, and go to state 62

    block        go to state 67
    exp          go to state 296
    routine      go to state 100
    primary-exp  go to state 101
    detach       go to state 71
    lvalue       go to state 72
    id           go to state 102
    bitor-exp    go to state 74
    new          go to state 75
    float-exp    go to state 76
    duration     go to state 77
    dictionary   go to state 78
    tuple        go to state 79
    literal-exp  go to state 80
    string       go to state 81
    unary-exp    go to state 82
    rel-exp      go to state 83


state 186

   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   37 exp: . "class" lvalue protos block
   38    | . "package" lvalue protos block
   52 routine: . "closure"
   53        | . "function"
   62 exp: . exp "=" exp
   63    | . exp "=" exp modifiers
   64    | . lvalue "+=" exp
   65    | . lvalue "-=" exp
   66    | . lvalue "*=" exp
   66    | lvalue "*=" . exp
   67    | . lvalue "/=" exp
   68    | . lvalue "^=" exp
   69    | . lvalue "%=" exp
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
  118            | . block
  119            | . "do" "(" exp ")" block
  120 detach: . "detach"
  121       | . "disown"
  122 primary-exp: . "assert" "(" exp ")"
  123            | . "assert" "{" claims "}"
  124            | . detach "(" exp ")"
  125            | . detach block
  126            | . "isdef" "(" k1_id ")"
  127            | . "watch" "(" exp ")"
  128 lvalue: . id
  129       | . primary-exp "." id
  130       | . primary-exp "." "*"
  131 primary-exp: . "&" id
  132            | . primary-exp "." "&" id
  133 id: . "identifier"
  134 bitor-exp: . "var" bitor-exp
  135          | . "const" "var" bitor-exp
  136 primary-exp: . lvalue
  137            | . lvalue args
  138 new: . "new" "identifier" args.opt
  139 bitor-exp: . new
  140 id: . "new"
  141 primary-exp: . routine formals block
  142 float-exp: . "float"
  143 duration: . "duration"
  144         | . duration "duration"
  150 dictionary: . "[" assocs "]"
  154 tuple: . "(" tuple.exps ")"
  159 literal-exp: . float-exp
  160            | . "angle"
  161            | . duration
  162            | . string
  163            | . "[" exps "]"
  164            | . "<" bitor-exps ">"
  165            | . dictionary
  166            | . tuple
  167 string: . "string"
  168       | . string "string"
  169 literal-exp: . "__HERE__"
  175 lvalue: . primary-exp "[" exps "]"
  176 literal-exp: . "this"
  177            | . "call"
  178 primary-exp: . literal-exp
  179            | . "(" exp ")"
  180            | . "(" error ")"
  181            | . primary-exp "**" primary-exp
  182 unary-exp: . primary-exp
  183          | . "--" lvalue
  184          | . "++" lvalue
  185          | . "+" unary-exp
  186          | . "-" unary-exp
  187          | . "!" unary-exp
  188          | . "compl" unary-exp
  189 bitor-exp: . unary-exp
  190          | . bitor-exp "+" bitor-exp
  191          | . bitor-exp "-" bitor-exp
  192          | . bitor-exp "*" bitor-exp
  193          | . bitor-exp "/" bitor-exp
  194          | . bitor-exp "%" bitor-exp
  195          | . bitor-exp "^" bitor-exp
  196          | . bitor-exp "<<" bitor-exp
  197          | . bitor-exp "bitand" bitor-exp
  198          | . bitor-exp "bitor" bitor-exp
  199          | . bitor-exp ">>" bitor-exp
  210 rel-exp: . bitor-exp rel-ops
  213 exp: . rel-exp
  214    | . exp "&&" exp
  215    | . exp "||" exp
  216    | . exp "in" exp
  217    | . exp "!" "in" exp
  221    | . "%unscope:" unsigned
  222 primary-exp: . "%exp:" unsigned
  223 lvalue: . "%lvalue:" unsigned
  224       | . "%id:" unsigned
  225       | . primary-exp "." "%id:" unsigned
  226 primary-exp: . lvalue "(" "%exps:" unsigned ")"

    "__HERE__"    shift, and go to state 7
    "closure"     shift, and go to state 9
    "const"       shift, and go to state 10
    "function"    shift, and go to state 13
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "var"         shift, and go to state 25
    "watch"       shift, and go to state 27
    "&"           shift, and go to state 29
    "identifier"  shift, and go to state 35
    "class"       shift, and go to state 36
    "package"     shift, and go to state 37
    "--"          shift, and go to state 41
    "++"          shift, and go to state 42
    "do"          shift, and go to state 43
    "assert"      shift, and go to state 44
    "detach"      shift, and go to state 45
    "disown"      shift, and go to state 46
    "new"         shift, and go to state 47
    "angle"       shift, and go to state 48
    "duration"    shift, and go to state 49
    "float"       shift, and go to state 50
    "string"      shift, and go to state 51
    "call"        shift, and go to state 52
    "this"        shift, and go to state 53
    "!"           shift, and go to state 54
    "compl"       shift, and go to state 55
    "-"           shift, and go to state 56
    "+"           shift, and go to state 57
    "<"           shift, and go to state 58
    "%unscope:"   shift, and go to state 59
    "%exp:"       shift, and go to state 60
    "%lvalue:"    shift, and go to state 61
    "%id:"        shift, and go to state 62

    block        go to state 67
    exp          go to state 297
    routine      go to state 100
    primary-exp  go to state 101
    detach       go to state 71
    lvalue       go to state 72
    id           go to state 102
    bitor-exp    go to state 74
    new          go to state 75
    float-exp    go to state 76
    duration     go to state 77
    dictionary   go to state 78
    tuple        go to state 79
    literal-exp  go to state 80
    string       go to state 81
    unary-exp    go to state 82
    rel-exp      go to state 83


state 187

   70 primary-exp: lvalue "--" .

    $default  reduce using rule 70 (primary-exp)


state 188

   71 primary-exp: lvalue "++" .

    $default  reduce using rule 71 (primary-exp)


state 189

   72 primary-exp: lvalue "->" . id
  133 id: . "identifier"
  140   | . "new"

    "identifier"  shift, and go to state 35
    "new"         shift, and go to state 125

    id  go to state 298


state 190

  137 primary-exp: lvalue args .

    $default  reduce using rule 137 (primary-exp)


state 191

   55 stmt: id id . formals block
  251 formals: .  ["{"]
  252        | . "(" formals.0 ")"

    "("  shift, and go to state 169

    $default  reduce using rule 251 (formals)

    formals  go to state 299


state 192

   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   52 routine: . "closure"
   53        | . "function"
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
  118            | . block
  119            | . "do" "(" exp ")" block
  120 detach: . "detach"
  121       | . "disown"
  122 primary-exp: . "assert" "(" exp ")"
  123            | . "assert" "{" claims "}"
  124            | . detach "(" exp ")"
  125            | . detach block
  126            | . "isdef" "(" k1_id ")"
  127            | . "watch" "(" exp ")"
  128 lvalue: . id
  129       | . primary-exp "." id
  130       | . primary-exp "." "*"
  131 primary-exp: . "&" id
  132            | . primary-exp "." "&" id
  133 id: . "identifier"
  134 bitor-exp: . "var" bitor-exp
  135          | . "const" "var" bitor-exp
  136 primary-exp: . lvalue
  137            | . lvalue args
  138 new: . "new" "identifier" args.opt
  139 bitor-exp: . new
  140 id: . "new"
  141 primary-exp: . routine formals block
  142 float-exp: . "float"
  143 duration: . "duration"
  144         | . duration "duration"
  150 dictionary: . "[" assocs "]"
  154 tuple: . "(" tuple.exps ")"
  159 literal-exp: . float-exp
  160            | . "angle"
  161            | . duration
  162            | . string
  163            | . "[" exps "]"
  164            | . "<" bitor-exps ">"
  165            | . dictionary
  166            | . tuple
  167 string: . "string"
  168       | . string "string"
  169 literal-exp: . "__HERE__"
  175 lvalue: . primary-exp "[" exps "]"
  176 literal-exp: . "this"
  177            | . "call"
  178 primary-exp: . literal-exp
  179            | . "(" exp ")"
  180            | . "(" error ")"
  181            | . primary-exp "**" primary-exp
  182 unary-exp: . primary-exp
  183          | . "--" lvalue
  184          | . "++" lvalue
  185          | . "+" unary-exp
  186          | . "-" unary-exp
  187          | . "!" unary-exp
  188          | . "compl" unary-exp
  189 bitor-exp: . unary-exp
  190          | . bitor-exp "+" bitor-exp
  191          | . bitor-exp "-" bitor-exp
  192          | . bitor-exp "*" bitor-exp
  193          | . bitor-exp "/" bitor-exp
  194          | . bitor-exp "%" bitor-exp
  195          | . bitor-exp "^" bitor-exp
  196          | . bitor-exp "<<" bitor-exp
  197          | . bitor-exp "bitand" bitor-exp
  197          | bitor-exp "bitand" . bitor-exp
  198          | . bitor-exp "bitor" bitor-exp
  199          | . bitor-exp ">>" bitor-exp
  222 primary-exp: . "%exp:" unsigned
  223 lvalue: . "%lvalue:" unsigned
  224       | . "%id:" unsigned
  225       | . primary-exp "." "%id:" unsigned
  226 primary-exp: . lvalue "(" "%exps:" unsigned ")"

    "__HERE__"    shift, and go to state 7
    "closure"     shift, and go to state 9
    "const"       shift, and go to state 10
    "function"    shift, and go to state 13
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "var"         shift, and go to state 25
    "watch"       shift, and go to state 27
    "&"           shift, and go to state 29
    "identifier"  shift, and go to state 35
    "--"          shift, and go to state 41
    "++"          shift, and go to state 42
    "do"          shift, and go to state 43
    "assert"      shift, and go to state 44
    "detach"      shift, and go to state 45
    "disown"      shift, and go to state 46
    "new"         shift, and go to state 47
    "angle"       shift, and go to state 48
    "duration"    shift, and go to state 49
    "float"       shift, and go to state 50
    "string"      shift, and go to state 51
    "call"        shift, and go to state 52
    "this"        shift, and go to state 53
    "!"           shift, and go to state 54
    "compl"       shift, and go to state 55
    "-"           shift, and go to state 56
    "+"           shift, and go to state 57
    "<"           shift, and go to state 58
    "%exp:"       shift, and go to state 60
    "%lvalue:"    shift, and go to state 61
    "%id:"        shift, and go to state 62

    block        go to state 67
    routine      go to state 100
    primary-exp  go to state 101
    detach       go to state 71
    lvalue       go to state 120
    id           go to state 102
    bitor-exp    go to state 300
    new          go to state 75
    float-exp    go to state 76
    duration     go to state 77
    dictionary   go to state 78
    tuple        go to state 79
    literal-exp  go to state 80
    string       go to state 81
    unary-exp    go to state 82


state 193

   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   52 routine: . "closure"
   53        | . "function"
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
  118            | . block
  119            | . "do" "(" exp ")" block
  120 detach: . "detach"
  121       | . "disown"
  122 primary-exp: . "assert" "(" exp ")"
  123            | . "assert" "{" claims "}"
  124            | . detach "(" exp ")"
  125            | . detach block
  126            | . "isdef" "(" k1_id ")"
  127            | . "watch" "(" exp ")"
  128 lvalue: . id
  129       | . primary-exp "." id
  130       | . primary-exp "." "*"
  131 primary-exp: . "&" id
  132            | . primary-exp "." "&" id
  133 id: . "identifier"
  134 bitor-exp: . "var" bitor-exp
  135          | . "const" "var" bitor-exp
  136 primary-exp: . lvalue
  137            | . lvalue args
  138 new: . "new" "identifier" args.opt
  139 bitor-exp: . new
  140 id: . "new"
  141 primary-exp: . routine formals block
  142 float-exp: . "float"
  143 duration: . "duration"
  144         | . duration "duration"
  150 dictionary: . "[" assocs "]"
  154 tuple: . "(" tuple.exps ")"
  159 literal-exp: . float-exp
  160            | . "angle"
  161            | . duration
  162            | . string
  163            | . "[" exps "]"
  164            | . "<" bitor-exps ">"
  165            | . dictionary
  166            | . tuple
  167 string: . "string"
  168       | . string "string"
  169 literal-exp: . "__HERE__"
  175 lvalue: . primary-exp "[" exps "]"
  176 literal-exp: . "this"
  177            | . "call"
  178 primary-exp: . literal-exp
  179            | . "(" exp ")"
  180            | . "(" error ")"
  181            | . primary-exp "**" primary-exp
  182 unary-exp: . primary-exp
  183          | . "--" lvalue
  184          | . "++" lvalue
  185          | . "+" unary-exp
  186          | . "-" unary-exp
  187          | . "!" unary-exp
  188          | . "compl" unary-exp
  189 bitor-exp: . unary-exp
  190          | . bitor-exp "+" bitor-exp
  191          | . bitor-exp "-" bitor-exp
  192          | . bitor-exp "*" bitor-exp
  193          | . bitor-exp "/" bitor-exp
  194          | . bitor-exp "%" bitor-exp
  195          | . bitor-exp "^" bitor-exp
  196          | . bitor-exp "<<" bitor-exp
  197          | . bitor-exp "bitand" bitor-exp
  198          | . bitor-exp "bitor" bitor-exp
  198          | bitor-exp "bitor" . bitor-exp
  199          | . bitor-exp ">>" bitor-exp
  222 primary-exp: . "%exp:" unsigned
  223 lvalue: . "%lvalue:" unsigned
  224       | . "%id:" unsigned
  225       | . primary-exp "." "%id:" unsigned
  226 primary-exp: . lvalue "(" "%exps:" unsigned ")"

    "__HERE__"    shift, and go to state 7
    "closure"     shift, and go to state 9
    "const"       shift, and go to state 10
    "function"    shift, and go to state 13
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "var"         shift, and go to state 25
    "watch"       shift, and go to state 27
    "&"           shift, and go to state 29
    "identifier"  shift, and go to state 35
    "--"          shift, and go to state 41
    "++"          shift, and go to state 42
    "do"          shift, and go to state 43
    "assert"      shift, and go to state 44
    "detach"      shift, and go to state 45
    "disown"      shift, and go to state 46
    "new"         shift, and go to state 47
    "angle"       shift, and go to state 48
    "duration"    shift, and go to state 49
    "float"       shift, and go to state 50
    "string"      shift, and go to state 51
    "call"        shift, and go to state 52
    "this"        shift, and go to state 53
    "!"           shift, and go to state 54
    "compl"       shift, and go to state 55
    "-"           shift, and go to state 56
    "+"           shift, and go to state 57
    "<"           shift, and go to state 58
    "%exp:"       shift, and go to state 60
    "%lvalue:"    shift, and go to state 61
    "%id:"        shift, and go to state 62

    block        go to state 67
    routine      go to state 100
    primary-exp  go to state 101
    detach       go to state 71
    lvalue       go to state 120
    id           go to state 102
    bitor-exp    go to state 301
    new          go to state 75
    float-exp    go to state 76
    duration     go to state 77
    dictionary   go to state 78
    tuple        go to state 79
    literal-exp  go to state 80
    string       go to state 81
    unary-exp    go to state 82


state 194

   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   52 routine: . "closure"
   53        | . "function"
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
  118            | . block
  119            | . "do" "(" exp ")" block
  120 detach: . "detach"
  121       | . "disown"
  122 primary-exp: . "assert" "(" exp ")"
  123            | . "assert" "{" claims "}"
  124            | . detach "(" exp ")"
  125            | . detach block
  126            | . "isdef" "(" k1_id ")"
  127            | . "watch" "(" exp ")"
  128 lvalue: . id
  129       | . primary-exp "." id
  130       | . primary-exp "." "*"
  131 primary-exp: . "&" id
  132            | . primary-exp "." "&" id
  133 id: . "identifier"
  134 bitor-exp: . "var" bitor-exp
  135          | . "const" "var" bitor-exp
  136 primary-exp: . lvalue
  137            | . lvalue args
  138 new: . "new" "identifier" args.opt
  139 bitor-exp: . new
  140 id: . "new"
  141 primary-exp: . routine formals block
  142 float-exp: . "float"
  143 duration: . "duration"
  144         | . duration "duration"
  150 dictionary: . "[" assocs "]"
  154 tuple: . "(" tuple.exps ")"
  159 literal-exp: . float-exp
  160            | . "angle"
  161            | . duration
  162            | . string
  163            | . "[" exps "]"
  164            | . "<" bitor-exps ">"
  165            | . dictionary
  166            | . tuple
  167 string: . "string"
  168       | . string "string"
  169 literal-exp: . "__HERE__"
  175 lvalue: . primary-exp "[" exps "]"
  176 literal-exp: . "this"
  177            | . "call"
  178 primary-exp: . literal-exp
  179            | . "(" exp ")"
  180            | . "(" error ")"
  181            | . primary-exp "**" primary-exp
  182 unary-exp: . primary-exp
  183          | . "--" lvalue
  184          | . "++" lvalue
  185          | . "+" unary-exp
  186          | . "-" unary-exp
  187          | . "!" unary-exp
  188          | . "compl" unary-exp
  189 bitor-exp: . unary-exp
  190          | . bitor-exp "+" bitor-exp
  191          | . bitor-exp "-" bitor-exp
  192          | . bitor-exp "*" bitor-exp
  193          | . bitor-exp "/" bitor-exp
  194          | . bitor-exp "%" bitor-exp
  195          | . bitor-exp "^" bitor-exp
  195          | bitor-exp "^" . bitor-exp
  196          | . bitor-exp "<<" bitor-exp
  197          | . bitor-exp "bitand" bitor-exp
  198          | . bitor-exp "bitor" bitor-exp
  199          | . bitor-exp ">>" bitor-exp
  222 primary-exp: . "%exp:" unsigned
  223 lvalue: . "%lvalue:" unsigned
  224       | . "%id:" unsigned
  225       | . primary-exp "." "%id:" unsigned
  226 primary-exp: . lvalue "(" "%exps:" unsigned ")"

    "__HERE__"    shift, and go to state 7
    "closure"     shift, and go to state 9
    "const"       shift, and go to state 10
    "function"    shift, and go to state 13
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "var"         shift, and go to state 25
    "watch"       shift, and go to state 27
    "&"           shift, and go to state 29
    "identifier"  shift, and go to state 35
    "--"          shift, and go to state 41
    "++"          shift, and go to state 42
    "do"          shift, and go to state 43
    "assert"      shift, and go to state 44
    "detach"      shift, and go to state 45
    "disown"      shift, and go to state 46
    "new"         shift, and go to state 47
    "angle"       shift, and go to state 48
    "duration"    shift, and go to state 49
    "float"       shift, and go to state 50
    "string"      shift, and go to state 51
    "call"        shift, and go to state 52
    "this"        shift, and go to state 53
    "!"           shift, and go to state 54
    "compl"       shift, and go to state 55
    "-"           shift, and go to state 56
    "+"           shift, and go to state 57
    "<"           shift, and go to state 58
    "%exp:"       shift, and go to state 60
    "%lvalue:"    shift, and go to state 61
    "%id:"        shift, and go to state 62

    block        go to state 67
    routine      go to state 100
    primary-exp  go to state 101
    detach       go to state 71
    lvalue       go to state 120
    id           go to state 102
    bitor-exp    go to state 302
    new          go to state 75
    float-exp    go to state 76
    duration     go to state 77
    dictionary   go to state 78
    tuple        go to state 79
    literal-exp  go to state 80
    string       go to state 81
    unary-exp    go to state 82


state 195

   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   52 routine: . "closure"
   53        | . "function"
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
  118            | . block
  119            | . "do" "(" exp ")" block
  120 detach: . "detach"
  121       | . "disown"
  122 primary-exp: . "assert" "(" exp ")"
  123            | . "assert" "{" claims "}"
  124            | . detach "(" exp ")"
  125            | . detach block
  126            | . "isdef" "(" k1_id ")"
  127            | . "watch" "(" exp ")"
  128 lvalue: . id
  129       | . primary-exp "." id
  130       | . primary-exp "." "*"
  131 primary-exp: . "&" id
  132            | . primary-exp "." "&" id
  133 id: . "identifier"
  134 bitor-exp: . "var" bitor-exp
  135          | . "const" "var" bitor-exp
  136 primary-exp: . lvalue
  137            | . lvalue args
  138 new: . "new" "identifier" args.opt
  139 bitor-exp: . new
  140 id: . "new"
  141 primary-exp: . routine formals block
  142 float-exp: . "float"
  143 duration: . "duration"
  144         | . duration "duration"
  150 dictionary: . "[" assocs "]"
  154 tuple: . "(" tuple.exps ")"
  159 literal-exp: . float-exp
  160            | . "angle"
  161            | . duration
  162            | . string
  163            | . "[" exps "]"
  164            | . "<" bitor-exps ">"
  165            | . dictionary
  166            | . tuple
  167 string: . "string"
  168       | . string "string"
  169 literal-exp: . "__HERE__"
  175 lvalue: . primary-exp "[" exps "]"
  176 literal-exp: . "this"
  177            | . "call"
  178 primary-exp: . literal-exp
  179            | . "(" exp ")"
  180            | . "(" error ")"
  181            | . primary-exp "**" primary-exp
  182 unary-exp: . primary-exp
  183          | . "--" lvalue
  184          | . "++" lvalue
  185          | . "+" unary-exp
  186          | . "-" unary-exp
  187          | . "!" unary-exp
  188          | . "compl" unary-exp
  189 bitor-exp: . unary-exp
  190          | . bitor-exp "+" bitor-exp
  191          | . bitor-exp "-" bitor-exp
  192          | . bitor-exp "*" bitor-exp
  193          | . bitor-exp "/" bitor-exp
  194          | . bitor-exp "%" bitor-exp
  195          | . bitor-exp "^" bitor-exp
  196          | . bitor-exp "<<" bitor-exp
  197          | . bitor-exp "bitand" bitor-exp
  198          | . bitor-exp "bitor" bitor-exp
  199          | . bitor-exp ">>" bitor-exp
  199          | bitor-exp ">>" . bitor-exp
  222 primary-exp: . "%exp:" unsigned
  223 lvalue: . "%lvalue:" unsigned
  224       | . "%id:" unsigned
  225       | . primary-exp "." "%id:" unsigned
  226 primary-exp: . lvalue "(" "%exps:" unsigned ")"

    "__HERE__"    shift, and go to state 7
    "closure"     shift, and go to state 9
    "const"       shift, and go to state 10
    "function"    shift, and go to state 13
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "var"         shift, and go to state 25
    "watch"       shift, and go to state 27
    "&"           shift, and go to state 29
    "identifier"  shift, and go to state 35
    "--"          shift, and go to state 41
    "++"          shift, and go to state 42
    "do"          shift, and go to state 43
    "assert"      shift, and go to state 44
    "detach"      shift, and go to state 45
    "disown"      shift, and go to state 46
    "new"         shift, and go to state 47
    "angle"       shift, and go to state 48
    "duration"    shift, and go to state 49
    "float"       shift, and go to state 50
    "string"      shift, and go to state 51
    "call"        shift, and go to state 52
    "this"        shift, and go to state 53
    "!"           shift, and go to state 54
    "compl"       shift, and go to state 55
    "-"           shift, and go to state 56
    "+"           shift, and go to state 57
    "<"           shift, and go to state 58
    "%exp:"       shift, and go to state 60
    "%lvalue:"    shift, and go to state 61
    "%id:"        shift, and go to state 62

    block        go to state 67
    routine      go to state 100
    primary-exp  go to state 101
    detach       go to state 71
    lvalue       go to state 120
    id           go to state 102
    bitor-exp    go to state 303
    new          go to state 75
    float-exp    go to state 76
    duration     go to state 77
    dictionary   go to state 78
    tuple        go to state 79
    literal-exp  go to state 80
    string       go to state 81
    unary-exp    go to state 82


state 196

   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   52 routine: . "closure"
   53        | . "function"
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
  118            | . block
  119            | . "do" "(" exp ")" block
  120 detach: . "detach"
  121       | . "disown"
  122 primary-exp: . "assert" "(" exp ")"
  123            | . "assert" "{" claims "}"
  124            | . detach "(" exp ")"
  125            | . detach block
  126            | . "isdef" "(" k1_id ")"
  127            | . "watch" "(" exp ")"
  128 lvalue: . id
  129       | . primary-exp "." id
  130       | . primary-exp "." "*"
  131 primary-exp: . "&" id
  132            | . primary-exp "." "&" id
  133 id: . "identifier"
  134 bitor-exp: . "var" bitor-exp
  135          | . "const" "var" bitor-exp
  136 primary-exp: . lvalue
  137            | . lvalue args
  138 new: . "new" "identifier" args.opt
  139 bitor-exp: . new
  140 id: . "new"
  141 primary-exp: . routine formals block
  142 float-exp: . "float"
  143 duration: . "duration"
  144         | . duration "duration"
  150 dictionary: . "[" assocs "]"
  154 tuple: . "(" tuple.exps ")"
  159 literal-exp: . float-exp
  160            | . "angle"
  161            | . duration
  162            | . string
  163            | . "[" exps "]"
  164            | . "<" bitor-exps ">"
  165            | . dictionary
  166            | . tuple
  167 string: . "string"
  168       | . string "string"
  169 literal-exp: . "__HERE__"
  175 lvalue: . primary-exp "[" exps "]"
  176 literal-exp: . "this"
  177            | . "call"
  178 primary-exp: . literal-exp
  179            | . "(" exp ")"
  180            | . "(" error ")"
  181            | . primary-exp "**" primary-exp
  182 unary-exp: . primary-exp
  183          | . "--" lvalue
  184          | . "++" lvalue
  185          | . "+" unary-exp
  186          | . "-" unary-exp
  187          | . "!" unary-exp
  188          | . "compl" unary-exp
  189 bitor-exp: . unary-exp
  190          | . bitor-exp "+" bitor-exp
  191          | . bitor-exp "-" bitor-exp
  192          | . bitor-exp "*" bitor-exp
  193          | . bitor-exp "/" bitor-exp
  194          | . bitor-exp "%" bitor-exp
  195          | . bitor-exp "^" bitor-exp
  196          | . bitor-exp "<<" bitor-exp
  196          | bitor-exp "<<" . bitor-exp
  197          | . bitor-exp "bitand" bitor-exp
  198          | . bitor-exp "bitor" bitor-exp
  199          | . bitor-exp ">>" bitor-exp
  222 primary-exp: . "%exp:" unsigned
  223 lvalue: . "%lvalue:" unsigned
  224       | . "%id:" unsigned
  225       | . primary-exp "." "%id:" unsigned
  226 primary-exp: . lvalue "(" "%exps:" unsigned ")"

    "__HERE__"    shift, and go to state 7
    "closure"     shift, and go to state 9
    "const"       shift, and go to state 10
    "function"    shift, and go to state 13
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "var"         shift, and go to state 25
    "watch"       shift, and go to state 27
    "&"           shift, and go to state 29
    "identifier"  shift, and go to state 35
    "--"          shift, and go to state 41
    "++"          shift, and go to state 42
    "do"          shift, and go to state 43
    "assert"      shift, and go to state 44
    "detach"      shift, and go to state 45
    "disown"      shift, and go to state 46
    "new"         shift, and go to state 47
    "angle"       shift, and go to state 48
    "duration"    shift, and go to state 49
    "float"       shift, and go to state 50
    "string"      shift, and go to state 51
    "call"        shift, and go to state 52
    "this"        shift, and go to state 53
    "!"           shift, and go to state 54
    "compl"       shift, and go to state 55
    "-"           shift, and go to state 56
    "+"           shift, and go to state 57
    "<"           shift, and go to state 58
    "%exp:"       shift, and go to state 60
    "%lvalue:"    shift, and go to state 61
    "%id:"        shift, and go to state 62

    block        go to state 67
    routine      go to state 100
    primary-exp  go to state 101
    detach       go to state 71
    lvalue       go to state 120
    id           go to state 102
    bitor-exp    go to state 304
    new          go to state 75
    float-exp    go to state 76
    duration     go to state 77
    dictionary   go to state 78
    tuple        go to state 79
    literal-exp  go to state 80
    string       go to state 81
    unary-exp    go to state 82


state 197

   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   52 routine: . "closure"
   53        | . "function"
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
  118            | . block
  119            | . "do" "(" exp ")" block
  120 detach: . "detach"
  121       | . "disown"
  122 primary-exp: . "assert" "(" exp ")"
  123            | . "assert" "{" claims "}"
  124            | . detach "(" exp ")"
  125            | . detach block
  126            | . "isdef" "(" k1_id ")"
  127            | . "watch" "(" exp ")"
  128 lvalue: . id
  129       | . primary-exp "." id
  130       | . primary-exp "." "*"
  131 primary-exp: . "&" id
  132            | . primary-exp "." "&" id
  133 id: . "identifier"
  134 bitor-exp: . "var" bitor-exp
  135          | . "const" "var" bitor-exp
  136 primary-exp: . lvalue
  137            | . lvalue args
  138 new: . "new" "identifier" args.opt
  139 bitor-exp: . new
  140 id: . "new"
  141 primary-exp: . routine formals block
  142 float-exp: . "float"
  143 duration: . "duration"
  144         | . duration "duration"
  150 dictionary: . "[" assocs "]"
  154 tuple: . "(" tuple.exps ")"
  159 literal-exp: . float-exp
  160            | . "angle"
  161            | . duration
  162            | . string
  163            | . "[" exps "]"
  164            | . "<" bitor-exps ">"
  165            | . dictionary
  166            | . tuple
  167 string: . "string"
  168       | . string "string"
  169 literal-exp: . "__HERE__"
  175 lvalue: . primary-exp "[" exps "]"
  176 literal-exp: . "this"
  177            | . "call"
  178 primary-exp: . literal-exp
  179            | . "(" exp ")"
  180            | . "(" error ")"
  181            | . primary-exp "**" primary-exp
  182 unary-exp: . primary-exp
  183          | . "--" lvalue
  184          | . "++" lvalue
  185          | . "+" unary-exp
  186          | . "-" unary-exp
  187          | . "!" unary-exp
  188          | . "compl" unary-exp
  189 bitor-exp: . unary-exp
  190          | . bitor-exp "+" bitor-exp
  191          | . bitor-exp "-" bitor-exp
  191          | bitor-exp "-" . bitor-exp
  192          | . bitor-exp "*" bitor-exp
  193          | . bitor-exp "/" bitor-exp
  194          | . bitor-exp "%" bitor-exp
  195          | . bitor-exp "^" bitor-exp
  196          | . bitor-exp "<<" bitor-exp
  197          | . bitor-exp "bitand" bitor-exp
  198          | . bitor-exp "bitor" bitor-exp
  199          | . bitor-exp ">>" bitor-exp
  222 primary-exp: . "%exp:" unsigned
  223 lvalue: . "%lvalue:" unsigned
  224       | . "%id:" unsigned
  225       | . primary-exp "." "%id:" unsigned
  226 primary-exp: . lvalue "(" "%exps:" unsigned ")"

    "__HERE__"    shift, and go to state 7
    "closure"     shift, and go to state 9
    "const"       shift, and go to state 10
    "function"    shift, and go to state 13
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "var"         shift, and go to state 25
    "watch"       shift, and go to state 27
    "&"           shift, and go to state 29
    "identifier"  shift, and go to state 35
    "--"          shift, and go to state 41
    "++"          shift, and go to state 42
    "do"          shift, and go to state 43
    "assert"      shift, and go to state 44
    "detach"      shift, and go to state 45
    "disown"      shift, and go to state 46
    "new"         shift, and go to state 47
    "angle"       shift, and go to state 48
    "duration"    shift, and go to state 49
    "float"       shift, and go to state 50
    "string"      shift, and go to state 51
    "call"        shift, and go to state 52
    "this"        shift, and go to state 53
    "!"           shift, and go to state 54
    "compl"       shift, and go to state 55
    "-"           shift, and go to state 56
    "+"           shift, and go to state 57
    "<"           shift, and go to state 58
    "%exp:"       shift, and go to state 60
    "%lvalue:"    shift, and go to state 61
    "%id:"        shift, and go to state 62

    block        go to state 67
    routine      go to state 100
    primary-exp  go to state 101
    detach       go to state 71
    lvalue       go to state 120
    id           go to state 102
    bitor-exp    go to state 305
    new          go to state 75
    float-exp    go to state 76
    duration     go to state 77
    dictionary   go to state 78
    tuple        go to state 79
    literal-exp  go to state 80
    string       go to state 81
    unary-exp    go to state 82


state 198

   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   52 routine: . "closure"
   53        | . "function"
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
  118            | . block
  119            | . "do" "(" exp ")" block
  120 detach: . "detach"
  121       | . "disown"
  122 primary-exp: . "assert" "(" exp ")"
  123            | . "assert" "{" claims "}"
  124            | . detach "(" exp ")"
  125            | . detach block
  126            | . "isdef" "(" k1_id ")"
  127            | . "watch" "(" exp ")"
  128 lvalue: . id
  129       | . primary-exp "." id
  130       | . primary-exp "." "*"
  131 primary-exp: . "&" id
  132            | . primary-exp "." "&" id
  133 id: . "identifier"
  134 bitor-exp: . "var" bitor-exp
  135          | . "const" "var" bitor-exp
  136 primary-exp: . lvalue
  137            | . lvalue args
  138 new: . "new" "identifier" args.opt
  139 bitor-exp: . new
  140 id: . "new"
  141 primary-exp: . routine formals block
  142 float-exp: . "float"
  143 duration: . "duration"
  144         | . duration "duration"
  150 dictionary: . "[" assocs "]"
  154 tuple: . "(" tuple.exps ")"
  159 literal-exp: . float-exp
  160            | . "angle"
  161            | . duration
  162            | . string
  163            | . "[" exps "]"
  164            | . "<" bitor-exps ">"
  165            | . dictionary
  166            | . tuple
  167 string: . "string"
  168       | . string "string"
  169 literal-exp: . "__HERE__"
  175 lvalue: . primary-exp "[" exps "]"
  176 literal-exp: . "this"
  177            | . "call"
  178 primary-exp: . literal-exp
  179            | . "(" exp ")"
  180            | . "(" error ")"
  181            | . primary-exp "**" primary-exp
  182 unary-exp: . primary-exp
  183          | . "--" lvalue
  184          | . "++" lvalue
  185          | . "+" unary-exp
  186          | . "-" unary-exp
  187          | . "!" unary-exp
  188          | . "compl" unary-exp
  189 bitor-exp: . unary-exp
  190          | . bitor-exp "+" bitor-exp
  191          | . bitor-exp "-" bitor-exp
  192          | . bitor-exp "*" bitor-exp
  193          | . bitor-exp "/" bitor-exp
  194          | . bitor-exp "%" bitor-exp
  194          | bitor-exp "%" . bitor-exp
  195          | . bitor-exp "^" bitor-exp
  196          | . bitor-exp "<<" bitor-exp
  197          | . bitor-exp "bitand" bitor-exp
  198          | . bitor-exp "bitor" bitor-exp
  199          | . bitor-exp ">>" bitor-exp
  222 primary-exp: . "%exp:" unsigned
  223 lvalue: . "%lvalue:" unsigned
  224       | . "%id:" unsigned
  225       | . primary-exp "." "%id:" unsigned
  226 primary-exp: . lvalue "(" "%exps:" unsigned ")"

    "__HERE__"    shift, and go to state 7
    "closure"     shift, and go to state 9
    "const"       shift, and go to state 10
    "function"    shift, and go to state 13
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "var"         shift, and go to state 25
    "watch"       shift, and go to state 27
    "&"           shift, and go to state 29
    "identifier"  shift, and go to state 35
    "--"          shift, and go to state 41
    "++"          shift, and go to state 42
    "do"          shift, and go to state 43
    "assert"      shift, and go to state 44
    "detach"      shift, and go to state 45
    "disown"      shift, and go to state 46
    "new"         shift, and go to state 47
    "angle"       shift, and go to state 48
    "duration"    shift, and go to state 49
    "float"       shift, and go to state 50
    "string"      shift, and go to state 51
    "call"        shift, and go to state 52
    "this"        shift, and go to state 53
    "!"           shift, and go to state 54
    "compl"       shift, and go to state 55
    "-"           shift, and go to state 56
    "+"           shift, and go to state 57
    "<"           shift, and go to state 58
    "%exp:"       shift, and go to state 60
    "%lvalue:"    shift, and go to state 61
    "%id:"        shift, and go to state 62

    block        go to state 67
    routine      go to state 100
    primary-exp  go to state 101
    detach       go to state 71
    lvalue       go to state 120
    id           go to state 102
    bitor-exp    go to state 306
    new          go to state 75
    float-exp    go to state 76
    duration     go to state 77
    dictionary   go to state 78
    tuple        go to state 79
    literal-exp  go to state 80
    string       go to state 81
    unary-exp    go to state 82


state 199

   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   52 routine: . "closure"
   53        | . "function"
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
  118            | . block
  119            | . "do" "(" exp ")" block
  120 detach: . "detach"
  121       | . "disown"
  122 primary-exp: . "assert" "(" exp ")"
  123            | . "assert" "{" claims "}"
  124            | . detach "(" exp ")"
  125            | . detach block
  126            | . "isdef" "(" k1_id ")"
  127            | . "watch" "(" exp ")"
  128 lvalue: . id
  129       | . primary-exp "." id
  130       | . primary-exp "." "*"
  131 primary-exp: . "&" id
  132            | . primary-exp "." "&" id
  133 id: . "identifier"
  134 bitor-exp: . "var" bitor-exp
  135          | . "const" "var" bitor-exp
  136 primary-exp: . lvalue
  137            | . lvalue args
  138 new: . "new" "identifier" args.opt
  139 bitor-exp: . new
  140 id: . "new"
  141 primary-exp: . routine formals block
  142 float-exp: . "float"
  143 duration: . "duration"
  144         | . duration "duration"
  150 dictionary: . "[" assocs "]"
  154 tuple: . "(" tuple.exps ")"
  159 literal-exp: . float-exp
  160            | . "angle"
  161            | . duration
  162            | . string
  163            | . "[" exps "]"
  164            | . "<" bitor-exps ">"
  165            | . dictionary
  166            | . tuple
  167 string: . "string"
  168       | . string "string"
  169 literal-exp: . "__HERE__"
  175 lvalue: . primary-exp "[" exps "]"
  176 literal-exp: . "this"
  177            | . "call"
  178 primary-exp: . literal-exp
  179            | . "(" exp ")"
  180            | . "(" error ")"
  181            | . primary-exp "**" primary-exp
  182 unary-exp: . primary-exp
  183          | . "--" lvalue
  184          | . "++" lvalue
  185          | . "+" unary-exp
  186          | . "-" unary-exp
  187          | . "!" unary-exp
  188          | . "compl" unary-exp
  189 bitor-exp: . unary-exp
  190          | . bitor-exp "+" bitor-exp
  190          | bitor-exp "+" . bitor-exp
  191          | . bitor-exp "-" bitor-exp
  192          | . bitor-exp "*" bitor-exp
  193          | . bitor-exp "/" bitor-exp
  194          | . bitor-exp "%" bitor-exp
  195          | . bitor-exp "^" bitor-exp
  196          | . bitor-exp "<<" bitor-exp
  197          | . bitor-exp "bitand" bitor-exp
  198          | . bitor-exp "bitor" bitor-exp
  199          | . bitor-exp ">>" bitor-exp
  222 primary-exp: . "%exp:" unsigned
  223 lvalue: . "%lvalue:" unsigned
  224       | . "%id:" unsigned
  225       | . primary-exp "." "%id:" unsigned
  226 primary-exp: . lvalue "(" "%exps:" unsigned ")"

    "__HERE__"    shift, and go to state 7
    "closure"     shift, and go to state 9
    "const"       shift, and go to state 10
    "function"    shift, and go to state 13
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "var"         shift, and go to state 25
    "watch"       shift, and go to state 27
    "&"           shift, and go to state 29
    "identifier"  shift, and go to state 35
    "--"          shift, and go to state 41
    "++"          shift, and go to state 42
    "do"          shift, and go to state 43
    "assert"      shift, and go to state 44
    "detach"      shift, and go to state 45
    "disown"      shift, and go to state 46
    "new"         shift, and go to state 47
    "angle"       shift, and go to state 48
    "duration"    shift, and go to state 49
    "float"       shift, and go to state 50
    "string"      shift, and go to state 51
    "call"        shift, and go to state 52
    "this"        shift, and go to state 53
    "!"           shift, and go to state 54
    "compl"       shift, and go to state 55
    "-"           shift, and go to state 56
    "+"           shift, and go to state 57
    "<"           shift, and go to state 58
    "%exp:"       shift, and go to state 60
    "%lvalue:"    shift, and go to state 61
    "%id:"        shift, and go to state 62

    block        go to state 67
    routine      go to state 100
    primary-exp  go to state 101
    detach       go to state 71
    lvalue       go to state 120
    id           go to state 102
    bitor-exp    go to state 307
    new          go to state 75
    float-exp    go to state 76
    duration     go to state 77
    dictionary   go to state 78
    tuple        go to state 79
    literal-exp  go to state 80
    string       go to state 81
    unary-exp    go to state 82


state 200

   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   52 routine: . "closure"
   53        | . "function"
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
  118            | . block
  119            | . "do" "(" exp ")" block
  120 detach: . "detach"
  121       | . "disown"
  122 primary-exp: . "assert" "(" exp ")"
  123            | . "assert" "{" claims "}"
  124            | . detach "(" exp ")"
  125            | . detach block
  126            | . "isdef" "(" k1_id ")"
  127            | . "watch" "(" exp ")"
  128 lvalue: . id
  129       | . primary-exp "." id
  130       | . primary-exp "." "*"
  131 primary-exp: . "&" id
  132            | . primary-exp "." "&" id
  133 id: . "identifier"
  134 bitor-exp: . "var" bitor-exp
  135          | . "const" "var" bitor-exp
  136 primary-exp: . lvalue
  137            | . lvalue args
  138 new: . "new" "identifier" args.opt
  139 bitor-exp: . new
  140 id: . "new"
  141 primary-exp: . routine formals block
  142 float-exp: . "float"
  143 duration: . "duration"
  144         | . duration "duration"
  150 dictionary: . "[" assocs "]"
  154 tuple: . "(" tuple.exps ")"
  159 literal-exp: . float-exp
  160            | . "angle"
  161            | . duration
  162            | . string
  163            | . "[" exps "]"
  164            | . "<" bitor-exps ">"
  165            | . dictionary
  166            | . tuple
  167 string: . "string"
  168       | . string "string"
  169 literal-exp: . "__HERE__"
  175 lvalue: . primary-exp "[" exps "]"
  176 literal-exp: . "this"
  177            | . "call"
  178 primary-exp: . literal-exp
  179            | . "(" exp ")"
  180            | . "(" error ")"
  181            | . primary-exp "**" primary-exp
  182 unary-exp: . primary-exp
  183          | . "--" lvalue
  184          | . "++" lvalue
  185          | . "+" unary-exp
  186          | . "-" unary-exp
  187          | . "!" unary-exp
  188          | . "compl" unary-exp
  189 bitor-exp: . unary-exp
  190          | . bitor-exp "+" bitor-exp
  191          | . bitor-exp "-" bitor-exp
  192          | . bitor-exp "*" bitor-exp
  193          | . bitor-exp "/" bitor-exp
  193          | bitor-exp "/" . bitor-exp
  194          | . bitor-exp "%" bitor-exp
  195          | . bitor-exp "^" bitor-exp
  196          | . bitor-exp "<<" bitor-exp
  197          | . bitor-exp "bitand" bitor-exp
  198          | . bitor-exp "bitor" bitor-exp
  199          | . bitor-exp ">>" bitor-exp
  222 primary-exp: . "%exp:" unsigned
  223 lvalue: . "%lvalue:" unsigned
  224       | . "%id:" unsigned
  225       | . primary-exp "." "%id:" unsigned
  226 primary-exp: . lvalue "(" "%exps:" unsigned ")"

    "__HERE__"    shift, and go to state 7
    "closure"     shift, and go to state 9
    "const"       shift, and go to state 10
    "function"    shift, and go to state 13
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "var"         shift, and go to state 25
    "watch"       shift, and go to state 27
    "&"           shift, and go to state 29
    "identifier"  shift, and go to state 35
    "--"          shift, and go to state 41
    "++"          shift, and go to state 42
    "do"          shift, and go to state 43
    "assert"      shift, and go to state 44
    "detach"      shift, and go to state 45
    "disown"      shift, and go to state 46
    "new"         shift, and go to state 47
    "angle"       shift, and go to state 48
    "duration"    shift, and go to state 49
    "float"       shift, and go to state 50
    "string"      shift, and go to state 51
    "call"        shift, and go to state 52
    "this"        shift, and go to state 53
    "!"           shift, and go to state 54
    "compl"       shift, and go to state 55
    "-"           shift, and go to state 56
    "+"           shift, and go to state 57
    "<"           shift, and go to state 58
    "%exp:"       shift, and go to state 60
    "%lvalue:"    shift, and go to state 61
    "%id:"        shift, and go to state 62

    block        go to state 67
    routine      go to state 100
    primary-exp  go to state 101
    detach       go to state 71
    lvalue       go to state 120
    id           go to state 102
    bitor-exp    go to state 308
    new          go to state 75
    float-exp    go to state 76
    duration     go to state 77
    dictionary   go to state 78
    tuple        go to state 79
    literal-exp  go to state 80
    string       go to state 81
    unary-exp    go to state 82


state 201

   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   52 routine: . "closure"
   53        | . "function"
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
  118            | . block
  119            | . "do" "(" exp ")" block
  120 detach: . "detach"
  121       | . "disown"
  122 primary-exp: . "assert" "(" exp ")"
  123            | . "assert" "{" claims "}"
  124            | . detach "(" exp ")"
  125            | . detach block
  126            | . "isdef" "(" k1_id ")"
  127            | . "watch" "(" exp ")"
  128 lvalue: . id
  129       | . primary-exp "." id
  130       | . primary-exp "." "*"
  131 primary-exp: . "&" id
  132            | . primary-exp "." "&" id
  133 id: . "identifier"
  134 bitor-exp: . "var" bitor-exp
  135          | . "const" "var" bitor-exp
  136 primary-exp: . lvalue
  137            | . lvalue args
  138 new: . "new" "identifier" args.opt
  139 bitor-exp: . new
  140 id: . "new"
  141 primary-exp: . routine formals block
  142 float-exp: . "float"
  143 duration: . "duration"
  144         | . duration "duration"
  150 dictionary: . "[" assocs "]"
  154 tuple: . "(" tuple.exps ")"
  159 literal-exp: . float-exp
  160            | . "angle"
  161            | . duration
  162            | . string
  163            | . "[" exps "]"
  164            | . "<" bitor-exps ">"
  165            | . dictionary
  166            | . tuple
  167 string: . "string"
  168       | . string "string"
  169 literal-exp: . "__HERE__"
  175 lvalue: . primary-exp "[" exps "]"
  176 literal-exp: . "this"
  177            | . "call"
  178 primary-exp: . literal-exp
  179            | . "(" exp ")"
  180            | . "(" error ")"
  181            | . primary-exp "**" primary-exp
  182 unary-exp: . primary-exp
  183          | . "--" lvalue
  184          | . "++" lvalue
  185          | . "+" unary-exp
  186          | . "-" unary-exp
  187          | . "!" unary-exp
  188          | . "compl" unary-exp
  189 bitor-exp: . unary-exp
  190          | . bitor-exp "+" bitor-exp
  191          | . bitor-exp "-" bitor-exp
  192          | . bitor-exp "*" bitor-exp
  192          | bitor-exp "*" . bitor-exp
  193          | . bitor-exp "/" bitor-exp
  194          | . bitor-exp "%" bitor-exp
  195          | . bitor-exp "^" bitor-exp
  196          | . bitor-exp "<<" bitor-exp
  197          | . bitor-exp "bitand" bitor-exp
  198          | . bitor-exp "bitor" bitor-exp
  199          | . bitor-exp ">>" bitor-exp
  222 primary-exp: . "%exp:" unsigned
  223 lvalue: . "%lvalue:" unsigned
  224       | . "%id:" unsigned
  225       | . primary-exp "." "%id:" unsigned
  226 primary-exp: . lvalue "(" "%exps:" unsigned ")"

    "__HERE__"    shift, and go to state 7
    "closure"     shift, and go to state 9
    "const"       shift, and go to state 10
    "function"    shift, and go to state 13
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "var"         shift, and go to state 25
    "watch"       shift, and go to state 27
    "&"           shift, and go to state 29
    "identifier"  shift, and go to state 35
    "--"          shift, and go to state 41
    "++"          shift, and go to state 42
    "do"          shift, and go to state 43
    "assert"      shift, and go to state 44
    "detach"      shift, and go to state 45
    "disown"      shift, and go to state 46
    "new"         shift, and go to state 47
    "angle"       shift, and go to state 48
    "duration"    shift, and go to state 49
    "float"       shift, and go to state 50
    "string"      shift, and go to state 51
    "call"        shift, and go to state 52
    "this"        shift, and go to state 53
    "!"           shift, and go to state 54
    "compl"       shift, and go to state 55
    "-"           shift, and go to state 56
    "+"           shift, and go to state 57
    "<"           shift, and go to state 58
    "%exp:"       shift, and go to state 60
    "%lvalue:"    shift, and go to state 61
    "%id:"        shift, and go to state 62

    block        go to state 67
    routine      go to state 100
    primary-exp  go to state 101
    detach       go to state 71
    lvalue       go to state 120
    id           go to state 102
    bitor-exp    go to state 309
    new          go to state 75
    float-exp    go to state 76
    duration     go to state 77
    dictionary   go to state 78
    tuple        go to state 79
    literal-exp  go to state 80
    string       go to state 81
    unary-exp    go to state 82


state 202

  200 rel-op: . "!="
  201       | . "!=="
  202       | . "<"
  203       | . "<="
  204       | . "=="
  205       | . "==="
  206       | . "=~="
  207       | . ">"
  208       | . ">="
  209       | . "~="
  210 rel-exp: bitor-exp rel-ops .  ["end of command", "=", "case", "catch", ":", "default", "else", "finally", "if", "in", "{", "onleave", "}", "]", ")", "~", ",", ";", "&", "|", "identifier", "=>", "?", "!", "&&", "||"]
  212 rel-ops: rel-ops . rel-op bitor-exp

    "=~="  shift, and go to state 310
    "=="   shift, and go to state 311
    "==="  shift, and go to state 312
    ">="   shift, and go to state 313
    ">"    shift, and go to state 314
    "<="   shift, and go to state 315
    "<"    shift, and go to state 316
    "!="   shift, and go to state 317
    "!=="  shift, and go to state 318
    "~="   shift, and go to state 319

    $default  reduce using rule 210 (rel-exp)

    rel-op  go to state 320


state 203

  144 duration: duration "duration" .

    $default  reduce using rule 144 (duration)


state 204

  168 string: string "string" .

    $default  reduce using rule 168 (string)


state 205

   14 stmts: stmts "," . cstmt.opt
   15 cstmt.opt: .  ["end of command", "case", "default", "}", ")", ",", ";"]
   16          | . cstmt
   17          | . cstmt "|"
   18 cstmt: . stmt
   19      | . cstmt "|" cstmt
   20      | . cstmt "&" cstmt
   23 stmt: . primary-exp ":" stmt
   24     | . exp
   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   37 exp: . "class" lvalue protos block
   38    | . "package" lvalue protos block
   43 stmt: . "enum" id "{" id.0 "}"
   47     | . "external" "identifier" "identifier"
   48     | . "external" "var" "identifier" "." "identifier" from "identifier"
   49     | . "external" event_or_function "(" unsigned ")" "identifier" "." "identifier" from "identifier"
   50     | . "import" lvalue
   51     | . exp "!" args.opt tilda.opt
   52 routine: . "closure"
   53        | . "function"
   54 stmt: . routine k1_id formals block
   55     | . id id formals block
   62 exp: . exp "=" exp
   63    | . exp "=" exp modifiers
   64    | . lvalue "+=" exp
   65    | . lvalue "-=" exp
   66    | . lvalue "*=" exp
   67    | . lvalue "/=" exp
   68    | . lvalue "^=" exp
   69    | . lvalue "%=" exp
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
   73 stmt: . "at" identifiers "(" exp tilda.opt ")" stmt onleave.opt
   74     | . "at" identifiers "(" event_match ")" stmt onleave.opt
   75     | . "every" "(" exp ")" stmt
   76     | . "if" "(" stmts ")" stmt else.opt
   77     | . "freezeif" "(" exp ")" stmt
   78     | . "stopif" "(" exp ")" stmt
   79     | . "switch" "(" exp ")" "{" cases default.opt "}"
   80     | . "timeout" "(" exp ")" stmt catch.opt else.opt finally.opt
   81     | . "return" exp.opt
   82     | . "break"
   83     | . "continue"
   84     | . "waituntil" "(" exp tilda.opt ")"
   85     | . "waituntil" "(" event_match ")"
   86     | . "whenever" "(" exp tilda.opt ")" stmt else.opt
   87     | . "whenever" "(" event_match ")" stmt else.opt
  108     | . "try" block catches.1 else.opt finally.opt
  109     | . "try" block "finally" block
  110     | . "throw" exp.opt
  111     | . "loop" stmt
  112     | . "for" "(" exp ")" stmt
  113     | . "for" "(" stmt.opt ";" exp ";" stmt.opt ")" stmt
  114     | . "for" "(" "var" "identifier" in_or_colon exp ")" stmt
  115     | . "while" "(" exp ")" stmt
  118 primary-exp: . block
  119            | . "do" "(" exp ")" block
  120 detach: . "detach"
  121       | . "disown"
  122 primary-exp: . "assert" "(" exp ")"
  123            | . "assert" "{" claims "}"
  124            | . detach "(" exp ")"
  125            | . detach block
  126            | . "isdef" "(" k1_id ")"
  127            | . "watch" "(" exp ")"
  128 lvalue: . id
  129       | . primary-exp "." id
  130       | . primary-exp "." "*"
  131 primary-exp: . "&" id
  132            | . primary-exp "." "&" id
  133 id: . "identifier"
  134 bitor-exp: . "var" bitor-exp
  135          | . "const" "var" bitor-exp
  136 primary-exp: . lvalue
  137            | . lvalue args
  138 new: . "new" "identifier" args.opt
  139 bitor-exp: . new
  140 id: . "new"
  141 primary-exp: . routine formals block
  142 float-exp: . "float"
  143 duration: . "duration"
  144         | . duration "duration"
  150 dictionary: . "[" assocs "]"
  154 tuple: . "(" tuple.exps ")"
  159 literal-exp: . float-exp
  160            | . "angle"
  161            | . duration
  162            | . string
  163            | . "[" exps "]"
  164            | . "<" bitor-exps ">"
  165            | . dictionary
  166            | . tuple
  167 string: . "string"
  168       | . string "string"
  169 literal-exp: . "__HERE__"
  175 lvalue: . primary-exp "[" exps "]"
  176 literal-exp: . "this"
  177            | . "call"
  178 primary-exp: . literal-exp
  179            | . "(" exp ")"
  180            | . "(" error ")"
  181            | . primary-exp "**" primary-exp
  182 unary-exp: . primary-exp
  183          | . "--" lvalue
  184          | . "++" lvalue
  185          | . "+" unary-exp
  186          | . "-" unary-exp
  187          | . "!" unary-exp
  188          | . "compl" unary-exp
  189 bitor-exp: . unary-exp
  190          | . bitor-exp "+" bitor-exp
  191          | . bitor-exp "-" bitor-exp
  192          | . bitor-exp "*" bitor-exp
  193          | . bitor-exp "/" bitor-exp
  194          | . bitor-exp "%" bitor-exp
  195          | . bitor-exp "^" bitor-exp
  196          | . bitor-exp "<<" bitor-exp
  197          | . bitor-exp "bitand" bitor-exp
  198          | . bitor-exp "bitor" bitor-exp
  199          | . bitor-exp ">>" bitor-exp
  210 rel-exp: . bitor-exp rel-ops
  213 exp: . rel-exp
  214    | . exp "&&" exp
  215    | . exp "||" exp
  216    | . exp "in" exp
  217    | . exp "!" "in" exp
  221    | . "%unscope:" unsigned
  222 primary-exp: . "%exp:" unsigned
  223 lvalue: . "%lvalue:" unsigned
  224       | . "%id:" unsigned
  225       | . primary-exp "." "%id:" unsigned
  226 primary-exp: . lvalue "(" "%exps:" unsigned ")"

    "__HERE__"    shift, and go to state 7
    "break"       shift, and go to state 8
    "closure"     shift, and go to state 9
    "const"       shift, and go to state 10
    "continue"    shift, and go to state 11
    "freezeif"    shift, and go to state 12
    "function"    shift, and go to state 13
    "if"          shift, and go to state 14
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "return"      shift, and go to state 19
    "stopif"      shift, and go to state 20
    "switch"      shift, and go to state 21
    "throw"       shift, and go to state 22
    "timeout"     shift, and go to state 23
    "try"         shift, and go to state 24
    "var"         shift, and go to state 25
    "waituntil"   shift, and go to state 26
    "watch"       shift, and go to state 27
    "whenever"    shift, and go to state 28
    "&"           shift, and go to state 29
    "every"       shift, and go to state 30
    "for"         shift, and go to state 31
    "loop"        shift, and go to state 32
    "while"       shift, and go to state 33
    "at"          shift, and go to state 34
    "identifier"  shift, and go to state 35
    "class"       shift, and go to state 36
    "package"     shift, and go to state 37
    "enum"        shift, and go to state 38
    "external"    shift, and go to state 39
    "import"      shift, and go to state 40
    "--"          shift, and go to state 41
    "++"          shift, and go to state 42
    "do"          shift, and go to state 43
    "assert"      shift, and go to state 44
    "detach"      shift, and go to state 45
    "disown"      shift, and go to state 46
    "new"         shift, and go to state 47
    "angle"       shift, and go to state 48
    "duration"    shift, and go to state 49
    "float"       shift, and go to state 50
    "string"      shift, and go to state 51
    "call"        shift, and go to state 52
    "this"        shift, and go to state 53
    "!"           shift, and go to state 54
    "compl"       shift, and go to state 55
    "-"           shift, and go to state 56
    "+"           shift, and go to state 57
    "<"           shift, and go to state 58
    "%unscope:"   shift, and go to state 59
    "%exp:"       shift, and go to state 60
    "%lvalue:"    shift, and go to state 61
    "%id:"        shift, and go to state 62

    $default  reduce using rule 15 (cstmt.opt)

    cstmt.opt    go to state 321
    cstmt        go to state 65
    stmt         go to state 66
    block        go to state 67
    exp          go to state 68
    routine      go to state 69
    primary-exp  go to state 70
    detach       go to state 71
    lvalue       go to state 72
    id           go to state 73
    bitor-exp    go to state 74
    new          go to state 75
    float-exp    go to state 76
    duration     go to state 77
    dictionary   go to state 78
    tuple        go to state 79
    literal-exp  go to state 80
    string       go to state 81
    unary-exp    go to state 82
    rel-exp      go to state 83


state 206

   13 stmts: stmts ";" . cstmt.opt
   15 cstmt.opt: .  ["end of command", "case", "default", "}", ")", ",", ";"]
   16          | . cstmt
   17          | . cstmt "|"
   18 cstmt: . stmt
   19      | . cstmt "|" cstmt
   20      | . cstmt "&" cstmt
   23 stmt: . primary-exp ":" stmt
   24     | . exp
   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   37 exp: . "class" lvalue protos block
   38    | . "package" lvalue protos block
   43 stmt: . "enum" id "{" id.0 "}"
   47     | . "external" "identifier" "identifier"
   48     | . "external" "var" "identifier" "." "identifier" from "identifier"
   49     | . "external" event_or_function "(" unsigned ")" "identifier" "." "identifier" from "identifier"
   50     | . "import" lvalue
   51     | . exp "!" args.opt tilda.opt
   52 routine: . "closure"
   53        | . "function"
   54 stmt: . routine k1_id formals block
   55     | . id id formals block
   62 exp: . exp "=" exp
   63    | . exp "=" exp modifiers
   64    | . lvalue "+=" exp
   65    | . lvalue "-=" exp
   66    | . lvalue "*=" exp
   67    | . lvalue "/=" exp
   68    | . lvalue "^=" exp
   69    | . lvalue "%=" exp
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
   73 stmt: . "at" identifiers "(" exp tilda.opt ")" stmt onleave.opt
   74     | . "at" identifiers "(" event_match ")" stmt onleave.opt
   75     | . "every" "(" exp ")" stmt
   76     | . "if" "(" stmts ")" stmt else.opt
   77     | . "freezeif" "(" exp ")" stmt
   78     | . "stopif" "(" exp ")" stmt
   79     | . "switch" "(" exp ")" "{" cases default.opt "}"
   80     | . "timeout" "(" exp ")" stmt catch.opt else.opt finally.opt
   81     | . "return" exp.opt
   82     | . "break"
   83     | . "continue"
   84     | . "waituntil" "(" exp tilda.opt ")"
   85     | . "waituntil" "(" event_match ")"
   86     | . "whenever" "(" exp tilda.opt ")" stmt else.opt
   87     | . "whenever" "(" event_match ")" stmt else.opt
  108     | . "try" block catches.1 else.opt finally.opt
  109     | . "try" block "finally" block
  110     | . "throw" exp.opt
  111     | . "loop" stmt
  112     | . "for" "(" exp ")" stmt
  113     | . "for" "(" stmt.opt ";" exp ";" stmt.opt ")" stmt
  114     | . "for" "(" "var" "identifier" in_or_colon exp ")" stmt
  115     | . "while" "(" exp ")" stmt
  118 primary-exp: . block
  119            | . "do" "(" exp ")" block
  120 detach: . "detach"
  121       | . "disown"
  122 primary-exp: . "assert" "(" exp ")"
  123            | . "assert" "{" claims "}"
  124            | . detach "(" exp ")"
  125            | . detach block
  126            | . "isdef" "(" k1_id ")"
  127            | . "watch" "(" exp ")"
  128 lvalue: . id
  129       | . primary-exp "." id
  130       | . primary-exp "." "*"
  131 primary-exp: . "&" id
  132            | . primary-exp "." "&" id
  133 id: . "identifier"
  134 bitor-exp: . "var" bitor-exp
  135          | . "const" "var" bitor-exp
  136 primary-exp: . lvalue
  137            | . lvalue args
  138 new: . "new" "identifier" args.opt
  139 bitor-exp: . new
  140 id: . "new"
  141 primary-exp: . routine formals block
  142 float-exp: . "float"
  143 duration: . "duration"
  144         | . duration "duration"
  150 dictionary: . "[" assocs "]"
  154 tuple: . "(" tuple.exps ")"
  159 literal-exp: . float-exp
  160            | . "angle"
  161            | . duration
  162            | . string
  163            | . "[" exps "]"
  164            | . "<" bitor-exps ">"
  165            | . dictionary
  166            | . tuple
  167 string: . "string"
  168       | . string "string"
  169 literal-exp: . "__HERE__"
  175 lvalue: . primary-exp "[" exps "]"
  176 literal-exp: . "this"
  177            | . "call"
  178 primary-exp: . literal-exp
  179            | . "(" exp ")"
  180            | . "(" error ")"
  181            | . primary-exp "**" primary-exp
  182 unary-exp: . primary-exp
  183          | . "--" lvalue
  184          | . "++" lvalue
  185          | . "+" unary-exp
  186          | . "-" unary-exp
  187          | . "!" unary-exp
  188          | . "compl" unary-exp
  189 bitor-exp: . unary-exp
  190          | . bitor-exp "+" bitor-exp
  191          | . bitor-exp "-" bitor-exp
  192          | . bitor-exp "*" bitor-exp
  193          | . bitor-exp "/" bitor-exp
  194          | . bitor-exp "%" bitor-exp
  195          | . bitor-exp "^" bitor-exp
  196          | . bitor-exp "<<" bitor-exp
  197          | . bitor-exp "bitand" bitor-exp
  198          | . bitor-exp "bitor" bitor-exp
  199          | . bitor-exp ">>" bitor-exp
  210 rel-exp: . bitor-exp rel-ops
  213 exp: . rel-exp
  214    | . exp "&&" exp
  215    | . exp "||" exp
  216    | . exp "in" exp
  217    | . exp "!" "in" exp
  221    | . "%unscope:" unsigned
  222 primary-exp: . "%exp:" unsigned
  223 lvalue: . "%lvalue:" unsigned
  224       | . "%id:" unsigned
  225       | . primary-exp "." "%id:" unsigned
  226 primary-exp: . lvalue "(" "%exps:" unsigned ")"

    "__HERE__"    shift, and go to state 7
    "break"       shift, and go to state 8
    "closure"     shift, and go to state 9
    "const"       shift, and go to state 10
    "continue"    shift, and go to state 11
    "freezeif"    shift, and go to state 12
    "function"    shift, and go to state 13
    "if"          shift, and go to state 14
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "return"      shift, and go to state 19
    "stopif"      shift, and go to state 20
    "switch"      shift, and go to state 21
    "throw"       shift, and go to state 22
    "timeout"     shift, and go to state 23
    "try"         shift, and go to state 24
    "var"         shift, and go to state 25
    "waituntil"   shift, and go to state 26
    "watch"       shift, and go to state 27
    "whenever"    shift, and go to state 28
    "&"           shift, and go to state 29
    "every"       shift, and go to state 30
    "for"         shift, and go to state 31
    "loop"        shift, and go to state 32
    "while"       shift, and go to state 33
    "at"          shift, and go to state 34
    "identifier"  shift, and go to state 35
    "class"       shift, and go to state 36
    "package"     shift, and go to state 37
    "enum"        shift, and go to state 38
    "external"    shift, and go to state 39
    "import"      shift, and go to state 40
    "--"          shift, and go to state 41
    "++"          shift, and go to state 42
    "do"          shift, and go to state 43
    "assert"      shift, and go to state 44
    "detach"      shift, and go to state 45
    "disown"      shift, and go to state 46
    "new"         shift, and go to state 47
    "angle"       shift, and go to state 48
    "duration"    shift, and go to state 49
    "float"       shift, and go to state 50
    "string"      shift, and go to state 51
    "call"        shift, and go to state 52
    "this"        shift, and go to state 53
    "!"           shift, and go to state 54
    "compl"       shift, and go to state 55
    "-"           shift, and go to state 56
    "+"           shift, and go to state 57
    "<"           shift, and go to state 58
    "%unscope:"   shift, and go to state 59
    "%exp:"       shift, and go to state 60
    "%lvalue:"    shift, and go to state 61
    "%id:"        shift, and go to state 62

    $default  reduce using rule 15 (cstmt.opt)

    cstmt.opt    go to state 322
    cstmt        go to state 65
    stmt         go to state 66
    block        go to state 67
    exp          go to state 68
    routine      go to state 69
    primary-exp  go to state 70
    detach       go to state 71
    lvalue       go to state 72
    id           go to state 73
    bitor-exp    go to state 74
    new          go to state 75
    float-exp    go to state 76
    duration     go to state 77
    dictionary   go to state 78
    tuple        go to state 79
    literal-exp  go to state 80
    string       go to state 81
    unary-exp    go to state 82
    rel-exp      go to state 83


state 207

  135 bitor-exp: "const" "var" bitor-exp .  ["end of command", "=", "case", "catch", ":", "default", "else", "finally", "if", "in", "{", "onleave", "}", "]", ")", "~", ",", ";", "&", "|", "identifier", "=>", "?", "!", "=~=", "==", "===", ">=", ">", "<=", "<", "!=", "!==", "~=", "&&", "||"]
  190          | bitor-exp . "+" bitor-exp
  191          | bitor-exp . "-" bitor-exp
  192          | bitor-exp . "*" bitor-exp
  193          | bitor-exp . "/" bitor-exp
  194          | bitor-exp . "%" bitor-exp
  195          | bitor-exp . "^" bitor-exp
  196          | bitor-exp . "<<" bitor-exp
  197          | bitor-exp . "bitand" bitor-exp
  198          | bitor-exp . "bitor" bitor-exp
  199          | bitor-exp . ">>" bitor-exp

    "bitand"  shift, and go to state 192
    "bitor"   shift, and go to state 193
    "^"       shift, and go to state 194
    ">>"      shift, and go to state 195
    "<<"      shift, and go to state 196
    "-"       shift, and go to state 197
    "%"       shift, and go to state 198
    "+"       shift, and go to state 199
    "/"       shift, and go to state 200
    "*"       shift, and go to state 201

    $default  reduce using rule 135 (bitor-exp)

    Conflict between rule 135 and token "bitand" resolved as shift ("var" < "bitand").
    Conflict between rule 135 and token "bitor" resolved as shift ("var" < "bitor").
    Conflict between rule 135 and token "^" resolved as shift ("var" < "^").
    Conflict between rule 135 and token ">>" resolved as shift ("var" < ">>").
    Conflict between rule 135 and token "<<" resolved as shift ("var" < "<<").
    Conflict between rule 135 and token "-" resolved as shift ("var" < "-").
    Conflict between rule 135 and token "%" resolved as shift ("var" < "%").
    Conflict between rule 135 and token "+" resolved as shift ("var" < "+").
    Conflict between rule 135 and token "/" resolved as shift ("var" < "/").
    Conflict between rule 135 and token "*" resolved as shift ("var" < "*").


state 208

   62 exp: exp . "=" exp
   63    | exp . "=" exp modifiers
   77 stmt: "freezeif" "(" exp . ")" stmt
  214 exp: exp . "&&" exp
  215    | exp . "||" exp
  216    | exp . "in" exp
  217    | exp . "!" "in" exp

    "="   shift, and go to state 164
    "in"  shift, and go to state 165
    ")"   shift, and go to state 323
    "!"   shift, and go to state 215
    "&&"  shift, and go to state 167
    "||"  shift, and go to state 168


state 209

   13 stmts: stmts . ";" cstmt.opt
   14      | stmts . "," cstmt.opt
   76 stmt: "if" "(" stmts . ")" stmt else.opt

    ")"  shift, and go to state 324
    ","  shift, and go to state 205
    ";"  shift, and go to state 206


state 210

   58 k1_id: k1_id . "." "identifier"
  126 primary-exp: "isdef" "(" k1_id . ")"

    "."  shift, and go to state 278
    ")"  shift, and go to state 325


state 211

   26 block: "{" error "}" .

    $default  reduce using rule 26 (block)


state 212

   25 block: "{" stmts "}" .

    $default  reduce using rule 25 (block)


state 213

   27 block: "{" id "~" . id "}"
  133 id: . "identifier"
  140   | . "new"

    "identifier"  shift, and go to state 35
    "new"         shift, and go to state 125

    id  go to state 326


state 214

   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   37 exp: . "class" lvalue protos block
   38    | . "package" lvalue protos block
   52 routine: . "closure"
   53        | . "function"
   62 exp: . exp "=" exp
   63    | . exp "=" exp modifiers
   64    | . lvalue "+=" exp
   65    | . lvalue "-=" exp
   66    | . lvalue "*=" exp
   67    | . lvalue "/=" exp
   68    | . lvalue "^=" exp
   69    | . lvalue "%=" exp
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
  118            | . block
  119            | . "do" "(" exp ")" block
  120 detach: . "detach"
  121       | . "disown"
  122 primary-exp: . "assert" "(" exp ")"
  123            | . "assert" "{" claims "}"
  124            | . detach "(" exp ")"
  125            | . detach block
  126            | . "isdef" "(" k1_id ")"
  127            | . "watch" "(" exp ")"
  128 lvalue: . id
  129       | . primary-exp "." id
  130       | . primary-exp "." "*"
  131 primary-exp: . "&" id
  132            | . primary-exp "." "&" id
  133 id: . "identifier"
  134 bitor-exp: . "var" bitor-exp
  135          | . "const" "var" bitor-exp
  136 primary-exp: . lvalue
  137            | . lvalue args
  138 new: . "new" "identifier" args.opt
  139 bitor-exp: . new
  140 id: . "new"
  141 primary-exp: . routine formals block
  142 float-exp: . "float"
  143 duration: . "duration"
  144         | . duration "duration"
  145 assoc: exp "=>" . exp
  150 dictionary: . "[" assocs "]"
  154 tuple: . "(" tuple.exps ")"
  159 literal-exp: . float-exp
  160            | . "angle"
  161            | . duration
  162            | . string
  163            | . "[" exps "]"
  164            | . "<" bitor-exps ">"
  165            | . dictionary
  166            | . tuple
  167 string: . "string"
  168       | . string "string"
  169 literal-exp: . "__HERE__"
  175 lvalue: . primary-exp "[" exps "]"
  176 literal-exp: . "this"
  177            | . "call"
  178 primary-exp: . literal-exp
  179            | . "(" exp ")"
  180            | . "(" error ")"
  181            | . primary-exp "**" primary-exp
  182 unary-exp: . primary-exp
  183          | . "--" lvalue
  184          | . "++" lvalue
  185          | . "+" unary-exp
  186          | . "-" unary-exp
  187          | . "!" unary-exp
  188          | . "compl" unary-exp
  189 bitor-exp: . unary-exp
  190          | . bitor-exp "+" bitor-exp
  191          | . bitor-exp "-" bitor-exp
  192          | . bitor-exp "*" bitor-exp
  193          | . bitor-exp "/" bitor-exp
  194          | . bitor-exp "%" bitor-exp
  195          | . bitor-exp "^" bitor-exp
  196          | . bitor-exp "<<" bitor-exp
  197          | . bitor-exp "bitand" bitor-exp
  198          | . bitor-exp "bitor" bitor-exp
  199          | . bitor-exp ">>" bitor-exp
  210 rel-exp: . bitor-exp rel-ops
  213 exp: . rel-exp
  214    | . exp "&&" exp
  215    | . exp "||" exp
  216    | . exp "in" exp
  217    | . exp "!" "in" exp
  221    | . "%unscope:" unsigned
  222 primary-exp: . "%exp:" unsigned
  223 lvalue: . "%lvalue:" unsigned
  224       | . "%id:" unsigned
  225       | . primary-exp "." "%id:" unsigned
  226 primary-exp: . lvalue "(" "%exps:" unsigned ")"

    "__HERE__"    shift, and go to state 7
    "closure"     shift, and go to state 9
    "const"       shift, and go to state 10
    "function"    shift, and go to state 13
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "var"         shift, and go to state 25
    "watch"       shift, and go to state 27
    "&"           shift, and go to state 29
    "identifier"  shift, and go to state 35
    "class"       shift, and go to state 36
    "package"     shift, and go to state 37
    "--"          shift, and go to state 41
    "++"          shift, and go to state 42
    "do"          shift, and go to state 43
    "assert"      shift, and go to state 44
    "detach"      shift, and go to state 45
    "disown"      shift, and go to state 46
    "new"         shift, and go to state 47
    "angle"       shift, and go to state 48
    "duration"    shift, and go to state 49
    "float"       shift, and go to state 50
    "string"      shift, and go to state 51
    "call"        shift, and go to state 52
    "this"        shift, and go to state 53
    "!"           shift, and go to state 54
    "compl"       shift, and go to state 55
    "-"           shift, and go to state 56
    "+"           shift, and go to state 57
    "<"           shift, and go to state 58
    "%unscope:"   shift, and go to state 59
    "%exp:"       shift, and go to state 60
    "%lvalue:"    shift, and go to state 61
    "%id:"        shift, and go to state 62

    block        go to state 67
    exp          go to state 327
    routine      go to state 100
    primary-exp  go to state 101
    detach       go to state 71
    lvalue       go to state 72
    id           go to state 102
    bitor-exp    go to state 74
    new          go to state 75
    float-exp    go to state 76
    duration     go to state 77
    dictionary   go to state 78
    tuple        go to state 79
    literal-exp  go to state 80
    string       go to state 81
    unary-exp    go to state 82
    rel-exp      go to state 83


state 215

  217 exp: exp "!" . "in" exp

    "in"  shift, and go to state 268


state 216

   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   37 exp: . "class" lvalue protos block
   38    | . "package" lvalue protos block
   52 routine: . "closure"
   53        | . "function"
   62 exp: . exp "=" exp
   63    | . exp "=" exp modifiers
   64    | . lvalue "+=" exp
   65    | . lvalue "-=" exp
   66    | . lvalue "*=" exp
   67    | . lvalue "/=" exp
   68    | . lvalue "^=" exp
   69    | . lvalue "%=" exp
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
  118            | . block
  119            | . "do" "(" exp ")" block
  120 detach: . "detach"
  121       | . "disown"
  122 primary-exp: . "assert" "(" exp ")"
  123            | . "assert" "{" claims "}"
  124            | . detach "(" exp ")"
  125            | . detach block
  126            | . "isdef" "(" k1_id ")"
  127            | . "watch" "(" exp ")"
  128 lvalue: . id
  129       | . primary-exp "." id
  130       | . primary-exp "." "*"
  131 primary-exp: . "&" id
  132            | . primary-exp "." "&" id
  133 id: . "identifier"
  134 bitor-exp: . "var" bitor-exp
  135          | . "const" "var" bitor-exp
  136 primary-exp: . lvalue
  137            | . lvalue args
  138 new: . "new" "identifier" args.opt
  139 bitor-exp: . new
  140 id: . "new"
  141 primary-exp: . routine formals block
  142 float-exp: . "float"
  143 duration: . "duration"
  144         | . duration "duration"
  145 assoc: . exp "=>" exp
  147 assocs.1: assocs.1 "," . assoc
  150 dictionary: . "[" assocs "]"
  154 tuple: . "(" tuple.exps ")"
  159 literal-exp: . float-exp
  160            | . "angle"
  161            | . duration
  162            | . string
  163            | . "[" exps "]"
  164            | . "<" bitor-exps ">"
  165            | . dictionary
  166            | . tuple
  167 string: . "string"
  168       | . string "string"
  169 literal-exp: . "__HERE__"
  175 lvalue: . primary-exp "[" exps "]"
  176 literal-exp: . "this"
  177            | . "call"
  178 primary-exp: . literal-exp
  179            | . "(" exp ")"
  180            | . "(" error ")"
  181            | . primary-exp "**" primary-exp
  182 unary-exp: . primary-exp
  183          | . "--" lvalue
  184          | . "++" lvalue
  185          | . "+" unary-exp
  186          | . "-" unary-exp
  187          | . "!" unary-exp
  188          | . "compl" unary-exp
  189 bitor-exp: . unary-exp
  190          | . bitor-exp "+" bitor-exp
  191          | . bitor-exp "-" bitor-exp
  192          | . bitor-exp "*" bitor-exp
  193          | . bitor-exp "/" bitor-exp
  194          | . bitor-exp "%" bitor-exp
  195          | . bitor-exp "^" bitor-exp
  196          | . bitor-exp "<<" bitor-exp
  197          | . bitor-exp "bitand" bitor-exp
  198          | . bitor-exp "bitor" bitor-exp
  199          | . bitor-exp ">>" bitor-exp
  210 rel-exp: . bitor-exp rel-ops
  213 exp: . rel-exp
  214    | . exp "&&" exp
  215    | . exp "||" exp
  216    | . exp "in" exp
  217    | . exp "!" "in" exp
  221    | . "%unscope:" unsigned
  222 primary-exp: . "%exp:" unsigned
  223 lvalue: . "%lvalue:" unsigned
  224       | . "%id:" unsigned
  225       | . primary-exp "." "%id:" unsigned
  226 primary-exp: . lvalue "(" "%exps:" unsigned ")"
  254 comma.opt: "," .  ["]"]

    "__HERE__"    shift, and go to state 7
    "closure"     shift, and go to state 9
    "const"       shift, and go to state 10
    "function"    shift, and go to state 13
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "var"         shift, and go to state 25
    "watch"       shift, and go to state 27
    "&"           shift, and go to state 29
    "identifier"  shift, and go to state 35
    "class"       shift, and go to state 36
    "package"     shift, and go to state 37
    "--"          shift, and go to state 41
    "++"          shift, and go to state 42
    "do"          shift, and go to state 43
    "assert"      shift, and go to state 44
    "detach"      shift, and go to state 45
    "disown"      shift, and go to state 46
    "new"         shift, and go to state 47
    "angle"       shift, and go to state 48
    "duration"    shift, and go to state 49
    "float"       shift, and go to state 50
    "string"      shift, and go to state 51
    "call"        shift, and go to state 52
    "this"        shift, and go to state 53
    "!"           shift, and go to state 54
    "compl"       shift, and go to state 55
    "-"           shift, and go to state 56
    "+"           shift, and go to state 57
    "<"           shift, and go to state 58
    "%unscope:"   shift, and go to state 59
    "%exp:"       shift, and go to state 60
    "%lvalue:"    shift, and go to state 61
    "%id:"        shift, and go to state 62

    $default  reduce using rule 254 (comma.opt)

    block        go to state 67
    exp          go to state 328
    routine      go to state 100
    primary-exp  go to state 101
    detach       go to state 71
    lvalue       go to state 72
    id           go to state 102
    bitor-exp    go to state 74
    new          go to state 75
    float-exp    go to state 76
    duration     go to state 77
    assoc        go to state 329
    dictionary   go to state 78
    tuple        go to state 79
    literal-exp  go to state 80
    string       go to state 81
    unary-exp    go to state 82
    rel-exp      go to state 83


state 217

  149 assocs: assocs.1 comma.opt .

    $default  reduce using rule 149 (assocs)


state 218

  150 dictionary: "[" assocs "]" .

    $default  reduce using rule 150 (dictionary)


state 219

  163 literal-exp: "[" exps "]" .

    $default  reduce using rule 163 (literal-exp)


state 220

   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   37 exp: . "class" lvalue protos block
   38    | . "package" lvalue protos block
   52 routine: . "closure"
   53        | . "function"
   62 exp: . exp "=" exp
   63    | . exp "=" exp modifiers
   64    | . lvalue "+=" exp
   65    | . lvalue "-=" exp
   66    | . lvalue "*=" exp
   67    | . lvalue "/=" exp
   68    | . lvalue "^=" exp
   69    | . lvalue "%=" exp
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
  118            | . block
  119            | . "do" "(" exp ")" block
  120 detach: . "detach"
  121       | . "disown"
  122 primary-exp: . "assert" "(" exp ")"
  123            | . "assert" "{" claims "}"
  124            | . detach "(" exp ")"
  125            | . detach block
  126            | . "isdef" "(" k1_id ")"
  127            | . "watch" "(" exp ")"
  128 lvalue: . id
  129       | . primary-exp "." id
  130       | . primary-exp "." "*"
  131 primary-exp: . "&" id
  132            | . primary-exp "." "&" id
  133 id: . "identifier"
  134 bitor-exp: . "var" bitor-exp
  135          | . "const" "var" bitor-exp
  136 primary-exp: . lvalue
  137            | . lvalue args
  138 new: . "new" "identifier" args.opt
  139 bitor-exp: . new
  140 id: . "new"
  141 primary-exp: . routine formals block
  142 float-exp: . "float"
  143 duration: . "duration"
  144         | . duration "duration"
  150 dictionary: . "[" assocs "]"
  154 tuple: . "(" tuple.exps ")"
  159 literal-exp: . float-exp
  160            | . "angle"
  161            | . duration
  162            | . string
  163            | . "[" exps "]"
  164            | . "<" bitor-exps ">"
  165            | . dictionary
  166            | . tuple
  167 string: . "string"
  168       | . string "string"
  169 literal-exp: . "__HERE__"
  175 lvalue: . primary-exp "[" exps "]"
  176 literal-exp: . "this"
  177            | . "call"
  178 primary-exp: . literal-exp
  179            | . "(" exp ")"
  180            | . "(" error ")"
  181            | . primary-exp "**" primary-exp
  182 unary-exp: . primary-exp
  183          | . "--" lvalue
  184          | . "++" lvalue
  185          | . "+" unary-exp
  186          | . "-" unary-exp
  187          | . "!" unary-exp
  188          | . "compl" unary-exp
  189 bitor-exp: . unary-exp
  190          | . bitor-exp "+" bitor-exp
  191          | . bitor-exp "-" bitor-exp
  192          | . bitor-exp "*" bitor-exp
  193          | . bitor-exp "/" bitor-exp
  194          | . bitor-exp "%" bitor-exp
  195          | . bitor-exp "^" bitor-exp
  196          | . bitor-exp "<<" bitor-exp
  197          | . bitor-exp "bitand" bitor-exp
  198          | . bitor-exp "bitor" bitor-exp
  199          | . bitor-exp ">>" bitor-exp
  210 rel-exp: . bitor-exp rel-ops
  213 exp: . rel-exp
  214    | . exp "&&" exp
  215    | . exp "||" exp
  216    | . exp "in" exp
  217    | . exp "!" "in" exp
  221    | . "%unscope:" unsigned
  222 primary-exp: . "%exp:" unsigned
  223 lvalue: . "%lvalue:" unsigned
  224       | . "%id:" unsigned
  225       | . primary-exp "." "%id:" unsigned
  226 primary-exp: . lvalue "(" "%exps:" unsigned ")"
  234 exps.1: exps.1 "," . exp
  254 comma.opt: "," .  ["]", ")"]

    "__HERE__"    shift, and go to state 7
    "closure"     shift, and go to state 9
    "const"       shift, and go to state 10
    "function"    shift, and go to state 13
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "var"         shift, and go to state 25
    "watch"       shift, and go to state 27
    "&"           shift, and go to state 29
    "identifier"  shift, and go to state 35
    "class"       shift, and go to state 36
    "package"     shift, and go to state 37
    "--"          shift, and go to state 41
    "++"          shift, and go to state 42
    "do"          shift, and go to state 43
    "assert"      shift, and go to state 44
    "detach"      shift, and go to state 45
    "disown"      shift, and go to state 46
    "new"         shift, and go to state 47
    "angle"       shift, and go to state 48
    "duration"    shift, and go to state 49
    "float"       shift, and go to state 50
    "string"      shift, and go to state 51
    "call"        shift, and go to state 52
    "this"        shift, and go to state 53
    "!"           shift, and go to state 54
    "compl"       shift, and go to state 55
    "-"           shift, and go to state 56
    "+"           shift, and go to state 57
    "<"           shift, and go to state 58
    "%unscope:"   shift, and go to state 59
    "%exp:"       shift, and go to state 60
    "%lvalue:"    shift, and go to state 61
    "%id:"        shift, and go to state 62

    $default  reduce using rule 254 (comma.opt)

    block        go to state 67
    exp          go to state 330
    routine      go to state 100
    primary-exp  go to state 101
    detach       go to state 71
    lvalue       go to state 72
    id           go to state 102
    bitor-exp    go to state 74
    new          go to state 75
    float-exp    go to state 76
    duration     go to state 77
    dictionary   go to state 78
    tuple        go to state 79
    literal-exp  go to state 80
    string       go to state 81
    unary-exp    go to state 82
    rel-exp      go to state 83


state 221

  232 exps: exps.1 comma.opt .

    $default  reduce using rule 232 (exps)


state 222

  180 primary-exp: "(" error ")" .

    $default  reduce using rule 180 (primary-exp)


state 223

  179 primary-exp: "(" exp ")" .

    $default  reduce using rule 179 (primary-exp)


state 224

  154 tuple: "(" tuple.exps ")" .

    $default  reduce using rule 154 (tuple)


state 225

   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   37 exp: . "class" lvalue protos block
   38    | . "package" lvalue protos block
   52 routine: . "closure"
   53        | . "function"
   62 exp: . exp "=" exp
   63    | . exp "=" exp modifiers
   64    | . lvalue "+=" exp
   65    | . lvalue "-=" exp
   66    | . lvalue "*=" exp
   67    | . lvalue "/=" exp
   68    | . lvalue "^=" exp
   69    | . lvalue "%=" exp
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
  118            | . block
  119            | . "do" "(" exp ")" block
  120 detach: . "detach"
  121       | . "disown"
  122 primary-exp: . "assert" "(" exp ")"
  123            | . "assert" "{" claims "}"
  124            | . detach "(" exp ")"
  125            | . detach block
  126            | . "isdef" "(" k1_id ")"
  127            | . "watch" "(" exp ")"
  128 lvalue: . id
  129       | . primary-exp "." id
  130       | . primary-exp "." "*"
  131 primary-exp: . "&" id
  132            | . primary-exp "." "&" id
  133 id: . "identifier"
  134 bitor-exp: . "var" bitor-exp
  135          | . "const" "var" bitor-exp
  136 primary-exp: . lvalue
  137            | . lvalue args
  138 new: . "new" "identifier" args.opt
  139 bitor-exp: . new
  140 id: . "new"
  141 primary-exp: . routine formals block
  142 float-exp: . "float"
  143 duration: . "duration"
  144         | . duration "duration"
  150 dictionary: . "[" assocs "]"
  152 tuple.exps: exps.1 "," .  [")"]
  154 tuple: . "(" tuple.exps ")"
  159 literal-exp: . float-exp
  160            | . "angle"
  161            | . duration
  162            | . string
  163            | . "[" exps "]"
  164            | . "<" bitor-exps ">"
  165            | . dictionary
  166            | . tuple
  167 string: . "string"
  168       | . string "string"
  169 literal-exp: . "__HERE__"
  175 lvalue: . primary-exp "[" exps "]"
  176 literal-exp: . "this"
  177            | . "call"
  178 primary-exp: . literal-exp
  179            | . "(" exp ")"
  180            | . "(" error ")"
  181            | . primary-exp "**" primary-exp
  182 unary-exp: . primary-exp
  183          | . "--" lvalue
  184          | . "++" lvalue
  185          | . "+" unary-exp
  186          | . "-" unary-exp
  187          | . "!" unary-exp
  188          | . "compl" unary-exp
  189 bitor-exp: . unary-exp
  190          | . bitor-exp "+" bitor-exp
  191          | . bitor-exp "-" bitor-exp
  192          | . bitor-exp "*" bitor-exp
  193          | . bitor-exp "/" bitor-exp
  194          | . bitor-exp "%" bitor-exp
  195          | . bitor-exp "^" bitor-exp
  196          | . bitor-exp "<<" bitor-exp
  197          | . bitor-exp "bitand" bitor-exp
  198          | . bitor-exp "bitor" bitor-exp
  199          | . bitor-exp ">>" bitor-exp
  210 rel-exp: . bitor-exp rel-ops
  213 exp: . rel-exp
  214    | . exp "&&" exp
  215    | . exp "||" exp
  216    | . exp "in" exp
  217    | . exp "!" "in" exp
  221    | . "%unscope:" unsigned
  222 primary-exp: . "%exp:" unsigned
  223 lvalue: . "%lvalue:" unsigned
  224       | . "%id:" unsigned
  225       | . primary-exp "." "%id:" unsigned
  226 primary-exp: . lvalue "(" "%exps:" unsigned ")"
  234 exps.1: exps.1 "," . exp
  235 exps.2: exps.1 "," . exp

    "__HERE__"    shift, and go to state 7
    "closure"     shift, and go to state 9
    "const"       shift, and go to state 10
    "function"    shift, and go to state 13
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "var"         shift, and go to state 25
    "watch"       shift, and go to state 27
    "&"           shift, and go to state 29
    "identifier"  shift, and go to state 35
    "class"       shift, and go to state 36
    "package"     shift, and go to state 37
    "--"          shift, and go to state 41
    "++"          shift, and go to state 42
    "do"          shift, and go to state 43
    "assert"      shift, and go to state 44
    "detach"      shift, and go to state 45
    "disown"      shift, and go to state 46
    "new"         shift, and go to state 47
    "angle"       shift, and go to state 48
    "duration"    shift, and go to state 49
    "float"       shift, and go to state 50
    "string"      shift, and go to state 51
    "call"        shift, and go to state 52
    "this"        shift, and go to state 53
    "!"           shift, and go to state 54
    "compl"       shift, and go to state 55
    "-"           shift, and go to state 56
    "+"           shift, and go to state 57
    "<"           shift, and go to state 58
    "%unscope:"   shift, and go to state 59
    "%exp:"       shift, and go to state 60
    "%lvalue:"    shift, and go to state 61
    "%id:"        shift, and go to state 62

    $default  reduce using rule 152 (tuple.exps)

    block        go to state 67
    exp          go to state 331
    routine      go to state 100
    primary-exp  go to state 101
    detach       go to state 71
    lvalue       go to state 72
    id           go to state 102
    bitor-exp    go to state 74
    new          go to state 75
    float-exp    go to state 76
    duration     go to state 77
    dictionary   go to state 78
    tuple        go to state 79
    literal-exp  go to state 80
    string       go to state 81
    unary-exp    go to state 82
    rel-exp      go to state 83


state 226

   62 exp: exp . "=" exp
   63    | exp . "=" exp modifiers
   78 stmt: "stopif" "(" exp . ")" stmt
  214 exp: exp . "&&" exp
  215    | exp . "||" exp
  216    | exp . "in" exp
  217    | exp . "!" "in" exp

    "="   shift, and go to state 164
    "in"  shift, and go to state 165
    ")"   shift, and go to state 332
    "!"   shift, and go to state 215
    "&&"  shift, and go to state 167
    "||"  shift, and go to state 168


state 227

   62 exp: exp . "=" exp
   63    | exp . "=" exp modifiers
   79 stmt: "switch" "(" exp . ")" "{" cases default.opt "}"
  214 exp: exp . "&&" exp
  215    | exp . "||" exp
  216    | exp . "in" exp
  217    | exp . "!" "in" exp

    "="   shift, and go to state 164
    "in"  shift, and go to state 165
    ")"   shift, and go to state 333
    "!"   shift, and go to state 215
    "&&"  shift, and go to state 167
    "||"  shift, and go to state 168


state 228

   62 exp: exp . "=" exp
   63    | exp . "=" exp modifiers
   80 stmt: "timeout" "(" exp . ")" stmt catch.opt else.opt finally.opt
  214 exp: exp . "&&" exp
  215    | exp . "||" exp
  216    | exp . "in" exp
  217    | exp . "!" "in" exp

    "="   shift, and go to state 164
    "in"  shift, and go to state 165
    ")"   shift, and go to state 334
    "!"   shift, and go to state 215
    "&&"  shift, and go to state 167
    "||"  shift, and go to state 168


state 229

  101 match.opt: .  ["{"]
  102          | . "(" match ")"
  103 catch: "catch" . match.opt block

    "("  shift, and go to state 335

    $default  reduce using rule 101 (match.opt)

    match.opt  go to state 336


state 230

   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
  109 stmt: "try" block "finally" . block

    "{"  shift, and go to state 16

    block  go to state 337


state 231

   90 else.opt: .  ["end of command", "case", "default", "finally", "onleave", "}", ")", ",", ";", "&", "|"]
   91         | . "else" stmt
   98 catches.1: catches.1 . catch
  103 catch: . "catch" match.opt block
  108 stmt: "try" block catches.1 . else.opt finally.opt

    "catch"  shift, and go to state 229
    "else"   shift, and go to state 338

    $default  reduce using rule 90 (else.opt)

    else.opt  go to state 339
    catch     go to state 340

    Conflict between rule 90 and token "catch" resolved as shift (EMPTY < "catch").
    Conflict between rule 90 and token "else" resolved as shift (EMPTY < "else").


state 232

   97 catches.1: catch .

    $default  reduce using rule 97 (catches.1)


state 233

   62 exp: exp . "=" exp
   63    | exp . "=" exp modifiers
   84 stmt: "waituntil" "(" exp . tilda.opt ")"
  170 event_match: exp . "?" args.opt tilda.opt guard.opt
  173 tilda.opt: .  [")"]
  174          | . "~" exp
  214 exp: exp . "&&" exp
  215    | exp . "||" exp
  216    | exp . "in" exp
  217    | exp . "!" "in" exp

    "="   shift, and go to state 164
    "in"  shift, and go to state 165
    "~"   shift, and go to state 341
    "?"   shift, and go to state 342
    "!"   shift, and go to state 215
    "&&"  shift, and go to state 167
    "||"  shift, and go to state 168

    $default  reduce using rule 173 (tilda.opt)

    tilda.opt  go to state 343


state 234

   85 stmt: "waituntil" "(" event_match . ")"

    ")"  shift, and go to state 344


state 235

   62 exp: exp . "=" exp
   63    | exp . "=" exp modifiers
  127 primary-exp: "watch" "(" exp . ")"
  214 exp: exp . "&&" exp
  215    | exp . "||" exp
  216    | exp . "in" exp
  217    | exp . "!" "in" exp

    "="   shift, and go to state 164
    "in"  shift, and go to state 165
    ")"   shift, and go to state 345
    "!"   shift, and go to state 215
    "&&"  shift, and go to state 167
    "||"  shift, and go to state 168


state 236

   62 exp: exp . "=" exp
   63    | exp . "=" exp modifiers
   86 stmt: "whenever" "(" exp . tilda.opt ")" stmt else.opt
  170 event_match: exp . "?" args.opt tilda.opt guard.opt
  173 tilda.opt: .  [")"]
  174          | . "~" exp
  214 exp: exp . "&&" exp
  215    | exp . "||" exp
  216    | exp . "in" exp
  217    | exp . "!" "in" exp

    "="   shift, and go to state 164
    "in"  shift, and go to state 165
    "~"   shift, and go to state 341
    "?"   shift, and go to state 342
    "!"   shift, and go to state 215
    "&&"  shift, and go to state 167
    "||"  shift, and go to state 168

    $default  reduce using rule 173 (tilda.opt)

    tilda.opt  go to state 346


state 237

   87 stmt: "whenever" "(" event_match . ")" stmt else.opt

    ")"  shift, and go to state 347


state 238

   62 exp: exp . "=" exp
   63    | exp . "=" exp modifiers
   75 stmt: "every" "(" exp . ")" stmt
  214 exp: exp . "&&" exp
  215    | exp . "||" exp
  216    | exp . "in" exp
  217    | exp . "!" "in" exp

    "="   shift, and go to state 164
    "in"  shift, and go to state 165
    ")"   shift, and go to state 348
    "!"   shift, and go to state 215
    "&&"  shift, and go to state 167
    "||"  shift, and go to state 168


state 239

   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   52 routine: . "closure"
   53        | . "function"
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
  114 stmt: "for" "(" "var" . "identifier" in_or_colon exp ")" stmt
  118 primary-exp: . block
  119            | . "do" "(" exp ")" block
  120 detach: . "detach"
  121       | . "disown"
  122 primary-exp: . "assert" "(" exp ")"
  123            | . "assert" "{" claims "}"
  124            | . detach "(" exp ")"
  125            | . detach block
  126            | . "isdef" "(" k1_id ")"
  127            | . "watch" "(" exp ")"
  128 lvalue: . id
  129       | . primary-exp "." id
  130       | . primary-exp "." "*"
  131 primary-exp: . "&" id
  132            | . primary-exp "." "&" id
  133 id: . "identifier"
  134 bitor-exp: . "var" bitor-exp
  134          | "var" . bitor-exp
  135          | . "const" "var" bitor-exp
  136 primary-exp: . lvalue
  137            | . lvalue args
  138 new: . "new" "identifier" args.opt
  139 bitor-exp: . new
  140 id: . "new"
  141 primary-exp: . routine formals block
  142 float-exp: . "float"
  143 duration: . "duration"
  144         | . duration "duration"
  150 dictionary: . "[" assocs "]"
  154 tuple: . "(" tuple.exps ")"
  159 literal-exp: . float-exp
  160            | . "angle"
  161            | . duration
  162            | . string
  163            | . "[" exps "]"
  164            | . "<" bitor-exps ">"
  165            | . dictionary
  166            | . tuple
  167 string: . "string"
  168       | . string "string"
  169 literal-exp: . "__HERE__"
  175 lvalue: . primary-exp "[" exps "]"
  176 literal-exp: . "this"
  177            | . "call"
  178 primary-exp: . literal-exp
  179            | . "(" exp ")"
  180            | . "(" error ")"
  181            | . primary-exp "**" primary-exp
  182 unary-exp: . primary-exp
  183          | . "--" lvalue
  184          | . "++" lvalue
  185          | . "+" unary-exp
  186          | . "-" unary-exp
  187          | . "!" unary-exp
  188          | . "compl" unary-exp
  189 bitor-exp: . unary-exp
  190          | . bitor-exp "+" bitor-exp
  191          | . bitor-exp "-" bitor-exp
  192          | . bitor-exp "*" bitor-exp
  193          | . bitor-exp "/" bitor-exp
  194          | . bitor-exp "%" bitor-exp
  195          | . bitor-exp "^" bitor-exp
  196          | . bitor-exp "<<" bitor-exp
  197          | . bitor-exp "bitand" bitor-exp
  198          | . bitor-exp "bitor" bitor-exp
  199          | . bitor-exp ">>" bitor-exp
  222 primary-exp: . "%exp:" unsigned
  223 lvalue: . "%lvalue:" unsigned
  224       | . "%id:" unsigned
  225       | . primary-exp "." "%id:" unsigned
  226 primary-exp: . lvalue "(" "%exps:" unsigned ")"

    "__HERE__"    shift, and go to state 7
    "closure"     shift, and go to state 9
    "const"       shift, and go to state 10
    "function"    shift, and go to state 13
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "var"         shift, and go to state 25
    "watch"       shift, and go to state 27
    "&"           shift, and go to state 29
    "identifier"  shift, and go to state 349
    "--"          shift, and go to state 41
    "++"          shift, and go to state 42
    "do"          shift, and go to state 43
    "assert"      shift, and go to state 44
    "detach"      shift, and go to state 45
    "disown"      shift, and go to state 46
    "new"         shift, and go to state 47
    "angle"       shift, and go to state 48
    "duration"    shift, and go to state 49
    "float"       shift, and go to state 50
    "string"      shift, and go to state 51
    "call"        shift, and go to state 52
    "this"        shift, and go to state 53
    "!"           shift, and go to state 54
    "compl"       shift, and go to state 55
    "-"           shift, and go to state 56
    "+"           shift, and go to state 57
    "<"           shift, and go to state 58
    "%exp:"       shift, and go to state 60
    "%lvalue:"    shift, and go to state 61
    "%id:"        shift, and go to state 62

    block        go to state 67
    routine      go to state 100
    primary-exp  go to state 101
    detach       go to state 71
    lvalue       go to state 120
    id           go to state 102
    bitor-exp    go to state 121
    new          go to state 75
    float-exp    go to state 76
    duration     go to state 77
    dictionary   go to state 78
    tuple        go to state 79
    literal-exp  go to state 80
    string       go to state 81
    unary-exp    go to state 82


state 240

  113 stmt: "for" "(" stmt.opt . ";" exp ";" stmt.opt ")" stmt

    ";"  shift, and go to state 350


state 241

   22 stmt.opt: stmt .

    $default  reduce using rule 22 (stmt.opt)


state 242

   24 stmt: exp .  [";"]
   51     | exp . "!" args.opt tilda.opt
   62 exp: exp . "=" exp
   63    | exp . "=" exp modifiers
  112 stmt: "for" "(" exp . ")" stmt
  214 exp: exp . "&&" exp
  215    | exp . "||" exp
  216    | exp . "in" exp
  217    | exp . "!" "in" exp

    "="   shift, and go to state 164
    "in"  shift, and go to state 165
    ")"   shift, and go to state 351
    "!"   shift, and go to state 166
    "&&"  shift, and go to state 167
    "||"  shift, and go to state 168

    $default  reduce using rule 24 (stmt)


state 243

   62 exp: exp . "=" exp
   63    | exp . "=" exp modifiers
  115 stmt: "while" "(" exp . ")" stmt
  214 exp: exp . "&&" exp
  215    | exp . "||" exp
  216    | exp . "in" exp
  217    | exp . "!" "in" exp

    "="   shift, and go to state 164
    "in"  shift, and go to state 165
    ")"   shift, and go to state 352
    "!"   shift, and go to state 215
    "&&"  shift, and go to state 167
    "||"  shift, and go to state 168


state 244

   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   37 exp: . "class" lvalue protos block
   38    | . "package" lvalue protos block
   52 routine: . "closure"
   53        | . "function"
   62 exp: . exp "=" exp
   63    | . exp "=" exp modifiers
   64    | . lvalue "+=" exp
   65    | . lvalue "-=" exp
   66    | . lvalue "*=" exp
   67    | . lvalue "/=" exp
   68    | . lvalue "^=" exp
   69    | . lvalue "%=" exp
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
   73 stmt: "at" identifiers "(" . exp tilda.opt ")" stmt onleave.opt
   74     | "at" identifiers "(" . event_match ")" stmt onleave.opt
  118 primary-exp: . block
  119            | . "do" "(" exp ")" block
  120 detach: . "detach"
  121       | . "disown"
  122 primary-exp: . "assert" "(" exp ")"
  123            | . "assert" "{" claims "}"
  124            | . detach "(" exp ")"
  125            | . detach block
  126            | . "isdef" "(" k1_id ")"
  127            | . "watch" "(" exp ")"
  128 lvalue: . id
  129       | . primary-exp "." id
  130       | . primary-exp "." "*"
  131 primary-exp: . "&" id
  132            | . primary-exp "." "&" id
  133 id: . "identifier"
  134 bitor-exp: . "var" bitor-exp
  135          | . "const" "var" bitor-exp
  136 primary-exp: . lvalue
  137            | . lvalue args
  138 new: . "new" "identifier" args.opt
  139 bitor-exp: . new
  140 id: . "new"
  141 primary-exp: . routine formals block
  142 float-exp: . "float"
  143 duration: . "duration"
  144         | . duration "duration"
  150 dictionary: . "[" assocs "]"
  154 tuple: . "(" tuple.exps ")"
  159 literal-exp: . float-exp
  160            | . "angle"
  161            | . duration
  162            | . string
  163            | . "[" exps "]"
  164            | . "<" bitor-exps ">"
  165            | . dictionary
  166            | . tuple
  167 string: . "string"
  168       | . string "string"
  169 literal-exp: . "__HERE__"
  170 event_match: . exp "?" args.opt tilda.opt guard.opt
  175 lvalue: . primary-exp "[" exps "]"
  176 literal-exp: . "this"
  177            | . "call"
  178 primary-exp: . literal-exp
  179            | . "(" exp ")"
  180            | . "(" error ")"
  181            | . primary-exp "**" primary-exp
  182 unary-exp: . primary-exp
  183          | . "--" lvalue
  184          | . "++" lvalue
  185          | . "+" unary-exp
  186          | . "-" unary-exp
  187          | . "!" unary-exp
  188          | . "compl" unary-exp
  189 bitor-exp: . unary-exp
  190          | . bitor-exp "+" bitor-exp
  191          | . bitor-exp "-" bitor-exp
  192          | . bitor-exp "*" bitor-exp
  193          | . bitor-exp "/" bitor-exp
  194          | . bitor-exp "%" bitor-exp
  195          | . bitor-exp "^" bitor-exp
  196          | . bitor-exp "<<" bitor-exp
  197          | . bitor-exp "bitand" bitor-exp
  198          | . bitor-exp "bitor" bitor-exp
  199          | . bitor-exp ">>" bitor-exp
  210 rel-exp: . bitor-exp rel-ops
  213 exp: . rel-exp
  214    | . exp "&&" exp
  215    | . exp "||" exp
  216    | . exp "in" exp
  217    | . exp "!" "in" exp
  221    | . "%unscope:" unsigned
  222 primary-exp: . "%exp:" unsigned
  223 lvalue: . "%lvalue:" unsigned
  224       | . "%id:" unsigned
  225       | . primary-exp "." "%id:" unsigned
  226 primary-exp: . lvalue "(" "%exps:" unsigned ")"

    "__HERE__"    shift, and go to state 7
    "closure"     shift, and go to state 9
    "const"       shift, and go to state 10
    "function"    shift, and go to state 13
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "var"         shift, and go to state 25
    "watch"       shift, and go to state 27
    "&"           shift, and go to state 29
    "identifier"  shift, and go to state 35
    "class"       shift, and go to state 36
    "package"     shift, and go to state 37
    "--"          shift, and go to state 41
    "++"          shift, and go to state 42
    "do"          shift, and go to state 43
    "assert"      shift, and go to state 44
    "detach"      shift, and go to state 45
    "disown"      shift, and go to state 46
    "new"         shift, and go to state 47
    "angle"       shift, and go to state 48
    "duration"    shift, and go to state 49
    "float"       shift, and go to state 50
    "string"      shift, and go to state 51
    "call"        shift, and go to state 52
    "this"        shift, and go to state 53
    "!"           shift, and go to state 54
    "compl"       shift, and go to state 55
    "-"           shift, and go to state 56
    "+"           shift, and go to state 57
    "<"           shift, and go to state 58
    "%unscope:"   shift, and go to state 59
    "%exp:"       shift, and go to state 60
    "%lvalue:"    shift, and go to state 61
    "%id:"        shift, and go to state 62

    block        go to state 67
    exp          go to state 353
    routine      go to state 100
    primary-exp  go to state 101
    detach       go to state 71
    lvalue       go to state 72
    id           go to state 102
    bitor-exp    go to state 74
    new          go to state 75
    float-exp    go to state 76
    duration     go to state 77
    dictionary   go to state 78
    tuple        go to state 79
    literal-exp  go to state 80
    string       go to state 81
    event_match  go to state 354
    unary-exp    go to state 82
    rel-exp      go to state 83


state 245

  240 identifiers: identifiers "identifier" .

    $default  reduce using rule 240 (identifiers)


state 246

   28 visibility: .  ["__HERE__", "closure", "const", "function", "isdef", "{", "[", "(", "var", "watch", "&", "identifier", "class", "package", "--", "++", "do", "assert", "detach", "disown", "new", "angle", "duration", "float", "string", "call", "this", "!", "compl", "-", "+", "<", "%unscope:", "%exp:", "%lvalue:", "%id:"]
   29           | . "private"
   30           | . "protected"
   31           | . "public"
   32 proto: . visibility exp
   33 protos.1: . proto
   34         | . protos.1 "," proto
   36 protos: ":" . protos.1

    "private"    shift, and go to state 355
    "protected"  shift, and go to state 356
    "public"     shift, and go to state 357

    $default  reduce using rule 28 (visibility)

    visibility  go to state 358
    proto       go to state 359
    protos.1    go to state 360


state 247

   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   37 exp: "class" lvalue protos . block

    "{"  shift, and go to state 16

    block  go to state 361


state 248

   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   38 exp: "package" lvalue protos . block

    "{"  shift, and go to state 16

    block  go to state 362


state 249

   39 id.0: .  ["}"]
   40     | . id.1 comma.opt
   41 id.1: . id
   42     | . id.1 "," id
   43 stmt: "enum" id "{" . id.0 "}"
  133 id: . "identifier"
  140   | . "new"

    "identifier"  shift, and go to state 35
    "new"         shift, and go to state 125

    $default  reduce using rule 39 (id.0)

    id.0  go to state 363
    id.1  go to state 364
    id    go to state 365


state 250

   48 stmt: "external" "var" "identifier" . "." "identifier" from "identifier"

    "."  shift, and go to state 366


state 251

   47 stmt: "external" "identifier" "identifier" .

    $default  reduce using rule 47 (stmt)


state 252

   49 stmt: "external" event_or_function "(" . unsigned ")" "identifier" "." "identifier" from "identifier"
  220 unsigned: . "float"

    "float"  shift, and go to state 154

    unsigned  go to state 367


state 253

   62 exp: exp . "=" exp
   63    | exp . "=" exp modifiers
  119 primary-exp: "do" "(" exp . ")" block
  214 exp: exp . "&&" exp
  215    | exp . "||" exp
  216    | exp . "in" exp
  217    | exp . "!" "in" exp

    "="   shift, and go to state 164
    "in"  shift, and go to state 165
    ")"   shift, and go to state 368
    "!"   shift, and go to state 215
    "&&"  shift, and go to state 167
    "||"  shift, and go to state 168


state 254

   62 exp: exp . "=" exp
   63    | exp . "=" exp modifiers
  214    | exp . "&&" exp
  215    | exp . "||" exp
  216    | exp . "in" exp
  217    | exp . "!" "in" exp
  229 claims.1: exp .  ["}", ";"]

    "="   shift, and go to state 164
    "in"  shift, and go to state 165
    "!"   shift, and go to state 215
    "&&"  shift, and go to state 167
    "||"  shift, and go to state 168

    $default  reduce using rule 229 (claims.1)


state 255

  123 primary-exp: "assert" "{" claims . "}"

    "}"  shift, and go to state 369


state 256

  228 claims: claims.1 . semi.opt
  230 claims.1: claims.1 . ";" exp
  255 semi.opt: .  ["}"]
  256         | . ";"

    ";"  shift, and go to state 370

    $default  reduce using rule 255 (semi.opt)

    semi.opt  go to state 371


state 257

   62 exp: exp . "=" exp
   63    | exp . "=" exp modifiers
  122 primary-exp: "assert" "(" exp . ")"
  214 exp: exp . "&&" exp
  215    | exp . "||" exp
  216    | exp . "in" exp
  217    | exp . "!" "in" exp

    "="   shift, and go to state 164
    "in"  shift, and go to state 165
    ")"   shift, and go to state 372
    "!"   shift, and go to state 215
    "&&"  shift, and go to state 167
    "||"  shift, and go to state 168


state 258

   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   37 exp: . "class" lvalue protos block
   38    | . "package" lvalue protos block
   52 routine: . "closure"
   53        | . "function"
   62 exp: . exp "=" exp
   63    | . exp "=" exp modifiers
   64    | . lvalue "+=" exp
   65    | . lvalue "-=" exp
   66    | . lvalue "*=" exp
   67    | . lvalue "/=" exp
   68    | . lvalue "^=" exp
   69    | . lvalue "%=" exp
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
  118            | . block
  119            | . "do" "(" exp ")" block
  120 detach: . "detach"
  121       | . "disown"
  122 primary-exp: . "assert" "(" exp ")"
  123            | . "assert" "{" claims "}"
  124            | . detach "(" exp ")"
  125            | . detach block
  126            | . "isdef" "(" k1_id ")"
  127            | . "watch" "(" exp ")"
  128 lvalue: . id
  129       | . primary-exp "." id
  130       | . primary-exp "." "*"
  131 primary-exp: . "&" id
  132            | . primary-exp "." "&" id
  133 id: . "identifier"
  134 bitor-exp: . "var" bitor-exp
  135          | . "const" "var" bitor-exp
  136 primary-exp: . lvalue
  137            | . lvalue args
  138 new: . "new" "identifier" args.opt
  139 bitor-exp: . new
  140 id: . "new"
  141 primary-exp: . routine formals block
  142 float-exp: . "float"
  143 duration: . "duration"
  144         | . duration "duration"
  150 dictionary: . "[" assocs "]"
  154 tuple: . "(" tuple.exps ")"
  159 literal-exp: . float-exp
  160            | . "angle"
  161            | . duration
  162            | . string
  163            | . "[" exps "]"
  164            | . "<" bitor-exps ">"
  165            | . dictionary
  166            | . tuple
  167 string: . "string"
  168       | . string "string"
  169 literal-exp: . "__HERE__"
  175 lvalue: . primary-exp "[" exps "]"
  176 literal-exp: . "this"
  177            | . "call"
  178 primary-exp: . literal-exp
  179            | . "(" exp ")"
  180            | . "(" error ")"
  181            | . primary-exp "**" primary-exp
  182 unary-exp: . primary-exp
  183          | . "--" lvalue
  184          | . "++" lvalue
  185          | . "+" unary-exp
  186          | . "-" unary-exp
  187          | . "!" unary-exp
  188          | . "compl" unary-exp
  189 bitor-exp: . unary-exp
  190          | . bitor-exp "+" bitor-exp
  191          | . bitor-exp "-" bitor-exp
  192          | . bitor-exp "*" bitor-exp
  193          | . bitor-exp "/" bitor-exp
  194          | . bitor-exp "%" bitor-exp
  195          | . bitor-exp "^" bitor-exp
  196          | . bitor-exp "<<" bitor-exp
  197          | . bitor-exp "bitand" bitor-exp
  198          | . bitor-exp "bitor" bitor-exp
  199          | . bitor-exp ">>" bitor-exp
  210 rel-exp: . bitor-exp rel-ops
  213 exp: . rel-exp
  214    | . exp "&&" exp
  215    | . exp "||" exp
  216    | . exp "in" exp
  217    | . exp "!" "in" exp
  221    | . "%unscope:" unsigned
  222 primary-exp: . "%exp:" unsigned
  223 lvalue: . "%lvalue:" unsigned
  224       | . "%id:" unsigned
  225       | . primary-exp "." "%id:" unsigned
  226 primary-exp: . lvalue "(" "%exps:" unsigned ")"
  231 exps: .  [")"]
  232     | . exps.1 comma.opt
  233 exps.1: . exp
  234       | . exps.1 "," exp
  236 args: "(" . exps ")"

    "__HERE__"    shift, and go to state 7
    "closure"     shift, and go to state 9
    "const"       shift, and go to state 10
    "function"    shift, and go to state 13
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "var"         shift, and go to state 25
    "watch"       shift, and go to state 27
    "&"           shift, and go to state 29
    "identifier"  shift, and go to state 35
    "class"       shift, and go to state 36
    "package"     shift, and go to state 37
    "--"          shift, and go to state 41
    "++"          shift, and go to state 42
    "do"          shift, and go to state 43
    "assert"      shift, and go to state 44
    "detach"      shift, and go to state 45
    "disown"      shift, and go to state 46
    "new"         shift, and go to state 47
    "angle"       shift, and go to state 48
    "duration"    shift, and go to state 49
    "float"       shift, and go to state 50
    "string"      shift, and go to state 51
    "call"        shift, and go to state 52
    "this"        shift, and go to state 53
    "!"           shift, and go to state 54
    "compl"       shift, and go to state 55
    "-"           shift, and go to state 56
    "+"           shift, and go to state 57
    "<"           shift, and go to state 58
    "%unscope:"   shift, and go to state 59
    "%exp:"       shift, and go to state 60
    "%lvalue:"    shift, and go to state 61
    "%id:"        shift, and go to state 62

    $default  reduce using rule 231 (exps)

    block        go to state 67
    exp          go to state 282
    routine      go to state 100
    primary-exp  go to state 101
    detach       go to state 71
    lvalue       go to state 72
    id           go to state 102
    bitor-exp    go to state 74
    new          go to state 75
    float-exp    go to state 76
    duration     go to state 77
    dictionary   go to state 78
    tuple        go to state 79
    literal-exp  go to state 80
    string       go to state 81
    unary-exp    go to state 82
    rel-exp      go to state 83
    exps         go to state 291
    exps.1       go to state 107


state 259

  238 args.opt: args .

    $default  reduce using rule 238 (args.opt)


state 260

  138 new: "new" "identifier" args.opt .

    $default  reduce using rule 138 (new)


state 261

  164 literal-exp: "<" bitor-exps ">" .

    $default  reduce using rule 164 (literal-exp)


state 262

   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   52 routine: . "closure"
   53        | . "function"
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
  118            | . block
  119            | . "do" "(" exp ")" block
  120 detach: . "detach"
  121       | . "disown"
  122 primary-exp: . "assert" "(" exp ")"
  123            | . "assert" "{" claims "}"
  124            | . detach "(" exp ")"
  125            | . detach block
  126            | . "isdef" "(" k1_id ")"
  127            | . "watch" "(" exp ")"
  128 lvalue: . id
  129       | . primary-exp "." id
  130       | . primary-exp "." "*"
  131 primary-exp: . "&" id
  132            | . primary-exp "." "&" id
  133 id: . "identifier"
  134 bitor-exp: . "var" bitor-exp
  135          | . "const" "var" bitor-exp
  136 primary-exp: . lvalue
  137            | . lvalue args
  138 new: . "new" "identifier" args.opt
  139 bitor-exp: . new
  140 id: . "new"
  141 primary-exp: . routine formals block
  142 float-exp: . "float"
  143 duration: . "duration"
  144         | . duration "duration"
  150 dictionary: . "[" assocs "]"
  154 tuple: . "(" tuple.exps ")"
  158 bitor-exps.1: bitor-exps.1 "," . bitor-exp
  159 literal-exp: . float-exp
  160            | . "angle"
  161            | . duration
  162            | . string
  163            | . "[" exps "]"
  164            | . "<" bitor-exps ">"
  165            | . dictionary
  166            | . tuple
  167 string: . "string"
  168       | . string "string"
  169 literal-exp: . "__HERE__"
  175 lvalue: . primary-exp "[" exps "]"
  176 literal-exp: . "this"
  177            | . "call"
  178 primary-exp: . literal-exp
  179            | . "(" exp ")"
  180            | . "(" error ")"
  181            | . primary-exp "**" primary-exp
  182 unary-exp: . primary-exp
  183          | . "--" lvalue
  184          | . "++" lvalue
  185          | . "+" unary-exp
  186          | . "-" unary-exp
  187          | . "!" unary-exp
  188          | . "compl" unary-exp
  189 bitor-exp: . unary-exp
  190          | . bitor-exp "+" bitor-exp
  191          | . bitor-exp "-" bitor-exp
  192          | . bitor-exp "*" bitor-exp
  193          | . bitor-exp "/" bitor-exp
  194          | . bitor-exp "%" bitor-exp
  195          | . bitor-exp "^" bitor-exp
  196          | . bitor-exp "<<" bitor-exp
  197          | . bitor-exp "bitand" bitor-exp
  198          | . bitor-exp "bitor" bitor-exp
  199          | . bitor-exp ">>" bitor-exp
  222 primary-exp: . "%exp:" unsigned
  223 lvalue: . "%lvalue:" unsigned
  224       | . "%id:" unsigned
  225       | . primary-exp "." "%id:" unsigned
  226 primary-exp: . lvalue "(" "%exps:" unsigned ")"
  254 comma.opt: "," .  [">"]

    "__HERE__"    shift, and go to state 7
    "closure"     shift, and go to state 9
    "const"       shift, and go to state 10
    "function"    shift, and go to state 13
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "var"         shift, and go to state 25
    "watch"       shift, and go to state 27
    "&"           shift, and go to state 29
    "identifier"  shift, and go to state 35
    "--"          shift, and go to state 41
    "++"          shift, and go to state 42
    "do"          shift, and go to state 43
    "assert"      shift, and go to state 44
    "detach"      shift, and go to state 45
    "disown"      shift, and go to state 46
    "new"         shift, and go to state 47
    "angle"       shift, and go to state 48
    "duration"    shift, and go to state 49
    "float"       shift, and go to state 50
    "string"      shift, and go to state 51
    "call"        shift, and go to state 52
    "this"        shift, and go to state 53
    "!"           shift, and go to state 54
    "compl"       shift, and go to state 55
    "-"           shift, and go to state 56
    "+"           shift, and go to state 57
    "<"           shift, and go to state 58
    "%exp:"       shift, and go to state 60
    "%lvalue:"    shift, and go to state 61
    "%id:"        shift, and go to state 62

    $default  reduce using rule 254 (comma.opt)

    block        go to state 67
    routine      go to state 100
    primary-exp  go to state 101
    detach       go to state 71
    lvalue       go to state 120
    id           go to state 102
    bitor-exp    go to state 373
    new          go to state 75
    float-exp    go to state 76
    duration     go to state 77
    dictionary   go to state 78
    tuple        go to state 79
    literal-exp  go to state 80
    string       go to state 81
    unary-exp    go to state 82


state 263

  156 bitor-exps: bitor-exps.1 comma.opt .

    $default  reduce using rule 156 (bitor-exps)


state 264

   19 cstmt: cstmt . "|" cstmt
   20      | cstmt . "&" cstmt
   20      | cstmt "&" cstmt .  ["end of command", "case", "default", "}", ")", ",", ";", "&", "|"]

    $default  reduce using rule 20 (cstmt)

    Conflict between rule 20 and token "&" resolved as reduce (%left "&").
    Conflict between rule 20 and token "|" resolved as reduce ("|" < "&").


state 265

   19 cstmt: cstmt . "|" cstmt
   19      | cstmt "|" cstmt .  ["end of command", "case", "default", "}", ")", ",", ";", "|"]
   20      | cstmt . "&" cstmt

    "&"  shift, and go to state 162

    $default  reduce using rule 19 (cstmt)

    Conflict between rule 19 and token "&" resolved as shift ("|" < "&").
    Conflict between rule 19 and token "|" resolved as reduce (%left "|").


state 266

   59 modifier: . "identifier" ":" exp
   60 modifiers: . modifier
   61          | . modifiers modifier
   62 exp: exp . "=" exp
   62    | exp "=" exp .  ["end of command", "case", "catch", ":", "default", "else", "finally", "if", "{", "onleave", "}", "]", ")", "~", ",", ";", "&", "|", "=>", "?"]
   63    | exp . "=" exp modifiers
   63    | exp "=" exp . modifiers
  214    | exp . "&&" exp
  215    | exp . "||" exp
  216    | exp . "in" exp
  217    | exp . "!" "in" exp

    "="           shift, and go to state 164
    "in"          shift, and go to state 165
    "identifier"  shift, and go to state 374
    "!"           shift, and go to state 215
    "&&"          shift, and go to state 167
    "||"          shift, and go to state 168

    $default  reduce using rule 62 (exp)

    modifier   go to state 375
    modifiers  go to state 376

    Conflict between rule 62 and token "=" resolved as shift (ASSIGN < "=").
    Conflict between rule 62 and token "in" resolved as shift (ASSIGN < "in").
    Conflict between rule 62 and token "identifier" resolved as shift (ASSIGN < "identifier").
    Conflict between rule 62 and token "!" resolved as shift (ASSIGN < "!").
    Conflict between rule 62 and token "&&" resolved as shift (ASSIGN < "&&").
    Conflict between rule 62 and token "||" resolved as shift (ASSIGN < "||").


state 267

   62 exp: exp . "=" exp
   63    | exp . "=" exp modifiers
  214    | exp . "&&" exp
  215    | exp . "||" exp
  216    | exp . "in" exp
  216    | exp "in" exp .  ["end of command", "=", "case", "catch", ":", "default", "else", "finally", "if", "{", "onleave", "}", "]", ")", "~", ",", ";", "&", "|", "identifier", "=>", "?", "&&", "||"]
  217    | exp . "!" "in" exp

    "!"  shift, and go to state 215

    "in"  error (nonassociative)

    $default  reduce using rule 216 (exp)

    Conflict between rule 216 and token "=" resolved as reduce ("=" < "in").
    Conflict between rule 216 and token "in" resolved as an error (%nonassoc "in").
    Conflict between rule 216 and token "!" resolved as shift ("in" < "!").
    Conflict between rule 216 and token "&&" resolved as reduce ("&&" < "in").
    Conflict between rule 216 and token "||" resolved as reduce ("||" < "in").


state 268

   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   37 exp: . "class" lvalue protos block
   38    | . "package" lvalue protos block
   52 routine: . "closure"
   53        | . "function"
   62 exp: . exp "=" exp
   63    | . exp "=" exp modifiers
   64    | . lvalue "+=" exp
   65    | . lvalue "-=" exp
   66    | . lvalue "*=" exp
   67    | . lvalue "/=" exp
   68    | . lvalue "^=" exp
   69    | . lvalue "%=" exp
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
  118            | . block
  119            | . "do" "(" exp ")" block
  120 detach: . "detach"
  121       | . "disown"
  122 primary-exp: . "assert" "(" exp ")"
  123            | . "assert" "{" claims "}"
  124            | . detach "(" exp ")"
  125            | . detach block
  126            | . "isdef" "(" k1_id ")"
  127            | . "watch" "(" exp ")"
  128 lvalue: . id
  129       | . primary-exp "." id
  130       | . primary-exp "." "*"
  131 primary-exp: . "&" id
  132            | . primary-exp "." "&" id
  133 id: . "identifier"
  134 bitor-exp: . "var" bitor-exp
  135          | . "const" "var" bitor-exp
  136 primary-exp: . lvalue
  137            | . lvalue args
  138 new: . "new" "identifier" args.opt
  139 bitor-exp: . new
  140 id: . "new"
  141 primary-exp: . routine formals block
  142 float-exp: . "float"
  143 duration: . "duration"
  144         | . duration "duration"
  150 dictionary: . "[" assocs "]"
  154 tuple: . "(" tuple.exps ")"
  159 literal-exp: . float-exp
  160            | . "angle"
  161            | . duration
  162            | . string
  163            | . "[" exps "]"
  164            | . "<" bitor-exps ">"
  165            | . dictionary
  166            | . tuple
  167 string: . "string"
  168       | . string "string"
  169 literal-exp: . "__HERE__"
  175 lvalue: . primary-exp "[" exps "]"
  176 literal-exp: . "this"
  177            | . "call"
  178 primary-exp: . literal-exp
  179            | . "(" exp ")"
  180            | . "(" error ")"
  181            | . primary-exp "**" primary-exp
  182 unary-exp: . primary-exp
  183          | . "--" lvalue
  184          | . "++" lvalue
  185          | . "+" unary-exp
  186          | . "-" unary-exp
  187          | . "!" unary-exp
  188          | . "compl" unary-exp
  189 bitor-exp: . unary-exp
  190          | . bitor-exp "+" bitor-exp
  191          | . bitor-exp "-" bitor-exp
  192          | . bitor-exp "*" bitor-exp
  193          | . bitor-exp "/" bitor-exp
  194          | . bitor-exp "%" bitor-exp
  195          | . bitor-exp "^" bitor-exp
  196          | . bitor-exp "<<" bitor-exp
  197          | . bitor-exp "bitand" bitor-exp
  198          | . bitor-exp "bitor" bitor-exp
  199          | . bitor-exp ">>" bitor-exp
  210 rel-exp: . bitor-exp rel-ops
  213 exp: . rel-exp
  214    | . exp "&&" exp
  215    | . exp "||" exp
  216    | . exp "in" exp
  217    | . exp "!" "in" exp
  217    | exp "!" "in" . exp
  221    | . "%unscope:" unsigned
  222 primary-exp: . "%exp:" unsigned
  223 lvalue: . "%lvalue:" unsigned
  224       | . "%id:" unsigned
  225       | . primary-exp "." "%id:" unsigned
  226 primary-exp: . lvalue "(" "%exps:" unsigned ")"

    "__HERE__"    shift, and go to state 7
    "closure"     shift, and go to state 9
    "const"       shift, and go to state 10
    "function"    shift, and go to state 13
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "var"         shift, and go to state 25
    "watch"       shift, and go to state 27
    "&"           shift, and go to state 29
    "identifier"  shift, and go to state 35
    "class"       shift, and go to state 36
    "package"     shift, and go to state 37
    "--"          shift, and go to state 41
    "++"          shift, and go to state 42
    "do"          shift, and go to state 43
    "assert"      shift, and go to state 44
    "detach"      shift, and go to state 45
    "disown"      shift, and go to state 46
    "new"         shift, and go to state 47
    "angle"       shift, and go to state 48
    "duration"    shift, and go to state 49
    "float"       shift, and go to state 50
    "string"      shift, and go to state 51
    "call"        shift, and go to state 52
    "this"        shift, and go to state 53
    "!"           shift, and go to state 54
    "compl"       shift, and go to state 55
    "-"           shift, and go to state 56
    "+"           shift, and go to state 57
    "<"           shift, and go to state 58
    "%unscope:"   shift, and go to state 59
    "%exp:"       shift, and go to state 60
    "%lvalue:"    shift, and go to state 61
    "%id:"        shift, and go to state 62

    block        go to state 67
    exp          go to state 377
    routine      go to state 100
    primary-exp  go to state 101
    detach       go to state 71
    lvalue       go to state 72
    id           go to state 102
    bitor-exp    go to state 74
    new          go to state 75
    float-exp    go to state 76
    duration     go to state 77
    dictionary   go to state 78
    tuple        go to state 79
    literal-exp  go to state 80
    string       go to state 81
    unary-exp    go to state 82
    rel-exp      go to state 83


state 269

   51 stmt: exp "!" args.opt . tilda.opt
  173 tilda.opt: .  ["end of command", "case", "catch", "default", "else", "finally", "onleave", "}", ")", ",", ";", "&", "|"]
  174          | . "~" exp

    "~"  shift, and go to state 341

    $default  reduce using rule 173 (tilda.opt)

    tilda.opt  go to state 378


state 270

   62 exp: exp . "=" exp
   63    | exp . "=" exp modifiers
  214    | exp . "&&" exp
  214    | exp "&&" exp .  ["end of command", "=", "case", "catch", ":", "default", "else", "finally", "if", "{", "onleave", "}", "]", ")", "~", ",", ";", "&", "|", "identifier", "=>", "?", "&&", "||"]
  215    | exp . "||" exp
  216    | exp . "in" exp
  217    | exp . "!" "in" exp

    "in"  shift, and go to state 165
    "!"   shift, and go to state 215

    $default  reduce using rule 214 (exp)

    Conflict between rule 214 and token "=" resolved as reduce ("=" < "&&").
    Conflict between rule 214 and token "in" resolved as shift ("&&" < "in").
    Conflict between rule 214 and token "!" resolved as shift ("&&" < "!").
    Conflict between rule 214 and token "&&" resolved as reduce (%left "&&").
    Conflict between rule 214 and token "||" resolved as reduce ("||" < "&&").


state 271

   62 exp: exp . "=" exp
   63    | exp . "=" exp modifiers
  214    | exp . "&&" exp
  215    | exp . "||" exp
  215    | exp "||" exp .  ["end of command", "=", "case", "catch", ":", "default", "else", "finally", "if", "{", "onleave", "}", "]", ")", "~", ",", ";", "&", "|", "identifier", "=>", "?", "||"]
  216    | exp . "in" exp
  217    | exp . "!" "in" exp

    "in"  shift, and go to state 165
    "!"   shift, and go to state 215
    "&&"  shift, and go to state 167

    $default  reduce using rule 215 (exp)

    Conflict between rule 215 and token "=" resolved as reduce ("=" < "||").
    Conflict between rule 215 and token "in" resolved as shift ("||" < "in").
    Conflict between rule 215 and token "!" resolved as shift ("||" < "!").
    Conflict between rule 215 and token "&&" resolved as shift ("||" < "&&").
    Conflict between rule 215 and token "||" resolved as reduce (%left "||").


state 272

  258 var.opt: "var" .

    $default  reduce using rule 258 (var.opt)


state 273

  247 formals.1: formal .

    $default  reduce using rule 247 (formals.1)


state 274

  248 formals.1: formals.1 . "," formal
  250 formals.0: formals.1 . comma.opt
  253 comma.opt: .  [")"]
  254          | . ","

    ","  shift, and go to state 379

    $default  reduce using rule 253 (comma.opt)

    comma.opt  go to state 380


state 275

  252 formals: "(" formals.0 . ")"

    ")"  shift, and go to state 381


state 276

  244 formal: var.opt . "identifier" typespec.opt
  245       | var.opt . "identifier" "=" exp typespec.opt
  246       | var.opt . "identifier" "[" "]"

    "identifier"  shift, and go to state 382


state 277

   57 k1_id: "this" "." . "identifier"

    "identifier"  shift, and go to state 383


state 278

   58 k1_id: k1_id "." . "identifier"

    "identifier"  shift, and go to state 384


state 279

   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   54 stmt: routine k1_id formals . block

    "{"  shift, and go to state 16

    block  go to state 385


state 280

  141 primary-exp: routine formals block .

    $default  reduce using rule 141 (primary-exp)


state 281

   23 stmt: primary-exp ":" stmt .

    $default  reduce using rule 23 (stmt)


state 282

   62 exp: exp . "=" exp
   63    | exp . "=" exp modifiers
  214    | exp . "&&" exp
  215    | exp . "||" exp
  216    | exp . "in" exp
  217    | exp . "!" "in" exp
  233 exps.1: exp .  ["]", ")", ","]

    "="   shift, and go to state 164
    "in"  shift, and go to state 165
    "!"   shift, and go to state 215
    "&&"  shift, and go to state 167
    "||"  shift, and go to state 168

    $default  reduce using rule 233 (exps.1)


state 283

  175 lvalue: primary-exp "[" exps . "]"

    "]"  shift, and go to state 386


state 284

  132 primary-exp: primary-exp "." "&" . id
  133 id: . "identifier"
  140   | . "new"

    "identifier"  shift, and go to state 35
    "new"         shift, and go to state 125

    id  go to state 387


state 285

  130 lvalue: primary-exp "." "*" .

    $default  reduce using rule 130 (lvalue)


state 286

  220 unsigned: . "float"
  225 lvalue: primary-exp "." "%id:" . unsigned

    "float"  shift, and go to state 154

    unsigned  go to state 388


state 287

  129 lvalue: primary-exp "." id .

    $default  reduce using rule 129 (lvalue)


state 288

  129 lvalue: primary-exp . "." id
  130       | primary-exp . "." "*"
  132 primary-exp: primary-exp . "." "&" id
  175 lvalue: primary-exp . "[" exps "]"
  181 primary-exp: primary-exp . "**" primary-exp
  181            | primary-exp "**" primary-exp .  ["end of command", "=", "case", "catch", ":", "default", "else", "finally", "if", "in", "{", "onleave", "}", "]", ")", "~", ",", ";", "&", "|", "identifier", "=>", "?", "!", "bitand", "bitor", "^", ">>", "<<", "-", "%", "+", "/", "*", "=~=", "==", "===", ">=", ">", "<=", "<", "!=", "!==", "~=", "&&", "||"]
  225 lvalue: primary-exp . "." "%id:" unsigned

    "["   shift, and go to state 175
    "."   shift, and go to state 176
    "**"  shift, and go to state 177

    $default  reduce using rule 181 (primary-exp)

    Conflict between rule 181 and token "[" resolved as shift ("**" < "[").
    Conflict between rule 181 and token "." resolved as shift ("**" < ".").
    Conflict between rule 181 and token "**" resolved as shift (%right "**").


state 289

   62 exp: exp . "=" exp
   63    | exp . "=" exp modifiers
  124 primary-exp: detach "(" exp . ")"
  214 exp: exp . "&&" exp
  215    | exp . "||" exp
  216    | exp . "in" exp
  217    | exp . "!" "in" exp

    "="   shift, and go to state 164
    "in"  shift, and go to state 165
    ")"   shift, and go to state 389
    "!"   shift, and go to state 215
    "&&"  shift, and go to state 167
    "||"  shift, and go to state 168


state 290

  220 unsigned: . "float"
  226 primary-exp: lvalue "(" "%exps:" . unsigned ")"

    "float"  shift, and go to state 154

    unsigned  go to state 390


state 291

  236 args: "(" exps . ")"

    ")"  shift, and go to state 391


state 292

   62 exp: exp . "=" exp
   63    | exp . "=" exp modifiers
   68    | lvalue "^=" exp .  ["end of command", "case", "catch", ":", "default", "else", "finally", "if", "{", "onleave", "}", "]", ")", "~", ",", ";", "&", "|", "identifier", "=>", "?"]
  214    | exp . "&&" exp
  215    | exp . "||" exp
  216    | exp . "in" exp
  217    | exp . "!" "in" exp

    "="   shift, and go to state 164
    "in"  shift, and go to state 165
    "!"   shift, and go to state 215
    "&&"  shift, and go to state 167
    "||"  shift, and go to state 168

    $default  reduce using rule 68 (exp)

    Conflict between rule 68 and token "=" resolved as shift (%right "=").
    Conflict between rule 68 and token "in" resolved as shift ("^=" < "in").
    Conflict between rule 68 and token "!" resolved as shift ("^=" < "!").
    Conflict between rule 68 and token "&&" resolved as shift ("^=" < "&&").
    Conflict between rule 68 and token "||" resolved as shift ("^=" < "||").


state 293

   62 exp: exp . "=" exp
   63    | exp . "=" exp modifiers
   65    | lvalue "-=" exp .  ["end of command", "case", "catch", ":", "default", "else", "finally", "if", "{", "onleave", "}", "]", ")", "~", ",", ";", "&", "|", "identifier", "=>", "?"]
  214    | exp . "&&" exp
  215    | exp . "||" exp
  216    | exp . "in" exp
  217    | exp . "!" "in" exp

    "="   shift, and go to state 164
    "in"  shift, and go to state 165
    "!"   shift, and go to state 215
    "&&"  shift, and go to state 167
    "||"  shift, and go to state 168

    $default  reduce using rule 65 (exp)

    Conflict between rule 65 and token "=" resolved as shift (%right "=").
    Conflict between rule 65 and token "in" resolved as shift ("-=" < "in").
    Conflict between rule 65 and token "!" resolved as shift ("-=" < "!").
    Conflict between rule 65 and token "&&" resolved as shift ("-=" < "&&").
    Conflict between rule 65 and token "||" resolved as shift ("-=" < "||").


state 294

   62 exp: exp . "=" exp
   63    | exp . "=" exp modifiers
   69    | lvalue "%=" exp .  ["end of command", "case", "catch", ":", "default", "else", "finally", "if", "{", "onleave", "}", "]", ")", "~", ",", ";", "&", "|", "identifier", "=>", "?"]
  214    | exp . "&&" exp
  215    | exp . "||" exp
  216    | exp . "in" exp
  217    | exp . "!" "in" exp

    "="   shift, and go to state 164
    "in"  shift, and go to state 165
    "!"   shift, and go to state 215
    "&&"  shift, and go to state 167
    "||"  shift, and go to state 168

    $default  reduce using rule 69 (exp)

    Conflict between rule 69 and token "=" resolved as shift (%right "=").
    Conflict between rule 69 and token "in" resolved as shift ("%=" < "in").
    Conflict between rule 69 and token "!" resolved as shift ("%=" < "!").
    Conflict between rule 69 and token "&&" resolved as shift ("%=" < "&&").
    Conflict between rule 69 and token "||" resolved as shift ("%=" < "||").


state 295

   62 exp: exp . "=" exp
   63    | exp . "=" exp modifiers
   64    | lvalue "+=" exp .  ["end of command", "case", "catch", ":", "default", "else", "finally", "if", "{", "onleave", "}", "]", ")", "~", ",", ";", "&", "|", "identifier", "=>", "?"]
  214    | exp . "&&" exp
  215    | exp . "||" exp
  216    | exp . "in" exp
  217    | exp . "!" "in" exp

    "="   shift, and go to state 164
    "in"  shift, and go to state 165
    "!"   shift, and go to state 215
    "&&"  shift, and go to state 167
    "||"  shift, and go to state 168

    $default  reduce using rule 64 (exp)

    Conflict between rule 64 and token "=" resolved as shift (%right "=").
    Conflict between rule 64 and token "in" resolved as shift ("+=" < "in").
    Conflict between rule 64 and token "!" resolved as shift ("+=" < "!").
    Conflict between rule 64 and token "&&" resolved as shift ("+=" < "&&").
    Conflict between rule 64 and token "||" resolved as shift ("+=" < "||").


state 296

   62 exp: exp . "=" exp
   63    | exp . "=" exp modifiers
   67    | lvalue "/=" exp .  ["end of command", "case", "catch", ":", "default", "else", "finally", "if", "{", "onleave", "}", "]", ")", "~", ",", ";", "&", "|", "identifier", "=>", "?"]
  214    | exp . "&&" exp
  215    | exp . "||" exp
  216    | exp . "in" exp
  217    | exp . "!" "in" exp

    "="   shift, and go to state 164
    "in"  shift, and go to state 165
    "!"   shift, and go to state 215
    "&&"  shift, and go to state 167
    "||"  shift, and go to state 168

    $default  reduce using rule 67 (exp)

    Conflict between rule 67 and token "=" resolved as shift (%right "=").
    Conflict between rule 67 and token "in" resolved as shift ("/=" < "in").
    Conflict between rule 67 and token "!" resolved as shift ("/=" < "!").
    Conflict between rule 67 and token "&&" resolved as shift ("/=" < "&&").
    Conflict between rule 67 and token "||" resolved as shift ("/=" < "||").


state 297

   62 exp: exp . "=" exp
   63    | exp . "=" exp modifiers
   66    | lvalue "*=" exp .  ["end of command", "case", "catch", ":", "default", "else", "finally", "if", "{", "onleave", "}", "]", ")", "~", ",", ";", "&", "|", "identifier", "=>", "?"]
  214    | exp . "&&" exp
  215    | exp . "||" exp
  216    | exp . "in" exp
  217    | exp . "!" "in" exp

    "="   shift, and go to state 164
    "in"  shift, and go to state 165
    "!"   shift, and go to state 215
    "&&"  shift, and go to state 167
    "||"  shift, and go to state 168

    $default  reduce using rule 66 (exp)

    Conflict between rule 66 and token "=" resolved as shift (%right "=").
    Conflict between rule 66 and token "in" resolved as shift ("*=" < "in").
    Conflict between rule 66 and token "!" resolved as shift ("*=" < "!").
    Conflict between rule 66 and token "&&" resolved as shift ("*=" < "&&").
    Conflict between rule 66 and token "||" resolved as shift ("*=" < "||").


state 298

   72 primary-exp: lvalue "->" id .

    $default  reduce using rule 72 (primary-exp)


state 299

   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   55 stmt: id id formals . block

    "{"  shift, and go to state 16

    block  go to state 392


state 300

  190 bitor-exp: bitor-exp . "+" bitor-exp
  191          | bitor-exp . "-" bitor-exp
  192          | bitor-exp . "*" bitor-exp
  193          | bitor-exp . "/" bitor-exp
  194          | bitor-exp . "%" bitor-exp
  195          | bitor-exp . "^" bitor-exp
  196          | bitor-exp . "<<" bitor-exp
  197          | bitor-exp . "bitand" bitor-exp
  197          | bitor-exp "bitand" bitor-exp .  ["end of command", "=", "case", "catch", ":", "default", "else", "finally", "if", "in", "{", "onleave", "}", "]", ")", "~", ",", ";", "&", "|", "identifier", "=>", "?", "!", "bitand", "bitor", "^", "=~=", "==", "===", ">=", ">", "<=", "<", "!=", "!==", "~=", "&&", "||"]
  198          | bitor-exp . "bitor" bitor-exp
  199          | bitor-exp . ">>" bitor-exp

    ">>"  shift, and go to state 195
    "<<"  shift, and go to state 196
    "-"   shift, and go to state 197
    "%"   shift, and go to state 198
    "+"   shift, and go to state 199
    "/"   shift, and go to state 200
    "*"   shift, and go to state 201

    $default  reduce using rule 197 (bitor-exp)

    Conflict between rule 197 and token "bitand" resolved as reduce (%left "bitand").
    Conflict between rule 197 and token "bitor" resolved as reduce ("bitor" < "bitand").
    Conflict between rule 197 and token "^" resolved as reduce ("^" < "bitand").
    Conflict between rule 197 and token ">>" resolved as shift ("bitand" < ">>").
    Conflict between rule 197 and token "<<" resolved as shift ("bitand" < "<<").
    Conflict between rule 197 and token "-" resolved as shift ("bitand" < "-").
    Conflict between rule 197 and token "%" resolved as shift ("bitand" < "%").
    Conflict between rule 197 and token "+" resolved as shift ("bitand" < "+").
    Conflict between rule 197 and token "/" resolved as shift ("bitand" < "/").
    Conflict between rule 197 and token "*" resolved as shift ("bitand" < "*").


state 301

  190 bitor-exp: bitor-exp . "+" bitor-exp
  191          | bitor-exp . "-" bitor-exp
  192          | bitor-exp . "*" bitor-exp
  193          | bitor-exp . "/" bitor-exp
  194          | bitor-exp . "%" bitor-exp
  195          | bitor-exp . "^" bitor-exp
  196          | bitor-exp . "<<" bitor-exp
  197          | bitor-exp . "bitand" bitor-exp
  198          | bitor-exp . "bitor" bitor-exp
  198          | bitor-exp "bitor" bitor-exp .  ["end of command", "=", "case", "catch", ":", "default", "else", "finally", "if", "in", "{", "onleave", "}", "]", ")", "~", ",", ";", "&", "|", "identifier", "=>", "?", "!", "bitor", "=~=", "==", "===", ">=", ">", "<=", "<", "!=", "!==", "~=", "&&", "||"]
  199          | bitor-exp . ">>" bitor-exp

    "bitand"  shift, and go to state 192
    "^"       shift, and go to state 194
    ">>"      shift, and go to state 195
    "<<"      shift, and go to state 196
    "-"       shift, and go to state 197
    "%"       shift, and go to state 198
    "+"       shift, and go to state 199
    "/"       shift, and go to state 200
    "*"       shift, and go to state 201

    $default  reduce using rule 198 (bitor-exp)

    Conflict between rule 198 and token "bitand" resolved as shift ("bitor" < "bitand").
    Conflict between rule 198 and token "bitor" resolved as reduce (%left "bitor").
    Conflict between rule 198 and token "^" resolved as shift ("bitor" < "^").
    Conflict between rule 198 and token ">>" resolved as shift ("bitor" < ">>").
    Conflict between rule 198 and token "<<" resolved as shift ("bitor" < "<<").
    Conflict between rule 198 and token "-" resolved as shift ("bitor" < "-").
    Conflict between rule 198 and token "%" resolved as shift ("bitor" < "%").
    Conflict between rule 198 and token "+" resolved as shift ("bitor" < "+").
    Conflict between rule 198 and token "/" resolved as shift ("bitor" < "/").
    Conflict between rule 198 and token "*" resolved as shift ("bitor" < "*").


state 302

  190 bitor-exp: bitor-exp . "+" bitor-exp
  191          | bitor-exp . "-" bitor-exp
  192          | bitor-exp . "*" bitor-exp
  193          | bitor-exp . "/" bitor-exp
  194          | bitor-exp . "%" bitor-exp
  195          | bitor-exp . "^" bitor-exp
  195          | bitor-exp "^" bitor-exp .  ["end of command", "=", "case", "catch", ":", "default", "else", "finally", "if", "in", "{", "onleave", "}", "]", ")", "~", ",", ";", "&", "|", "identifier", "=>", "?", "!", "bitor", "^", "=~=", "==", "===", ">=", ">", "<=", "<", "!=", "!==", "~=", "&&", "||"]
  196          | bitor-exp . "<<" bitor-exp
  197          | bitor-exp . "bitand" bitor-exp
  198          | bitor-exp . "bitor" bitor-exp
  199          | bitor-exp . ">>" bitor-exp

    "bitand"  shift, and go to state 192
    ">>"      shift, and go to state 195
    "<<"      shift, and go to state 196
    "-"       shift, and go to state 197
    "%"       shift, and go to state 198
    "+"       shift, and go to state 199
    "/"       shift, and go to state 200
    "*"       shift, and go to state 201

    $default  reduce using rule 195 (bitor-exp)

    Conflict between rule 195 and token "bitand" resolved as shift ("^" < "bitand").
    Conflict between rule 195 and token "bitor" resolved as reduce ("bitor" < "^").
    Conflict between rule 195 and token "^" resolved as reduce (%left "^").
    Conflict between rule 195 and token ">>" resolved as shift ("^" < ">>").
    Conflict between rule 195 and token "<<" resolved as shift ("^" < "<<").
    Conflict between rule 195 and token "-" resolved as shift ("^" < "-").
    Conflict between rule 195 and token "%" resolved as shift ("^" < "%").
    Conflict between rule 195 and token "+" resolved as shift ("^" < "+").
    Conflict between rule 195 and token "/" resolved as shift ("^" < "/").
    Conflict between rule 195 and token "*" resolved as shift ("^" < "*").


state 303

  190 bitor-exp: bitor-exp . "+" bitor-exp
  191          | bitor-exp . "-" bitor-exp
  192          | bitor-exp . "*" bitor-exp
  193          | bitor-exp . "/" bitor-exp
  194          | bitor-exp . "%" bitor-exp
  195          | bitor-exp . "^" bitor-exp
  196          | bitor-exp . "<<" bitor-exp
  197          | bitor-exp . "bitand" bitor-exp
  198          | bitor-exp . "bitor" bitor-exp
  199          | bitor-exp . ">>" bitor-exp
  199          | bitor-exp ">>" bitor-exp .  ["end of command", "=", "case", "catch", ":", "default", "else", "finally", "if", "in", "{", "onleave", "}", "]", ")", "~", ",", ";", "&", "|", "identifier", "=>", "?", "!", "bitand", "bitor", "^", ">>", "<<", "=~=", "==", "===", ">=", ">", "<=", "<", "!=", "!==", "~=", "&&", "||"]

    "-"  shift, and go to state 197
    "%"  shift, and go to state 198
    "+"  shift, and go to state 199
    "/"  shift, and go to state 200
    "*"  shift, and go to state 201

    $default  reduce using rule 199 (bitor-exp)

    Conflict between rule 199 and token "bitand" resolved as reduce ("bitand" < ">>").
    Conflict between rule 199 and token "bitor" resolved as reduce ("bitor" < ">>").
    Conflict between rule 199 and token "^" resolved as reduce ("^" < ">>").
    Conflict between rule 199 and token ">>" resolved as reduce (%left ">>").
    Conflict between rule 199 and token "<<" resolved as reduce (%left "<<").
    Conflict between rule 199 and token "-" resolved as shift (">>" < "-").
    Conflict between rule 199 and token "%" resolved as shift (">>" < "%").
    Conflict between rule 199 and token "+" resolved as shift (">>" < "+").
    Conflict between rule 199 and token "/" resolved as shift (">>" < "/").
    Conflict between rule 199 and token "*" resolved as shift (">>" < "*").


state 304

  190 bitor-exp: bitor-exp . "+" bitor-exp
  191          | bitor-exp . "-" bitor-exp
  192          | bitor-exp . "*" bitor-exp
  193          | bitor-exp . "/" bitor-exp
  194          | bitor-exp . "%" bitor-exp
  195          | bitor-exp . "^" bitor-exp
  196          | bitor-exp . "<<" bitor-exp
  196          | bitor-exp "<<" bitor-exp .  ["end of command", "=", "case", "catch", ":", "default", "else", "finally", "if", "in", "{", "onleave", "}", "]", ")", "~", ",", ";", "&", "|", "identifier", "=>", "?", "!", "bitand", "bitor", "^", ">>", "<<", "=~=", "==", "===", ">=", ">", "<=", "<", "!=", "!==", "~=", "&&", "||"]
  197          | bitor-exp . "bitand" bitor-exp
  198          | bitor-exp . "bitor" bitor-exp
  199          | bitor-exp . ">>" bitor-exp

    "-"  shift, and go to state 197
    "%"  shift, and go to state 198
    "+"  shift, and go to state 199
    "/"  shift, and go to state 200
    "*"  shift, and go to state 201

    $default  reduce using rule 196 (bitor-exp)

    Conflict between rule 196 and token "bitand" resolved as reduce ("bitand" < "<<").
    Conflict between rule 196 and token "bitor" resolved as reduce ("bitor" < "<<").
    Conflict between rule 196 and token "^" resolved as reduce ("^" < "<<").
    Conflict between rule 196 and token ">>" resolved as reduce (%left ">>").
    Conflict between rule 196 and token "<<" resolved as reduce (%left "<<").
    Conflict between rule 196 and token "-" resolved as shift ("<<" < "-").
    Conflict between rule 196 and token "%" resolved as shift ("<<" < "%").
    Conflict between rule 196 and token "+" resolved as shift ("<<" < "+").
    Conflict between rule 196 and token "/" resolved as shift ("<<" < "/").
    Conflict between rule 196 and token "*" resolved as shift ("<<" < "*").


state 305

  190 bitor-exp: bitor-exp . "+" bitor-exp
  191          | bitor-exp . "-" bitor-exp
  191          | bitor-exp "-" bitor-exp .  ["end of command", "=", "case", "catch", ":", "default", "else", "finally", "if", "in", "{", "onleave", "}", "]", ")", "~", ",", ";", "&", "|", "identifier", "=>", "?", "!", "bitand", "bitor", "^", ">>", "<<", "-", "+", "=~=", "==", "===", ">=", ">", "<=", "<", "!=", "!==", "~=", "&&", "||"]
  192          | bitor-exp . "*" bitor-exp
  193          | bitor-exp . "/" bitor-exp
  194          | bitor-exp . "%" bitor-exp
  195          | bitor-exp . "^" bitor-exp
  196          | bitor-exp . "<<" bitor-exp
  197          | bitor-exp . "bitand" bitor-exp
  198          | bitor-exp . "bitor" bitor-exp
  199          | bitor-exp . ">>" bitor-exp

    "%"  shift, and go to state 198
    "/"  shift, and go to state 200
    "*"  shift, and go to state 201

    $default  reduce using rule 191 (bitor-exp)

    Conflict between rule 191 and token "bitand" resolved as reduce ("bitand" < "-").
    Conflict between rule 191 and token "bitor" resolved as reduce ("bitor" < "-").
    Conflict between rule 191 and token "^" resolved as reduce ("^" < "-").
    Conflict between rule 191 and token ">>" resolved as reduce (">>" < "-").
    Conflict between rule 191 and token "<<" resolved as reduce ("<<" < "-").
    Conflict between rule 191 and token "-" resolved as reduce (%left "-").
    Conflict between rule 191 and token "%" resolved as shift ("-" < "%").
    Conflict between rule 191 and token "+" resolved as reduce (%left "+").
    Conflict between rule 191 and token "/" resolved as shift ("-" < "/").
    Conflict between rule 191 and token "*" resolved as shift ("-" < "*").


state 306

  190 bitor-exp: bitor-exp . "+" bitor-exp
  191          | bitor-exp . "-" bitor-exp
  192          | bitor-exp . "*" bitor-exp
  193          | bitor-exp . "/" bitor-exp
  194          | bitor-exp . "%" bitor-exp
  194          | bitor-exp "%" bitor-exp .  ["end of command", "=", "case", "catch", ":", "default", "else", "finally", "if", "in", "{", "onleave", "}", "]", ")", "~", ",", ";", "&", "|", "identifier", "=>", "?", "!", "bitand", "bitor", "^", ">>", "<<", "-", "%", "+", "/", "*", "=~=", "==", "===", ">=", ">", "<=", "<", "!=", "!==", "~=", "&&", "||"]
  195          | bitor-exp . "^" bitor-exp
  196          | bitor-exp . "<<" bitor-exp
  197          | bitor-exp . "bitand" bitor-exp
  198          | bitor-exp . "bitor" bitor-exp
  199          | bitor-exp . ">>" bitor-exp

    $default  reduce using rule 194 (bitor-exp)

    Conflict between rule 194 and token "bitand" resolved as reduce ("bitand" < "%").
    Conflict between rule 194 and token "bitor" resolved as reduce ("bitor" < "%").
    Conflict between rule 194 and token "^" resolved as reduce ("^" < "%").
    Conflict between rule 194 and token ">>" resolved as reduce (">>" < "%").
    Conflict between rule 194 and token "<<" resolved as reduce ("<<" < "%").
    Conflict between rule 194 and token "-" resolved as reduce ("-" < "%").
    Conflict between rule 194 and token "%" resolved as reduce (%left "%").
    Conflict between rule 194 and token "+" resolved as reduce ("+" < "%").
    Conflict between rule 194 and token "/" resolved as reduce (%left "/").
    Conflict between rule 194 and token "*" resolved as reduce (%left "*").


state 307

  190 bitor-exp: bitor-exp . "+" bitor-exp
  190          | bitor-exp "+" bitor-exp .  ["end of command", "=", "case", "catch", ":", "default", "else", "finally", "if", "in", "{", "onleave", "}", "]", ")", "~", ",", ";", "&", "|", "identifier", "=>", "?", "!", "bitand", "bitor", "^", ">>", "<<", "-", "+", "=~=", "==", "===", ">=", ">", "<=", "<", "!=", "!==", "~=", "&&", "||"]
  191          | bitor-exp . "-" bitor-exp
  192          | bitor-exp . "*" bitor-exp
  193          | bitor-exp . "/" bitor-exp
  194          | bitor-exp . "%" bitor-exp
  195          | bitor-exp . "^" bitor-exp
  196          | bitor-exp . "<<" bitor-exp
  197          | bitor-exp . "bitand" bitor-exp
  198          | bitor-exp . "bitor" bitor-exp
  199          | bitor-exp . ">>" bitor-exp

    "%"  shift, and go to state 198
    "/"  shift, and go to state 200
    "*"  shift, and go to state 201

    $default  reduce using rule 190 (bitor-exp)

    Conflict between rule 190 and token "bitand" resolved as reduce ("bitand" < "+").
    Conflict between rule 190 and token "bitor" resolved as reduce ("bitor" < "+").
    Conflict between rule 190 and token "^" resolved as reduce ("^" < "+").
    Conflict between rule 190 and token ">>" resolved as reduce (">>" < "+").
    Conflict between rule 190 and token "<<" resolved as reduce ("<<" < "+").
    Conflict between rule 190 and token "-" resolved as reduce (%left "-").
    Conflict between rule 190 and token "%" resolved as shift ("+" < "%").
    Conflict between rule 190 and token "+" resolved as reduce (%left "+").
    Conflict between rule 190 and token "/" resolved as shift ("+" < "/").
    Conflict between rule 190 and token "*" resolved as shift ("+" < "*").


state 308

  190 bitor-exp: bitor-exp . "+" bitor-exp
  191          | bitor-exp . "-" bitor-exp
  192          | bitor-exp . "*" bitor-exp
  193          | bitor-exp . "/" bitor-exp
  193          | bitor-exp "/" bitor-exp .  ["end of command", "=", "case", "catch", ":", "default", "else", "finally", "if", "in", "{", "onleave", "}", "]", ")", "~", ",", ";", "&", "|", "identifier", "=>", "?", "!", "bitand", "bitor", "^", ">>", "<<", "-", "%", "+", "/", "*", "=~=", "==", "===", ">=", ">", "<=", "<", "!=", "!==", "~=", "&&", "||"]
  194          | bitor-exp . "%" bitor-exp
  195          | bitor-exp . "^" bitor-exp
  196          | bitor-exp . "<<" bitor-exp
  197          | bitor-exp . "bitand" bitor-exp
  198          | bitor-exp . "bitor" bitor-exp
  199          | bitor-exp . ">>" bitor-exp

    $default  reduce using rule 193 (bitor-exp)

    Conflict between rule 193 and token "bitand" resolved as reduce ("bitand" < "/").
    Conflict between rule 193 and token "bitor" resolved as reduce ("bitor" < "/").
    Conflict between rule 193 and token "^" resolved as reduce ("^" < "/").
    Conflict between rule 193 and token ">>" resolved as reduce (">>" < "/").
    Conflict between rule 193 and token "<<" resolved as reduce ("<<" < "/").
    Conflict between rule 193 and token "-" resolved as reduce ("-" < "/").
    Conflict between rule 193 and token "%" resolved as reduce (%left "%").
    Conflict between rule 193 and token "+" resolved as reduce ("+" < "/").
    Conflict between rule 193 and token "/" resolved as reduce (%left "/").
    Conflict between rule 193 and token "*" resolved as reduce (%left "*").


state 309

  190 bitor-exp: bitor-exp . "+" bitor-exp
  191          | bitor-exp . "-" bitor-exp
  192          | bitor-exp . "*" bitor-exp
  192          | bitor-exp "*" bitor-exp .  ["end of command", "=", "case", "catch", ":", "default", "else", "finally", "if", "in", "{", "onleave", "}", "]", ")", "~", ",", ";", "&", "|", "identifier", "=>", "?", "!", "bitand", "bitor", "^", ">>", "<<", "-", "%", "+", "/", "*", "=~=", "==", "===", ">=", ">", "<=", "<", "!=", "!==", "~=", "&&", "||"]
  193          | bitor-exp . "/" bitor-exp
  194          | bitor-exp . "%" bitor-exp
  195          | bitor-exp . "^" bitor-exp
  196          | bitor-exp . "<<" bitor-exp
  197          | bitor-exp . "bitand" bitor-exp
  198          | bitor-exp . "bitor" bitor-exp
  199          | bitor-exp . ">>" bitor-exp

    $default  reduce using rule 192 (bitor-exp)

    Conflict between rule 192 and token "bitand" resolved as reduce ("bitand" < "*").
    Conflict between rule 192 and token "bitor" resolved as reduce ("bitor" < "*").
    Conflict between rule 192 and token "^" resolved as reduce ("^" < "*").
    Conflict between rule 192 and token ">>" resolved as reduce (">>" < "*").
    Conflict between rule 192 and token "<<" resolved as reduce ("<<" < "*").
    Conflict between rule 192 and token "-" resolved as reduce ("-" < "*").
    Conflict between rule 192 and token "%" resolved as reduce (%left "%").
    Conflict between rule 192 and token "+" resolved as reduce ("+" < "*").
    Conflict between rule 192 and token "/" resolved as reduce (%left "/").
    Conflict between rule 192 and token "*" resolved as reduce (%left "*").


state 310

  206 rel-op: "=~=" .

    $default  reduce using rule 206 (rel-op)


state 311

  204 rel-op: "==" .

    $default  reduce using rule 204 (rel-op)


state 312

  205 rel-op: "===" .

    $default  reduce using rule 205 (rel-op)


state 313

  208 rel-op: ">=" .

    $default  reduce using rule 208 (rel-op)


state 314

  207 rel-op: ">" .

    $default  reduce using rule 207 (rel-op)


state 315

  203 rel-op: "<=" .

    $default  reduce using rule 203 (rel-op)


state 316

  202 rel-op: "<" .

    $default  reduce using rule 202 (rel-op)


state 317

  200 rel-op: "!=" .

    $default  reduce using rule 200 (rel-op)


state 318

  201 rel-op: "!==" .

    $default  reduce using rule 201 (rel-op)


state 319

  209 rel-op: "~=" .

    $default  reduce using rule 209 (rel-op)


state 320

   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   52 routine: . "closure"
   53        | . "function"
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
  118            | . block
  119            | . "do" "(" exp ")" block
  120 detach: . "detach"
  121       | . "disown"
  122 primary-exp: . "assert" "(" exp ")"
  123            | . "assert" "{" claims "}"
  124            | . detach "(" exp ")"
  125            | . detach block
  126            | . "isdef" "(" k1_id ")"
  127            | . "watch" "(" exp ")"
  128 lvalue: . id
  129       | . primary-exp "." id
  130       | . primary-exp "." "*"
  131 primary-exp: . "&" id
  132            | . primary-exp "." "&" id
  133 id: . "identifier"
  134 bitor-exp: . "var" bitor-exp
  135          | . "const" "var" bitor-exp
  136 primary-exp: . lvalue
  137            | . lvalue args
  138 new: . "new" "identifier" args.opt
  139 bitor-exp: . new
  140 id: . "new"
  141 primary-exp: . routine formals block
  142 float-exp: . "float"
  143 duration: . "duration"
  144         | . duration "duration"
  150 dictionary: . "[" assocs "]"
  154 tuple: . "(" tuple.exps ")"
  159 literal-exp: . float-exp
  160            | . "angle"
  161            | . duration
  162            | . string
  163            | . "[" exps "]"
  164            | . "<" bitor-exps ">"
  165            | . dictionary
  166            | . tuple
  167 string: . "string"
  168       | . string "string"
  169 literal-exp: . "__HERE__"
  175 lvalue: . primary-exp "[" exps "]"
  176 literal-exp: . "this"
  177            | . "call"
  178 primary-exp: . literal-exp
  179            | . "(" exp ")"
  180            | . "(" error ")"
  181            | . primary-exp "**" primary-exp
  182 unary-exp: . primary-exp
  183          | . "--" lvalue
  184          | . "++" lvalue
  185          | . "+" unary-exp
  186          | . "-" unary-exp
  187          | . "!" unary-exp
  188          | . "compl" unary-exp
  189 bitor-exp: . unary-exp
  190          | . bitor-exp "+" bitor-exp
  191          | . bitor-exp "-" bitor-exp
  192          | . bitor-exp "*" bitor-exp
  193          | . bitor-exp "/" bitor-exp
  194          | . bitor-exp "%" bitor-exp
  195          | . bitor-exp "^" bitor-exp
  196          | . bitor-exp "<<" bitor-exp
  197          | . bitor-exp "bitand" bitor-exp
  198          | . bitor-exp "bitor" bitor-exp
  199          | . bitor-exp ">>" bitor-exp
  212 rel-ops: rel-ops rel-op . bitor-exp
  222 primary-exp: . "%exp:" unsigned
  223 lvalue: . "%lvalue:" unsigned
  224       | . "%id:" unsigned
  225       | . primary-exp "." "%id:" unsigned
  226 primary-exp: . lvalue "(" "%exps:" unsigned ")"

    "__HERE__"    shift, and go to state 7
    "closure"     shift, and go to state 9
    "const"       shift, and go to state 10
    "function"    shift, and go to state 13
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "var"         shift, and go to state 25
    "watch"       shift, and go to state 27
    "&"           shift, and go to state 29
    "identifier"  shift, and go to state 35
    "--"          shift, and go to state 41
    "++"          shift, and go to state 42
    "do"          shift, and go to state 43
    "assert"      shift, and go to state 44
    "detach"      shift, and go to state 45
    "disown"      shift, and go to state 46
    "new"         shift, and go to state 47
    "angle"       shift, and go to state 48
    "duration"    shift, and go to state 49
    "float"       shift, and go to state 50
    "string"      shift, and go to state 51
    "call"        shift, and go to state 52
    "this"        shift, and go to state 53
    "!"           shift, and go to state 54
    "compl"       shift, and go to state 55
    "-"           shift, and go to state 56
    "+"           shift, and go to state 57
    "<"           shift, and go to state 58
    "%exp:"       shift, and go to state 60
    "%lvalue:"    shift, and go to state 61
    "%id:"        shift, and go to state 62

    block        go to state 67
    routine      go to state 100
    primary-exp  go to state 101
    detach       go to state 71
    lvalue       go to state 120
    id           go to state 102
    bitor-exp    go to state 393
    new          go to state 75
    float-exp    go to state 76
    duration     go to state 77
    dictionary   go to state 78
    tuple        go to state 79
    literal-exp  go to state 80
    string       go to state 81
    unary-exp    go to state 82


state 321

   14 stmts: stmts "," cstmt.opt .

    $default  reduce using rule 14 (stmts)


state 322

   13 stmts: stmts ";" cstmt.opt .

    $default  reduce using rule 13 (stmts)


state 323

   23 stmt: . primary-exp ":" stmt
   24     | . exp
   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   37 exp: . "class" lvalue protos block
   38    | . "package" lvalue protos block
   43 stmt: . "enum" id "{" id.0 "}"
   47     | . "external" "identifier" "identifier"
   48     | . "external" "var" "identifier" "." "identifier" from "identifier"
   49     | . "external" event_or_function "(" unsigned ")" "identifier" "." "identifier" from "identifier"
   50     | . "import" lvalue
   51     | . exp "!" args.opt tilda.opt
   52 routine: . "closure"
   53        | . "function"
   54 stmt: . routine k1_id formals block
   55     | . id id formals block
   62 exp: . exp "=" exp
   63    | . exp "=" exp modifiers
   64    | . lvalue "+=" exp
   65    | . lvalue "-=" exp
   66    | . lvalue "*=" exp
   67    | . lvalue "/=" exp
   68    | . lvalue "^=" exp
   69    | . lvalue "%=" exp
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
   73 stmt: . "at" identifiers "(" exp tilda.opt ")" stmt onleave.opt
   74     | . "at" identifiers "(" event_match ")" stmt onleave.opt
   75     | . "every" "(" exp ")" stmt
   76     | . "if" "(" stmts ")" stmt else.opt
   77     | . "freezeif" "(" exp ")" stmt
   77     | "freezeif" "(" exp ")" . stmt
   78     | . "stopif" "(" exp ")" stmt
   79     | . "switch" "(" exp ")" "{" cases default.opt "}"
   80     | . "timeout" "(" exp ")" stmt catch.opt else.opt finally.opt
   81     | . "return" exp.opt
   82     | . "break"
   83     | . "continue"
   84     | . "waituntil" "(" exp tilda.opt ")"
   85     | . "waituntil" "(" event_match ")"
   86     | . "whenever" "(" exp tilda.opt ")" stmt else.opt
   87     | . "whenever" "(" event_match ")" stmt else.opt
  108     | . "try" block catches.1 else.opt finally.opt
  109     | . "try" block "finally" block
  110     | . "throw" exp.opt
  111     | . "loop" stmt
  112     | . "for" "(" exp ")" stmt
  113     | . "for" "(" stmt.opt ";" exp ";" stmt.opt ")" stmt
  114     | . "for" "(" "var" "identifier" in_or_colon exp ")" stmt
  115     | . "while" "(" exp ")" stmt
  118 primary-exp: . block
  119            | . "do" "(" exp ")" block
  120 detach: . "detach"
  121       | . "disown"
  122 primary-exp: . "assert" "(" exp ")"
  123            | . "assert" "{" claims "}"
  124            | . detach "(" exp ")"
  125            | . detach block
  126            | . "isdef" "(" k1_id ")"
  127            | . "watch" "(" exp ")"
  128 lvalue: . id
  129       | . primary-exp "." id
  130       | . primary-exp "." "*"
  131 primary-exp: . "&" id
  132            | . primary-exp "." "&" id
  133 id: . "identifier"
  134 bitor-exp: . "var" bitor-exp
  135          | . "const" "var" bitor-exp
  136 primary-exp: . lvalue
  137            | . lvalue args
  138 new: . "new" "identifier" args.opt
  139 bitor-exp: . new
  140 id: . "new"
  141 primary-exp: . routine formals block
  142 float-exp: . "float"
  143 duration: . "duration"
  144         | . duration "duration"
  150 dictionary: . "[" assocs "]"
  154 tuple: . "(" tuple.exps ")"
  159 literal-exp: . float-exp
  160            | . "angle"
  161            | . duration
  162            | . string
  163            | . "[" exps "]"
  164            | . "<" bitor-exps ">"
  165            | . dictionary
  166            | . tuple
  167 string: . "string"
  168       | . string "string"
  169 literal-exp: . "__HERE__"
  175 lvalue: . primary-exp "[" exps "]"
  176 literal-exp: . "this"
  177            | . "call"
  178 primary-exp: . literal-exp
  179            | . "(" exp ")"
  180            | . "(" error ")"
  181            | . primary-exp "**" primary-exp
  182 unary-exp: . primary-exp
  183          | . "--" lvalue
  184          | . "++" lvalue
  185          | . "+" unary-exp
  186          | . "-" unary-exp
  187          | . "!" unary-exp
  188          | . "compl" unary-exp
  189 bitor-exp: . unary-exp
  190          | . bitor-exp "+" bitor-exp
  191          | . bitor-exp "-" bitor-exp
  192          | . bitor-exp "*" bitor-exp
  193          | . bitor-exp "/" bitor-exp
  194          | . bitor-exp "%" bitor-exp
  195          | . bitor-exp "^" bitor-exp
  196          | . bitor-exp "<<" bitor-exp
  197          | . bitor-exp "bitand" bitor-exp
  198          | . bitor-exp "bitor" bitor-exp
  199          | . bitor-exp ">>" bitor-exp
  210 rel-exp: . bitor-exp rel-ops
  213 exp: . rel-exp
  214    | . exp "&&" exp
  215    | . exp "||" exp
  216    | . exp "in" exp
  217    | . exp "!" "in" exp
  221    | . "%unscope:" unsigned
  222 primary-exp: . "%exp:" unsigned
  223 lvalue: . "%lvalue:" unsigned
  224       | . "%id:" unsigned
  225       | . primary-exp "." "%id:" unsigned
  226 primary-exp: . lvalue "(" "%exps:" unsigned ")"

    "__HERE__"    shift, and go to state 7
    "break"       shift, and go to state 8
    "closure"     shift, and go to state 9
    "const"       shift, and go to state 10
    "continue"    shift, and go to state 11
    "freezeif"    shift, and go to state 12
    "function"    shift, and go to state 13
    "if"          shift, and go to state 14
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "return"      shift, and go to state 19
    "stopif"      shift, and go to state 20
    "switch"      shift, and go to state 21
    "throw"       shift, and go to state 22
    "timeout"     shift, and go to state 23
    "try"         shift, and go to state 24
    "var"         shift, and go to state 25
    "waituntil"   shift, and go to state 26
    "watch"       shift, and go to state 27
    "whenever"    shift, and go to state 28
    "&"           shift, and go to state 29
    "every"       shift, and go to state 30
    "for"         shift, and go to state 31
    "loop"        shift, and go to state 32
    "while"       shift, and go to state 33
    "at"          shift, and go to state 34
    "identifier"  shift, and go to state 35
    "class"       shift, and go to state 36
    "package"     shift, and go to state 37
    "enum"        shift, and go to state 38
    "external"    shift, and go to state 39
    "import"      shift, and go to state 40
    "--"          shift, and go to state 41
    "++"          shift, and go to state 42
    "do"          shift, and go to state 43
    "assert"      shift, and go to state 44
    "detach"      shift, and go to state 45
    "disown"      shift, and go to state 46
    "new"         shift, and go to state 47
    "angle"       shift, and go to state 48
    "duration"    shift, and go to state 49
    "float"       shift, and go to state 50
    "string"      shift, and go to state 51
    "call"        shift, and go to state 52
    "this"        shift, and go to state 53
    "!"           shift, and go to state 54
    "compl"       shift, and go to state 55
    "-"           shift, and go to state 56
    "+"           shift, and go to state 57
    "<"           shift, and go to state 58
    "%unscope:"   shift, and go to state 59
    "%exp:"       shift, and go to state 60
    "%lvalue:"    shift, and go to state 61
    "%id:"        shift, and go to state 62

    stmt         go to state 394
    block        go to state 67
    exp          go to state 68
    routine      go to state 69
    primary-exp  go to state 70
    detach       go to state 71
    lvalue       go to state 72
    id           go to state 73
    bitor-exp    go to state 74
    new          go to state 75
    float-exp    go to state 76
    duration     go to state 77
    dictionary   go to state 78
    tuple        go to state 79
    literal-exp  go to state 80
    string       go to state 81
    unary-exp    go to state 82
    rel-exp      go to state 83


state 324

   23 stmt: . primary-exp ":" stmt
   24     | . exp
   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   37 exp: . "class" lvalue protos block
   38    | . "package" lvalue protos block
   43 stmt: . "enum" id "{" id.0 "}"
   47     | . "external" "identifier" "identifier"
   48     | . "external" "var" "identifier" "." "identifier" from "identifier"
   49     | . "external" event_or_function "(" unsigned ")" "identifier" "." "identifier" from "identifier"
   50     | . "import" lvalue
   51     | . exp "!" args.opt tilda.opt
   52 routine: . "closure"
   53        | . "function"
   54 stmt: . routine k1_id formals block
   55     | . id id formals block
   62 exp: . exp "=" exp
   63    | . exp "=" exp modifiers
   64    | . lvalue "+=" exp
   65    | . lvalue "-=" exp
   66    | . lvalue "*=" exp
   67    | . lvalue "/=" exp
   68    | . lvalue "^=" exp
   69    | . lvalue "%=" exp
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
   73 stmt: . "at" identifiers "(" exp tilda.opt ")" stmt onleave.opt
   74     | . "at" identifiers "(" event_match ")" stmt onleave.opt
   75     | . "every" "(" exp ")" stmt
   76     | . "if" "(" stmts ")" stmt else.opt
   76     | "if" "(" stmts ")" . stmt else.opt
   77     | . "freezeif" "(" exp ")" stmt
   78     | . "stopif" "(" exp ")" stmt
   79     | . "switch" "(" exp ")" "{" cases default.opt "}"
   80     | . "timeout" "(" exp ")" stmt catch.opt else.opt finally.opt
   81     | . "return" exp.opt
   82     | . "break"
   83     | . "continue"
   84     | . "waituntil" "(" exp tilda.opt ")"
   85     | . "waituntil" "(" event_match ")"
   86     | . "whenever" "(" exp tilda.opt ")" stmt else.opt
   87     | . "whenever" "(" event_match ")" stmt else.opt
  108     | . "try" block catches.1 else.opt finally.opt
  109     | . "try" block "finally" block
  110     | . "throw" exp.opt
  111     | . "loop" stmt
  112     | . "for" "(" exp ")" stmt
  113     | . "for" "(" stmt.opt ";" exp ";" stmt.opt ")" stmt
  114     | . "for" "(" "var" "identifier" in_or_colon exp ")" stmt
  115     | . "while" "(" exp ")" stmt
  118 primary-exp: . block
  119            | . "do" "(" exp ")" block
  120 detach: . "detach"
  121       | . "disown"
  122 primary-exp: . "assert" "(" exp ")"
  123            | . "assert" "{" claims "}"
  124            | . detach "(" exp ")"
  125            | . detach block
  126            | . "isdef" "(" k1_id ")"
  127            | . "watch" "(" exp ")"
  128 lvalue: . id
  129       | . primary-exp "." id
  130       | . primary-exp "." "*"
  131 primary-exp: . "&" id
  132            | . primary-exp "." "&" id
  133 id: . "identifier"
  134 bitor-exp: . "var" bitor-exp
  135          | . "const" "var" bitor-exp
  136 primary-exp: . lvalue
  137            | . lvalue args
  138 new: . "new" "identifier" args.opt
  139 bitor-exp: . new
  140 id: . "new"
  141 primary-exp: . routine formals block
  142 float-exp: . "float"
  143 duration: . "duration"
  144         | . duration "duration"
  150 dictionary: . "[" assocs "]"
  154 tuple: . "(" tuple.exps ")"
  159 literal-exp: . float-exp
  160            | . "angle"
  161            | . duration
  162            | . string
  163            | . "[" exps "]"
  164            | . "<" bitor-exps ">"
  165            | . dictionary
  166            | . tuple
  167 string: . "string"
  168       | . string "string"
  169 literal-exp: . "__HERE__"
  175 lvalue: . primary-exp "[" exps "]"
  176 literal-exp: . "this"
  177            | . "call"
  178 primary-exp: . literal-exp
  179            | . "(" exp ")"
  180            | . "(" error ")"
  181            | . primary-exp "**" primary-exp
  182 unary-exp: . primary-exp
  183          | . "--" lvalue
  184          | . "++" lvalue
  185          | . "+" unary-exp
  186          | . "-" unary-exp
  187          | . "!" unary-exp
  188          | . "compl" unary-exp
  189 bitor-exp: . unary-exp
  190          | . bitor-exp "+" bitor-exp
  191          | . bitor-exp "-" bitor-exp
  192          | . bitor-exp "*" bitor-exp
  193          | . bitor-exp "/" bitor-exp
  194          | . bitor-exp "%" bitor-exp
  195          | . bitor-exp "^" bitor-exp
  196          | . bitor-exp "<<" bitor-exp
  197          | . bitor-exp "bitand" bitor-exp
  198          | . bitor-exp "bitor" bitor-exp
  199          | . bitor-exp ">>" bitor-exp
  210 rel-exp: . bitor-exp rel-ops
  213 exp: . rel-exp
  214    | . exp "&&" exp
  215    | . exp "||" exp
  216    | . exp "in" exp
  217    | . exp "!" "in" exp
  221    | . "%unscope:" unsigned
  222 primary-exp: . "%exp:" unsigned
  223 lvalue: . "%lvalue:" unsigned
  224       | . "%id:" unsigned
  225       | . primary-exp "." "%id:" unsigned
  226 primary-exp: . lvalue "(" "%exps:" unsigned ")"

    "__HERE__"    shift, and go to state 7
    "break"       shift, and go to state 8
    "closure"     shift, and go to state 9
    "const"       shift, and go to state 10
    "continue"    shift, and go to state 11
    "freezeif"    shift, and go to state 12
    "function"    shift, and go to state 13
    "if"          shift, and go to state 14
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "return"      shift, and go to state 19
    "stopif"      shift, and go to state 20
    "switch"      shift, and go to state 21
    "throw"       shift, and go to state 22
    "timeout"     shift, and go to state 23
    "try"         shift, and go to state 24
    "var"         shift, and go to state 25
    "waituntil"   shift, and go to state 26
    "watch"       shift, and go to state 27
    "whenever"    shift, and go to state 28
    "&"           shift, and go to state 29
    "every"       shift, and go to state 30
    "for"         shift, and go to state 31
    "loop"        shift, and go to state 32
    "while"       shift, and go to state 33
    "at"          shift, and go to state 34
    "identifier"  shift, and go to state 35
    "class"       shift, and go to state 36
    "package"     shift, and go to state 37
    "enum"        shift, and go to state 38
    "external"    shift, and go to state 39
    "import"      shift, and go to state 40
    "--"          shift, and go to state 41
    "++"          shift, and go to state 42
    "do"          shift, and go to state 43
    "assert"      shift, and go to state 44
    "detach"      shift, and go to state 45
    "disown"      shift, and go to state 46
    "new"         shift, and go to state 47
    "angle"       shift, and go to state 48
    "duration"    shift, and go to state 49
    "float"       shift, and go to state 50
    "string"      shift, and go to state 51
    "call"        shift, and go to state 52
    "this"        shift, and go to state 53
    "!"           shift, and go to state 54
    "compl"       shift, and go to state 55
    "-"           shift, and go to state 56
    "+"           shift, and go to state 57
    "<"           shift, and go to state 58
    "%unscope:"   shift, and go to state 59
    "%exp:"       shift, and go to state 60
    "%lvalue:"    shift, and go to state 61
    "%id:"        shift, and go to state 62

    stmt         go to state 395
    block        go to state 67
    exp          go to state 68
    routine      go to state 69
    primary-exp  go to state 70
    detach       go to state 71
    lvalue       go to state 72
    id           go to state 73
    bitor-exp    go to state 74
    new          go to state 75
    float-exp    go to state 76
    duration     go to state 77
    dictionary   go to state 78
    tuple        go to state 79
    literal-exp  go to state 80
    string       go to state 81
    unary-exp    go to state 82
    rel-exp      go to state 83


state 325

  126 primary-exp: "isdef" "(" k1_id ")" .

    $default  reduce using rule 126 (primary-exp)


state 326

   27 block: "{" id "~" id . "}"

    "}"  shift, and go to state 396


state 327

   62 exp: exp . "=" exp
   63    | exp . "=" exp modifiers
  145 assoc: exp "=>" exp .  ["]", ","]
  214 exp: exp . "&&" exp
  215    | exp . "||" exp
  216    | exp . "in" exp
  217    | exp . "!" "in" exp

    "="   shift, and go to state 164
    "in"  shift, and go to state 165
    "!"   shift, and go to state 215
    "&&"  shift, and go to state 167
    "||"  shift, and go to state 168

    $default  reduce using rule 145 (assoc)


state 328

   62 exp: exp . "=" exp
   63    | exp . "=" exp modifiers
  145 assoc: exp . "=>" exp
  214 exp: exp . "&&" exp
  215    | exp . "||" exp
  216    | exp . "in" exp
  217    | exp . "!" "in" exp

    "="   shift, and go to state 164
    "in"  shift, and go to state 165
    "=>"  shift, and go to state 214
    "!"   shift, and go to state 215
    "&&"  shift, and go to state 167
    "||"  shift, and go to state 168


state 329

  147 assocs.1: assocs.1 "," assoc .

    $default  reduce using rule 147 (assocs.1)


state 330

   62 exp: exp . "=" exp
   63    | exp . "=" exp modifiers
  214    | exp . "&&" exp
  215    | exp . "||" exp
  216    | exp . "in" exp
  217    | exp . "!" "in" exp
  234 exps.1: exps.1 "," exp .  ["]", ")", ","]

    "="   shift, and go to state 164
    "in"  shift, and go to state 165
    "!"   shift, and go to state 215
    "&&"  shift, and go to state 167
    "||"  shift, and go to state 168

    $default  reduce using rule 234 (exps.1)


state 331

   62 exp: exp . "=" exp
   63    | exp . "=" exp modifiers
  214    | exp . "&&" exp
  215    | exp . "||" exp
  216    | exp . "in" exp
  217    | exp . "!" "in" exp
  234 exps.1: exps.1 "," exp .  [","]
  235 exps.2: exps.1 "," exp .  [")"]

    "="   shift, and go to state 164
    "in"  shift, and go to state 165
    "!"   shift, and go to state 215
    "&&"  shift, and go to state 167
    "||"  shift, and go to state 168

    ")"       reduce using rule 235 (exps.2)
    $default  reduce using rule 234 (exps.1)


state 332

   23 stmt: . primary-exp ":" stmt
   24     | . exp
   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   37 exp: . "class" lvalue protos block
   38    | . "package" lvalue protos block
   43 stmt: . "enum" id "{" id.0 "}"
   47     | . "external" "identifier" "identifier"
   48     | . "external" "var" "identifier" "." "identifier" from "identifier"
   49     | . "external" event_or_function "(" unsigned ")" "identifier" "." "identifier" from "identifier"
   50     | . "import" lvalue
   51     | . exp "!" args.opt tilda.opt
   52 routine: . "closure"
   53        | . "function"
   54 stmt: . routine k1_id formals block
   55     | . id id formals block
   62 exp: . exp "=" exp
   63    | . exp "=" exp modifiers
   64    | . lvalue "+=" exp
   65    | . lvalue "-=" exp
   66    | . lvalue "*=" exp
   67    | . lvalue "/=" exp
   68    | . lvalue "^=" exp
   69    | . lvalue "%=" exp
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
   73 stmt: . "at" identifiers "(" exp tilda.opt ")" stmt onleave.opt
   74     | . "at" identifiers "(" event_match ")" stmt onleave.opt
   75     | . "every" "(" exp ")" stmt
   76     | . "if" "(" stmts ")" stmt else.opt
   77     | . "freezeif" "(" exp ")" stmt
   78     | . "stopif" "(" exp ")" stmt
   78     | "stopif" "(" exp ")" . stmt
   79     | . "switch" "(" exp ")" "{" cases default.opt "}"
   80     | . "timeout" "(" exp ")" stmt catch.opt else.opt finally.opt
   81     | . "return" exp.opt
   82     | . "break"
   83     | . "continue"
   84     | . "waituntil" "(" exp tilda.opt ")"
   85     | . "waituntil" "(" event_match ")"
   86     | . "whenever" "(" exp tilda.opt ")" stmt else.opt
   87     | . "whenever" "(" event_match ")" stmt else.opt
  108     | . "try" block catches.1 else.opt finally.opt
  109     | . "try" block "finally" block
  110     | . "throw" exp.opt
  111     | . "loop" stmt
  112     | . "for" "(" exp ")" stmt
  113     | . "for" "(" stmt.opt ";" exp ";" stmt.opt ")" stmt
  114     | . "for" "(" "var" "identifier" in_or_colon exp ")" stmt
  115     | . "while" "(" exp ")" stmt
  118 primary-exp: . block
  119            | . "do" "(" exp ")" block
  120 detach: . "detach"
  121       | . "disown"
  122 primary-exp: . "assert" "(" exp ")"
  123            | . "assert" "{" claims "}"
  124            | . detach "(" exp ")"
  125            | . detach block
  126            | . "isdef" "(" k1_id ")"
  127            | . "watch" "(" exp ")"
  128 lvalue: . id
  129       | . primary-exp "." id
  130       | . primary-exp "." "*"
  131 primary-exp: . "&" id
  132            | . primary-exp "." "&" id
  133 id: . "identifier"
  134 bitor-exp: . "var" bitor-exp
  135          | . "const" "var" bitor-exp
  136 primary-exp: . lvalue
  137            | . lvalue args
  138 new: . "new" "identifier" args.opt
  139 bitor-exp: . new
  140 id: . "new"
  141 primary-exp: . routine formals block
  142 float-exp: . "float"
  143 duration: . "duration"
  144         | . duration "duration"
  150 dictionary: . "[" assocs "]"
  154 tuple: . "(" tuple.exps ")"
  159 literal-exp: . float-exp
  160            | . "angle"
  161            | . duration
  162            | . string
  163            | . "[" exps "]"
  164            | . "<" bitor-exps ">"
  165            | . dictionary
  166            | . tuple
  167 string: . "string"
  168       | . string "string"
  169 literal-exp: . "__HERE__"
  175 lvalue: . primary-exp "[" exps "]"
  176 literal-exp: . "this"
  177            | . "call"
  178 primary-exp: . literal-exp
  179            | . "(" exp ")"
  180            | . "(" error ")"
  181            | . primary-exp "**" primary-exp
  182 unary-exp: . primary-exp
  183          | . "--" lvalue
  184          | . "++" lvalue
  185          | . "+" unary-exp
  186          | . "-" unary-exp
  187          | . "!" unary-exp
  188          | . "compl" unary-exp
  189 bitor-exp: . unary-exp
  190          | . bitor-exp "+" bitor-exp
  191          | . bitor-exp "-" bitor-exp
  192          | . bitor-exp "*" bitor-exp
  193          | . bitor-exp "/" bitor-exp
  194          | . bitor-exp "%" bitor-exp
  195          | . bitor-exp "^" bitor-exp
  196          | . bitor-exp "<<" bitor-exp
  197          | . bitor-exp "bitand" bitor-exp
  198          | . bitor-exp "bitor" bitor-exp
  199          | . bitor-exp ">>" bitor-exp
  210 rel-exp: . bitor-exp rel-ops
  213 exp: . rel-exp
  214    | . exp "&&" exp
  215    | . exp "||" exp
  216    | . exp "in" exp
  217    | . exp "!" "in" exp
  221    | . "%unscope:" unsigned
  222 primary-exp: . "%exp:" unsigned
  223 lvalue: . "%lvalue:" unsigned
  224       | . "%id:" unsigned
  225       | . primary-exp "." "%id:" unsigned
  226 primary-exp: . lvalue "(" "%exps:" unsigned ")"

    "__HERE__"    shift, and go to state 7
    "break"       shift, and go to state 8
    "closure"     shift, and go to state 9
    "const"       shift, and go to state 10
    "continue"    shift, and go to state 11
    "freezeif"    shift, and go to state 12
    "function"    shift, and go to state 13
    "if"          shift, and go to state 14
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "return"      shift, and go to state 19
    "stopif"      shift, and go to state 20
    "switch"      shift, and go to state 21
    "throw"       shift, and go to state 22
    "timeout"     shift, and go to state 23
    "try"         shift, and go to state 24
    "var"         shift, and go to state 25
    "waituntil"   shift, and go to state 26
    "watch"       shift, and go to state 27
    "whenever"    shift, and go to state 28
    "&"           shift, and go to state 29
    "every"       shift, and go to state 30
    "for"         shift, and go to state 31
    "loop"        shift, and go to state 32
    "while"       shift, and go to state 33
    "at"          shift, and go to state 34
    "identifier"  shift, and go to state 35
    "class"       shift, and go to state 36
    "package"     shift, and go to state 37
    "enum"        shift, and go to state 38
    "external"    shift, and go to state 39
    "import"      shift, and go to state 40
    "--"          shift, and go to state 41
    "++"          shift, and go to state 42
    "do"          shift, and go to state 43
    "assert"      shift, and go to state 44
    "detach"      shift, and go to state 45
    "disown"      shift, and go to state 46
    "new"         shift, and go to state 47
    "angle"       shift, and go to state 48
    "duration"    shift, and go to state 49
    "float"       shift, and go to state 50
    "string"      shift, and go to state 51
    "call"        shift, and go to state 52
    "this"        shift, and go to state 53
    "!"           shift, and go to state 54
    "compl"       shift, and go to state 55
    "-"           shift, and go to state 56
    "+"           shift, and go to state 57
    "<"           shift, and go to state 58
    "%unscope:"   shift, and go to state 59
    "%exp:"       shift, and go to state 60
    "%lvalue:"    shift, and go to state 61
    "%id:"        shift, and go to state 62

    stmt         go to state 397
    block        go to state 67
    exp          go to state 68
    routine      go to state 69
    primary-exp  go to state 70
    detach       go to state 71
    lvalue       go to state 72
    id           go to state 73
    bitor-exp    go to state 74
    new          go to state 75
    float-exp    go to state 76
    duration     go to state 77
    dictionary   go to state 78
    tuple        go to state 79
    literal-exp  go to state 80
    string       go to state 81
    unary-exp    go to state 82
    rel-exp      go to state 83


state 333

   79 stmt: "switch" "(" exp ")" . "{" cases default.opt "}"

    "{"  shift, and go to state 398


state 334

   23 stmt: . primary-exp ":" stmt
   24     | . exp
   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   37 exp: . "class" lvalue protos block
   38    | . "package" lvalue protos block
   43 stmt: . "enum" id "{" id.0 "}"
   47     | . "external" "identifier" "identifier"
   48     | . "external" "var" "identifier" "." "identifier" from "identifier"
   49     | . "external" event_or_function "(" unsigned ")" "identifier" "." "identifier" from "identifier"
   50     | . "import" lvalue
   51     | . exp "!" args.opt tilda.opt
   52 routine: . "closure"
   53        | . "function"
   54 stmt: . routine k1_id formals block
   55     | . id id formals block
   62 exp: . exp "=" exp
   63    | . exp "=" exp modifiers
   64    | . lvalue "+=" exp
   65    | . lvalue "-=" exp
   66    | . lvalue "*=" exp
   67    | . lvalue "/=" exp
   68    | . lvalue "^=" exp
   69    | . lvalue "%=" exp
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
   73 stmt: . "at" identifiers "(" exp tilda.opt ")" stmt onleave.opt
   74     | . "at" identifiers "(" event_match ")" stmt onleave.opt
   75     | . "every" "(" exp ")" stmt
   76     | . "if" "(" stmts ")" stmt else.opt
   77     | . "freezeif" "(" exp ")" stmt
   78     | . "stopif" "(" exp ")" stmt
   79     | . "switch" "(" exp ")" "{" cases default.opt "}"
   80     | . "timeout" "(" exp ")" stmt catch.opt else.opt finally.opt
   80     | "timeout" "(" exp ")" . stmt catch.opt else.opt finally.opt
   81     | . "return" exp.opt
   82     | . "break"
   83     | . "continue"
   84     | . "waituntil" "(" exp tilda.opt ")"
   85     | . "waituntil" "(" event_match ")"
   86     | . "whenever" "(" exp tilda.opt ")" stmt else.opt
   87     | . "whenever" "(" event_match ")" stmt else.opt
  108     | . "try" block catches.1 else.opt finally.opt
  109     | . "try" block "finally" block
  110     | . "throw" exp.opt
  111     | . "loop" stmt
  112     | . "for" "(" exp ")" stmt
  113     | . "for" "(" stmt.opt ";" exp ";" stmt.opt ")" stmt
  114     | . "for" "(" "var" "identifier" in_or_colon exp ")" stmt
  115     | . "while" "(" exp ")" stmt
  118 primary-exp: . block
  119            | . "do" "(" exp ")" block
  120 detach: . "detach"
  121       | . "disown"
  122 primary-exp: . "assert" "(" exp ")"
  123            | . "assert" "{" claims "}"
  124            | . detach "(" exp ")"
  125            | . detach block
  126            | . "isdef" "(" k1_id ")"
  127            | . "watch" "(" exp ")"
  128 lvalue: . id
  129       | . primary-exp "." id
  130       | . primary-exp "." "*"
  131 primary-exp: . "&" id
  132            | . primary-exp "." "&" id
  133 id: . "identifier"
  134 bitor-exp: . "var" bitor-exp
  135          | . "const" "var" bitor-exp
  136 primary-exp: . lvalue
  137            | . lvalue args
  138 new: . "new" "identifier" args.opt
  139 bitor-exp: . new
  140 id: . "new"
  141 primary-exp: . routine formals block
  142 float-exp: . "float"
  143 duration: . "duration"
  144         | . duration "duration"
  150 dictionary: . "[" assocs "]"
  154 tuple: . "(" tuple.exps ")"
  159 literal-exp: . float-exp
  160            | . "angle"
  161            | . duration
  162            | . string
  163            | . "[" exps "]"
  164            | . "<" bitor-exps ">"
  165            | . dictionary
  166            | . tuple
  167 string: . "string"
  168       | . string "string"
  169 literal-exp: . "__HERE__"
  175 lvalue: . primary-exp "[" exps "]"
  176 literal-exp: . "this"
  177            | . "call"
  178 primary-exp: . literal-exp
  179            | . "(" exp ")"
  180            | . "(" error ")"
  181            | . primary-exp "**" primary-exp
  182 unary-exp: . primary-exp
  183          | . "--" lvalue
  184          | . "++" lvalue
  185          | . "+" unary-exp
  186          | . "-" unary-exp
  187          | . "!" unary-exp
  188          | . "compl" unary-exp
  189 bitor-exp: . unary-exp
  190          | . bitor-exp "+" bitor-exp
  191          | . bitor-exp "-" bitor-exp
  192          | . bitor-exp "*" bitor-exp
  193          | . bitor-exp "/" bitor-exp
  194          | . bitor-exp "%" bitor-exp
  195          | . bitor-exp "^" bitor-exp
  196          | . bitor-exp "<<" bitor-exp
  197          | . bitor-exp "bitand" bitor-exp
  198          | . bitor-exp "bitor" bitor-exp
  199          | . bitor-exp ">>" bitor-exp
  210 rel-exp: . bitor-exp rel-ops
  213 exp: . rel-exp
  214    | . exp "&&" exp
  215    | . exp "||" exp
  216    | . exp "in" exp
  217    | . exp "!" "in" exp
  221    | . "%unscope:" unsigned
  222 primary-exp: . "%exp:" unsigned
  223 lvalue: . "%lvalue:" unsigned
  224       | . "%id:" unsigned
  225       | . primary-exp "." "%id:" unsigned
  226 primary-exp: . lvalue "(" "%exps:" unsigned ")"

    "__HERE__"    shift, and go to state 7
    "break"       shift, and go to state 8
    "closure"     shift, and go to state 9
    "const"       shift, and go to state 10
    "continue"    shift, and go to state 11
    "freezeif"    shift, and go to state 12
    "function"    shift, and go to state 13
    "if"          shift, and go to state 14
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "return"      shift, and go to state 19
    "stopif"      shift, and go to state 20
    "switch"      shift, and go to state 21
    "throw"       shift, and go to state 22
    "timeout"     shift, and go to state 23
    "try"         shift, and go to state 24
    "var"         shift, and go to state 25
    "waituntil"   shift, and go to state 26
    "watch"       shift, and go to state 27
    "whenever"    shift, and go to state 28
    "&"           shift, and go to state 29
    "every"       shift, and go to state 30
    "for"         shift, and go to state 31
    "loop"        shift, and go to state 32
    "while"       shift, and go to state 33
    "at"          shift, and go to state 34
    "identifier"  shift, and go to state 35
    "class"       shift, and go to state 36
    "package"     shift, and go to state 37
    "enum"        shift, and go to state 38
    "external"    shift, and go to state 39
    "import"      shift, and go to state 40
    "--"          shift, and go to state 41
    "++"          shift, and go to state 42
    "do"          shift, and go to state 43
    "assert"      shift, and go to state 44
    "detach"      shift, and go to state 45
    "disown"      shift, and go to state 46
    "new"         shift, and go to state 47
    "angle"       shift, and go to state 48
    "duration"    shift, and go to state 49
    "float"       shift, and go to state 50
    "string"      shift, and go to state 51
    "call"        shift, and go to state 52
    "this"        shift, and go to state 53
    "!"           shift, and go to state 54
    "compl"       shift, and go to state 55
    "-"           shift, and go to state 56
    "+"           shift, and go to state 57
    "<"           shift, and go to state 58
    "%unscope:"   shift, and go to state 59
    "%exp:"       shift, and go to state 60
    "%lvalue:"    shift, and go to state 61
    "%id:"        shift, and go to state 62

    stmt         go to state 399
    block        go to state 67
    exp          go to state 68
    routine      go to state 69
    primary-exp  go to state 70
    detach       go to state 71
    lvalue       go to state 72
    id           go to state 73
    bitor-exp    go to state 74
    new          go to state 75
    float-exp    go to state 76
    duration     go to state 77
    dictionary   go to state 78
    tuple        go to state 79
    literal-exp  go to state 80
    string       go to state 81
    unary-exp    go to state 82
    rel-exp      go to state 83


state 335

   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   37 exp: . "class" lvalue protos block
   38    | . "package" lvalue protos block
   52 routine: . "closure"
   53        | . "function"
   62 exp: . exp "=" exp
   63    | . exp "=" exp modifiers
   64    | . lvalue "+=" exp
   65    | . lvalue "-=" exp
   66    | . lvalue "*=" exp
   67    | . lvalue "/=" exp
   68    | . lvalue "^=" exp
   69    | . lvalue "%=" exp
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
   99 match: . exp
  100      | . exp "if" exp
  102 match.opt: "(" . match ")"
  118 primary-exp: . block
  119            | . "do" "(" exp ")" block
  120 detach: . "detach"
  121       | . "disown"
  122 primary-exp: . "assert" "(" exp ")"
  123            | . "assert" "{" claims "}"
  124            | . detach "(" exp ")"
  125            | . detach block
  126            | . "isdef" "(" k1_id ")"
  127            | . "watch" "(" exp ")"
  128 lvalue: . id
  129       | . primary-exp "." id
  130       | . primary-exp "." "*"
  131 primary-exp: . "&" id
  132            | . primary-exp "." "&" id
  133 id: . "identifier"
  134 bitor-exp: . "var" bitor-exp
  135          | . "const" "var" bitor-exp
  136 primary-exp: . lvalue
  137            | . lvalue args
  138 new: . "new" "identifier" args.opt
  139 bitor-exp: . new
  140 id: . "new"
  141 primary-exp: . routine formals block
  142 float-exp: . "float"
  143 duration: . "duration"
  144         | . duration "duration"
  150 dictionary: . "[" assocs "]"
  154 tuple: . "(" tuple.exps ")"
  159 literal-exp: . float-exp
  160            | . "angle"
  161            | . duration
  162            | . string
  163            | . "[" exps "]"
  164            | . "<" bitor-exps ">"
  165            | . dictionary
  166            | . tuple
  167 string: . "string"
  168       | . string "string"
  169 literal-exp: . "__HERE__"
  175 lvalue: . primary-exp "[" exps "]"
  176 literal-exp: . "this"
  177            | . "call"
  178 primary-exp: . literal-exp
  179            | . "(" exp ")"
  180            | . "(" error ")"
  181            | . primary-exp "**" primary-exp
  182 unary-exp: . primary-exp
  183          | . "--" lvalue
  184          | . "++" lvalue
  185          | . "+" unary-exp
  186          | . "-" unary-exp
  187          | . "!" unary-exp
  188          | . "compl" unary-exp
  189 bitor-exp: . unary-exp
  190          | . bitor-exp "+" bitor-exp
  191          | . bitor-exp "-" bitor-exp
  192          | . bitor-exp "*" bitor-exp
  193          | . bitor-exp "/" bitor-exp
  194          | . bitor-exp "%" bitor-exp
  195          | . bitor-exp "^" bitor-exp
  196          | . bitor-exp "<<" bitor-exp
  197          | . bitor-exp "bitand" bitor-exp
  198          | . bitor-exp "bitor" bitor-exp
  199          | . bitor-exp ">>" bitor-exp
  210 rel-exp: . bitor-exp rel-ops
  213 exp: . rel-exp
  214    | . exp "&&" exp
  215    | . exp "||" exp
  216    | . exp "in" exp
  217    | . exp "!" "in" exp
  221    | . "%unscope:" unsigned
  222 primary-exp: . "%exp:" unsigned
  223 lvalue: . "%lvalue:" unsigned
  224       | . "%id:" unsigned
  225       | . primary-exp "." "%id:" unsigned
  226 primary-exp: . lvalue "(" "%exps:" unsigned ")"

    "__HERE__"    shift, and go to state 7
    "closure"     shift, and go to state 9
    "const"       shift, and go to state 10
    "function"    shift, and go to state 13
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "var"         shift, and go to state 25
    "watch"       shift, and go to state 27
    "&"           shift, and go to state 29
    "identifier"  shift, and go to state 35
    "class"       shift, and go to state 36
    "package"     shift, and go to state 37
    "--"          shift, and go to state 41
    "++"          shift, and go to state 42
    "do"          shift, and go to state 43
    "assert"      shift, and go to state 44
    "detach"      shift, and go to state 45
    "disown"      shift, and go to state 46
    "new"         shift, and go to state 47
    "angle"       shift, and go to state 48
    "duration"    shift, and go to state 49
    "float"       shift, and go to state 50
    "string"      shift, and go to state 51
    "call"        shift, and go to state 52
    "this"        shift, and go to state 53
    "!"           shift, and go to state 54
    "compl"       shift, and go to state 55
    "-"           shift, and go to state 56
    "+"           shift, and go to state 57
    "<"           shift, and go to state 58
    "%unscope:"   shift, and go to state 59
    "%exp:"       shift, and go to state 60
    "%lvalue:"    shift, and go to state 61
    "%id:"        shift, and go to state 62

    block        go to state 67
    exp          go to state 400
    routine      go to state 100
    primary-exp  go to state 101
    match        go to state 401
    detach       go to state 71
    lvalue       go to state 72
    id           go to state 102
    bitor-exp    go to state 74
    new          go to state 75
    float-exp    go to state 76
    duration     go to state 77
    dictionary   go to state 78
    tuple        go to state 79
    literal-exp  go to state 80
    string       go to state 81
    unary-exp    go to state 82
    rel-exp      go to state 83


state 336

   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
  103 catch: "catch" match.opt . block

    "{"  shift, and go to state 16

    block  go to state 402


state 337

  109 stmt: "try" block "finally" block .

    $default  reduce using rule 109 (stmt)


state 338

   23 stmt: . primary-exp ":" stmt
   24     | . exp
   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   37 exp: . "class" lvalue protos block
   38    | . "package" lvalue protos block
   43 stmt: . "enum" id "{" id.0 "}"
   47     | . "external" "identifier" "identifier"
   48     | . "external" "var" "identifier" "." "identifier" from "identifier"
   49     | . "external" event_or_function "(" unsigned ")" "identifier" "." "identifier" from "identifier"
   50     | . "import" lvalue
   51     | . exp "!" args.opt tilda.opt
   52 routine: . "closure"
   53        | . "function"
   54 stmt: . routine k1_id formals block
   55     | . id id formals block
   62 exp: . exp "=" exp
   63    | . exp "=" exp modifiers
   64    | . lvalue "+=" exp
   65    | . lvalue "-=" exp
   66    | . lvalue "*=" exp
   67    | . lvalue "/=" exp
   68    | . lvalue "^=" exp
   69    | . lvalue "%=" exp
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
   73 stmt: . "at" identifiers "(" exp tilda.opt ")" stmt onleave.opt
   74     | . "at" identifiers "(" event_match ")" stmt onleave.opt
   75     | . "every" "(" exp ")" stmt
   76     | . "if" "(" stmts ")" stmt else.opt
   77     | . "freezeif" "(" exp ")" stmt
   78     | . "stopif" "(" exp ")" stmt
   79     | . "switch" "(" exp ")" "{" cases default.opt "}"
   80     | . "timeout" "(" exp ")" stmt catch.opt else.opt finally.opt
   81     | . "return" exp.opt
   82     | . "break"
   83     | . "continue"
   84     | . "waituntil" "(" exp tilda.opt ")"
   85     | . "waituntil" "(" event_match ")"
   86     | . "whenever" "(" exp tilda.opt ")" stmt else.opt
   87     | . "whenever" "(" event_match ")" stmt else.opt
   91 else.opt: "else" . stmt
  108 stmt: . "try" block catches.1 else.opt finally.opt
  109     | . "try" block "finally" block
  110     | . "throw" exp.opt
  111     | . "loop" stmt
  112     | . "for" "(" exp ")" stmt
  113     | . "for" "(" stmt.opt ";" exp ";" stmt.opt ")" stmt
  114     | . "for" "(" "var" "identifier" in_or_colon exp ")" stmt
  115     | . "while" "(" exp ")" stmt
  118 primary-exp: . block
  119            | . "do" "(" exp ")" block
  120 detach: . "detach"
  121       | . "disown"
  122 primary-exp: . "assert" "(" exp ")"
  123            | . "assert" "{" claims "}"
  124            | . detach "(" exp ")"
  125            | . detach block
  126            | . "isdef" "(" k1_id ")"
  127            | . "watch" "(" exp ")"
  128 lvalue: . id
  129       | . primary-exp "." id
  130       | . primary-exp "." "*"
  131 primary-exp: . "&" id
  132            | . primary-exp "." "&" id
  133 id: . "identifier"
  134 bitor-exp: . "var" bitor-exp
  135          | . "const" "var" bitor-exp
  136 primary-exp: . lvalue
  137            | . lvalue args
  138 new: . "new" "identifier" args.opt
  139 bitor-exp: . new
  140 id: . "new"
  141 primary-exp: . routine formals block
  142 float-exp: . "float"
  143 duration: . "duration"
  144         | . duration "duration"
  150 dictionary: . "[" assocs "]"
  154 tuple: . "(" tuple.exps ")"
  159 literal-exp: . float-exp
  160            | . "angle"
  161            | . duration
  162            | . string
  163            | . "[" exps "]"
  164            | . "<" bitor-exps ">"
  165            | . dictionary
  166            | . tuple
  167 string: . "string"
  168       | . string "string"
  169 literal-exp: . "__HERE__"
  175 lvalue: . primary-exp "[" exps "]"
  176 literal-exp: . "this"
  177            | . "call"
  178 primary-exp: . literal-exp
  179            | . "(" exp ")"
  180            | . "(" error ")"
  181            | . primary-exp "**" primary-exp
  182 unary-exp: . primary-exp
  183          | . "--" lvalue
  184          | . "++" lvalue
  185          | . "+" unary-exp
  186          | . "-" unary-exp
  187          | . "!" unary-exp
  188          | . "compl" unary-exp
  189 bitor-exp: . unary-exp
  190          | . bitor-exp "+" bitor-exp
  191          | . bitor-exp "-" bitor-exp
  192          | . bitor-exp "*" bitor-exp
  193          | . bitor-exp "/" bitor-exp
  194          | . bitor-exp "%" bitor-exp
  195          | . bitor-exp "^" bitor-exp
  196          | . bitor-exp "<<" bitor-exp
  197          | . bitor-exp "bitand" bitor-exp
  198          | . bitor-exp "bitor" bitor-exp
  199          | . bitor-exp ">>" bitor-exp
  210 rel-exp: . bitor-exp rel-ops
  213 exp: . rel-exp
  214    | . exp "&&" exp
  215    | . exp "||" exp
  216    | . exp "in" exp
  217    | . exp "!" "in" exp
  221    | . "%unscope:" unsigned
  222 primary-exp: . "%exp:" unsigned
  223 lvalue: . "%lvalue:" unsigned
  224       | . "%id:" unsigned
  225       | . primary-exp "." "%id:" unsigned
  226 primary-exp: . lvalue "(" "%exps:" unsigned ")"

    "__HERE__"    shift, and go to state 7
    "break"       shift, and go to state 8
    "closure"     shift, and go to state 9
    "const"       shift, and go to state 10
    "continue"    shift, and go to state 11
    "freezeif"    shift, and go to state 12
    "function"    shift, and go to state 13
    "if"          shift, and go to state 14
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "return"      shift, and go to state 19
    "stopif"      shift, and go to state 20
    "switch"      shift, and go to state 21
    "throw"       shift, and go to state 22
    "timeout"     shift, and go to state 23
    "try"         shift, and go to state 24
    "var"         shift, and go to state 25
    "waituntil"   shift, and go to state 26
    "watch"       shift, and go to state 27
    "whenever"    shift, and go to state 28
    "&"           shift, and go to state 29
    "every"       shift, and go to state 30
    "for"         shift, and go to state 31
    "loop"        shift, and go to state 32
    "while"       shift, and go to state 33
    "at"          shift, and go to state 34
    "identifier"  shift, and go to state 35
    "class"       shift, and go to state 36
    "package"     shift, and go to state 37
    "enum"        shift, and go to state 38
    "external"    shift, and go to state 39
    "import"      shift, and go to state 40
    "--"          shift, and go to state 41
    "++"          shift, and go to state 42
    "do"          shift, and go to state 43
    "assert"      shift, and go to state 44
    "detach"      shift, and go to state 45
    "disown"      shift, and go to state 46
    "new"         shift, and go to state 47
    "angle"       shift, and go to state 48
    "duration"    shift, and go to state 49
    "float"       shift, and go to state 50
    "string"      shift, and go to state 51
    "call"        shift, and go to state 52
    "this"        shift, and go to state 53
    "!"           shift, and go to state 54
    "compl"       shift, and go to state 55
    "-"           shift, and go to state 56
    "+"           shift, and go to state 57
    "<"           shift, and go to state 58
    "%unscope:"   shift, and go to state 59
    "%exp:"       shift, and go to state 60
    "%lvalue:"    shift, and go to state 61
    "%id:"        shift, and go to state 62

    stmt         go to state 403
    block        go to state 67
    exp          go to state 68
    routine      go to state 69
    primary-exp  go to state 70
    detach       go to state 71
    lvalue       go to state 72
    id           go to state 73
    bitor-exp    go to state 74
    new          go to state 75
    float-exp    go to state 76
    duration     go to state 77
    dictionary   go to state 78
    tuple        go to state 79
    literal-exp  go to state 80
    string       go to state 81
    unary-exp    go to state 82
    rel-exp      go to state 83


state 339

  106 finally.opt: .  ["end of command", "case", "catch", "default", "else", "onleave", "}", ")", ",", ";", "&", "|"]
  107            | . "finally" block
  108 stmt: "try" block catches.1 else.opt . finally.opt

    "finally"  shift, and go to state 404

    $default  reduce using rule 106 (finally.opt)

    finally.opt  go to state 405

    Conflict between rule 106 and token "finally" resolved as shift (EMPTY < "finally").


state 340

   98 catches.1: catches.1 catch .

    $default  reduce using rule 98 (catches.1)


state 341

   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   37 exp: . "class" lvalue protos block
   38    | . "package" lvalue protos block
   52 routine: . "closure"
   53        | . "function"
   62 exp: . exp "=" exp
   63    | . exp "=" exp modifiers
   64    | . lvalue "+=" exp
   65    | . lvalue "-=" exp
   66    | . lvalue "*=" exp
   67    | . lvalue "/=" exp
   68    | . lvalue "^=" exp
   69    | . lvalue "%=" exp
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
  118            | . block
  119            | . "do" "(" exp ")" block
  120 detach: . "detach"
  121       | . "disown"
  122 primary-exp: . "assert" "(" exp ")"
  123            | . "assert" "{" claims "}"
  124            | . detach "(" exp ")"
  125            | . detach block
  126            | . "isdef" "(" k1_id ")"
  127            | . "watch" "(" exp ")"
  128 lvalue: . id
  129       | . primary-exp "." id
  130       | . primary-exp "." "*"
  131 primary-exp: . "&" id
  132            | . primary-exp "." "&" id
  133 id: . "identifier"
  134 bitor-exp: . "var" bitor-exp
  135          | . "const" "var" bitor-exp
  136 primary-exp: . lvalue
  137            | . lvalue args
  138 new: . "new" "identifier" args.opt
  139 bitor-exp: . new
  140 id: . "new"
  141 primary-exp: . routine formals block
  142 float-exp: . "float"
  143 duration: . "duration"
  144         | . duration "duration"
  150 dictionary: . "[" assocs "]"
  154 tuple: . "(" tuple.exps ")"
  159 literal-exp: . float-exp
  160            | . "angle"
  161            | . duration
  162            | . string
  163            | . "[" exps "]"
  164            | . "<" bitor-exps ">"
  165            | . dictionary
  166            | . tuple
  167 string: . "string"
  168       | . string "string"
  169 literal-exp: . "__HERE__"
  174 tilda.opt: "~" . exp
  175 lvalue: . primary-exp "[" exps "]"
  176 literal-exp: . "this"
  177            | . "call"
  178 primary-exp: . literal-exp
  179            | . "(" exp ")"
  180            | . "(" error ")"
  181            | . primary-exp "**" primary-exp
  182 unary-exp: . primary-exp
  183          | . "--" lvalue
  184          | . "++" lvalue
  185          | . "+" unary-exp
  186          | . "-" unary-exp
  187          | . "!" unary-exp
  188          | . "compl" unary-exp
  189 bitor-exp: . unary-exp
  190          | . bitor-exp "+" bitor-exp
  191          | . bitor-exp "-" bitor-exp
  192          | . bitor-exp "*" bitor-exp
  193          | . bitor-exp "/" bitor-exp
  194          | . bitor-exp "%" bitor-exp
  195          | . bitor-exp "^" bitor-exp
  196          | . bitor-exp "<<" bitor-exp
  197          | . bitor-exp "bitand" bitor-exp
  198          | . bitor-exp "bitor" bitor-exp
  199          | . bitor-exp ">>" bitor-exp
  210 rel-exp: . bitor-exp rel-ops
  213 exp: . rel-exp
  214    | . exp "&&" exp
  215    | . exp "||" exp
  216    | . exp "in" exp
  217    | . exp "!" "in" exp
  221    | . "%unscope:" unsigned
  222 primary-exp: . "%exp:" unsigned
  223 lvalue: . "%lvalue:" unsigned
  224       | . "%id:" unsigned
  225       | . primary-exp "." "%id:" unsigned
  226 primary-exp: . lvalue "(" "%exps:" unsigned ")"

    "__HERE__"    shift, and go to state 7
    "closure"     shift, and go to state 9
    "const"       shift, and go to state 10
    "function"    shift, and go to state 13
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "var"         shift, and go to state 25
    "watch"       shift, and go to state 27
    "&"           shift, and go to state 29
    "identifier"  shift, and go to state 35
    "class"       shift, and go to state 36
    "package"     shift, and go to state 37
    "--"          shift, and go to state 41
    "++"          shift, and go to state 42
    "do"          shift, and go to state 43
    "assert"      shift, and go to state 44
    "detach"      shift, and go to state 45
    "disown"      shift, and go to state 46
    "new"         shift, and go to state 47
    "angle"       shift, and go to state 48
    "duration"    shift, and go to state 49
    "float"       shift, and go to state 50
    "string"      shift, and go to state 51
    "call"        shift, and go to state 52
    "this"        shift, and go to state 53
    "!"           shift, and go to state 54
    "compl"       shift, and go to state 55
    "-"           shift, and go to state 56
    "+"           shift, and go to state 57
    "<"           shift, and go to state 58
    "%unscope:"   shift, and go to state 59
    "%exp:"       shift, and go to state 60
    "%lvalue:"    shift, and go to state 61
    "%id:"        shift, and go to state 62

    block        go to state 67
    exp          go to state 406
    routine      go to state 100
    primary-exp  go to state 101
    detach       go to state 71
    lvalue       go to state 72
    id           go to state 102
    bitor-exp    go to state 74
    new          go to state 75
    float-exp    go to state 76
    duration     go to state 77
    dictionary   go to state 78
    tuple        go to state 79
    literal-exp  go to state 80
    string       go to state 81
    unary-exp    go to state 82
    rel-exp      go to state 83


state 342

  170 event_match: exp "?" . args.opt tilda.opt guard.opt
  236 args: . "(" exps ")"
  237 args.opt: .  ["if", ")", "~"]
  238         | . args

    "("  shift, and go to state 258

    $default  reduce using rule 237 (args.opt)

    args      go to state 259
    args.opt  go to state 407


state 343

   84 stmt: "waituntil" "(" exp tilda.opt . ")"

    ")"  shift, and go to state 408


state 344

   85 stmt: "waituntil" "(" event_match ")" .

    $default  reduce using rule 85 (stmt)


state 345

  127 primary-exp: "watch" "(" exp ")" .

    $default  reduce using rule 127 (primary-exp)


state 346

   86 stmt: "whenever" "(" exp tilda.opt . ")" stmt else.opt

    ")"  shift, and go to state 409


state 347

   23 stmt: . primary-exp ":" stmt
   24     | . exp
   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   37 exp: . "class" lvalue protos block
   38    | . "package" lvalue protos block
   43 stmt: . "enum" id "{" id.0 "}"
   47     | . "external" "identifier" "identifier"
   48     | . "external" "var" "identifier" "." "identifier" from "identifier"
   49     | . "external" event_or_function "(" unsigned ")" "identifier" "." "identifier" from "identifier"
   50     | . "import" lvalue
   51     | . exp "!" args.opt tilda.opt
   52 routine: . "closure"
   53        | . "function"
   54 stmt: . routine k1_id formals block
   55     | . id id formals block
   62 exp: . exp "=" exp
   63    | . exp "=" exp modifiers
   64    | . lvalue "+=" exp
   65    | . lvalue "-=" exp
   66    | . lvalue "*=" exp
   67    | . lvalue "/=" exp
   68    | . lvalue "^=" exp
   69    | . lvalue "%=" exp
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
   73 stmt: . "at" identifiers "(" exp tilda.opt ")" stmt onleave.opt
   74     | . "at" identifiers "(" event_match ")" stmt onleave.opt
   75     | . "every" "(" exp ")" stmt
   76     | . "if" "(" stmts ")" stmt else.opt
   77     | . "freezeif" "(" exp ")" stmt
   78     | . "stopif" "(" exp ")" stmt
   79     | . "switch" "(" exp ")" "{" cases default.opt "}"
   80     | . "timeout" "(" exp ")" stmt catch.opt else.opt finally.opt
   81     | . "return" exp.opt
   82     | . "break"
   83     | . "continue"
   84     | . "waituntil" "(" exp tilda.opt ")"
   85     | . "waituntil" "(" event_match ")"
   86     | . "whenever" "(" exp tilda.opt ")" stmt else.opt
   87     | . "whenever" "(" event_match ")" stmt else.opt
   87     | "whenever" "(" event_match ")" . stmt else.opt
  108     | . "try" block catches.1 else.opt finally.opt
  109     | . "try" block "finally" block
  110     | . "throw" exp.opt
  111     | . "loop" stmt
  112     | . "for" "(" exp ")" stmt
  113     | . "for" "(" stmt.opt ";" exp ";" stmt.opt ")" stmt
  114     | . "for" "(" "var" "identifier" in_or_colon exp ")" stmt
  115     | . "while" "(" exp ")" stmt
  118 primary-exp: . block
  119            | . "do" "(" exp ")" block
  120 detach: . "detach"
  121       | . "disown"
  122 primary-exp: . "assert" "(" exp ")"
  123            | . "assert" "{" claims "}"
  124            | . detach "(" exp ")"
  125            | . detach block
  126            | . "isdef" "(" k1_id ")"
  127            | . "watch" "(" exp ")"
  128 lvalue: . id
  129       | . primary-exp "." id
  130       | . primary-exp "." "*"
  131 primary-exp: . "&" id
  132            | . primary-exp "." "&" id
  133 id: . "identifier"
  134 bitor-exp: . "var" bitor-exp
  135          | . "const" "var" bitor-exp
  136 primary-exp: . lvalue
  137            | . lvalue args
  138 new: . "new" "identifier" args.opt
  139 bitor-exp: . new
  140 id: . "new"
  141 primary-exp: . routine formals block
  142 float-exp: . "float"
  143 duration: . "duration"
  144         | . duration "duration"
  150 dictionary: . "[" assocs "]"
  154 tuple: . "(" tuple.exps ")"
  159 literal-exp: . float-exp
  160            | . "angle"
  161            | . duration
  162            | . string
  163            | . "[" exps "]"
  164            | . "<" bitor-exps ">"
  165            | . dictionary
  166            | . tuple
  167 string: . "string"
  168       | . string "string"
  169 literal-exp: . "__HERE__"
  175 lvalue: . primary-exp "[" exps "]"
  176 literal-exp: . "this"
  177            | . "call"
  178 primary-exp: . literal-exp
  179            | . "(" exp ")"
  180            | . "(" error ")"
  181            | . primary-exp "**" primary-exp
  182 unary-exp: . primary-exp
  183          | . "--" lvalue
  184          | . "++" lvalue
  185          | . "+" unary-exp
  186          | . "-" unary-exp
  187          | . "!" unary-exp
  188          | . "compl" unary-exp
  189 bitor-exp: . unary-exp
  190          | . bitor-exp "+" bitor-exp
  191          | . bitor-exp "-" bitor-exp
  192          | . bitor-exp "*" bitor-exp
  193          | . bitor-exp "/" bitor-exp
  194          | . bitor-exp "%" bitor-exp
  195          | . bitor-exp "^" bitor-exp
  196          | . bitor-exp "<<" bitor-exp
  197          | . bitor-exp "bitand" bitor-exp
  198          | . bitor-exp "bitor" bitor-exp
  199          | . bitor-exp ">>" bitor-exp
  210 rel-exp: . bitor-exp rel-ops
  213 exp: . rel-exp
  214    | . exp "&&" exp
  215    | . exp "||" exp
  216    | . exp "in" exp
  217    | . exp "!" "in" exp
  221    | . "%unscope:" unsigned
  222 primary-exp: . "%exp:" unsigned
  223 lvalue: . "%lvalue:" unsigned
  224       | . "%id:" unsigned
  225       | . primary-exp "." "%id:" unsigned
  226 primary-exp: . lvalue "(" "%exps:" unsigned ")"

    "__HERE__"    shift, and go to state 7
    "break"       shift, and go to state 8
    "closure"     shift, and go to state 9
    "const"       shift, and go to state 10
    "continue"    shift, and go to state 11
    "freezeif"    shift, and go to state 12
    "function"    shift, and go to state 13
    "if"          shift, and go to state 14
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "return"      shift, and go to state 19
    "stopif"      shift, and go to state 20
    "switch"      shift, and go to state 21
    "throw"       shift, and go to state 22
    "timeout"     shift, and go to state 23
    "try"         shift, and go to state 24
    "var"         shift, and go to state 25
    "waituntil"   shift, and go to state 26
    "watch"       shift, and go to state 27
    "whenever"    shift, and go to state 28
    "&"           shift, and go to state 29
    "every"       shift, and go to state 30
    "for"         shift, and go to state 31
    "loop"        shift, and go to state 32
    "while"       shift, and go to state 33
    "at"          shift, and go to state 34
    "identifier"  shift, and go to state 35
    "class"       shift, and go to state 36
    "package"     shift, and go to state 37
    "enum"        shift, and go to state 38
    "external"    shift, and go to state 39
    "import"      shift, and go to state 40
    "--"          shift, and go to state 41
    "++"          shift, and go to state 42
    "do"          shift, and go to state 43
    "assert"      shift, and go to state 44
    "detach"      shift, and go to state 45
    "disown"      shift, and go to state 46
    "new"         shift, and go to state 47
    "angle"       shift, and go to state 48
    "duration"    shift, and go to state 49
    "float"       shift, and go to state 50
    "string"      shift, and go to state 51
    "call"        shift, and go to state 52
    "this"        shift, and go to state 53
    "!"           shift, and go to state 54
    "compl"       shift, and go to state 55
    "-"           shift, and go to state 56
    "+"           shift, and go to state 57
    "<"           shift, and go to state 58
    "%unscope:"   shift, and go to state 59
    "%exp:"       shift, and go to state 60
    "%lvalue:"    shift, and go to state 61
    "%id:"        shift, and go to state 62

    stmt         go to state 410
    block        go to state 67
    exp          go to state 68
    routine      go to state 69
    primary-exp  go to state 70
    detach       go to state 71
    lvalue       go to state 72
    id           go to state 73
    bitor-exp    go to state 74
    new          go to state 75
    float-exp    go to state 76
    duration     go to state 77
    dictionary   go to state 78
    tuple        go to state 79
    literal-exp  go to state 80
    string       go to state 81
    unary-exp    go to state 82
    rel-exp      go to state 83


state 348

   23 stmt: . primary-exp ":" stmt
   24     | . exp
   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   37 exp: . "class" lvalue protos block
   38    | . "package" lvalue protos block
   43 stmt: . "enum" id "{" id.0 "}"
   47     | . "external" "identifier" "identifier"
   48     | . "external" "var" "identifier" "." "identifier" from "identifier"
   49     | . "external" event_or_function "(" unsigned ")" "identifier" "." "identifier" from "identifier"
   50     | . "import" lvalue
   51     | . exp "!" args.opt tilda.opt
   52 routine: . "closure"
   53        | . "function"
   54 stmt: . routine k1_id formals block
   55     | . id id formals block
   62 exp: . exp "=" exp
   63    | . exp "=" exp modifiers
   64    | . lvalue "+=" exp
   65    | . lvalue "-=" exp
   66    | . lvalue "*=" exp
   67    | . lvalue "/=" exp
   68    | . lvalue "^=" exp
   69    | . lvalue "%=" exp
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
   73 stmt: . "at" identifiers "(" exp tilda.opt ")" stmt onleave.opt
   74     | . "at" identifiers "(" event_match ")" stmt onleave.opt
   75     | . "every" "(" exp ")" stmt
   75     | "every" "(" exp ")" . stmt
   76     | . "if" "(" stmts ")" stmt else.opt
   77     | . "freezeif" "(" exp ")" stmt
   78     | . "stopif" "(" exp ")" stmt
   79     | . "switch" "(" exp ")" "{" cases default.opt "}"
   80     | . "timeout" "(" exp ")" stmt catch.opt else.opt finally.opt
   81     | . "return" exp.opt
   82     | . "break"
   83     | . "continue"
   84     | . "waituntil" "(" exp tilda.opt ")"
   85     | . "waituntil" "(" event_match ")"
   86     | . "whenever" "(" exp tilda.opt ")" stmt else.opt
   87     | . "whenever" "(" event_match ")" stmt else.opt
  108     | . "try" block catches.1 else.opt finally.opt
  109     | . "try" block "finally" block
  110     | . "throw" exp.opt
  111     | . "loop" stmt
  112     | . "for" "(" exp ")" stmt
  113     | . "for" "(" stmt.opt ";" exp ";" stmt.opt ")" stmt
  114     | . "for" "(" "var" "identifier" in_or_colon exp ")" stmt
  115     | . "while" "(" exp ")" stmt
  118 primary-exp: . block
  119            | . "do" "(" exp ")" block
  120 detach: . "detach"
  121       | . "disown"
  122 primary-exp: . "assert" "(" exp ")"
  123            | . "assert" "{" claims "}"
  124            | . detach "(" exp ")"
  125            | . detach block
  126            | . "isdef" "(" k1_id ")"
  127            | . "watch" "(" exp ")"
  128 lvalue: . id
  129       | . primary-exp "." id
  130       | . primary-exp "." "*"
  131 primary-exp: . "&" id
  132            | . primary-exp "." "&" id
  133 id: . "identifier"
  134 bitor-exp: . "var" bitor-exp
  135          | . "const" "var" bitor-exp
  136 primary-exp: . lvalue
  137            | . lvalue args
  138 new: . "new" "identifier" args.opt
  139 bitor-exp: . new
  140 id: . "new"
  141 primary-exp: . routine formals block
  142 float-exp: . "float"
  143 duration: . "duration"
  144         | . duration "duration"
  150 dictionary: . "[" assocs "]"
  154 tuple: . "(" tuple.exps ")"
  159 literal-exp: . float-exp
  160            | . "angle"
  161            | . duration
  162            | . string
  163            | . "[" exps "]"
  164            | . "<" bitor-exps ">"
  165            | . dictionary
  166            | . tuple
  167 string: . "string"
  168       | . string "string"
  169 literal-exp: . "__HERE__"
  175 lvalue: . primary-exp "[" exps "]"
  176 literal-exp: . "this"
  177            | . "call"
  178 primary-exp: . literal-exp
  179            | . "(" exp ")"
  180            | . "(" error ")"
  181            | . primary-exp "**" primary-exp
  182 unary-exp: . primary-exp
  183          | . "--" lvalue
  184          | . "++" lvalue
  185          | . "+" unary-exp
  186          | . "-" unary-exp
  187          | . "!" unary-exp
  188          | . "compl" unary-exp
  189 bitor-exp: . unary-exp
  190          | . bitor-exp "+" bitor-exp
  191          | . bitor-exp "-" bitor-exp
  192          | . bitor-exp "*" bitor-exp
  193          | . bitor-exp "/" bitor-exp
  194          | . bitor-exp "%" bitor-exp
  195          | . bitor-exp "^" bitor-exp
  196          | . bitor-exp "<<" bitor-exp
  197          | . bitor-exp "bitand" bitor-exp
  198          | . bitor-exp "bitor" bitor-exp
  199          | . bitor-exp ">>" bitor-exp
  210 rel-exp: . bitor-exp rel-ops
  213 exp: . rel-exp
  214    | . exp "&&" exp
  215    | . exp "||" exp
  216    | . exp "in" exp
  217    | . exp "!" "in" exp
  221    | . "%unscope:" unsigned
  222 primary-exp: . "%exp:" unsigned
  223 lvalue: . "%lvalue:" unsigned
  224       | . "%id:" unsigned
  225       | . primary-exp "." "%id:" unsigned
  226 primary-exp: . lvalue "(" "%exps:" unsigned ")"

    "__HERE__"    shift, and go to state 7
    "break"       shift, and go to state 8
    "closure"     shift, and go to state 9
    "const"       shift, and go to state 10
    "continue"    shift, and go to state 11
    "freezeif"    shift, and go to state 12
    "function"    shift, and go to state 13
    "if"          shift, and go to state 14
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "return"      shift, and go to state 19
    "stopif"      shift, and go to state 20
    "switch"      shift, and go to state 21
    "throw"       shift, and go to state 22
    "timeout"     shift, and go to state 23
    "try"         shift, and go to state 24
    "var"         shift, and go to state 25
    "waituntil"   shift, and go to state 26
    "watch"       shift, and go to state 27
    "whenever"    shift, and go to state 28
    "&"           shift, and go to state 29
    "every"       shift, and go to state 30
    "for"         shift, and go to state 31
    "loop"        shift, and go to state 32
    "while"       shift, and go to state 33
    "at"          shift, and go to state 34
    "identifier"  shift, and go to state 35
    "class"       shift, and go to state 36
    "package"     shift, and go to state 37
    "enum"        shift, and go to state 38
    "external"    shift, and go to state 39
    "import"      shift, and go to state 40
    "--"          shift, and go to state 41
    "++"          shift, and go to state 42
    "do"          shift, and go to state 43
    "assert"      shift, and go to state 44
    "detach"      shift, and go to state 45
    "disown"      shift, and go to state 46
    "new"         shift, and go to state 47
    "angle"       shift, and go to state 48
    "duration"    shift, and go to state 49
    "float"       shift, and go to state 50
    "string"      shift, and go to state 51
    "call"        shift, and go to state 52
    "this"        shift, and go to state 53
    "!"           shift, and go to state 54
    "compl"       shift, and go to state 55
    "-"           shift, and go to state 56
    "+"           shift, and go to state 57
    "<"           shift, and go to state 58
    "%unscope:"   shift, and go to state 59
    "%exp:"       shift, and go to state 60
    "%lvalue:"    shift, and go to state 61
    "%id:"        shift, and go to state 62

    stmt         go to state 411
    block        go to state 67
    exp          go to state 68
    routine      go to state 69
    primary-exp  go to state 70
    detach       go to state 71
    lvalue       go to state 72
    id           go to state 73
    bitor-exp    go to state 74
    new          go to state 75
    float-exp    go to state 76
    duration     go to state 77
    dictionary   go to state 78
    tuple        go to state 79
    literal-exp  go to state 80
    string       go to state 81
    unary-exp    go to state 82
    rel-exp      go to state 83


state 349

  114 stmt: "for" "(" "var" "identifier" . in_or_colon exp ")" stmt
  116 in_or_colon: . "in"
  117            | . ":"
  133 id: "identifier" .  ["=", "[", "(", ".", ")", ";", "--", "++", "->", "!", "bitand", "bitor", "^", ">>", "<<", "-", "%", "+", "/", "*", "**", "=~=", "==", "===", ">=", ">", "<=", "<", "!=", "!==", "~=", "&&", "||"]

    ":"   shift, and go to state 412
    "in"  shift, and go to state 413

    $default  reduce using rule 133 (id)

    in_or_colon  go to state 414

    Conflict between rule 133 and token "in" resolved as shift ("identifier" < "in").


state 350

   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   37 exp: . "class" lvalue protos block
   38    | . "package" lvalue protos block
   52 routine: . "closure"
   53        | . "function"
   62 exp: . exp "=" exp
   63    | . exp "=" exp modifiers
   64    | . lvalue "+=" exp
   65    | . lvalue "-=" exp
   66    | . lvalue "*=" exp
   67    | . lvalue "/=" exp
   68    | . lvalue "^=" exp
   69    | . lvalue "%=" exp
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
  113 stmt: "for" "(" stmt.opt ";" . exp ";" stmt.opt ")" stmt
  118 primary-exp: . block
  119            | . "do" "(" exp ")" block
  120 detach: . "detach"
  121       | . "disown"
  122 primary-exp: . "assert" "(" exp ")"
  123            | . "assert" "{" claims "}"
  124            | . detach "(" exp ")"
  125            | . detach block
  126            | . "isdef" "(" k1_id ")"
  127            | . "watch" "(" exp ")"
  128 lvalue: . id
  129       | . primary-exp "." id
  130       | . primary-exp "." "*"
  131 primary-exp: . "&" id
  132            | . primary-exp "." "&" id
  133 id: . "identifier"
  134 bitor-exp: . "var" bitor-exp
  135          | . "const" "var" bitor-exp
  136 primary-exp: . lvalue
  137            | . lvalue args
  138 new: . "new" "identifier" args.opt
  139 bitor-exp: . new
  140 id: . "new"
  141 primary-exp: . routine formals block
  142 float-exp: . "float"
  143 duration: . "duration"
  144         | . duration "duration"
  150 dictionary: . "[" assocs "]"
  154 tuple: . "(" tuple.exps ")"
  159 literal-exp: . float-exp
  160            | . "angle"
  161            | . duration
  162            | . string
  163            | . "[" exps "]"
  164            | . "<" bitor-exps ">"
  165            | . dictionary
  166            | . tuple
  167 string: . "string"
  168       | . string "string"
  169 literal-exp: . "__HERE__"
  175 lvalue: . primary-exp "[" exps "]"
  176 literal-exp: . "this"
  177            | . "call"
  178 primary-exp: . literal-exp
  179            | . "(" exp ")"
  180            | . "(" error ")"
  181            | . primary-exp "**" primary-exp
  182 unary-exp: . primary-exp
  183          | . "--" lvalue
  184          | . "++" lvalue
  185          | . "+" unary-exp
  186          | . "-" unary-exp
  187          | . "!" unary-exp
  188          | . "compl" unary-exp
  189 bitor-exp: . unary-exp
  190          | . bitor-exp "+" bitor-exp
  191          | . bitor-exp "-" bitor-exp
  192          | . bitor-exp "*" bitor-exp
  193          | . bitor-exp "/" bitor-exp
  194          | . bitor-exp "%" bitor-exp
  195          | . bitor-exp "^" bitor-exp
  196          | . bitor-exp "<<" bitor-exp
  197          | . bitor-exp "bitand" bitor-exp
  198          | . bitor-exp "bitor" bitor-exp
  199          | . bitor-exp ">>" bitor-exp
  210 rel-exp: . bitor-exp rel-ops
  213 exp: . rel-exp
  214    | . exp "&&" exp
  215    | . exp "||" exp
  216    | . exp "in" exp
  217    | . exp "!" "in" exp
  221    | . "%unscope:" unsigned
  222 primary-exp: . "%exp:" unsigned
  223 lvalue: . "%lvalue:" unsigned
  224       | . "%id:" unsigned
  225       | . primary-exp "." "%id:" unsigned
  226 primary-exp: . lvalue "(" "%exps:" unsigned ")"

    "__HERE__"    shift, and go to state 7
    "closure"     shift, and go to state 9
    "const"       shift, and go to state 10
    "function"    shift, and go to state 13
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "var"         shift, and go to state 25
    "watch"       shift, and go to state 27
    "&"           shift, and go to state 29
    "identifier"  shift, and go to state 35
    "class"       shift, and go to state 36
    "package"     shift, and go to state 37
    "--"          shift, and go to state 41
    "++"          shift, and go to state 42
    "do"          shift, and go to state 43
    "assert"      shift, and go to state 44
    "detach"      shift, and go to state 45
    "disown"      shift, and go to state 46
    "new"         shift, and go to state 47
    "angle"       shift, and go to state 48
    "duration"    shift, and go to state 49
    "float"       shift, and go to state 50
    "string"      shift, and go to state 51
    "call"        shift, and go to state 52
    "this"        shift, and go to state 53
    "!"           shift, and go to state 54
    "compl"       shift, and go to state 55
    "-"           shift, and go to state 56
    "+"           shift, and go to state 57
    "<"           shift, and go to state 58
    "%unscope:"   shift, and go to state 59
    "%exp:"       shift, and go to state 60
    "%lvalue:"    shift, and go to state 61
    "%id:"        shift, and go to state 62

    block        go to state 67
    exp          go to state 415
    routine      go to state 100
    primary-exp  go to state 101
    detach       go to state 71
    lvalue       go to state 72
    id           go to state 102
    bitor-exp    go to state 74
    new          go to state 75
    float-exp    go to state 76
    duration     go to state 77
    dictionary   go to state 78
    tuple        go to state 79
    literal-exp  go to state 80
    string       go to state 81
    unary-exp    go to state 82
    rel-exp      go to state 83


state 351

   23 stmt: . primary-exp ":" stmt
   24     | . exp
   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   37 exp: . "class" lvalue protos block
   38    | . "package" lvalue protos block
   43 stmt: . "enum" id "{" id.0 "}"
   47     | . "external" "identifier" "identifier"
   48     | . "external" "var" "identifier" "." "identifier" from "identifier"
   49     | . "external" event_or_function "(" unsigned ")" "identifier" "." "identifier" from "identifier"
   50     | . "import" lvalue
   51     | . exp "!" args.opt tilda.opt
   52 routine: . "closure"
   53        | . "function"
   54 stmt: . routine k1_id formals block
   55     | . id id formals block
   62 exp: . exp "=" exp
   63    | . exp "=" exp modifiers
   64    | . lvalue "+=" exp
   65    | . lvalue "-=" exp
   66    | . lvalue "*=" exp
   67    | . lvalue "/=" exp
   68    | . lvalue "^=" exp
   69    | . lvalue "%=" exp
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
   73 stmt: . "at" identifiers "(" exp tilda.opt ")" stmt onleave.opt
   74     | . "at" identifiers "(" event_match ")" stmt onleave.opt
   75     | . "every" "(" exp ")" stmt
   76     | . "if" "(" stmts ")" stmt else.opt
   77     | . "freezeif" "(" exp ")" stmt
   78     | . "stopif" "(" exp ")" stmt
   79     | . "switch" "(" exp ")" "{" cases default.opt "}"
   80     | . "timeout" "(" exp ")" stmt catch.opt else.opt finally.opt
   81     | . "return" exp.opt
   82     | . "break"
   83     | . "continue"
   84     | . "waituntil" "(" exp tilda.opt ")"
   85     | . "waituntil" "(" event_match ")"
   86     | . "whenever" "(" exp tilda.opt ")" stmt else.opt
   87     | . "whenever" "(" event_match ")" stmt else.opt
  108     | . "try" block catches.1 else.opt finally.opt
  109     | . "try" block "finally" block
  110     | . "throw" exp.opt
  111     | . "loop" stmt
  112     | . "for" "(" exp ")" stmt
  112     | "for" "(" exp ")" . stmt
  113     | . "for" "(" stmt.opt ";" exp ";" stmt.opt ")" stmt
  114     | . "for" "(" "var" "identifier" in_or_colon exp ")" stmt
  115     | . "while" "(" exp ")" stmt
  118 primary-exp: . block
  119            | . "do" "(" exp ")" block
  120 detach: . "detach"
  121       | . "disown"
  122 primary-exp: . "assert" "(" exp ")"
  123            | . "assert" "{" claims "}"
  124            | . detach "(" exp ")"
  125            | . detach block
  126            | . "isdef" "(" k1_id ")"
  127            | . "watch" "(" exp ")"
  128 lvalue: . id
  129       | . primary-exp "." id
  130       | . primary-exp "." "*"
  131 primary-exp: . "&" id
  132            | . primary-exp "." "&" id
  133 id: . "identifier"
  134 bitor-exp: . "var" bitor-exp
  135          | . "const" "var" bitor-exp
  136 primary-exp: . lvalue
  137            | . lvalue args
  138 new: . "new" "identifier" args.opt
  139 bitor-exp: . new
  140 id: . "new"
  141 primary-exp: . routine formals block
  142 float-exp: . "float"
  143 duration: . "duration"
  144         | . duration "duration"
  150 dictionary: . "[" assocs "]"
  154 tuple: . "(" tuple.exps ")"
  159 literal-exp: . float-exp
  160            | . "angle"
  161            | . duration
  162            | . string
  163            | . "[" exps "]"
  164            | . "<" bitor-exps ">"
  165            | . dictionary
  166            | . tuple
  167 string: . "string"
  168       | . string "string"
  169 literal-exp: . "__HERE__"
  175 lvalue: . primary-exp "[" exps "]"
  176 literal-exp: . "this"
  177            | . "call"
  178 primary-exp: . literal-exp
  179            | . "(" exp ")"
  180            | . "(" error ")"
  181            | . primary-exp "**" primary-exp
  182 unary-exp: . primary-exp
  183          | . "--" lvalue
  184          | . "++" lvalue
  185          | . "+" unary-exp
  186          | . "-" unary-exp
  187          | . "!" unary-exp
  188          | . "compl" unary-exp
  189 bitor-exp: . unary-exp
  190          | . bitor-exp "+" bitor-exp
  191          | . bitor-exp "-" bitor-exp
  192          | . bitor-exp "*" bitor-exp
  193          | . bitor-exp "/" bitor-exp
  194          | . bitor-exp "%" bitor-exp
  195          | . bitor-exp "^" bitor-exp
  196          | . bitor-exp "<<" bitor-exp
  197          | . bitor-exp "bitand" bitor-exp
  198          | . bitor-exp "bitor" bitor-exp
  199          | . bitor-exp ">>" bitor-exp
  210 rel-exp: . bitor-exp rel-ops
  213 exp: . rel-exp
  214    | . exp "&&" exp
  215    | . exp "||" exp
  216    | . exp "in" exp
  217    | . exp "!" "in" exp
  221    | . "%unscope:" unsigned
  222 primary-exp: . "%exp:" unsigned
  223 lvalue: . "%lvalue:" unsigned
  224       | . "%id:" unsigned
  225       | . primary-exp "." "%id:" unsigned
  226 primary-exp: . lvalue "(" "%exps:" unsigned ")"

    "__HERE__"    shift, and go to state 7
    "break"       shift, and go to state 8
    "closure"     shift, and go to state 9
    "const"       shift, and go to state 10
    "continue"    shift, and go to state 11
    "freezeif"    shift, and go to state 12
    "function"    shift, and go to state 13
    "if"          shift, and go to state 14
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "return"      shift, and go to state 19
    "stopif"      shift, and go to state 20
    "switch"      shift, and go to state 21
    "throw"       shift, and go to state 22
    "timeout"     shift, and go to state 23
    "try"         shift, and go to state 24
    "var"         shift, and go to state 25
    "waituntil"   shift, and go to state 26
    "watch"       shift, and go to state 27
    "whenever"    shift, and go to state 28
    "&"           shift, and go to state 29
    "every"       shift, and go to state 30
    "for"         shift, and go to state 31
    "loop"        shift, and go to state 32
    "while"       shift, and go to state 33
    "at"          shift, and go to state 34
    "identifier"  shift, and go to state 35
    "class"       shift, and go to state 36
    "package"     shift, and go to state 37
    "enum"        shift, and go to state 38
    "external"    shift, and go to state 39
    "import"      shift, and go to state 40
    "--"          shift, and go to state 41
    "++"          shift, and go to state 42
    "do"          shift, and go to state 43
    "assert"      shift, and go to state 44
    "detach"      shift, and go to state 45
    "disown"      shift, and go to state 46
    "new"         shift, and go to state 47
    "angle"       shift, and go to state 48
    "duration"    shift, and go to state 49
    "float"       shift, and go to state 50
    "string"      shift, and go to state 51
    "call"        shift, and go to state 52
    "this"        shift, and go to state 53
    "!"           shift, and go to state 54
    "compl"       shift, and go to state 55
    "-"           shift, and go to state 56
    "+"           shift, and go to state 57
    "<"           shift, and go to state 58
    "%unscope:"   shift, and go to state 59
    "%exp:"       shift, and go to state 60
    "%lvalue:"    shift, and go to state 61
    "%id:"        shift, and go to state 62

    stmt         go to state 416
    block        go to state 67
    exp          go to state 68
    routine      go to state 69
    primary-exp  go to state 70
    detach       go to state 71
    lvalue       go to state 72
    id           go to state 73
    bitor-exp    go to state 74
    new          go to state 75
    float-exp    go to state 76
    duration     go to state 77
    dictionary   go to state 78
    tuple        go to state 79
    literal-exp  go to state 80
    string       go to state 81
    unary-exp    go to state 82
    rel-exp      go to state 83


state 352

   23 stmt: . primary-exp ":" stmt
   24     | . exp
   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   37 exp: . "class" lvalue protos block
   38    | . "package" lvalue protos block
   43 stmt: . "enum" id "{" id.0 "}"
   47     | . "external" "identifier" "identifier"
   48     | . "external" "var" "identifier" "." "identifier" from "identifier"
   49     | . "external" event_or_function "(" unsigned ")" "identifier" "." "identifier" from "identifier"
   50     | . "import" lvalue
   51     | . exp "!" args.opt tilda.opt
   52 routine: . "closure"
   53        | . "function"
   54 stmt: . routine k1_id formals block
   55     | . id id formals block
   62 exp: . exp "=" exp
   63    | . exp "=" exp modifiers
   64    | . lvalue "+=" exp
   65    | . lvalue "-=" exp
   66    | . lvalue "*=" exp
   67    | . lvalue "/=" exp
   68    | . lvalue "^=" exp
   69    | . lvalue "%=" exp
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
   73 stmt: . "at" identifiers "(" exp tilda.opt ")" stmt onleave.opt
   74     | . "at" identifiers "(" event_match ")" stmt onleave.opt
   75     | . "every" "(" exp ")" stmt
   76     | . "if" "(" stmts ")" stmt else.opt
   77     | . "freezeif" "(" exp ")" stmt
   78     | . "stopif" "(" exp ")" stmt
   79     | . "switch" "(" exp ")" "{" cases default.opt "}"
   80     | . "timeout" "(" exp ")" stmt catch.opt else.opt finally.opt
   81     | . "return" exp.opt
   82     | . "break"
   83     | . "continue"
   84     | . "waituntil" "(" exp tilda.opt ")"
   85     | . "waituntil" "(" event_match ")"
   86     | . "whenever" "(" exp tilda.opt ")" stmt else.opt
   87     | . "whenever" "(" event_match ")" stmt else.opt
  108     | . "try" block catches.1 else.opt finally.opt
  109     | . "try" block "finally" block
  110     | . "throw" exp.opt
  111     | . "loop" stmt
  112     | . "for" "(" exp ")" stmt
  113     | . "for" "(" stmt.opt ";" exp ";" stmt.opt ")" stmt
  114     | . "for" "(" "var" "identifier" in_or_colon exp ")" stmt
  115     | . "while" "(" exp ")" stmt
  115     | "while" "(" exp ")" . stmt
  118 primary-exp: . block
  119            | . "do" "(" exp ")" block
  120 detach: . "detach"
  121       | . "disown"
  122 primary-exp: . "assert" "(" exp ")"
  123            | . "assert" "{" claims "}"
  124            | . detach "(" exp ")"
  125            | . detach block
  126            | . "isdef" "(" k1_id ")"
  127            | . "watch" "(" exp ")"
  128 lvalue: . id
  129       | . primary-exp "." id
  130       | . primary-exp "." "*"
  131 primary-exp: . "&" id
  132            | . primary-exp "." "&" id
  133 id: . "identifier"
  134 bitor-exp: . "var" bitor-exp
  135          | . "const" "var" bitor-exp
  136 primary-exp: . lvalue
  137            | . lvalue args
  138 new: . "new" "identifier" args.opt
  139 bitor-exp: . new
  140 id: . "new"
  141 primary-exp: . routine formals block
  142 float-exp: . "float"
  143 duration: . "duration"
  144         | . duration "duration"
  150 dictionary: . "[" assocs "]"
  154 tuple: . "(" tuple.exps ")"
  159 literal-exp: . float-exp
  160            | . "angle"
  161            | . duration
  162            | . string
  163            | . "[" exps "]"
  164            | . "<" bitor-exps ">"
  165            | . dictionary
  166            | . tuple
  167 string: . "string"
  168       | . string "string"
  169 literal-exp: . "__HERE__"
  175 lvalue: . primary-exp "[" exps "]"
  176 literal-exp: . "this"
  177            | . "call"
  178 primary-exp: . literal-exp
  179            | . "(" exp ")"
  180            | . "(" error ")"
  181            | . primary-exp "**" primary-exp
  182 unary-exp: . primary-exp
  183          | . "--" lvalue
  184          | . "++" lvalue
  185          | . "+" unary-exp
  186          | . "-" unary-exp
  187          | . "!" unary-exp
  188          | . "compl" unary-exp
  189 bitor-exp: . unary-exp
  190          | . bitor-exp "+" bitor-exp
  191          | . bitor-exp "-" bitor-exp
  192          | . bitor-exp "*" bitor-exp
  193          | . bitor-exp "/" bitor-exp
  194          | . bitor-exp "%" bitor-exp
  195          | . bitor-exp "^" bitor-exp
  196          | . bitor-exp "<<" bitor-exp
  197          | . bitor-exp "bitand" bitor-exp
  198          | . bitor-exp "bitor" bitor-exp
  199          | . bitor-exp ">>" bitor-exp
  210 rel-exp: . bitor-exp rel-ops
  213 exp: . rel-exp
  214    | . exp "&&" exp
  215    | . exp "||" exp
  216    | . exp "in" exp
  217    | . exp "!" "in" exp
  221    | . "%unscope:" unsigned
  222 primary-exp: . "%exp:" unsigned
  223 lvalue: . "%lvalue:" unsigned
  224       | . "%id:" unsigned
  225       | . primary-exp "." "%id:" unsigned
  226 primary-exp: . lvalue "(" "%exps:" unsigned ")"

    "__HERE__"    shift, and go to state 7
    "break"       shift, and go to state 8
    "closure"     shift, and go to state 9
    "const"       shift, and go to state 10
    "continue"    shift, and go to state 11
    "freezeif"    shift, and go to state 12
    "function"    shift, and go to state 13
    "if"          shift, and go to state 14
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "return"      shift, and go to state 19
    "stopif"      shift, and go to state 20
    "switch"      shift, and go to state 21
    "throw"       shift, and go to state 22
    "timeout"     shift, and go to state 23
    "try"         shift, and go to state 24
    "var"         shift, and go to state 25
    "waituntil"   shift, and go to state 26
    "watch"       shift, and go to state 27
    "whenever"    shift, and go to state 28
    "&"           shift, and go to state 29
    "every"       shift, and go to state 30
    "for"         shift, and go to state 31
    "loop"        shift, and go to state 32
    "while"       shift, and go to state 33
    "at"          shift, and go to state 34
    "identifier"  shift, and go to state 35
    "class"       shift, and go to state 36
    "package"     shift, and go to state 37
    "enum"        shift, and go to state 38
    "external"    shift, and go to state 39
    "import"      shift, and go to state 40
    "--"          shift, and go to state 41
    "++"          shift, and go to state 42
    "do"          shift, and go to state 43
    "assert"      shift, and go to state 44
    "detach"      shift, and go to state 45
    "disown"      shift, and go to state 46
    "new"         shift, and go to state 47
    "angle"       shift, and go to state 48
    "duration"    shift, and go to state 49
    "float"       shift, and go to state 50
    "string"      shift, and go to state 51
    "call"        shift, and go to state 52
    "this"        shift, and go to state 53
    "!"           shift, and go to state 54
    "compl"       shift, and go to state 55
    "-"           shift, and go to state 56
    "+"           shift, and go to state 57
    "<"           shift, and go to state 58
    "%unscope:"   shift, and go to state 59
    "%exp:"       shift, and go to state 60
    "%lvalue:"    shift, and go to state 61
    "%id:"        shift, and go to state 62

    stmt         go to state 417
    block        go to state 67
    exp          go to state 68
    routine      go to state 69
    primary-exp  go to state 70
    detach       go to state 71
    lvalue       go to state 72
    id           go to state 73
    bitor-exp    go to state 74
    new          go to state 75
    float-exp    go to state 76
    duration     go to state 77
    dictionary   go to state 78
    tuple        go to state 79
    literal-exp  go to state 80
    string       go to state 81
    unary-exp    go to state 82
    rel-exp      go to state 83


state 353

   62 exp: exp . "=" exp
   63    | exp . "=" exp modifiers
   73 stmt: "at" identifiers "(" exp . tilda.opt ")" stmt onleave.opt
  170 event_match: exp . "?" args.opt tilda.opt guard.opt
  173 tilda.opt: .  [")"]
  174          | . "~" exp
  214 exp: exp . "&&" exp
  215    | exp . "||" exp
  216    | exp . "in" exp
  217    | exp . "!" "in" exp

    "="   shift, and go to state 164
    "in"  shift, and go to state 165
    "~"   shift, and go to state 341
    "?"   shift, and go to state 342
    "!"   shift, and go to state 215
    "&&"  shift, and go to state 167
    "||"  shift, and go to state 168

    $default  reduce using rule 173 (tilda.opt)

    tilda.opt  go to state 418


state 354

   74 stmt: "at" identifiers "(" event_match . ")" stmt onleave.opt

    ")"  shift, and go to state 419


state 355

   29 visibility: "private" .

    $default  reduce using rule 29 (visibility)


state 356

   30 visibility: "protected" .

    $default  reduce using rule 30 (visibility)


state 357

   31 visibility: "public" .

    $default  reduce using rule 31 (visibility)


state 358

   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   32 proto: visibility . exp
   37 exp: . "class" lvalue protos block
   38    | . "package" lvalue protos block
   52 routine: . "closure"
   53        | . "function"
   62 exp: . exp "=" exp
   63    | . exp "=" exp modifiers
   64    | . lvalue "+=" exp
   65    | . lvalue "-=" exp
   66    | . lvalue "*=" exp
   67    | . lvalue "/=" exp
   68    | . lvalue "^=" exp
   69    | . lvalue "%=" exp
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
  118            | . block
  119            | . "do" "(" exp ")" block
  120 detach: . "detach"
  121       | . "disown"
  122 primary-exp: . "assert" "(" exp ")"
  123            | . "assert" "{" claims "}"
  124            | . detach "(" exp ")"
  125            | . detach block
  126            | . "isdef" "(" k1_id ")"
  127            | . "watch" "(" exp ")"
  128 lvalue: . id
  129       | . primary-exp "." id
  130       | . primary-exp "." "*"
  131 primary-exp: . "&" id
  132            | . primary-exp "." "&" id
  133 id: . "identifier"
  134 bitor-exp: . "var" bitor-exp
  135          | . "const" "var" bitor-exp
  136 primary-exp: . lvalue
  137            | . lvalue args
  138 new: . "new" "identifier" args.opt
  139 bitor-exp: . new
  140 id: . "new"
  141 primary-exp: . routine formals block
  142 float-exp: . "float"
  143 duration: . "duration"
  144         | . duration "duration"
  150 dictionary: . "[" assocs "]"
  154 tuple: . "(" tuple.exps ")"
  159 literal-exp: . float-exp
  160            | . "angle"
  161            | . duration
  162            | . string
  163            | . "[" exps "]"
  164            | . "<" bitor-exps ">"
  165            | . dictionary
  166            | . tuple
  167 string: . "string"
  168       | . string "string"
  169 literal-exp: . "__HERE__"
  175 lvalue: . primary-exp "[" exps "]"
  176 literal-exp: . "this"
  177            | . "call"
  178 primary-exp: . literal-exp
  179            | . "(" exp ")"
  180            | . "(" error ")"
  181            | . primary-exp "**" primary-exp
  182 unary-exp: . primary-exp
  183          | . "--" lvalue
  184          | . "++" lvalue
  185          | . "+" unary-exp
  186          | . "-" unary-exp
  187          | . "!" unary-exp
  188          | . "compl" unary-exp
  189 bitor-exp: . unary-exp
  190          | . bitor-exp "+" bitor-exp
  191          | . bitor-exp "-" bitor-exp
  192          | . bitor-exp "*" bitor-exp
  193          | . bitor-exp "/" bitor-exp
  194          | . bitor-exp "%" bitor-exp
  195          | . bitor-exp "^" bitor-exp
  196          | . bitor-exp "<<" bitor-exp
  197          | . bitor-exp "bitand" bitor-exp
  198          | . bitor-exp "bitor" bitor-exp
  199          | . bitor-exp ">>" bitor-exp
  210 rel-exp: . bitor-exp rel-ops
  213 exp: . rel-exp
  214    | . exp "&&" exp
  215    | . exp "||" exp
  216    | . exp "in" exp
  217    | . exp "!" "in" exp
  221    | . "%unscope:" unsigned
  222 primary-exp: . "%exp:" unsigned
  223 lvalue: . "%lvalue:" unsigned
  224       | . "%id:" unsigned
  225       | . primary-exp "." "%id:" unsigned
  226 primary-exp: . lvalue "(" "%exps:" unsigned ")"

    "__HERE__"    shift, and go to state 7
    "closure"     shift, and go to state 9
    "const"       shift, and go to state 10
    "function"    shift, and go to state 13
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "var"         shift, and go to state 25
    "watch"       shift, and go to state 27
    "&"           shift, and go to state 29
    "identifier"  shift, and go to state 35
    "class"       shift, and go to state 36
    "package"     shift, and go to state 37
    "--"          shift, and go to state 41
    "++"          shift, and go to state 42
    "do"          shift, and go to state 43
    "assert"      shift, and go to state 44
    "detach"      shift, and go to state 45
    "disown"      shift, and go to state 46
    "new"         shift, and go to state 47
    "angle"       shift, and go to state 48
    "duration"    shift, and go to state 49
    "float"       shift, and go to state 50
    "string"      shift, and go to state 51
    "call"        shift, and go to state 52
    "this"        shift, and go to state 53
    "!"           shift, and go to state 54
    "compl"       shift, and go to state 55
    "-"           shift, and go to state 56
    "+"           shift, and go to state 57
    "<"           shift, and go to state 58
    "%unscope:"   shift, and go to state 59
    "%exp:"       shift, and go to state 60
    "%lvalue:"    shift, and go to state 61
    "%id:"        shift, and go to state 62

    block        go to state 67
    exp          go to state 420
    routine      go to state 100
    primary-exp  go to state 101
    detach       go to state 71
    lvalue       go to state 72
    id           go to state 102
    bitor-exp    go to state 74
    new          go to state 75
    float-exp    go to state 76
    duration     go to state 77
    dictionary   go to state 78
    tuple        go to state 79
    literal-exp  go to state 80
    string       go to state 81
    unary-exp    go to state 82
    rel-exp      go to state 83


state 359

   33 protos.1: proto .

    $default  reduce using rule 33 (protos.1)


state 360

   34 protos.1: protos.1 . "," proto
   36 protos: ":" protos.1 .  ["{"]

    ","  shift, and go to state 421

    $default  reduce using rule 36 (protos)


state 361

   37 exp: "class" lvalue protos block .

    $default  reduce using rule 37 (exp)


state 362

   38 exp: "package" lvalue protos block .

    $default  reduce using rule 38 (exp)


state 363

   43 stmt: "enum" id "{" id.0 . "}"

    "}"  shift, and go to state 422


state 364

   40 id.0: id.1 . comma.opt
   42 id.1: id.1 . "," id
  253 comma.opt: .  ["}"]
  254          | . ","

    ","  shift, and go to state 423

    $default  reduce using rule 253 (comma.opt)

    comma.opt  go to state 424


state 365

   41 id.1: id .

    $default  reduce using rule 41 (id.1)


state 366

   48 stmt: "external" "var" "identifier" "." . "identifier" from "identifier"

    "identifier"  shift, and go to state 425


state 367

   49 stmt: "external" event_or_function "(" unsigned . ")" "identifier" "." "identifier" from "identifier"

    ")"  shift, and go to state 426


state 368

   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
  119 primary-exp: "do" "(" exp ")" . block

    "{"  shift, and go to state 16

    block  go to state 427


state 369

  123 primary-exp: "assert" "{" claims "}" .

    $default  reduce using rule 123 (primary-exp)


state 370

   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   37 exp: . "class" lvalue protos block
   38    | . "package" lvalue protos block
   52 routine: . "closure"
   53        | . "function"
   62 exp: . exp "=" exp
   63    | . exp "=" exp modifiers
   64    | . lvalue "+=" exp
   65    | . lvalue "-=" exp
   66    | . lvalue "*=" exp
   67    | . lvalue "/=" exp
   68    | . lvalue "^=" exp
   69    | . lvalue "%=" exp
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
  118            | . block
  119            | . "do" "(" exp ")" block
  120 detach: . "detach"
  121       | . "disown"
  122 primary-exp: . "assert" "(" exp ")"
  123            | . "assert" "{" claims "}"
  124            | . detach "(" exp ")"
  125            | . detach block
  126            | . "isdef" "(" k1_id ")"
  127            | . "watch" "(" exp ")"
  128 lvalue: . id
  129       | . primary-exp "." id
  130       | . primary-exp "." "*"
  131 primary-exp: . "&" id
  132            | . primary-exp "." "&" id
  133 id: . "identifier"
  134 bitor-exp: . "var" bitor-exp
  135          | . "const" "var" bitor-exp
  136 primary-exp: . lvalue
  137            | . lvalue args
  138 new: . "new" "identifier" args.opt
  139 bitor-exp: . new
  140 id: . "new"
  141 primary-exp: . routine formals block
  142 float-exp: . "float"
  143 duration: . "duration"
  144         | . duration "duration"
  150 dictionary: . "[" assocs "]"
  154 tuple: . "(" tuple.exps ")"
  159 literal-exp: . float-exp
  160            | . "angle"
  161            | . duration
  162            | . string
  163            | . "[" exps "]"
  164            | . "<" bitor-exps ">"
  165            | . dictionary
  166            | . tuple
  167 string: . "string"
  168       | . string "string"
  169 literal-exp: . "__HERE__"
  175 lvalue: . primary-exp "[" exps "]"
  176 literal-exp: . "this"
  177            | . "call"
  178 primary-exp: . literal-exp
  179            | . "(" exp ")"
  180            | . "(" error ")"
  181            | . primary-exp "**" primary-exp
  182 unary-exp: . primary-exp
  183          | . "--" lvalue
  184          | . "++" lvalue
  185          | . "+" unary-exp
  186          | . "-" unary-exp
  187          | . "!" unary-exp
  188          | . "compl" unary-exp
  189 bitor-exp: . unary-exp
  190          | . bitor-exp "+" bitor-exp
  191          | . bitor-exp "-" bitor-exp
  192          | . bitor-exp "*" bitor-exp
  193          | . bitor-exp "/" bitor-exp
  194          | . bitor-exp "%" bitor-exp
  195          | . bitor-exp "^" bitor-exp
  196          | . bitor-exp "<<" bitor-exp
  197          | . bitor-exp "bitand" bitor-exp
  198          | . bitor-exp "bitor" bitor-exp
  199          | . bitor-exp ">>" bitor-exp
  210 rel-exp: . bitor-exp rel-ops
  213 exp: . rel-exp
  214    | . exp "&&" exp
  215    | . exp "||" exp
  216    | . exp "in" exp
  217    | . exp "!" "in" exp
  221    | . "%unscope:" unsigned
  222 primary-exp: . "%exp:" unsigned
  223 lvalue: . "%lvalue:" unsigned
  224       | . "%id:" unsigned
  225       | . primary-exp "." "%id:" unsigned
  226 primary-exp: . lvalue "(" "%exps:" unsigned ")"
  230 claims.1: claims.1 ";" . exp
  256 semi.opt: ";" .  ["}"]

    "__HERE__"    shift, and go to state 7
    "closure"     shift, and go to state 9
    "const"       shift, and go to state 10
    "function"    shift, and go to state 13
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "var"         shift, and go to state 25
    "watch"       shift, and go to state 27
    "&"           shift, and go to state 29
    "identifier"  shift, and go to state 35
    "class"       shift, and go to state 36
    "package"     shift, and go to state 37
    "--"          shift, and go to state 41
    "++"          shift, and go to state 42
    "do"          shift, and go to state 43
    "assert"      shift, and go to state 44
    "detach"      shift, and go to state 45
    "disown"      shift, and go to state 46
    "new"         shift, and go to state 47
    "angle"       shift, and go to state 48
    "duration"    shift, and go to state 49
    "float"       shift, and go to state 50
    "string"      shift, and go to state 51
    "call"        shift, and go to state 52
    "this"        shift, and go to state 53
    "!"           shift, and go to state 54
    "compl"       shift, and go to state 55
    "-"           shift, and go to state 56
    "+"           shift, and go to state 57
    "<"           shift, and go to state 58
    "%unscope:"   shift, and go to state 59
    "%exp:"       shift, and go to state 60
    "%lvalue:"    shift, and go to state 61
    "%id:"        shift, and go to state 62

    $default  reduce using rule 256 (semi.opt)

    block        go to state 67
    exp          go to state 428
    routine      go to state 100
    primary-exp  go to state 101
    detach       go to state 71
    lvalue       go to state 72
    id           go to state 102
    bitor-exp    go to state 74
    new          go to state 75
    float-exp    go to state 76
    duration     go to state 77
    dictionary   go to state 78
    tuple        go to state 79
    literal-exp  go to state 80
    string       go to state 81
    unary-exp    go to state 82
    rel-exp      go to state 83


state 371

  228 claims: claims.1 semi.opt .

    $default  reduce using rule 228 (claims)


state 372

  122 primary-exp: "assert" "(" exp ")" .

    $default  reduce using rule 122 (primary-exp)


state 373

  158 bitor-exps.1: bitor-exps.1 "," bitor-exp .  [",", ">"]
  190 bitor-exp: bitor-exp . "+" bitor-exp
  191          | bitor-exp . "-" bitor-exp
  192          | bitor-exp . "*" bitor-exp
  193          | bitor-exp . "/" bitor-exp
  194          | bitor-exp . "%" bitor-exp
  195          | bitor-exp . "^" bitor-exp
  196          | bitor-exp . "<<" bitor-exp
  197          | bitor-exp . "bitand" bitor-exp
  198          | bitor-exp . "bitor" bitor-exp
  199          | bitor-exp . ">>" bitor-exp

    "bitand"  shift, and go to state 192
    "bitor"   shift, and go to state 193
    "^"       shift, and go to state 194
    ">>"      shift, and go to state 195
    "<<"      shift, and go to state 196
    "-"       shift, and go to state 197
    "%"       shift, and go to state 198
    "+"       shift, and go to state 199
    "/"       shift, and go to state 200
    "*"       shift, and go to state 201

    $default  reduce using rule 158 (bitor-exps.1)


state 374

   59 modifier: "identifier" . ":" exp

    ":"  shift, and go to state 429


state 375

   60 modifiers: modifier .

    $default  reduce using rule 60 (modifiers)


state 376

   59 modifier: . "identifier" ":" exp
   61 modifiers: modifiers . modifier
   63 exp: exp "=" exp modifiers .  ["end of command", "=", "case", "catch", ":", "default", "else", "finally", "if", "in", "{", "onleave", "}", "]", ")", "~", ",", ";", "&", "|", "=>", "?", "!", "&&", "||"]

    "identifier"  shift, and go to state 374

    $default  reduce using rule 63 (exp)

    modifier  go to state 430

    Conflict between rule 63 and token "identifier" resolved as shift (ASSIGN < "identifier").


state 377

   62 exp: exp . "=" exp
   63    | exp . "=" exp modifiers
  214    | exp . "&&" exp
  215    | exp . "||" exp
  216    | exp . "in" exp
  217    | exp . "!" "in" exp
  217    | exp "!" "in" exp .  ["end of command", "=", "case", "catch", ":", "default", "else", "finally", "if", "{", "onleave", "}", "]", ")", "~", ",", ";", "&", "|", "identifier", "=>", "?", "&&", "||"]

    "!"  shift, and go to state 215

    "in"  error (nonassociative)

    $default  reduce using rule 217 (exp)

    Conflict between rule 217 and token "=" resolved as reduce ("=" < "in").
    Conflict between rule 217 and token "in" resolved as an error (%nonassoc "in").
    Conflict between rule 217 and token "!" resolved as shift ("in" < "!").
    Conflict between rule 217 and token "&&" resolved as reduce ("&&" < "in").
    Conflict between rule 217 and token "||" resolved as reduce ("||" < "in").


state 378

   51 stmt: exp "!" args.opt tilda.opt .

    $default  reduce using rule 51 (stmt)


state 379

  244 formal: . var.opt "identifier" typespec.opt
  245       | . var.opt "identifier" "=" exp typespec.opt
  246       | . var.opt "identifier" "[" "]"
  248 formals.1: formals.1 "," . formal
  254 comma.opt: "," .  [")"]
  257 var.opt: .  ["identifier"]
  258        | . "var"

    "var"  shift, and go to state 272

    "identifier"  reduce using rule 257 (var.opt)
    $default      reduce using rule 254 (comma.opt)

    formal   go to state 431
    var.opt  go to state 276


state 380

  250 formals.0: formals.1 comma.opt .

    $default  reduce using rule 250 (formals.0)


state 381

  252 formals: "(" formals.0 ")" .

    $default  reduce using rule 252 (formals)


state 382

  241 typespec: . ":" exp
  242 typespec.opt: .  [")", ","]
  243             | . typespec
  244 formal: var.opt "identifier" . typespec.opt
  245       | var.opt "identifier" . "=" exp typespec.opt
  246       | var.opt "identifier" . "[" "]"

    "="  shift, and go to state 432
    ":"  shift, and go to state 433
    "["  shift, and go to state 434

    $default  reduce using rule 242 (typespec.opt)

    typespec      go to state 435
    typespec.opt  go to state 436


state 383

   57 k1_id: "this" "." "identifier" .

    $default  reduce using rule 57 (k1_id)


state 384

   58 k1_id: k1_id "." "identifier" .

    $default  reduce using rule 58 (k1_id)


state 385

   54 stmt: routine k1_id formals block .

    $default  reduce using rule 54 (stmt)


state 386

  175 lvalue: primary-exp "[" exps "]" .

    $default  reduce using rule 175 (lvalue)


state 387

  132 primary-exp: primary-exp "." "&" id .

    $default  reduce using rule 132 (primary-exp)


state 388

  225 lvalue: primary-exp "." "%id:" unsigned .

    $default  reduce using rule 225 (lvalue)


state 389

  124 primary-exp: detach "(" exp ")" .

    $default  reduce using rule 124 (primary-exp)


state 390

  226 primary-exp: lvalue "(" "%exps:" unsigned . ")"

    ")"  shift, and go to state 437


state 391

  236 args: "(" exps ")" .

    $default  reduce using rule 236 (args)


state 392

   55 stmt: id id formals block .

    $default  reduce using rule 55 (stmt)


state 393

  190 bitor-exp: bitor-exp . "+" bitor-exp
  191          | bitor-exp . "-" bitor-exp
  192          | bitor-exp . "*" bitor-exp
  193          | bitor-exp . "/" bitor-exp
  194          | bitor-exp . "%" bitor-exp
  195          | bitor-exp . "^" bitor-exp
  196          | bitor-exp . "<<" bitor-exp
  197          | bitor-exp . "bitand" bitor-exp
  198          | bitor-exp . "bitor" bitor-exp
  199          | bitor-exp . ">>" bitor-exp
  212 rel-ops: rel-ops rel-op bitor-exp .  ["end of command", "=", "case", "catch", ":", "default", "else", "finally", "if", "in", "{", "onleave", "}", "]", ")", "~", ",", ";", "&", "|", "identifier", "=>", "?", "!", "=~=", "==", "===", ">=", ">", "<=", "<", "!=", "!==", "~=", "&&", "||"]

    "bitand"  shift, and go to state 192
    "bitor"   shift, and go to state 193
    "^"       shift, and go to state 194
    ">>"      shift, and go to state 195
    "<<"      shift, and go to state 196
    "-"       shift, and go to state 197
    "%"       shift, and go to state 198
    "+"       shift, and go to state 199
    "/"       shift, and go to state 200
    "*"       shift, and go to state 201

    $default  reduce using rule 212 (rel-ops)


state 394

   77 stmt: "freezeif" "(" exp ")" stmt .

    $default  reduce using rule 77 (stmt)


state 395

   76 stmt: "if" "(" stmts ")" stmt . else.opt
   90 else.opt: .  ["end of command", "case", "catch", "default", "finally", "onleave", "}", ")", ",", ";", "&", "|"]
   91         | . "else" stmt

    "else"  shift, and go to state 338

    $default  reduce using rule 90 (else.opt)

    else.opt  go to state 438

    Conflict between rule 90 and token "else" resolved as shift (EMPTY < "else").


state 396

   27 block: "{" id "~" id "}" .

    $default  reduce using rule 27 (block)


state 397

   78 stmt: "stopif" "(" exp ")" stmt .

    $default  reduce using rule 78 (stmt)


state 398

   79 stmt: "switch" "(" exp ")" "{" . cases default.opt "}"
   94 cases: .
   95      | . cases case

    $default  reduce using rule 94 (cases)

    cases  go to state 439


state 399

   80 stmt: "timeout" "(" exp ")" stmt . catch.opt else.opt finally.opt
  104 catch.opt: .  ["end of command", "case", "default", "else", "finally", "onleave", "}", ")", ",", ";", "&", "|"]
  105          | . "catch" block

    "catch"  shift, and go to state 440

    $default  reduce using rule 104 (catch.opt)

    catch.opt  go to state 441

    Conflict between rule 104 and token "catch" resolved as shift (EMPTY < "catch").


state 400

   62 exp: exp . "=" exp
   63    | exp . "=" exp modifiers
   99 match: exp .  [":", ")"]
  100      | exp . "if" exp
  214 exp: exp . "&&" exp
  215    | exp . "||" exp
  216    | exp . "in" exp
  217    | exp . "!" "in" exp

    "="   shift, and go to state 164
    "if"  shift, and go to state 442
    "in"  shift, and go to state 165
    "!"   shift, and go to state 215
    "&&"  shift, and go to state 167
    "||"  shift, and go to state 168

    $default  reduce using rule 99 (match)


state 401

  102 match.opt: "(" match . ")"

    ")"  shift, and go to state 443


state 402

  103 catch: "catch" match.opt block .

    $default  reduce using rule 103 (catch)


state 403

   91 else.opt: "else" stmt .

    $default  reduce using rule 91 (else.opt)


state 404

   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
  107 finally.opt: "finally" . block

    "{"  shift, and go to state 16

    block  go to state 444


state 405

  108 stmt: "try" block catches.1 else.opt finally.opt .

    $default  reduce using rule 108 (stmt)


state 406

   62 exp: exp . "=" exp
   63    | exp . "=" exp modifiers
  174 tilda.opt: "~" exp .  ["end of command", "case", "catch", "default", "else", "finally", "if", "onleave", "}", ")", ",", ";", "&", "|"]
  214 exp: exp . "&&" exp
  215    | exp . "||" exp
  216    | exp . "in" exp
  217    | exp . "!" "in" exp

    "="   shift, and go to state 164
    "in"  shift, and go to state 165
    "!"   shift, and go to state 215
    "&&"  shift, and go to state 167
    "||"  shift, and go to state 168

    $default  reduce using rule 174 (tilda.opt)


state 407

  170 event_match: exp "?" args.opt . tilda.opt guard.opt
  173 tilda.opt: .  ["if", ")"]
  174          | . "~" exp

    "~"  shift, and go to state 341

    $default  reduce using rule 173 (tilda.opt)

    tilda.opt  go to state 445


state 408

   84 stmt: "waituntil" "(" exp tilda.opt ")" .

    $default  reduce using rule 84 (stmt)


state 409

   23 stmt: . primary-exp ":" stmt
   24     | . exp
   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   37 exp: . "class" lvalue protos block
   38    | . "package" lvalue protos block
   43 stmt: . "enum" id "{" id.0 "}"
   47     | . "external" "identifier" "identifier"
   48     | . "external" "var" "identifier" "." "identifier" from "identifier"
   49     | . "external" event_or_function "(" unsigned ")" "identifier" "." "identifier" from "identifier"
   50     | . "import" lvalue
   51     | . exp "!" args.opt tilda.opt
   52 routine: . "closure"
   53        | . "function"
   54 stmt: . routine k1_id formals block
   55     | . id id formals block
   62 exp: . exp "=" exp
   63    | . exp "=" exp modifiers
   64    | . lvalue "+=" exp
   65    | . lvalue "-=" exp
   66    | . lvalue "*=" exp
   67    | . lvalue "/=" exp
   68    | . lvalue "^=" exp
   69    | . lvalue "%=" exp
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
   73 stmt: . "at" identifiers "(" exp tilda.opt ")" stmt onleave.opt
   74     | . "at" identifiers "(" event_match ")" stmt onleave.opt
   75     | . "every" "(" exp ")" stmt
   76     | . "if" "(" stmts ")" stmt else.opt
   77     | . "freezeif" "(" exp ")" stmt
   78     | . "stopif" "(" exp ")" stmt
   79     | . "switch" "(" exp ")" "{" cases default.opt "}"
   80     | . "timeout" "(" exp ")" stmt catch.opt else.opt finally.opt
   81     | . "return" exp.opt
   82     | . "break"
   83     | . "continue"
   84     | . "waituntil" "(" exp tilda.opt ")"
   85     | . "waituntil" "(" event_match ")"
   86     | . "whenever" "(" exp tilda.opt ")" stmt else.opt
   86     | "whenever" "(" exp tilda.opt ")" . stmt else.opt
   87     | . "whenever" "(" event_match ")" stmt else.opt
  108     | . "try" block catches.1 else.opt finally.opt
  109     | . "try" block "finally" block
  110     | . "throw" exp.opt
  111     | . "loop" stmt
  112     | . "for" "(" exp ")" stmt
  113     | . "for" "(" stmt.opt ";" exp ";" stmt.opt ")" stmt
  114     | . "for" "(" "var" "identifier" in_or_colon exp ")" stmt
  115     | . "while" "(" exp ")" stmt
  118 primary-exp: . block
  119            | . "do" "(" exp ")" block
  120 detach: . "detach"
  121       | . "disown"
  122 primary-exp: . "assert" "(" exp ")"
  123            | . "assert" "{" claims "}"
  124            | . detach "(" exp ")"
  125            | . detach block
  126            | . "isdef" "(" k1_id ")"
  127            | . "watch" "(" exp ")"
  128 lvalue: . id
  129       | . primary-exp "." id
  130       | . primary-exp "." "*"
  131 primary-exp: . "&" id
  132            | . primary-exp "." "&" id
  133 id: . "identifier"
  134 bitor-exp: . "var" bitor-exp
  135          | . "const" "var" bitor-exp
  136 primary-exp: . lvalue
  137            | . lvalue args
  138 new: . "new" "identifier" args.opt
  139 bitor-exp: . new
  140 id: . "new"
  141 primary-exp: . routine formals block
  142 float-exp: . "float"
  143 duration: . "duration"
  144         | . duration "duration"
  150 dictionary: . "[" assocs "]"
  154 tuple: . "(" tuple.exps ")"
  159 literal-exp: . float-exp
  160            | . "angle"
  161            | . duration
  162            | . string
  163            | . "[" exps "]"
  164            | . "<" bitor-exps ">"
  165            | . dictionary
  166            | . tuple
  167 string: . "string"
  168       | . string "string"
  169 literal-exp: . "__HERE__"
  175 lvalue: . primary-exp "[" exps "]"
  176 literal-exp: . "this"
  177            | . "call"
  178 primary-exp: . literal-exp
  179            | . "(" exp ")"
  180            | . "(" error ")"
  181            | . primary-exp "**" primary-exp
  182 unary-exp: . primary-exp
  183          | . "--" lvalue
  184          | . "++" lvalue
  185          | . "+" unary-exp
  186          | . "-" unary-exp
  187          | . "!" unary-exp
  188          | . "compl" unary-exp
  189 bitor-exp: . unary-exp
  190          | . bitor-exp "+" bitor-exp
  191          | . bitor-exp "-" bitor-exp
  192          | . bitor-exp "*" bitor-exp
  193          | . bitor-exp "/" bitor-exp
  194          | . bitor-exp "%" bitor-exp
  195          | . bitor-exp "^" bitor-exp
  196          | . bitor-exp "<<" bitor-exp
  197          | . bitor-exp "bitand" bitor-exp
  198          | . bitor-exp "bitor" bitor-exp
  199          | . bitor-exp ">>" bitor-exp
  210 rel-exp: . bitor-exp rel-ops
  213 exp: . rel-exp
  214    | . exp "&&" exp
  215    | . exp "||" exp
  216    | . exp "in" exp
  217    | . exp "!" "in" exp
  221    | . "%unscope:" unsigned
  222 primary-exp: . "%exp:" unsigned
  223 lvalue: . "%lvalue:" unsigned
  224       | . "%id:" unsigned
  225       | . primary-exp "." "%id:" unsigned
  226 primary-exp: . lvalue "(" "%exps:" unsigned ")"

    "__HERE__"    shift, and go to state 7
    "break"       shift, and go to state 8
    "closure"     shift, and go to state 9
    "const"       shift, and go to state 10
    "continue"    shift, and go to state 11
    "freezeif"    shift, and go to state 12
    "function"    shift, and go to state 13
    "if"          shift, and go to state 14
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "return"      shift, and go to state 19
    "stopif"      shift, and go to state 20
    "switch"      shift, and go to state 21
    "throw"       shift, and go to state 22
    "timeout"     shift, and go to state 23
    "try"         shift, and go to state 24
    "var"         shift, and go to state 25
    "waituntil"   shift, and go to state 26
    "watch"       shift, and go to state 27
    "whenever"    shift, and go to state 28
    "&"           shift, and go to state 29
    "every"       shift, and go to state 30
    "for"         shift, and go to state 31
    "loop"        shift, and go to state 32
    "while"       shift, and go to state 33
    "at"          shift, and go to state 34
    "identifier"  shift, and go to state 35
    "class"       shift, and go to state 36
    "package"     shift, and go to state 37
    "enum"        shift, and go to state 38
    "external"    shift, and go to state 39
    "import"      shift, and go to state 40
    "--"          shift, and go to state 41
    "++"          shift, and go to state 42
    "do"          shift, and go to state 43
    "assert"      shift, and go to state 44
    "detach"      shift, and go to state 45
    "disown"      shift, and go to state 46
    "new"         shift, and go to state 47
    "angle"       shift, and go to state 48
    "duration"    shift, and go to state 49
    "float"       shift, and go to state 50
    "string"      shift, and go to state 51
    "call"        shift, and go to state 52
    "this"        shift, and go to state 53
    "!"           shift, and go to state 54
    "compl"       shift, and go to state 55
    "-"           shift, and go to state 56
    "+"           shift, and go to state 57
    "<"           shift, and go to state 58
    "%unscope:"   shift, and go to state 59
    "%exp:"       shift, and go to state 60
    "%lvalue:"    shift, and go to state 61
    "%id:"        shift, and go to state 62

    stmt         go to state 446
    block        go to state 67
    exp          go to state 68
    routine      go to state 69
    primary-exp  go to state 70
    detach       go to state 71
    lvalue       go to state 72
    id           go to state 73
    bitor-exp    go to state 74
    new          go to state 75
    float-exp    go to state 76
    duration     go to state 77
    dictionary   go to state 78
    tuple        go to state 79
    literal-exp  go to state 80
    string       go to state 81
    unary-exp    go to state 82
    rel-exp      go to state 83


state 410

   87 stmt: "whenever" "(" event_match ")" stmt . else.opt
   90 else.opt: .  ["end of command", "case", "catch", "default", "finally", "onleave", "}", ")", ",", ";", "&", "|"]
   91         | . "else" stmt

    "else"  shift, and go to state 338

    $default  reduce using rule 90 (else.opt)

    else.opt  go to state 447

    Conflict between rule 90 and token "else" resolved as shift (EMPTY < "else").


state 411

   75 stmt: "every" "(" exp ")" stmt .

    $default  reduce using rule 75 (stmt)


state 412

  117 in_or_colon: ":" .

    $default  reduce using rule 117 (in_or_colon)


state 413

  116 in_or_colon: "in" .

    $default  reduce using rule 116 (in_or_colon)


state 414

   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   37 exp: . "class" lvalue protos block
   38    | . "package" lvalue protos block
   52 routine: . "closure"
   53        | . "function"
   62 exp: . exp "=" exp
   63    | . exp "=" exp modifiers
   64    | . lvalue "+=" exp
   65    | . lvalue "-=" exp
   66    | . lvalue "*=" exp
   67    | . lvalue "/=" exp
   68    | . lvalue "^=" exp
   69    | . lvalue "%=" exp
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
  114 stmt: "for" "(" "var" "identifier" in_or_colon . exp ")" stmt
  118 primary-exp: . block
  119            | . "do" "(" exp ")" block
  120 detach: . "detach"
  121       | . "disown"
  122 primary-exp: . "assert" "(" exp ")"
  123            | . "assert" "{" claims "}"
  124            | . detach "(" exp ")"
  125            | . detach block
  126            | . "isdef" "(" k1_id ")"
  127            | . "watch" "(" exp ")"
  128 lvalue: . id
  129       | . primary-exp "." id
  130       | . primary-exp "." "*"
  131 primary-exp: . "&" id
  132            | . primary-exp "." "&" id
  133 id: . "identifier"
  134 bitor-exp: . "var" bitor-exp
  135          | . "const" "var" bitor-exp
  136 primary-exp: . lvalue
  137            | . lvalue args
  138 new: . "new" "identifier" args.opt
  139 bitor-exp: . new
  140 id: . "new"
  141 primary-exp: . routine formals block
  142 float-exp: . "float"
  143 duration: . "duration"
  144         | . duration "duration"
  150 dictionary: . "[" assocs "]"
  154 tuple: . "(" tuple.exps ")"
  159 literal-exp: . float-exp
  160            | . "angle"
  161            | . duration
  162            | . string
  163            | . "[" exps "]"
  164            | . "<" bitor-exps ">"
  165            | . dictionary
  166            | . tuple
  167 string: . "string"
  168       | . string "string"
  169 literal-exp: . "__HERE__"
  175 lvalue: . primary-exp "[" exps "]"
  176 literal-exp: . "this"
  177            | . "call"
  178 primary-exp: . literal-exp
  179            | . "(" exp ")"
  180            | . "(" error ")"
  181            | . primary-exp "**" primary-exp
  182 unary-exp: . primary-exp
  183          | . "--" lvalue
  184          | . "++" lvalue
  185          | . "+" unary-exp
  186          | . "-" unary-exp
  187          | . "!" unary-exp
  188          | . "compl" unary-exp
  189 bitor-exp: . unary-exp
  190          | . bitor-exp "+" bitor-exp
  191          | . bitor-exp "-" bitor-exp
  192          | . bitor-exp "*" bitor-exp
  193          | . bitor-exp "/" bitor-exp
  194          | . bitor-exp "%" bitor-exp
  195          | . bitor-exp "^" bitor-exp
  196          | . bitor-exp "<<" bitor-exp
  197          | . bitor-exp "bitand" bitor-exp
  198          | . bitor-exp "bitor" bitor-exp
  199          | . bitor-exp ">>" bitor-exp
  210 rel-exp: . bitor-exp rel-ops
  213 exp: . rel-exp
  214    | . exp "&&" exp
  215    | . exp "||" exp
  216    | . exp "in" exp
  217    | . exp "!" "in" exp
  221    | . "%unscope:" unsigned
  222 primary-exp: . "%exp:" unsigned
  223 lvalue: . "%lvalue:" unsigned
  224       | . "%id:" unsigned
  225       | . primary-exp "." "%id:" unsigned
  226 primary-exp: . lvalue "(" "%exps:" unsigned ")"

    "__HERE__"    shift, and go to state 7
    "closure"     shift, and go to state 9
    "const"       shift, and go to state 10
    "function"    shift, and go to state 13
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "var"         shift, and go to state 25
    "watch"       shift, and go to state 27
    "&"           shift, and go to state 29
    "identifier"  shift, and go to state 35
    "class"       shift, and go to state 36
    "package"     shift, and go to state 37
    "--"          shift, and go to state 41
    "++"          shift, and go to state 42
    "do"          shift, and go to state 43
    "assert"      shift, and go to state 44
    "detach"      shift, and go to state 45
    "disown"      shift, and go to state 46
    "new"         shift, and go to state 47
    "angle"       shift, and go to state 48
    "duration"    shift, and go to state 49
    "float"       shift, and go to state 50
    "string"      shift, and go to state 51
    "call"        shift, and go to state 52
    "this"        shift, and go to state 53
    "!"           shift, and go to state 54
    "compl"       shift, and go to state 55
    "-"           shift, and go to state 56
    "+"           shift, and go to state 57
    "<"           shift, and go to state 58
    "%unscope:"   shift, and go to state 59
    "%exp:"       shift, and go to state 60
    "%lvalue:"    shift, and go to state 61
    "%id:"        shift, and go to state 62

    block        go to state 67
    exp          go to state 448
    routine      go to state 100
    primary-exp  go to state 101
    detach       go to state 71
    lvalue       go to state 72
    id           go to state 102
    bitor-exp    go to state 74
    new          go to state 75
    float-exp    go to state 76
    duration     go to state 77
    dictionary   go to state 78
    tuple        go to state 79
    literal-exp  go to state 80
    string       go to state 81
    unary-exp    go to state 82
    rel-exp      go to state 83


state 415

   62 exp: exp . "=" exp
   63    | exp . "=" exp modifiers
  113 stmt: "for" "(" stmt.opt ";" exp . ";" stmt.opt ")" stmt
  214 exp: exp . "&&" exp
  215    | exp . "||" exp
  216    | exp . "in" exp
  217    | exp . "!" "in" exp

    "="   shift, and go to state 164
    "in"  shift, and go to state 165
    ";"   shift, and go to state 449
    "!"   shift, and go to state 215
    "&&"  shift, and go to state 167
    "||"  shift, and go to state 168


state 416

  112 stmt: "for" "(" exp ")" stmt .

    $default  reduce using rule 112 (stmt)


state 417

  115 stmt: "while" "(" exp ")" stmt .

    $default  reduce using rule 115 (stmt)


state 418

   73 stmt: "at" identifiers "(" exp tilda.opt . ")" stmt onleave.opt

    ")"  shift, and go to state 450


state 419

   23 stmt: . primary-exp ":" stmt
   24     | . exp
   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   37 exp: . "class" lvalue protos block
   38    | . "package" lvalue protos block
   43 stmt: . "enum" id "{" id.0 "}"
   47     | . "external" "identifier" "identifier"
   48     | . "external" "var" "identifier" "." "identifier" from "identifier"
   49     | . "external" event_or_function "(" unsigned ")" "identifier" "." "identifier" from "identifier"
   50     | . "import" lvalue
   51     | . exp "!" args.opt tilda.opt
   52 routine: . "closure"
   53        | . "function"
   54 stmt: . routine k1_id formals block
   55     | . id id formals block
   62 exp: . exp "=" exp
   63    | . exp "=" exp modifiers
   64    | . lvalue "+=" exp
   65    | . lvalue "-=" exp
   66    | . lvalue "*=" exp
   67    | . lvalue "/=" exp
   68    | . lvalue "^=" exp
   69    | . lvalue "%=" exp
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
   73 stmt: . "at" identifiers "(" exp tilda.opt ")" stmt onleave.opt
   74     | . "at" identifiers "(" event_match ")" stmt onleave.opt
   74     | "at" identifiers "(" event_match ")" . stmt onleave.opt
   75     | . "every" "(" exp ")" stmt
   76     | . "if" "(" stmts ")" stmt else.opt
   77     | . "freezeif" "(" exp ")" stmt
   78     | . "stopif" "(" exp ")" stmt
   79     | . "switch" "(" exp ")" "{" cases default.opt "}"
   80     | . "timeout" "(" exp ")" stmt catch.opt else.opt finally.opt
   81     | . "return" exp.opt
   82     | . "break"
   83     | . "continue"
   84     | . "waituntil" "(" exp tilda.opt ")"
   85     | . "waituntil" "(" event_match ")"
   86     | . "whenever" "(" exp tilda.opt ")" stmt else.opt
   87     | . "whenever" "(" event_match ")" stmt else.opt
  108     | . "try" block catches.1 else.opt finally.opt
  109     | . "try" block "finally" block
  110     | . "throw" exp.opt
  111     | . "loop" stmt
  112     | . "for" "(" exp ")" stmt
  113     | . "for" "(" stmt.opt ";" exp ";" stmt.opt ")" stmt
  114     | . "for" "(" "var" "identifier" in_or_colon exp ")" stmt
  115     | . "while" "(" exp ")" stmt
  118 primary-exp: . block
  119            | . "do" "(" exp ")" block
  120 detach: . "detach"
  121       | . "disown"
  122 primary-exp: . "assert" "(" exp ")"
  123            | . "assert" "{" claims "}"
  124            | . detach "(" exp ")"
  125            | . detach block
  126            | . "isdef" "(" k1_id ")"
  127            | . "watch" "(" exp ")"
  128 lvalue: . id
  129       | . primary-exp "." id
  130       | . primary-exp "." "*"
  131 primary-exp: . "&" id
  132            | . primary-exp "." "&" id
  133 id: . "identifier"
  134 bitor-exp: . "var" bitor-exp
  135          | . "const" "var" bitor-exp
  136 primary-exp: . lvalue
  137            | . lvalue args
  138 new: . "new" "identifier" args.opt
  139 bitor-exp: . new
  140 id: . "new"
  141 primary-exp: . routine formals block
  142 float-exp: . "float"
  143 duration: . "duration"
  144         | . duration "duration"
  150 dictionary: . "[" assocs "]"
  154 tuple: . "(" tuple.exps ")"
  159 literal-exp: . float-exp
  160            | . "angle"
  161            | . duration
  162            | . string
  163            | . "[" exps "]"
  164            | . "<" bitor-exps ">"
  165            | . dictionary
  166            | . tuple
  167 string: . "string"
  168       | . string "string"
  169 literal-exp: . "__HERE__"
  175 lvalue: . primary-exp "[" exps "]"
  176 literal-exp: . "this"
  177            | . "call"
  178 primary-exp: . literal-exp
  179            | . "(" exp ")"
  180            | . "(" error ")"
  181            | . primary-exp "**" primary-exp
  182 unary-exp: . primary-exp
  183          | . "--" lvalue
  184          | . "++" lvalue
  185          | . "+" unary-exp
  186          | . "-" unary-exp
  187          | . "!" unary-exp
  188          | . "compl" unary-exp
  189 bitor-exp: . unary-exp
  190          | . bitor-exp "+" bitor-exp
  191          | . bitor-exp "-" bitor-exp
  192          | . bitor-exp "*" bitor-exp
  193          | . bitor-exp "/" bitor-exp
  194          | . bitor-exp "%" bitor-exp
  195          | . bitor-exp "^" bitor-exp
  196          | . bitor-exp "<<" bitor-exp
  197          | . bitor-exp "bitand" bitor-exp
  198          | . bitor-exp "bitor" bitor-exp
  199          | . bitor-exp ">>" bitor-exp
  210 rel-exp: . bitor-exp rel-ops
  213 exp: . rel-exp
  214    | . exp "&&" exp
  215    | . exp "||" exp
  216    | . exp "in" exp
  217    | . exp "!" "in" exp
  221    | . "%unscope:" unsigned
  222 primary-exp: . "%exp:" unsigned
  223 lvalue: . "%lvalue:" unsigned
  224       | . "%id:" unsigned
  225       | . primary-exp "." "%id:" unsigned
  226 primary-exp: . lvalue "(" "%exps:" unsigned ")"

    "__HERE__"    shift, and go to state 7
    "break"       shift, and go to state 8
    "closure"     shift, and go to state 9
    "const"       shift, and go to state 10
    "continue"    shift, and go to state 11
    "freezeif"    shift, and go to state 12
    "function"    shift, and go to state 13
    "if"          shift, and go to state 14
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "return"      shift, and go to state 19
    "stopif"      shift, and go to state 20
    "switch"      shift, and go to state 21
    "throw"       shift, and go to state 22
    "timeout"     shift, and go to state 23
    "try"         shift, and go to state 24
    "var"         shift, and go to state 25
    "waituntil"   shift, and go to state 26
    "watch"       shift, and go to state 27
    "whenever"    shift, and go to state 28
    "&"           shift, and go to state 29
    "every"       shift, and go to state 30
    "for"         shift, and go to state 31
    "loop"        shift, and go to state 32
    "while"       shift, and go to state 33
    "at"          shift, and go to state 34
    "identifier"  shift, and go to state 35
    "class"       shift, and go to state 36
    "package"     shift, and go to state 37
    "enum"        shift, and go to state 38
    "external"    shift, and go to state 39
    "import"      shift, and go to state 40
    "--"          shift, and go to state 41
    "++"          shift, and go to state 42
    "do"          shift, and go to state 43
    "assert"      shift, and go to state 44
    "detach"      shift, and go to state 45
    "disown"      shift, and go to state 46
    "new"         shift, and go to state 47
    "angle"       shift, and go to state 48
    "duration"    shift, and go to state 49
    "float"       shift, and go to state 50
    "string"      shift, and go to state 51
    "call"        shift, and go to state 52
    "this"        shift, and go to state 53
    "!"           shift, and go to state 54
    "compl"       shift, and go to state 55
    "-"           shift, and go to state 56
    "+"           shift, and go to state 57
    "<"           shift, and go to state 58
    "%unscope:"   shift, and go to state 59
    "%exp:"       shift, and go to state 60
    "%lvalue:"    shift, and go to state 61
    "%id:"        shift, and go to state 62

    stmt         go to state 451
    block        go to state 67
    exp          go to state 68
    routine      go to state 69
    primary-exp  go to state 70
    detach       go to state 71
    lvalue       go to state 72
    id           go to state 73
    bitor-exp    go to state 74
    new          go to state 75
    float-exp    go to state 76
    duration     go to state 77
    dictionary   go to state 78
    tuple        go to state 79
    literal-exp  go to state 80
    string       go to state 81
    unary-exp    go to state 82
    rel-exp      go to state 83


state 420

   32 proto: visibility exp .  ["{", ","]
   62 exp: exp . "=" exp
   63    | exp . "=" exp modifiers
  214    | exp . "&&" exp
  215    | exp . "||" exp
  216    | exp . "in" exp
  217    | exp . "!" "in" exp

    "="   shift, and go to state 164
    "in"  shift, and go to state 165
    "!"   shift, and go to state 215
    "&&"  shift, and go to state 167
    "||"  shift, and go to state 168

    $default  reduce using rule 32 (proto)


state 421

   28 visibility: .  ["__HERE__", "closure", "const", "function", "isdef", "{", "[", "(", "var", "watch", "&", "identifier", "class", "package", "--", "++", "do", "assert", "detach", "disown", "new", "angle", "duration", "float", "string", "call", "this", "!", "compl", "-", "+", "<", "%unscope:", "%exp:", "%lvalue:", "%id:"]
   29           | . "private"
   30           | . "protected"
   31           | . "public"
   32 proto: . visibility exp
   34 protos.1: protos.1 "," . proto

    "private"    shift, and go to state 355
    "protected"  shift, and go to state 356
    "public"     shift, and go to state 357

    $default  reduce using rule 28 (visibility)

    visibility  go to state 358
    proto       go to state 452


state 422

   43 stmt: "enum" id "{" id.0 "}" .

    $default  reduce using rule 43 (stmt)


state 423

   42 id.1: id.1 "," . id
  133 id: . "identifier"
  140   | . "new"
  254 comma.opt: "," .  ["}"]

    "identifier"  shift, and go to state 35
    "new"         shift, and go to state 125

    $default  reduce using rule 254 (comma.opt)

    id  go to state 453


state 424

   40 id.0: id.1 comma.opt .

    $default  reduce using rule 40 (id.0)


state 425

   44 from: . "identifier"
   48 stmt: "external" "var" "identifier" "." "identifier" . from "identifier"

    "identifier"  shift, and go to state 454

    from  go to state 455


state 426

   49 stmt: "external" event_or_function "(" unsigned ")" . "identifier" "." "identifier" from "identifier"

    "identifier"  shift, and go to state 456


state 427

  119 primary-exp: "do" "(" exp ")" block .

    $default  reduce using rule 119 (primary-exp)


state 428

   62 exp: exp . "=" exp
   63    | exp . "=" exp modifiers
  214    | exp . "&&" exp
  215    | exp . "||" exp
  216    | exp . "in" exp
  217    | exp . "!" "in" exp
  230 claims.1: claims.1 ";" exp .  ["}", ";"]

    "="   shift, and go to state 164
    "in"  shift, and go to state 165
    "!"   shift, and go to state 215
    "&&"  shift, and go to state 167
    "||"  shift, and go to state 168

    $default  reduce using rule 230 (claims.1)


state 429

   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   37 exp: . "class" lvalue protos block
   38    | . "package" lvalue protos block
   52 routine: . "closure"
   53        | . "function"
   59 modifier: "identifier" ":" . exp
   62 exp: . exp "=" exp
   63    | . exp "=" exp modifiers
   64    | . lvalue "+=" exp
   65    | . lvalue "-=" exp
   66    | . lvalue "*=" exp
   67    | . lvalue "/=" exp
   68    | . lvalue "^=" exp
   69    | . lvalue "%=" exp
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
  118            | . block
  119            | . "do" "(" exp ")" block
  120 detach: . "detach"
  121       | . "disown"
  122 primary-exp: . "assert" "(" exp ")"
  123            | . "assert" "{" claims "}"
  124            | . detach "(" exp ")"
  125            | . detach block
  126            | . "isdef" "(" k1_id ")"
  127            | . "watch" "(" exp ")"
  128 lvalue: . id
  129       | . primary-exp "." id
  130       | . primary-exp "." "*"
  131 primary-exp: . "&" id
  132            | . primary-exp "." "&" id
  133 id: . "identifier"
  134 bitor-exp: . "var" bitor-exp
  135          | . "const" "var" bitor-exp
  136 primary-exp: . lvalue
  137            | . lvalue args
  138 new: . "new" "identifier" args.opt
  139 bitor-exp: . new
  140 id: . "new"
  141 primary-exp: . routine formals block
  142 float-exp: . "float"
  143 duration: . "duration"
  144         | . duration "duration"
  150 dictionary: . "[" assocs "]"
  154 tuple: . "(" tuple.exps ")"
  159 literal-exp: . float-exp
  160            | . "angle"
  161            | . duration
  162            | . string
  163            | . "[" exps "]"
  164            | . "<" bitor-exps ">"
  165            | . dictionary
  166            | . tuple
  167 string: . "string"
  168       | . string "string"
  169 literal-exp: . "__HERE__"
  175 lvalue: . primary-exp "[" exps "]"
  176 literal-exp: . "this"
  177            | . "call"
  178 primary-exp: . literal-exp
  179            | . "(" exp ")"
  180            | . "(" error ")"
  181            | . primary-exp "**" primary-exp
  182 unary-exp: . primary-exp
  183          | . "--" lvalue
  184          | . "++" lvalue
  185          | . "+" unary-exp
  186          | . "-" unary-exp
  187          | . "!" unary-exp
  188          | . "compl" unary-exp
  189 bitor-exp: . unary-exp
  190          | . bitor-exp "+" bitor-exp
  191          | . bitor-exp "-" bitor-exp
  192          | . bitor-exp "*" bitor-exp
  193          | . bitor-exp "/" bitor-exp
  194          | . bitor-exp "%" bitor-exp
  195          | . bitor-exp "^" bitor-exp
  196          | . bitor-exp "<<" bitor-exp
  197          | . bitor-exp "bitand" bitor-exp
  198          | . bitor-exp "bitor" bitor-exp
  199          | . bitor-exp ">>" bitor-exp
  210 rel-exp: . bitor-exp rel-ops
  213 exp: . rel-exp
  214    | . exp "&&" exp
  215    | . exp "||" exp
  216    | . exp "in" exp
  217    | . exp "!" "in" exp
  221    | . "%unscope:" unsigned
  222 primary-exp: . "%exp:" unsigned
  223 lvalue: . "%lvalue:" unsigned
  224       | . "%id:" unsigned
  225       | . primary-exp "." "%id:" unsigned
  226 primary-exp: . lvalue "(" "%exps:" unsigned ")"

    "__HERE__"    shift, and go to state 7
    "closure"     shift, and go to state 9
    "const"       shift, and go to state 10
    "function"    shift, and go to state 13
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "var"         shift, and go to state 25
    "watch"       shift, and go to state 27
    "&"           shift, and go to state 29
    "identifier"  shift, and go to state 35
    "class"       shift, and go to state 36
    "package"     shift, and go to state 37
    "--"          shift, and go to state 41
    "++"          shift, and go to state 42
    "do"          shift, and go to state 43
    "assert"      shift, and go to state 44
    "detach"      shift, and go to state 45
    "disown"      shift, and go to state 46
    "new"         shift, and go to state 47
    "angle"       shift, and go to state 48
    "duration"    shift, and go to state 49
    "float"       shift, and go to state 50
    "string"      shift, and go to state 51
    "call"        shift, and go to state 52
    "this"        shift, and go to state 53
    "!"           shift, and go to state 54
    "compl"       shift, and go to state 55
    "-"           shift, and go to state 56
    "+"           shift, and go to state 57
    "<"           shift, and go to state 58
    "%unscope:"   shift, and go to state 59
    "%exp:"       shift, and go to state 60
    "%lvalue:"    shift, and go to state 61
    "%id:"        shift, and go to state 62

    block        go to state 67
    exp          go to state 457
    routine      go to state 100
    primary-exp  go to state 101
    detach       go to state 71
    lvalue       go to state 72
    id           go to state 102
    bitor-exp    go to state 74
    new          go to state 75
    float-exp    go to state 76
    duration     go to state 77
    dictionary   go to state 78
    tuple        go to state 79
    literal-exp  go to state 80
    string       go to state 81
    unary-exp    go to state 82
    rel-exp      go to state 83


state 430

   61 modifiers: modifiers modifier .

    $default  reduce using rule 61 (modifiers)


state 431

  248 formals.1: formals.1 "," formal .

    $default  reduce using rule 248 (formals.1)


state 432

   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   37 exp: . "class" lvalue protos block
   38    | . "package" lvalue protos block
   52 routine: . "closure"
   53        | . "function"
   62 exp: . exp "=" exp
   63    | . exp "=" exp modifiers
   64    | . lvalue "+=" exp
   65    | . lvalue "-=" exp
   66    | . lvalue "*=" exp
   67    | . lvalue "/=" exp
   68    | . lvalue "^=" exp
   69    | . lvalue "%=" exp
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
  118            | . block
  119            | . "do" "(" exp ")" block
  120 detach: . "detach"
  121       | . "disown"
  122 primary-exp: . "assert" "(" exp ")"
  123            | . "assert" "{" claims "}"
  124            | . detach "(" exp ")"
  125            | . detach block
  126            | . "isdef" "(" k1_id ")"
  127            | . "watch" "(" exp ")"
  128 lvalue: . id
  129       | . primary-exp "." id
  130       | . primary-exp "." "*"
  131 primary-exp: . "&" id
  132            | . primary-exp "." "&" id
  133 id: . "identifier"
  134 bitor-exp: . "var" bitor-exp
  135          | . "const" "var" bitor-exp
  136 primary-exp: . lvalue
  137            | . lvalue args
  138 new: . "new" "identifier" args.opt
  139 bitor-exp: . new
  140 id: . "new"
  141 primary-exp: . routine formals block
  142 float-exp: . "float"
  143 duration: . "duration"
  144         | . duration "duration"
  150 dictionary: . "[" assocs "]"
  154 tuple: . "(" tuple.exps ")"
  159 literal-exp: . float-exp
  160            | . "angle"
  161            | . duration
  162            | . string
  163            | . "[" exps "]"
  164            | . "<" bitor-exps ">"
  165            | . dictionary
  166            | . tuple
  167 string: . "string"
  168       | . string "string"
  169 literal-exp: . "__HERE__"
  175 lvalue: . primary-exp "[" exps "]"
  176 literal-exp: . "this"
  177            | . "call"
  178 primary-exp: . literal-exp
  179            | . "(" exp ")"
  180            | . "(" error ")"
  181            | . primary-exp "**" primary-exp
  182 unary-exp: . primary-exp
  183          | . "--" lvalue
  184          | . "++" lvalue
  185          | . "+" unary-exp
  186          | . "-" unary-exp
  187          | . "!" unary-exp
  188          | . "compl" unary-exp
  189 bitor-exp: . unary-exp
  190          | . bitor-exp "+" bitor-exp
  191          | . bitor-exp "-" bitor-exp
  192          | . bitor-exp "*" bitor-exp
  193          | . bitor-exp "/" bitor-exp
  194          | . bitor-exp "%" bitor-exp
  195          | . bitor-exp "^" bitor-exp
  196          | . bitor-exp "<<" bitor-exp
  197          | . bitor-exp "bitand" bitor-exp
  198          | . bitor-exp "bitor" bitor-exp
  199          | . bitor-exp ">>" bitor-exp
  210 rel-exp: . bitor-exp rel-ops
  213 exp: . rel-exp
  214    | . exp "&&" exp
  215    | . exp "||" exp
  216    | . exp "in" exp
  217    | . exp "!" "in" exp
  221    | . "%unscope:" unsigned
  222 primary-exp: . "%exp:" unsigned
  223 lvalue: . "%lvalue:" unsigned
  224       | . "%id:" unsigned
  225       | . primary-exp "." "%id:" unsigned
  226 primary-exp: . lvalue "(" "%exps:" unsigned ")"
  245 formal: var.opt "identifier" "=" . exp typespec.opt

    "__HERE__"    shift, and go to state 7
    "closure"     shift, and go to state 9
    "const"       shift, and go to state 10
    "function"    shift, and go to state 13
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "var"         shift, and go to state 25
    "watch"       shift, and go to state 27
    "&"           shift, and go to state 29
    "identifier"  shift, and go to state 35
    "class"       shift, and go to state 36
    "package"     shift, and go to state 37
    "--"          shift, and go to state 41
    "++"          shift, and go to state 42
    "do"          shift, and go to state 43
    "assert"      shift, and go to state 44
    "detach"      shift, and go to state 45
    "disown"      shift, and go to state 46
    "new"         shift, and go to state 47
    "angle"       shift, and go to state 48
    "duration"    shift, and go to state 49
    "float"       shift, and go to state 50
    "string"      shift, and go to state 51
    "call"        shift, and go to state 52
    "this"        shift, and go to state 53
    "!"           shift, and go to state 54
    "compl"       shift, and go to state 55
    "-"           shift, and go to state 56
    "+"           shift, and go to state 57
    "<"           shift, and go to state 58
    "%unscope:"   shift, and go to state 59
    "%exp:"       shift, and go to state 60
    "%lvalue:"    shift, and go to state 61
    "%id:"        shift, and go to state 62

    block        go to state 67
    exp          go to state 458
    routine      go to state 100
    primary-exp  go to state 101
    detach       go to state 71
    lvalue       go to state 72
    id           go to state 102
    bitor-exp    go to state 74
    new          go to state 75
    float-exp    go to state 76
    duration     go to state 77
    dictionary   go to state 78
    tuple        go to state 79
    literal-exp  go to state 80
    string       go to state 81
    unary-exp    go to state 82
    rel-exp      go to state 83


state 433

   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   37 exp: . "class" lvalue protos block
   38    | . "package" lvalue protos block
   52 routine: . "closure"
   53        | . "function"
   62 exp: . exp "=" exp
   63    | . exp "=" exp modifiers
   64    | . lvalue "+=" exp
   65    | . lvalue "-=" exp
   66    | . lvalue "*=" exp
   67    | . lvalue "/=" exp
   68    | . lvalue "^=" exp
   69    | . lvalue "%=" exp
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
  118            | . block
  119            | . "do" "(" exp ")" block
  120 detach: . "detach"
  121       | . "disown"
  122 primary-exp: . "assert" "(" exp ")"
  123            | . "assert" "{" claims "}"
  124            | . detach "(" exp ")"
  125            | . detach block
  126            | . "isdef" "(" k1_id ")"
  127            | . "watch" "(" exp ")"
  128 lvalue: . id
  129       | . primary-exp "." id
  130       | . primary-exp "." "*"
  131 primary-exp: . "&" id
  132            | . primary-exp "." "&" id
  133 id: . "identifier"
  134 bitor-exp: . "var" bitor-exp
  135          | . "const" "var" bitor-exp
  136 primary-exp: . lvalue
  137            | . lvalue args
  138 new: . "new" "identifier" args.opt
  139 bitor-exp: . new
  140 id: . "new"
  141 primary-exp: . routine formals block
  142 float-exp: . "float"
  143 duration: . "duration"
  144         | . duration "duration"
  150 dictionary: . "[" assocs "]"
  154 tuple: . "(" tuple.exps ")"
  159 literal-exp: . float-exp
  160            | . "angle"
  161            | . duration
  162            | . string
  163            | . "[" exps "]"
  164            | . "<" bitor-exps ">"
  165            | . dictionary
  166            | . tuple
  167 string: . "string"
  168       | . string "string"
  169 literal-exp: . "__HERE__"
  175 lvalue: . primary-exp "[" exps "]"
  176 literal-exp: . "this"
  177            | . "call"
  178 primary-exp: . literal-exp
  179            | . "(" exp ")"
  180            | . "(" error ")"
  181            | . primary-exp "**" primary-exp
  182 unary-exp: . primary-exp
  183          | . "--" lvalue
  184          | . "++" lvalue
  185          | . "+" unary-exp
  186          | . "-" unary-exp
  187          | . "!" unary-exp
  188          | . "compl" unary-exp
  189 bitor-exp: . unary-exp
  190          | . bitor-exp "+" bitor-exp
  191          | . bitor-exp "-" bitor-exp
  192          | . bitor-exp "*" bitor-exp
  193          | . bitor-exp "/" bitor-exp
  194          | . bitor-exp "%" bitor-exp
  195          | . bitor-exp "^" bitor-exp
  196          | . bitor-exp "<<" bitor-exp
  197          | . bitor-exp "bitand" bitor-exp
  198          | . bitor-exp "bitor" bitor-exp
  199          | . bitor-exp ">>" bitor-exp
  210 rel-exp: . bitor-exp rel-ops
  213 exp: . rel-exp
  214    | . exp "&&" exp
  215    | . exp "||" exp
  216    | . exp "in" exp
  217    | . exp "!" "in" exp
  221    | . "%unscope:" unsigned
  222 primary-exp: . "%exp:" unsigned
  223 lvalue: . "%lvalue:" unsigned
  224       | . "%id:" unsigned
  225       | . primary-exp "." "%id:" unsigned
  226 primary-exp: . lvalue "(" "%exps:" unsigned ")"
  241 typespec: ":" . exp

    "__HERE__"    shift, and go to state 7
    "closure"     shift, and go to state 9
    "const"       shift, and go to state 10
    "function"    shift, and go to state 13
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "var"         shift, and go to state 25
    "watch"       shift, and go to state 27
    "&"           shift, and go to state 29
    "identifier"  shift, and go to state 35
    "class"       shift, and go to state 36
    "package"     shift, and go to state 37
    "--"          shift, and go to state 41
    "++"          shift, and go to state 42
    "do"          shift, and go to state 43
    "assert"      shift, and go to state 44
    "detach"      shift, and go to state 45
    "disown"      shift, and go to state 46
    "new"         shift, and go to state 47
    "angle"       shift, and go to state 48
    "duration"    shift, and go to state 49
    "float"       shift, and go to state 50
    "string"      shift, and go to state 51
    "call"        shift, and go to state 52
    "this"        shift, and go to state 53
    "!"           shift, and go to state 54
    "compl"       shift, and go to state 55
    "-"           shift, and go to state 56
    "+"           shift, and go to state 57
    "<"           shift, and go to state 58
    "%unscope:"   shift, and go to state 59
    "%exp:"       shift, and go to state 60
    "%lvalue:"    shift, and go to state 61
    "%id:"        shift, and go to state 62

    block        go to state 67
    exp          go to state 459
    routine      go to state 100
    primary-exp  go to state 101
    detach       go to state 71
    lvalue       go to state 72
    id           go to state 102
    bitor-exp    go to state 74
    new          go to state 75
    float-exp    go to state 76
    duration     go to state 77
    dictionary   go to state 78
    tuple        go to state 79
    literal-exp  go to state 80
    string       go to state 81
    unary-exp    go to state 82
    rel-exp      go to state 83


state 434

  246 formal: var.opt "identifier" "[" . "]"

    "]"  shift, and go to state 460


state 435

  243 typespec.opt: typespec .

    $default  reduce using rule 243 (typespec.opt)


state 436

  244 formal: var.opt "identifier" typespec.opt .

    $default  reduce using rule 244 (formal)


state 437

  226 primary-exp: lvalue "(" "%exps:" unsigned ")" .

    $default  reduce using rule 226 (primary-exp)


state 438

   76 stmt: "if" "(" stmts ")" stmt else.opt .

    $default  reduce using rule 76 (stmt)


state 439

   79 stmt: "switch" "(" exp ")" "{" cases . default.opt "}"
   88 default.opt: .  ["}"]
   89            | . "default" ":" stmts
   95 cases: cases . case
   96 case: . "case" match ":" stmts

    "case"     shift, and go to state 461
    "default"  shift, and go to state 462

    $default  reduce using rule 88 (default.opt)

    default.opt  go to state 463
    case         go to state 464


state 440

   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
  105 catch.opt: "catch" . block

    "{"  shift, and go to state 16

    block  go to state 465


state 441

   80 stmt: "timeout" "(" exp ")" stmt catch.opt . else.opt finally.opt
   90 else.opt: .  ["end of command", "case", "catch", "default", "finally", "onleave", "}", ")", ",", ";", "&", "|"]
   91         | . "else" stmt

    "else"  shift, and go to state 338

    $default  reduce using rule 90 (else.opt)

    else.opt  go to state 466

    Conflict between rule 90 and token "else" resolved as shift (EMPTY < "else").


state 442

   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   37 exp: . "class" lvalue protos block
   38    | . "package" lvalue protos block
   52 routine: . "closure"
   53        | . "function"
   62 exp: . exp "=" exp
   63    | . exp "=" exp modifiers
   64    | . lvalue "+=" exp
   65    | . lvalue "-=" exp
   66    | . lvalue "*=" exp
   67    | . lvalue "/=" exp
   68    | . lvalue "^=" exp
   69    | . lvalue "%=" exp
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
  100 match: exp "if" . exp
  118 primary-exp: . block
  119            | . "do" "(" exp ")" block
  120 detach: . "detach"
  121       | . "disown"
  122 primary-exp: . "assert" "(" exp ")"
  123            | . "assert" "{" claims "}"
  124            | . detach "(" exp ")"
  125            | . detach block
  126            | . "isdef" "(" k1_id ")"
  127            | . "watch" "(" exp ")"
  128 lvalue: . id
  129       | . primary-exp "." id
  130       | . primary-exp "." "*"
  131 primary-exp: . "&" id
  132            | . primary-exp "." "&" id
  133 id: . "identifier"
  134 bitor-exp: . "var" bitor-exp
  135          | . "const" "var" bitor-exp
  136 primary-exp: . lvalue
  137            | . lvalue args
  138 new: . "new" "identifier" args.opt
  139 bitor-exp: . new
  140 id: . "new"
  141 primary-exp: . routine formals block
  142 float-exp: . "float"
  143 duration: . "duration"
  144         | . duration "duration"
  150 dictionary: . "[" assocs "]"
  154 tuple: . "(" tuple.exps ")"
  159 literal-exp: . float-exp
  160            | . "angle"
  161            | . duration
  162            | . string
  163            | . "[" exps "]"
  164            | . "<" bitor-exps ">"
  165            | . dictionary
  166            | . tuple
  167 string: . "string"
  168       | . string "string"
  169 literal-exp: . "__HERE__"
  175 lvalue: . primary-exp "[" exps "]"
  176 literal-exp: . "this"
  177            | . "call"
  178 primary-exp: . literal-exp
  179            | . "(" exp ")"
  180            | . "(" error ")"
  181            | . primary-exp "**" primary-exp
  182 unary-exp: . primary-exp
  183          | . "--" lvalue
  184          | . "++" lvalue
  185          | . "+" unary-exp
  186          | . "-" unary-exp
  187          | . "!" unary-exp
  188          | . "compl" unary-exp
  189 bitor-exp: . unary-exp
  190          | . bitor-exp "+" bitor-exp
  191          | . bitor-exp "-" bitor-exp
  192          | . bitor-exp "*" bitor-exp
  193          | . bitor-exp "/" bitor-exp
  194          | . bitor-exp "%" bitor-exp
  195          | . bitor-exp "^" bitor-exp
  196          | . bitor-exp "<<" bitor-exp
  197          | . bitor-exp "bitand" bitor-exp
  198          | . bitor-exp "bitor" bitor-exp
  199          | . bitor-exp ">>" bitor-exp
  210 rel-exp: . bitor-exp rel-ops
  213 exp: . rel-exp
  214    | . exp "&&" exp
  215    | . exp "||" exp
  216    | . exp "in" exp
  217    | . exp "!" "in" exp
  221    | . "%unscope:" unsigned
  222 primary-exp: . "%exp:" unsigned
  223 lvalue: . "%lvalue:" unsigned
  224       | . "%id:" unsigned
  225       | . primary-exp "." "%id:" unsigned
  226 primary-exp: . lvalue "(" "%exps:" unsigned ")"

    "__HERE__"    shift, and go to state 7
    "closure"     shift, and go to state 9
    "const"       shift, and go to state 10
    "function"    shift, and go to state 13
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "var"         shift, and go to state 25
    "watch"       shift, and go to state 27
    "&"           shift, and go to state 29
    "identifier"  shift, and go to state 35
    "class"       shift, and go to state 36
    "package"     shift, and go to state 37
    "--"          shift, and go to state 41
    "++"          shift, and go to state 42
    "do"          shift, and go to state 43
    "assert"      shift, and go to state 44
    "detach"      shift, and go to state 45
    "disown"      shift, and go to state 46
    "new"         shift, and go to state 47
    "angle"       shift, and go to state 48
    "duration"    shift, and go to state 49
    "float"       shift, and go to state 50
    "string"      shift, and go to state 51
    "call"        shift, and go to state 52
    "this"        shift, and go to state 53
    "!"           shift, and go to state 54
    "compl"       shift, and go to state 55
    "-"           shift, and go to state 56
    "+"           shift, and go to state 57
    "<"           shift, and go to state 58
    "%unscope:"   shift, and go to state 59
    "%exp:"       shift, and go to state 60
    "%lvalue:"    shift, and go to state 61
    "%id:"        shift, and go to state 62

    block        go to state 67
    exp          go to state 467
    routine      go to state 100
    primary-exp  go to state 101
    detach       go to state 71
    lvalue       go to state 72
    id           go to state 102
    bitor-exp    go to state 74
    new          go to state 75
    float-exp    go to state 76
    duration     go to state 77
    dictionary   go to state 78
    tuple        go to state 79
    literal-exp  go to state 80
    string       go to state 81
    unary-exp    go to state 82
    rel-exp      go to state 83


state 443

  102 match.opt: "(" match ")" .

    $default  reduce using rule 102 (match.opt)


state 444

  107 finally.opt: "finally" block .

    $default  reduce using rule 107 (finally.opt)


state 445

  170 event_match: exp "?" args.opt tilda.opt . guard.opt
  171 guard.opt: .  [")"]
  172          | . "if" exp

    "if"  shift, and go to state 468

    $default  reduce using rule 171 (guard.opt)

    guard.opt  go to state 469


state 446

   86 stmt: "whenever" "(" exp tilda.opt ")" stmt . else.opt
   90 else.opt: .  ["end of command", "case", "catch", "default", "finally", "onleave", "}", ")", ",", ";", "&", "|"]
   91         | . "else" stmt

    "else"  shift, and go to state 338

    $default  reduce using rule 90 (else.opt)

    else.opt  go to state 470

    Conflict between rule 90 and token "else" resolved as shift (EMPTY < "else").


state 447

   87 stmt: "whenever" "(" event_match ")" stmt else.opt .

    $default  reduce using rule 87 (stmt)


state 448

   62 exp: exp . "=" exp
   63    | exp . "=" exp modifiers
  114 stmt: "for" "(" "var" "identifier" in_or_colon exp . ")" stmt
  214 exp: exp . "&&" exp
  215    | exp . "||" exp
  216    | exp . "in" exp
  217    | exp . "!" "in" exp

    "="   shift, and go to state 164
    "in"  shift, and go to state 165
    ")"   shift, and go to state 471
    "!"   shift, and go to state 215
    "&&"  shift, and go to state 167
    "||"  shift, and go to state 168


state 449

   21 stmt.opt: .  [")"]
   22         | . stmt
   23 stmt: . primary-exp ":" stmt
   24     | . exp
   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   37 exp: . "class" lvalue protos block
   38    | . "package" lvalue protos block
   43 stmt: . "enum" id "{" id.0 "}"
   47     | . "external" "identifier" "identifier"
   48     | . "external" "var" "identifier" "." "identifier" from "identifier"
   49     | . "external" event_or_function "(" unsigned ")" "identifier" "." "identifier" from "identifier"
   50     | . "import" lvalue
   51     | . exp "!" args.opt tilda.opt
   52 routine: . "closure"
   53        | . "function"
   54 stmt: . routine k1_id formals block
   55     | . id id formals block
   62 exp: . exp "=" exp
   63    | . exp "=" exp modifiers
   64    | . lvalue "+=" exp
   65    | . lvalue "-=" exp
   66    | . lvalue "*=" exp
   67    | . lvalue "/=" exp
   68    | . lvalue "^=" exp
   69    | . lvalue "%=" exp
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
   73 stmt: . "at" identifiers "(" exp tilda.opt ")" stmt onleave.opt
   74     | . "at" identifiers "(" event_match ")" stmt onleave.opt
   75     | . "every" "(" exp ")" stmt
   76     | . "if" "(" stmts ")" stmt else.opt
   77     | . "freezeif" "(" exp ")" stmt
   78     | . "stopif" "(" exp ")" stmt
   79     | . "switch" "(" exp ")" "{" cases default.opt "}"
   80     | . "timeout" "(" exp ")" stmt catch.opt else.opt finally.opt
   81     | . "return" exp.opt
   82     | . "break"
   83     | . "continue"
   84     | . "waituntil" "(" exp tilda.opt ")"
   85     | . "waituntil" "(" event_match ")"
   86     | . "whenever" "(" exp tilda.opt ")" stmt else.opt
   87     | . "whenever" "(" event_match ")" stmt else.opt
  108     | . "try" block catches.1 else.opt finally.opt
  109     | . "try" block "finally" block
  110     | . "throw" exp.opt
  111     | . "loop" stmt
  112     | . "for" "(" exp ")" stmt
  113     | . "for" "(" stmt.opt ";" exp ";" stmt.opt ")" stmt
  113     | "for" "(" stmt.opt ";" exp ";" . stmt.opt ")" stmt
  114     | . "for" "(" "var" "identifier" in_or_colon exp ")" stmt
  115     | . "while" "(" exp ")" stmt
  118 primary-exp: . block
  119            | . "do" "(" exp ")" block
  120 detach: . "detach"
  121       | . "disown"
  122 primary-exp: . "assert" "(" exp ")"
  123            | . "assert" "{" claims "}"
  124            | . detach "(" exp ")"
  125            | . detach block
  126            | . "isdef" "(" k1_id ")"
  127            | . "watch" "(" exp ")"
  128 lvalue: . id
  129       | . primary-exp "." id
  130       | . primary-exp "." "*"
  131 primary-exp: . "&" id
  132            | . primary-exp "." "&" id
  133 id: . "identifier"
  134 bitor-exp: . "var" bitor-exp
  135          | . "const" "var" bitor-exp
  136 primary-exp: . lvalue
  137            | . lvalue args
  138 new: . "new" "identifier" args.opt
  139 bitor-exp: . new
  140 id: . "new"
  141 primary-exp: . routine formals block
  142 float-exp: . "float"
  143 duration: . "duration"
  144         | . duration "duration"
  150 dictionary: . "[" assocs "]"
  154 tuple: . "(" tuple.exps ")"
  159 literal-exp: . float-exp
  160            | . "angle"
  161            | . duration
  162            | . string
  163            | . "[" exps "]"
  164            | . "<" bitor-exps ">"
  165            | . dictionary
  166            | . tuple
  167 string: . "string"
  168       | . string "string"
  169 literal-exp: . "__HERE__"
  175 lvalue: . primary-exp "[" exps "]"
  176 literal-exp: . "this"
  177            | . "call"
  178 primary-exp: . literal-exp
  179            | . "(" exp ")"
  180            | . "(" error ")"
  181            | . primary-exp "**" primary-exp
  182 unary-exp: . primary-exp
  183          | . "--" lvalue
  184          | . "++" lvalue
  185          | . "+" unary-exp
  186          | . "-" unary-exp
  187          | . "!" unary-exp
  188          | . "compl" unary-exp
  189 bitor-exp: . unary-exp
  190          | . bitor-exp "+" bitor-exp
  191          | . bitor-exp "-" bitor-exp
  192          | . bitor-exp "*" bitor-exp
  193          | . bitor-exp "/" bitor-exp
  194          | . bitor-exp "%" bitor-exp
  195          | . bitor-exp "^" bitor-exp
  196          | . bitor-exp "<<" bitor-exp
  197          | . bitor-exp "bitand" bitor-exp
  198          | . bitor-exp "bitor" bitor-exp
  199          | . bitor-exp ">>" bitor-exp
  210 rel-exp: . bitor-exp rel-ops
  213 exp: . rel-exp
  214    | . exp "&&" exp
  215    | . exp "||" exp
  216    | . exp "in" exp
  217    | . exp "!" "in" exp
  221    | . "%unscope:" unsigned
  222 primary-exp: . "%exp:" unsigned
  223 lvalue: . "%lvalue:" unsigned
  224       | . "%id:" unsigned
  225       | . primary-exp "." "%id:" unsigned
  226 primary-exp: . lvalue "(" "%exps:" unsigned ")"

    "__HERE__"    shift, and go to state 7
    "break"       shift, and go to state 8
    "closure"     shift, and go to state 9
    "const"       shift, and go to state 10
    "continue"    shift, and go to state 11
    "freezeif"    shift, and go to state 12
    "function"    shift, and go to state 13
    "if"          shift, and go to state 14
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "return"      shift, and go to state 19
    "stopif"      shift, and go to state 20
    "switch"      shift, and go to state 21
    "throw"       shift, and go to state 22
    "timeout"     shift, and go to state 23
    "try"         shift, and go to state 24
    "var"         shift, and go to state 25
    "waituntil"   shift, and go to state 26
    "watch"       shift, and go to state 27
    "whenever"    shift, and go to state 28
    "&"           shift, and go to state 29
    "every"       shift, and go to state 30
    "for"         shift, and go to state 31
    "loop"        shift, and go to state 32
    "while"       shift, and go to state 33
    "at"          shift, and go to state 34
    "identifier"  shift, and go to state 35
    "class"       shift, and go to state 36
    "package"     shift, and go to state 37
    "enum"        shift, and go to state 38
    "external"    shift, and go to state 39
    "import"      shift, and go to state 40
    "--"          shift, and go to state 41
    "++"          shift, and go to state 42
    "do"          shift, and go to state 43
    "assert"      shift, and go to state 44
    "detach"      shift, and go to state 45
    "disown"      shift, and go to state 46
    "new"         shift, and go to state 47
    "angle"       shift, and go to state 48
    "duration"    shift, and go to state 49
    "float"       shift, and go to state 50
    "string"      shift, and go to state 51
    "call"        shift, and go to state 52
    "this"        shift, and go to state 53
    "!"           shift, and go to state 54
    "compl"       shift, and go to state 55
    "-"           shift, and go to state 56
    "+"           shift, and go to state 57
    "<"           shift, and go to state 58
    "%unscope:"   shift, and go to state 59
    "%exp:"       shift, and go to state 60
    "%lvalue:"    shift, and go to state 61
    "%id:"        shift, and go to state 62

    $default  reduce using rule 21 (stmt.opt)

    stmt.opt     go to state 472
    stmt         go to state 241
    block        go to state 67
    exp          go to state 68
    routine      go to state 69
    primary-exp  go to state 70
    detach       go to state 71
    lvalue       go to state 72
    id           go to state 73
    bitor-exp    go to state 74
    new          go to state 75
    float-exp    go to state 76
    duration     go to state 77
    dictionary   go to state 78
    tuple        go to state 79
    literal-exp  go to state 80
    string       go to state 81
    unary-exp    go to state 82
    rel-exp      go to state 83


state 450

   23 stmt: . primary-exp ":" stmt
   24     | . exp
   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   37 exp: . "class" lvalue protos block
   38    | . "package" lvalue protos block
   43 stmt: . "enum" id "{" id.0 "}"
   47     | . "external" "identifier" "identifier"
   48     | . "external" "var" "identifier" "." "identifier" from "identifier"
   49     | . "external" event_or_function "(" unsigned ")" "identifier" "." "identifier" from "identifier"
   50     | . "import" lvalue
   51     | . exp "!" args.opt tilda.opt
   52 routine: . "closure"
   53        | . "function"
   54 stmt: . routine k1_id formals block
   55     | . id id formals block
   62 exp: . exp "=" exp
   63    | . exp "=" exp modifiers
   64    | . lvalue "+=" exp
   65    | . lvalue "-=" exp
   66    | . lvalue "*=" exp
   67    | . lvalue "/=" exp
   68    | . lvalue "^=" exp
   69    | . lvalue "%=" exp
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
   73 stmt: . "at" identifiers "(" exp tilda.opt ")" stmt onleave.opt
   73     | "at" identifiers "(" exp tilda.opt ")" . stmt onleave.opt
   74     | . "at" identifiers "(" event_match ")" stmt onleave.opt
   75     | . "every" "(" exp ")" stmt
   76     | . "if" "(" stmts ")" stmt else.opt
   77     | . "freezeif" "(" exp ")" stmt
   78     | . "stopif" "(" exp ")" stmt
   79     | . "switch" "(" exp ")" "{" cases default.opt "}"
   80     | . "timeout" "(" exp ")" stmt catch.opt else.opt finally.opt
   81     | . "return" exp.opt
   82     | . "break"
   83     | . "continue"
   84     | . "waituntil" "(" exp tilda.opt ")"
   85     | . "waituntil" "(" event_match ")"
   86     | . "whenever" "(" exp tilda.opt ")" stmt else.opt
   87     | . "whenever" "(" event_match ")" stmt else.opt
  108     | . "try" block catches.1 else.opt finally.opt
  109     | . "try" block "finally" block
  110     | . "throw" exp.opt
  111     | . "loop" stmt
  112     | . "for" "(" exp ")" stmt
  113     | . "for" "(" stmt.opt ";" exp ";" stmt.opt ")" stmt
  114     | . "for" "(" "var" "identifier" in_or_colon exp ")" stmt
  115     | . "while" "(" exp ")" stmt
  118 primary-exp: . block
  119            | . "do" "(" exp ")" block
  120 detach: . "detach"
  121       | . "disown"
  122 primary-exp: . "assert" "(" exp ")"
  123            | . "assert" "{" claims "}"
  124            | . detach "(" exp ")"
  125            | . detach block
  126            | . "isdef" "(" k1_id ")"
  127            | . "watch" "(" exp ")"
  128 lvalue: . id
  129       | . primary-exp "." id
  130       | . primary-exp "." "*"
  131 primary-exp: . "&" id
  132            | . primary-exp "." "&" id
  133 id: . "identifier"
  134 bitor-exp: . "var" bitor-exp
  135          | . "const" "var" bitor-exp
  136 primary-exp: . lvalue
  137            | . lvalue args
  138 new: . "new" "identifier" args.opt
  139 bitor-exp: . new
  140 id: . "new"
  141 primary-exp: . routine formals block
  142 float-exp: . "float"
  143 duration: . "duration"
  144         | . duration "duration"
  150 dictionary: . "[" assocs "]"
  154 tuple: . "(" tuple.exps ")"
  159 literal-exp: . float-exp
  160            | . "angle"
  161            | . duration
  162            | . string
  163            | . "[" exps "]"
  164            | . "<" bitor-exps ">"
  165            | . dictionary
  166            | . tuple
  167 string: . "string"
  168       | . string "string"
  169 literal-exp: . "__HERE__"
  175 lvalue: . primary-exp "[" exps "]"
  176 literal-exp: . "this"
  177            | . "call"
  178 primary-exp: . literal-exp
  179            | . "(" exp ")"
  180            | . "(" error ")"
  181            | . primary-exp "**" primary-exp
  182 unary-exp: . primary-exp
  183          | . "--" lvalue
  184          | . "++" lvalue
  185          | . "+" unary-exp
  186          | . "-" unary-exp
  187          | . "!" unary-exp
  188          | . "compl" unary-exp
  189 bitor-exp: . unary-exp
  190          | . bitor-exp "+" bitor-exp
  191          | . bitor-exp "-" bitor-exp
  192          | . bitor-exp "*" bitor-exp
  193          | . bitor-exp "/" bitor-exp
  194          | . bitor-exp "%" bitor-exp
  195          | . bitor-exp "^" bitor-exp
  196          | . bitor-exp "<<" bitor-exp
  197          | . bitor-exp "bitand" bitor-exp
  198          | . bitor-exp "bitor" bitor-exp
  199          | . bitor-exp ">>" bitor-exp
  210 rel-exp: . bitor-exp rel-ops
  213 exp: . rel-exp
  214    | . exp "&&" exp
  215    | . exp "||" exp
  216    | . exp "in" exp
  217    | . exp "!" "in" exp
  221    | . "%unscope:" unsigned
  222 primary-exp: . "%exp:" unsigned
  223 lvalue: . "%lvalue:" unsigned
  224       | . "%id:" unsigned
  225       | . primary-exp "." "%id:" unsigned
  226 primary-exp: . lvalue "(" "%exps:" unsigned ")"

    "__HERE__"    shift, and go to state 7
    "break"       shift, and go to state 8
    "closure"     shift, and go to state 9
    "const"       shift, and go to state 10
    "continue"    shift, and go to state 11
    "freezeif"    shift, and go to state 12
    "function"    shift, and go to state 13
    "if"          shift, and go to state 14
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "return"      shift, and go to state 19
    "stopif"      shift, and go to state 20
    "switch"      shift, and go to state 21
    "throw"       shift, and go to state 22
    "timeout"     shift, and go to state 23
    "try"         shift, and go to state 24
    "var"         shift, and go to state 25
    "waituntil"   shift, and go to state 26
    "watch"       shift, and go to state 27
    "whenever"    shift, and go to state 28
    "&"           shift, and go to state 29
    "every"       shift, and go to state 30
    "for"         shift, and go to state 31
    "loop"        shift, and go to state 32
    "while"       shift, and go to state 33
    "at"          shift, and go to state 34
    "identifier"  shift, and go to state 35
    "class"       shift, and go to state 36
    "package"     shift, and go to state 37
    "enum"        shift, and go to state 38
    "external"    shift, and go to state 39
    "import"      shift, and go to state 40
    "--"          shift, and go to state 41
    "++"          shift, and go to state 42
    "do"          shift, and go to state 43
    "assert"      shift, and go to state 44
    "detach"      shift, and go to state 45
    "disown"      shift, and go to state 46
    "new"         shift, and go to state 47
    "angle"       shift, and go to state 48
    "duration"    shift, and go to state 49
    "float"       shift, and go to state 50
    "string"      shift, and go to state 51
    "call"        shift, and go to state 52
    "this"        shift, and go to state 53
    "!"           shift, and go to state 54
    "compl"       shift, and go to state 55
    "-"           shift, and go to state 56
    "+"           shift, and go to state 57
    "<"           shift, and go to state 58
    "%unscope:"   shift, and go to state 59
    "%exp:"       shift, and go to state 60
    "%lvalue:"    shift, and go to state 61
    "%id:"        shift, and go to state 62

    stmt         go to state 473
    block        go to state 67
    exp          go to state 68
    routine      go to state 69
    primary-exp  go to state 70
    detach       go to state 71
    lvalue       go to state 72
    id           go to state 73
    bitor-exp    go to state 74
    new          go to state 75
    float-exp    go to state 76
    duration     go to state 77
    dictionary   go to state 78
    tuple        go to state 79
    literal-exp  go to state 80
    string       go to state 81
    unary-exp    go to state 82
    rel-exp      go to state 83


state 451

   74 stmt: "at" identifiers "(" event_match ")" stmt . onleave.opt
   92 onleave.opt: .  ["end of command", "case", "catch", "default", "else", "finally", "}", ")", ",", ";", "&", "|"]
   93            | . "onleave" stmt

    "onleave"  shift, and go to state 474

    $default  reduce using rule 92 (onleave.opt)

    onleave.opt  go to state 475

    Conflict between rule 92 and token "onleave" resolved as shift (EMPTY < "onleave").


state 452

   34 protos.1: protos.1 "," proto .

    $default  reduce using rule 34 (protos.1)


state 453

   42 id.1: id.1 "," id .

    $default  reduce using rule 42 (id.1)


state 454

   44 from: "identifier" .

    $default  reduce using rule 44 (from)


state 455

   48 stmt: "external" "var" "identifier" "." "identifier" from . "identifier"

    "identifier"  shift, and go to state 476


state 456

   49 stmt: "external" event_or_function "(" unsigned ")" "identifier" . "." "identifier" from "identifier"

    "."  shift, and go to state 477


state 457

   59 modifier: "identifier" ":" exp .  ["end of command", "case", "catch", ":", "default", "else", "finally", "if", "{", "onleave", "}", "]", ")", "~", ",", ";", "&", "|", "identifier", "=>", "?"]
   62 exp: exp . "=" exp
   63    | exp . "=" exp modifiers
  214    | exp . "&&" exp
  215    | exp . "||" exp
  216    | exp . "in" exp
  217    | exp . "!" "in" exp

    "="   shift, and go to state 164
    "in"  shift, and go to state 165
    "!"   shift, and go to state 215
    "&&"  shift, and go to state 167
    "||"  shift, and go to state 168

    $default  reduce using rule 59 (modifier)

    Conflict between rule 59 and token "=" resolved as shift (":" < "=").
    Conflict between rule 59 and token "in" resolved as shift (":" < "in").
    Conflict between rule 59 and token "!" resolved as shift (":" < "!").
    Conflict between rule 59 and token "&&" resolved as shift (":" < "&&").
    Conflict between rule 59 and token "||" resolved as shift (":" < "||").


state 458

   62 exp: exp . "=" exp
   63    | exp . "=" exp modifiers
  214    | exp . "&&" exp
  215    | exp . "||" exp
  216    | exp . "in" exp
  217    | exp . "!" "in" exp
  241 typespec: . ":" exp
  242 typespec.opt: .  [")", ","]
  243             | . typespec
  245 formal: var.opt "identifier" "=" exp . typespec.opt

    "="   shift, and go to state 164
    ":"   shift, and go to state 433
    "in"  shift, and go to state 165
    "!"   shift, and go to state 215
    "&&"  shift, and go to state 167
    "||"  shift, and go to state 168

    $default  reduce using rule 242 (typespec.opt)

    typespec      go to state 435
    typespec.opt  go to state 478


state 459

   62 exp: exp . "=" exp
   63    | exp . "=" exp modifiers
  214    | exp . "&&" exp
  215    | exp . "||" exp
  216    | exp . "in" exp
  217    | exp . "!" "in" exp
  241 typespec: ":" exp .  [")", ","]

    "="   shift, and go to state 164
    "in"  shift, and go to state 165
    "!"   shift, and go to state 215
    "&&"  shift, and go to state 167
    "||"  shift, and go to state 168

    $default  reduce using rule 241 (typespec)


state 460

  246 formal: var.opt "identifier" "[" "]" .

    $default  reduce using rule 246 (formal)


state 461

   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   37 exp: . "class" lvalue protos block
   38    | . "package" lvalue protos block
   52 routine: . "closure"
   53        | . "function"
   62 exp: . exp "=" exp
   63    | . exp "=" exp modifiers
   64    | . lvalue "+=" exp
   65    | . lvalue "-=" exp
   66    | . lvalue "*=" exp
   67    | . lvalue "/=" exp
   68    | . lvalue "^=" exp
   69    | . lvalue "%=" exp
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
   96 case: "case" . match ":" stmts
   99 match: . exp
  100      | . exp "if" exp
  118 primary-exp: . block
  119            | . "do" "(" exp ")" block
  120 detach: . "detach"
  121       | . "disown"
  122 primary-exp: . "assert" "(" exp ")"
  123            | . "assert" "{" claims "}"
  124            | . detach "(" exp ")"
  125            | . detach block
  126            | . "isdef" "(" k1_id ")"
  127            | . "watch" "(" exp ")"
  128 lvalue: . id
  129       | . primary-exp "." id
  130       | . primary-exp "." "*"
  131 primary-exp: . "&" id
  132            | . primary-exp "." "&" id
  133 id: . "identifier"
  134 bitor-exp: . "var" bitor-exp
  135          | . "const" "var" bitor-exp
  136 primary-exp: . lvalue
  137            | . lvalue args
  138 new: . "new" "identifier" args.opt
  139 bitor-exp: . new
  140 id: . "new"
  141 primary-exp: . routine formals block
  142 float-exp: . "float"
  143 duration: . "duration"
  144         | . duration "duration"
  150 dictionary: . "[" assocs "]"
  154 tuple: . "(" tuple.exps ")"
  159 literal-exp: . float-exp
  160            | . "angle"
  161            | . duration
  162            | . string
  163            | . "[" exps "]"
  164            | . "<" bitor-exps ">"
  165            | . dictionary
  166            | . tuple
  167 string: . "string"
  168       | . string "string"
  169 literal-exp: . "__HERE__"
  175 lvalue: . primary-exp "[" exps "]"
  176 literal-exp: . "this"
  177            | . "call"
  178 primary-exp: . literal-exp
  179            | . "(" exp ")"
  180            | . "(" error ")"
  181            | . primary-exp "**" primary-exp
  182 unary-exp: . primary-exp
  183          | . "--" lvalue
  184          | . "++" lvalue
  185          | . "+" unary-exp
  186          | . "-" unary-exp
  187          | . "!" unary-exp
  188          | . "compl" unary-exp
  189 bitor-exp: . unary-exp
  190          | . bitor-exp "+" bitor-exp
  191          | . bitor-exp "-" bitor-exp
  192          | . bitor-exp "*" bitor-exp
  193          | . bitor-exp "/" bitor-exp
  194          | . bitor-exp "%" bitor-exp
  195          | . bitor-exp "^" bitor-exp
  196          | . bitor-exp "<<" bitor-exp
  197          | . bitor-exp "bitand" bitor-exp
  198          | . bitor-exp "bitor" bitor-exp
  199          | . bitor-exp ">>" bitor-exp
  210 rel-exp: . bitor-exp rel-ops
  213 exp: . rel-exp
  214    | . exp "&&" exp
  215    | . exp "||" exp
  216    | . exp "in" exp
  217    | . exp "!" "in" exp
  221    | . "%unscope:" unsigned
  222 primary-exp: . "%exp:" unsigned
  223 lvalue: . "%lvalue:" unsigned
  224       | . "%id:" unsigned
  225       | . primary-exp "." "%id:" unsigned
  226 primary-exp: . lvalue "(" "%exps:" unsigned ")"

    "__HERE__"    shift, and go to state 7
    "closure"     shift, and go to state 9
    "const"       shift, and go to state 10
    "function"    shift, and go to state 13
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "var"         shift, and go to state 25
    "watch"       shift, and go to state 27
    "&"           shift, and go to state 29
    "identifier"  shift, and go to state 35
    "class"       shift, and go to state 36
    "package"     shift, and go to state 37
    "--"          shift, and go to state 41
    "++"          shift, and go to state 42
    "do"          shift, and go to state 43
    "assert"      shift, and go to state 44
    "detach"      shift, and go to state 45
    "disown"      shift, and go to state 46
    "new"         shift, and go to state 47
    "angle"       shift, and go to state 48
    "duration"    shift, and go to state 49
    "float"       shift, and go to state 50
    "string"      shift, and go to state 51
    "call"        shift, and go to state 52
    "this"        shift, and go to state 53
    "!"           shift, and go to state 54
    "compl"       shift, and go to state 55
    "-"           shift, and go to state 56
    "+"           shift, and go to state 57
    "<"           shift, and go to state 58
    "%unscope:"   shift, and go to state 59
    "%exp:"       shift, and go to state 60
    "%lvalue:"    shift, and go to state 61
    "%id:"        shift, and go to state 62

    block        go to state 67
    exp          go to state 400
    routine      go to state 100
    primary-exp  go to state 101
    match        go to state 479
    detach       go to state 71
    lvalue       go to state 72
    id           go to state 102
    bitor-exp    go to state 74
    new          go to state 75
    float-exp    go to state 76
    duration     go to state 77
    dictionary   go to state 78
    tuple        go to state 79
    literal-exp  go to state 80
    string       go to state 81
    unary-exp    go to state 82
    rel-exp      go to state 83


state 462

   89 default.opt: "default" . ":" stmts

    ":"  shift, and go to state 480


state 463

   79 stmt: "switch" "(" exp ")" "{" cases default.opt . "}"

    "}"  shift, and go to state 481


state 464

   95 cases: cases case .

    $default  reduce using rule 95 (cases)


state 465

  105 catch.opt: "catch" block .

    $default  reduce using rule 105 (catch.opt)


state 466

   80 stmt: "timeout" "(" exp ")" stmt catch.opt else.opt . finally.opt
  106 finally.opt: .  ["end of command", "case", "catch", "default", "else", "onleave", "}", ")", ",", ";", "&", "|"]
  107            | . "finally" block

    "finally"  shift, and go to state 404

    $default  reduce using rule 106 (finally.opt)

    finally.opt  go to state 482

    Conflict between rule 106 and token "finally" resolved as shift (EMPTY < "finally").


state 467

   62 exp: exp . "=" exp
   63    | exp . "=" exp modifiers
  100 match: exp "if" exp .  [":", ")"]
  214 exp: exp . "&&" exp
  215    | exp . "||" exp
  216    | exp . "in" exp
  217    | exp . "!" "in" exp

    "="   shift, and go to state 164
    "in"  shift, and go to state 165
    "!"   shift, and go to state 215
    "&&"  shift, and go to state 167
    "||"  shift, and go to state 168

    $default  reduce using rule 100 (match)


state 468

   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   37 exp: . "class" lvalue protos block
   38    | . "package" lvalue protos block
   52 routine: . "closure"
   53        | . "function"
   62 exp: . exp "=" exp
   63    | . exp "=" exp modifiers
   64    | . lvalue "+=" exp
   65    | . lvalue "-=" exp
   66    | . lvalue "*=" exp
   67    | . lvalue "/=" exp
   68    | . lvalue "^=" exp
   69    | . lvalue "%=" exp
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
  118            | . block
  119            | . "do" "(" exp ")" block
  120 detach: . "detach"
  121       | . "disown"
  122 primary-exp: . "assert" "(" exp ")"
  123            | . "assert" "{" claims "}"
  124            | . detach "(" exp ")"
  125            | . detach block
  126            | . "isdef" "(" k1_id ")"
  127            | . "watch" "(" exp ")"
  128 lvalue: . id
  129       | . primary-exp "." id
  130       | . primary-exp "." "*"
  131 primary-exp: . "&" id
  132            | . primary-exp "." "&" id
  133 id: . "identifier"
  134 bitor-exp: . "var" bitor-exp
  135          | . "const" "var" bitor-exp
  136 primary-exp: . lvalue
  137            | . lvalue args
  138 new: . "new" "identifier" args.opt
  139 bitor-exp: . new
  140 id: . "new"
  141 primary-exp: . routine formals block
  142 float-exp: . "float"
  143 duration: . "duration"
  144         | . duration "duration"
  150 dictionary: . "[" assocs "]"
  154 tuple: . "(" tuple.exps ")"
  159 literal-exp: . float-exp
  160            | . "angle"
  161            | . duration
  162            | . string
  163            | . "[" exps "]"
  164            | . "<" bitor-exps ">"
  165            | . dictionary
  166            | . tuple
  167 string: . "string"
  168       | . string "string"
  169 literal-exp: . "__HERE__"
  172 guard.opt: "if" . exp
  175 lvalue: . primary-exp "[" exps "]"
  176 literal-exp: . "this"
  177            | . "call"
  178 primary-exp: . literal-exp
  179            | . "(" exp ")"
  180            | . "(" error ")"
  181            | . primary-exp "**" primary-exp
  182 unary-exp: . primary-exp
  183          | . "--" lvalue
  184          | . "++" lvalue
  185          | . "+" unary-exp
  186          | . "-" unary-exp
  187          | . "!" unary-exp
  188          | . "compl" unary-exp
  189 bitor-exp: . unary-exp
  190          | . bitor-exp "+" bitor-exp
  191          | . bitor-exp "-" bitor-exp
  192          | . bitor-exp "*" bitor-exp
  193          | . bitor-exp "/" bitor-exp
  194          | . bitor-exp "%" bitor-exp
  195          | . bitor-exp "^" bitor-exp
  196          | . bitor-exp "<<" bitor-exp
  197          | . bitor-exp "bitand" bitor-exp
  198          | . bitor-exp "bitor" bitor-exp
  199          | . bitor-exp ">>" bitor-exp
  210 rel-exp: . bitor-exp rel-ops
  213 exp: . rel-exp
  214    | . exp "&&" exp
  215    | . exp "||" exp
  216    | . exp "in" exp
  217    | . exp "!" "in" exp
  221    | . "%unscope:" unsigned
  222 primary-exp: . "%exp:" unsigned
  223 lvalue: . "%lvalue:" unsigned
  224       | . "%id:" unsigned
  225       | . primary-exp "." "%id:" unsigned
  226 primary-exp: . lvalue "(" "%exps:" unsigned ")"

    "__HERE__"    shift, and go to state 7
    "closure"     shift, and go to state 9
    "const"       shift, and go to state 10
    "function"    shift, and go to state 13
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "var"         shift, and go to state 25
    "watch"       shift, and go to state 27
    "&"           shift, and go to state 29
    "identifier"  shift, and go to state 35
    "class"       shift, and go to state 36
    "package"     shift, and go to state 37
    "--"          shift, and go to state 41
    "++"          shift, and go to state 42
    "do"          shift, and go to state 43
    "assert"      shift, and go to state 44
    "detach"      shift, and go to state 45
    "disown"      shift, and go to state 46
    "new"         shift, and go to state 47
    "angle"       shift, and go to state 48
    "duration"    shift, and go to state 49
    "float"       shift, and go to state 50
    "string"      shift, and go to state 51
    "call"        shift, and go to state 52
    "this"        shift, and go to state 53
    "!"           shift, and go to state 54
    "compl"       shift, and go to state 55
    "-"           shift, and go to state 56
    "+"           shift, and go to state 57
    "<"           shift, and go to state 58
    "%unscope:"   shift, and go to state 59
    "%exp:"       shift, and go to state 60
    "%lvalue:"    shift, and go to state 61
    "%id:"        shift, and go to state 62

    block        go to state 67
    exp          go to state 483
    routine      go to state 100
    primary-exp  go to state 101
    detach       go to state 71
    lvalue       go to state 72
    id           go to state 102
    bitor-exp    go to state 74
    new          go to state 75
    float-exp    go to state 76
    duration     go to state 77
    dictionary   go to state 78
    tuple        go to state 79
    literal-exp  go to state 80
    string       go to state 81
    unary-exp    go to state 82
    rel-exp      go to state 83


state 469

  170 event_match: exp "?" args.opt tilda.opt guard.opt .

    $default  reduce using rule 170 (event_match)


state 470

   86 stmt: "whenever" "(" exp tilda.opt ")" stmt else.opt .

    $default  reduce using rule 86 (stmt)


state 471

   23 stmt: . primary-exp ":" stmt
   24     | . exp
   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   37 exp: . "class" lvalue protos block
   38    | . "package" lvalue protos block
   43 stmt: . "enum" id "{" id.0 "}"
   47     | . "external" "identifier" "identifier"
   48     | . "external" "var" "identifier" "." "identifier" from "identifier"
   49     | . "external" event_or_function "(" unsigned ")" "identifier" "." "identifier" from "identifier"
   50     | . "import" lvalue
   51     | . exp "!" args.opt tilda.opt
   52 routine: . "closure"
   53        | . "function"
   54 stmt: . routine k1_id formals block
   55     | . id id formals block
   62 exp: . exp "=" exp
   63    | . exp "=" exp modifiers
   64    | . lvalue "+=" exp
   65    | . lvalue "-=" exp
   66    | . lvalue "*=" exp
   67    | . lvalue "/=" exp
   68    | . lvalue "^=" exp
   69    | . lvalue "%=" exp
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
   73 stmt: . "at" identifiers "(" exp tilda.opt ")" stmt onleave.opt
   74     | . "at" identifiers "(" event_match ")" stmt onleave.opt
   75     | . "every" "(" exp ")" stmt
   76     | . "if" "(" stmts ")" stmt else.opt
   77     | . "freezeif" "(" exp ")" stmt
   78     | . "stopif" "(" exp ")" stmt
   79     | . "switch" "(" exp ")" "{" cases default.opt "}"
   80     | . "timeout" "(" exp ")" stmt catch.opt else.opt finally.opt
   81     | . "return" exp.opt
   82     | . "break"
   83     | . "continue"
   84     | . "waituntil" "(" exp tilda.opt ")"
   85     | . "waituntil" "(" event_match ")"
   86     | . "whenever" "(" exp tilda.opt ")" stmt else.opt
   87     | . "whenever" "(" event_match ")" stmt else.opt
  108     | . "try" block catches.1 else.opt finally.opt
  109     | . "try" block "finally" block
  110     | . "throw" exp.opt
  111     | . "loop" stmt
  112     | . "for" "(" exp ")" stmt
  113     | . "for" "(" stmt.opt ";" exp ";" stmt.opt ")" stmt
  114     | . "for" "(" "var" "identifier" in_or_colon exp ")" stmt
  114     | "for" "(" "var" "identifier" in_or_colon exp ")" . stmt
  115     | . "while" "(" exp ")" stmt
  118 primary-exp: . block
  119            | . "do" "(" exp ")" block
  120 detach: . "detach"
  121       | . "disown"
  122 primary-exp: . "assert" "(" exp ")"
  123            | . "assert" "{" claims "}"
  124            | . detach "(" exp ")"
  125            | . detach block
  126            | . "isdef" "(" k1_id ")"
  127            | . "watch" "(" exp ")"
  128 lvalue: . id
  129       | . primary-exp "." id
  130       | . primary-exp "." "*"
  131 primary-exp: . "&" id
  132            | . primary-exp "." "&" id
  133 id: . "identifier"
  134 bitor-exp: . "var" bitor-exp
  135          | . "const" "var" bitor-exp
  136 primary-exp: . lvalue
  137            | . lvalue args
  138 new: . "new" "identifier" args.opt
  139 bitor-exp: . new
  140 id: . "new"
  141 primary-exp: . routine formals block
  142 float-exp: . "float"
  143 duration: . "duration"
  144         | . duration "duration"
  150 dictionary: . "[" assocs "]"
  154 tuple: . "(" tuple.exps ")"
  159 literal-exp: . float-exp
  160            | . "angle"
  161            | . duration
  162            | . string
  163            | . "[" exps "]"
  164            | . "<" bitor-exps ">"
  165            | . dictionary
  166            | . tuple
  167 string: . "string"
  168       | . string "string"
  169 literal-exp: . "__HERE__"
  175 lvalue: . primary-exp "[" exps "]"
  176 literal-exp: . "this"
  177            | . "call"
  178 primary-exp: . literal-exp
  179            | . "(" exp ")"
  180            | . "(" error ")"
  181            | . primary-exp "**" primary-exp
  182 unary-exp: . primary-exp
  183          | . "--" lvalue
  184          | . "++" lvalue
  185          | . "+" unary-exp
  186          | . "-" unary-exp
  187          | . "!" unary-exp
  188          | . "compl" unary-exp
  189 bitor-exp: . unary-exp
  190          | . bitor-exp "+" bitor-exp
  191          | . bitor-exp "-" bitor-exp
  192          | . bitor-exp "*" bitor-exp
  193          | . bitor-exp "/" bitor-exp
  194          | . bitor-exp "%" bitor-exp
  195          | . bitor-exp "^" bitor-exp
  196          | . bitor-exp "<<" bitor-exp
  197          | . bitor-exp "bitand" bitor-exp
  198          | . bitor-exp "bitor" bitor-exp
  199          | . bitor-exp ">>" bitor-exp
  210 rel-exp: . bitor-exp rel-ops
  213 exp: . rel-exp
  214    | . exp "&&" exp
  215    | . exp "||" exp
  216    | . exp "in" exp
  217    | . exp "!" "in" exp
  221    | . "%unscope:" unsigned
  222 primary-exp: . "%exp:" unsigned
  223 lvalue: . "%lvalue:" unsigned
  224       | . "%id:" unsigned
  225       | . primary-exp "." "%id:" unsigned
  226 primary-exp: . lvalue "(" "%exps:" unsigned ")"

    "__HERE__"    shift, and go to state 7
    "break"       shift, and go to state 8
    "closure"     shift, and go to state 9
    "const"       shift, and go to state 10
    "continue"    shift, and go to state 11
    "freezeif"    shift, and go to state 12
    "function"    shift, and go to state 13
    "if"          shift, and go to state 14
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "return"      shift, and go to state 19
    "stopif"      shift, and go to state 20
    "switch"      shift, and go to state 21
    "throw"       shift, and go to state 22
    "timeout"     shift, and go to state 23
    "try"         shift, and go to state 24
    "var"         shift, and go to state 25
    "waituntil"   shift, and go to state 26
    "watch"       shift, and go to state 27
    "whenever"    shift, and go to state 28
    "&"           shift, and go to state 29
    "every"       shift, and go to state 30
    "for"         shift, and go to state 31
    "loop"        shift, and go to state 32
    "while"       shift, and go to state 33
    "at"          shift, and go to state 34
    "identifier"  shift, and go to state 35
    "class"       shift, and go to state 36
    "package"     shift, and go to state 37
    "enum"        shift, and go to state 38
    "external"    shift, and go to state 39
    "import"      shift, and go to state 40
    "--"          shift, and go to state 41
    "++"          shift, and go to state 42
    "do"          shift, and go to state 43
    "assert"      shift, and go to state 44
    "detach"      shift, and go to state 45
    "disown"      shift, and go to state 46
    "new"         shift, and go to state 47
    "angle"       shift, and go to state 48
    "duration"    shift, and go to state 49
    "float"       shift, and go to state 50
    "string"      shift, and go to state 51
    "call"        shift, and go to state 52
    "this"        shift, and go to state 53
    "!"           shift, and go to state 54
    "compl"       shift, and go to state 55
    "-"           shift, and go to state 56
    "+"           shift, and go to state 57
    "<"           shift, and go to state 58
    "%unscope:"   shift, and go to state 59
    "%exp:"       shift, and go to state 60
    "%lvalue:"    shift, and go to state 61
    "%id:"        shift, and go to state 62

    stmt         go to state 484
    block        go to state 67
    exp          go to state 68
    routine      go to state 69
    primary-exp  go to state 70
    detach       go to state 71
    lvalue       go to state 72
    id           go to state 73
    bitor-exp    go to state 74
    new          go to state 75
    float-exp    go to state 76
    duration     go to state 77
    dictionary   go to state 78
    tuple        go to state 79
    literal-exp  go to state 80
    string       go to state 81
    unary-exp    go to state 82
    rel-exp      go to state 83


state 472

  113 stmt: "for" "(" stmt.opt ";" exp ";" stmt.opt . ")" stmt

    ")"  shift, and go to state 485


state 473

   73 stmt: "at" identifiers "(" exp tilda.opt ")" stmt . onleave.opt
   92 onleave.opt: .  ["end of command", "case", "catch", "default", "else", "finally", "}", ")", ",", ";", "&", "|"]
   93            | . "onleave" stmt

    "onleave"  shift, and go to state 474

    $default  reduce using rule 92 (onleave.opt)

    onleave.opt  go to state 486

    Conflict between rule 92 and token "onleave" resolved as shift (EMPTY < "onleave").


state 474

   23 stmt: . primary-exp ":" stmt
   24     | . exp
   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   37 exp: . "class" lvalue protos block
   38    | . "package" lvalue protos block
   43 stmt: . "enum" id "{" id.0 "}"
   47     | . "external" "identifier" "identifier"
   48     | . "external" "var" "identifier" "." "identifier" from "identifier"
   49     | . "external" event_or_function "(" unsigned ")" "identifier" "." "identifier" from "identifier"
   50     | . "import" lvalue
   51     | . exp "!" args.opt tilda.opt
   52 routine: . "closure"
   53        | . "function"
   54 stmt: . routine k1_id formals block
   55     | . id id formals block
   62 exp: . exp "=" exp
   63    | . exp "=" exp modifiers
   64    | . lvalue "+=" exp
   65    | . lvalue "-=" exp
   66    | . lvalue "*=" exp
   67    | . lvalue "/=" exp
   68    | . lvalue "^=" exp
   69    | . lvalue "%=" exp
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
   73 stmt: . "at" identifiers "(" exp tilda.opt ")" stmt onleave.opt
   74     | . "at" identifiers "(" event_match ")" stmt onleave.opt
   75     | . "every" "(" exp ")" stmt
   76     | . "if" "(" stmts ")" stmt else.opt
   77     | . "freezeif" "(" exp ")" stmt
   78     | . "stopif" "(" exp ")" stmt
   79     | . "switch" "(" exp ")" "{" cases default.opt "}"
   80     | . "timeout" "(" exp ")" stmt catch.opt else.opt finally.opt
   81     | . "return" exp.opt
   82     | . "break"
   83     | . "continue"
   84     | . "waituntil" "(" exp tilda.opt ")"
   85     | . "waituntil" "(" event_match ")"
   86     | . "whenever" "(" exp tilda.opt ")" stmt else.opt
   87     | . "whenever" "(" event_match ")" stmt else.opt
   93 onleave.opt: "onleave" . stmt
  108 stmt: . "try" block catches.1 else.opt finally.opt
  109     | . "try" block "finally" block
  110     | . "throw" exp.opt
  111     | . "loop" stmt
  112     | . "for" "(" exp ")" stmt
  113     | . "for" "(" stmt.opt ";" exp ";" stmt.opt ")" stmt
  114     | . "for" "(" "var" "identifier" in_or_colon exp ")" stmt
  115     | . "while" "(" exp ")" stmt
  118 primary-exp: . block
  119            | . "do" "(" exp ")" block
  120 detach: . "detach"
  121       | . "disown"
  122 primary-exp: . "assert" "(" exp ")"
  123            | . "assert" "{" claims "}"
  124            | . detach "(" exp ")"
  125            | . detach block
  126            | . "isdef" "(" k1_id ")"
  127            | . "watch" "(" exp ")"
  128 lvalue: . id
  129       | . primary-exp "." id
  130       | . primary-exp "." "*"
  131 primary-exp: . "&" id
  132            | . primary-exp "." "&" id
  133 id: . "identifier"
  134 bitor-exp: . "var" bitor-exp
  135          | . "const" "var" bitor-exp
  136 primary-exp: . lvalue
  137            | . lvalue args
  138 new: . "new" "identifier" args.opt
  139 bitor-exp: . new
  140 id: . "new"
  141 primary-exp: . routine formals block
  142 float-exp: . "float"
  143 duration: . "duration"
  144         | . duration "duration"
  150 dictionary: . "[" assocs "]"
  154 tuple: . "(" tuple.exps ")"
  159 literal-exp: . float-exp
  160            | . "angle"
  161            | . duration
  162            | . string
  163            | . "[" exps "]"
  164            | . "<" bitor-exps ">"
  165            | . dictionary
  166            | . tuple
  167 string: . "string"
  168       | . string "string"
  169 literal-exp: . "__HERE__"
  175 lvalue: . primary-exp "[" exps "]"
  176 literal-exp: . "this"
  177            | . "call"
  178 primary-exp: . literal-exp
  179            | . "(" exp ")"
  180            | . "(" error ")"
  181            | . primary-exp "**" primary-exp
  182 unary-exp: . primary-exp
  183          | . "--" lvalue
  184          | . "++" lvalue
  185          | . "+" unary-exp
  186          | . "-" unary-exp
  187          | . "!" unary-exp
  188          | . "compl" unary-exp
  189 bitor-exp: . unary-exp
  190          | . bitor-exp "+" bitor-exp
  191          | . bitor-exp "-" bitor-exp
  192          | . bitor-exp "*" bitor-exp
  193          | . bitor-exp "/" bitor-exp
  194          | . bitor-exp "%" bitor-exp
  195          | . bitor-exp "^" bitor-exp
  196          | . bitor-exp "<<" bitor-exp
  197          | . bitor-exp "bitand" bitor-exp
  198          | . bitor-exp "bitor" bitor-exp
  199          | . bitor-exp ">>" bitor-exp
  210 rel-exp: . bitor-exp rel-ops
  213 exp: . rel-exp
  214    | . exp "&&" exp
  215    | . exp "||" exp
  216    | . exp "in" exp
  217    | . exp "!" "in" exp
  221    | . "%unscope:" unsigned
  222 primary-exp: . "%exp:" unsigned
  223 lvalue: . "%lvalue:" unsigned
  224       | . "%id:" unsigned
  225       | . primary-exp "." "%id:" unsigned
  226 primary-exp: . lvalue "(" "%exps:" unsigned ")"

    "__HERE__"    shift, and go to state 7
    "break"       shift, and go to state 8
    "closure"     shift, and go to state 9
    "const"       shift, and go to state 10
    "continue"    shift, and go to state 11
    "freezeif"    shift, and go to state 12
    "function"    shift, and go to state 13
    "if"          shift, and go to state 14
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "return"      shift, and go to state 19
    "stopif"      shift, and go to state 20
    "switch"      shift, and go to state 21
    "throw"       shift, and go to state 22
    "timeout"     shift, and go to state 23
    "try"         shift, and go to state 24
    "var"         shift, and go to state 25
    "waituntil"   shift, and go to state 26
    "watch"       shift, and go to state 27
    "whenever"    shift, and go to state 28
    "&"           shift, and go to state 29
    "every"       shift, and go to state 30
    "for"         shift, and go to state 31
    "loop"        shift, and go to state 32
    "while"       shift, and go to state 33
    "at"          shift, and go to state 34
    "identifier"  shift, and go to state 35
    "class"       shift, and go to state 36
    "package"     shift, and go to state 37
    "enum"        shift, and go to state 38
    "external"    shift, and go to state 39
    "import"      shift, and go to state 40
    "--"          shift, and go to state 41
    "++"          shift, and go to state 42
    "do"          shift, and go to state 43
    "assert"      shift, and go to state 44
    "detach"      shift, and go to state 45
    "disown"      shift, and go to state 46
    "new"         shift, and go to state 47
    "angle"       shift, and go to state 48
    "duration"    shift, and go to state 49
    "float"       shift, and go to state 50
    "string"      shift, and go to state 51
    "call"        shift, and go to state 52
    "this"        shift, and go to state 53
    "!"           shift, and go to state 54
    "compl"       shift, and go to state 55
    "-"           shift, and go to state 56
    "+"           shift, and go to state 57
    "<"           shift, and go to state 58
    "%unscope:"   shift, and go to state 59
    "%exp:"       shift, and go to state 60
    "%lvalue:"    shift, and go to state 61
    "%id:"        shift, and go to state 62

    stmt         go to state 487
    block        go to state 67
    exp          go to state 68
    routine      go to state 69
    primary-exp  go to state 70
    detach       go to state 71
    lvalue       go to state 72
    id           go to state 73
    bitor-exp    go to state 74
    new          go to state 75
    float-exp    go to state 76
    duration     go to state 77
    dictionary   go to state 78
    tuple        go to state 79
    literal-exp  go to state 80
    string       go to state 81
    unary-exp    go to state 82
    rel-exp      go to state 83


state 475

   74 stmt: "at" identifiers "(" event_match ")" stmt onleave.opt .

    $default  reduce using rule 74 (stmt)


state 476

   48 stmt: "external" "var" "identifier" "." "identifier" from "identifier" .

    $default  reduce using rule 48 (stmt)


state 477

   49 stmt: "external" event_or_function "(" unsigned ")" "identifier" "." . "identifier" from "identifier"

    "identifier"  shift, and go to state 488


state 478

  245 formal: var.opt "identifier" "=" exp typespec.opt .

    $default  reduce using rule 245 (formal)


state 479

   96 case: "case" match . ":" stmts

    ":"  shift, and go to state 489


state 480

   12 stmts: . cstmt.opt
   13      | . stmts ";" cstmt.opt
   14      | . stmts "," cstmt.opt
   15 cstmt.opt: .  ["}", ",", ";"]
   16          | . cstmt
   17          | . cstmt "|"
   18 cstmt: . stmt
   19      | . cstmt "|" cstmt
   20      | . cstmt "&" cstmt
   23 stmt: . primary-exp ":" stmt
   24     | . exp
   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   37 exp: . "class" lvalue protos block
   38    | . "package" lvalue protos block
   43 stmt: . "enum" id "{" id.0 "}"
   47     | . "external" "identifier" "identifier"
   48     | . "external" "var" "identifier" "." "identifier" from "identifier"
   49     | . "external" event_or_function "(" unsigned ")" "identifier" "." "identifier" from "identifier"
   50     | . "import" lvalue
   51     | . exp "!" args.opt tilda.opt
   52 routine: . "closure"
   53        | . "function"
   54 stmt: . routine k1_id formals block
   55     | . id id formals block
   62 exp: . exp "=" exp
   63    | . exp "=" exp modifiers
   64    | . lvalue "+=" exp
   65    | . lvalue "-=" exp
   66    | . lvalue "*=" exp
   67    | . lvalue "/=" exp
   68    | . lvalue "^=" exp
   69    | . lvalue "%=" exp
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
   73 stmt: . "at" identifiers "(" exp tilda.opt ")" stmt onleave.opt
   74     | . "at" identifiers "(" event_match ")" stmt onleave.opt
   75     | . "every" "(" exp ")" stmt
   76     | . "if" "(" stmts ")" stmt else.opt
   77     | . "freezeif" "(" exp ")" stmt
   78     | . "stopif" "(" exp ")" stmt
   79     | . "switch" "(" exp ")" "{" cases default.opt "}"
   80     | . "timeout" "(" exp ")" stmt catch.opt else.opt finally.opt
   81     | . "return" exp.opt
   82     | . "break"
   83     | . "continue"
   84     | . "waituntil" "(" exp tilda.opt ")"
   85     | . "waituntil" "(" event_match ")"
   86     | . "whenever" "(" exp tilda.opt ")" stmt else.opt
   87     | . "whenever" "(" event_match ")" stmt else.opt
   89 default.opt: "default" ":" . stmts
  108 stmt: . "try" block catches.1 else.opt finally.opt
  109     | . "try" block "finally" block
  110     | . "throw" exp.opt
  111     | . "loop" stmt
  112     | . "for" "(" exp ")" stmt
  113     | . "for" "(" stmt.opt ";" exp ";" stmt.opt ")" stmt
  114     | . "for" "(" "var" "identifier" in_or_colon exp ")" stmt
  115     | . "while" "(" exp ")" stmt
  118 primary-exp: . block
  119            | . "do" "(" exp ")" block
  120 detach: . "detach"
  121       | . "disown"
  122 primary-exp: . "assert" "(" exp ")"
  123            | . "assert" "{" claims "}"
  124            | . detach "(" exp ")"
  125            | . detach block
  126            | . "isdef" "(" k1_id ")"
  127            | . "watch" "(" exp ")"
  128 lvalue: . id
  129       | . primary-exp "." id
  130       | . primary-exp "." "*"
  131 primary-exp: . "&" id
  132            | . primary-exp "." "&" id
  133 id: . "identifier"
  134 bitor-exp: . "var" bitor-exp
  135          | . "const" "var" bitor-exp
  136 primary-exp: . lvalue
  137            | . lvalue args
  138 new: . "new" "identifier" args.opt
  139 bitor-exp: . new
  140 id: . "new"
  141 primary-exp: . routine formals block
  142 float-exp: . "float"
  143 duration: . "duration"
  144         | . duration "duration"
  150 dictionary: . "[" assocs "]"
  154 tuple: . "(" tuple.exps ")"
  159 literal-exp: . float-exp
  160            | . "angle"
  161            | . duration
  162            | . string
  163            | . "[" exps "]"
  164            | . "<" bitor-exps ">"
  165            | . dictionary
  166            | . tuple
  167 string: . "string"
  168       | . string "string"
  169 literal-exp: . "__HERE__"
  175 lvalue: . primary-exp "[" exps "]"
  176 literal-exp: . "this"
  177            | . "call"
  178 primary-exp: . literal-exp
  179            | . "(" exp ")"
  180            | . "(" error ")"
  181            | . primary-exp "**" primary-exp
  182 unary-exp: . primary-exp
  183          | . "--" lvalue
  184          | . "++" lvalue
  185          | . "+" unary-exp
  186          | . "-" unary-exp
  187          | . "!" unary-exp
  188          | . "compl" unary-exp
  189 bitor-exp: . unary-exp
  190          | . bitor-exp "+" bitor-exp
  191          | . bitor-exp "-" bitor-exp
  192          | . bitor-exp "*" bitor-exp
  193          | . bitor-exp "/" bitor-exp
  194          | . bitor-exp "%" bitor-exp
  195          | . bitor-exp "^" bitor-exp
  196          | . bitor-exp "<<" bitor-exp
  197          | . bitor-exp "bitand" bitor-exp
  198          | . bitor-exp "bitor" bitor-exp
  199          | . bitor-exp ">>" bitor-exp
  210 rel-exp: . bitor-exp rel-ops
  213 exp: . rel-exp
  214    | . exp "&&" exp
  215    | . exp "||" exp
  216    | . exp "in" exp
  217    | . exp "!" "in" exp
  221    | . "%unscope:" unsigned
  222 primary-exp: . "%exp:" unsigned
  223 lvalue: . "%lvalue:" unsigned
  224       | . "%id:" unsigned
  225       | . primary-exp "." "%id:" unsigned
  226 primary-exp: . lvalue "(" "%exps:" unsigned ")"

    "__HERE__"    shift, and go to state 7
    "break"       shift, and go to state 8
    "closure"     shift, and go to state 9
    "const"       shift, and go to state 10
    "continue"    shift, and go to state 11
    "freezeif"    shift, and go to state 12
    "function"    shift, and go to state 13
    "if"          shift, and go to state 14
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "return"      shift, and go to state 19
    "stopif"      shift, and go to state 20
    "switch"      shift, and go to state 21
    "throw"       shift, and go to state 22
    "timeout"     shift, and go to state 23
    "try"         shift, and go to state 24
    "var"         shift, and go to state 25
    "waituntil"   shift, and go to state 26
    "watch"       shift, and go to state 27
    "whenever"    shift, and go to state 28
    "&"           shift, and go to state 29
    "every"       shift, and go to state 30
    "for"         shift, and go to state 31
    "loop"        shift, and go to state 32
    "while"       shift, and go to state 33
    "at"          shift, and go to state 34
    "identifier"  shift, and go to state 35
    "class"       shift, and go to state 36
    "package"     shift, and go to state 37
    "enum"        shift, and go to state 38
    "external"    shift, and go to state 39
    "import"      shift, and go to state 40
    "--"          shift, and go to state 41
    "++"          shift, and go to state 42
    "do"          shift, and go to state 43
    "assert"      shift, and go to state 44
    "detach"      shift, and go to state 45
    "disown"      shift, and go to state 46
    "new"         shift, and go to state 47
    "angle"       shift, and go to state 48
    "duration"    shift, and go to state 49
    "float"       shift, and go to state 50
    "string"      shift, and go to state 51
    "call"        shift, and go to state 52
    "this"        shift, and go to state 53
    "!"           shift, and go to state 54
    "compl"       shift, and go to state 55
    "-"           shift, and go to state 56
    "+"           shift, and go to state 57
    "<"           shift, and go to state 58
    "%unscope:"   shift, and go to state 59
    "%exp:"       shift, and go to state 60
    "%lvalue:"    shift, and go to state 61
    "%id:"        shift, and go to state 62

    $default  reduce using rule 15 (cstmt.opt)

    stmts        go to state 490
    cstmt.opt    go to state 86
    cstmt        go to state 65
    stmt         go to state 66
    block        go to state 67
    exp          go to state 68
    routine      go to state 69
    primary-exp  go to state 70
    detach       go to state 71
    lvalue       go to state 72
    id           go to state 73
    bitor-exp    go to state 74
    new          go to state 75
    float-exp    go to state 76
    duration     go to state 77
    dictionary   go to state 78
    tuple        go to state 79
    literal-exp  go to state 80
    string       go to state 81
    unary-exp    go to state 82
    rel-exp      go to state 83


state 481

   79 stmt: "switch" "(" exp ")" "{" cases default.opt "}" .

    $default  reduce using rule 79 (stmt)


state 482

   80 stmt: "timeout" "(" exp ")" stmt catch.opt else.opt finally.opt .

    $default  reduce using rule 80 (stmt)


state 483

   62 exp: exp . "=" exp
   63    | exp . "=" exp modifiers
  172 guard.opt: "if" exp .  [")"]
  214 exp: exp . "&&" exp
  215    | exp . "||" exp
  216    | exp . "in" exp
  217    | exp . "!" "in" exp

    "="   shift, and go to state 164
    "in"  shift, and go to state 165
    "!"   shift, and go to state 215
    "&&"  shift, and go to state 167
    "||"  shift, and go to state 168

    $default  reduce using rule 172 (guard.opt)


state 484

  114 stmt: "for" "(" "var" "identifier" in_or_colon exp ")" stmt .

    $default  reduce using rule 114 (stmt)


state 485

   23 stmt: . primary-exp ":" stmt
   24     | . exp
   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   37 exp: . "class" lvalue protos block
   38    | . "package" lvalue protos block
   43 stmt: . "enum" id "{" id.0 "}"
   47     | . "external" "identifier" "identifier"
   48     | . "external" "var" "identifier" "." "identifier" from "identifier"
   49     | . "external" event_or_function "(" unsigned ")" "identifier" "." "identifier" from "identifier"
   50     | . "import" lvalue
   51     | . exp "!" args.opt tilda.opt
   52 routine: . "closure"
   53        | . "function"
   54 stmt: . routine k1_id formals block
   55     | . id id formals block
   62 exp: . exp "=" exp
   63    | . exp "=" exp modifiers
   64    | . lvalue "+=" exp
   65    | . lvalue "-=" exp
   66    | . lvalue "*=" exp
   67    | . lvalue "/=" exp
   68    | . lvalue "^=" exp
   69    | . lvalue "%=" exp
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
   73 stmt: . "at" identifiers "(" exp tilda.opt ")" stmt onleave.opt
   74     | . "at" identifiers "(" event_match ")" stmt onleave.opt
   75     | . "every" "(" exp ")" stmt
   76     | . "if" "(" stmts ")" stmt else.opt
   77     | . "freezeif" "(" exp ")" stmt
   78     | . "stopif" "(" exp ")" stmt
   79     | . "switch" "(" exp ")" "{" cases default.opt "}"
   80     | . "timeout" "(" exp ")" stmt catch.opt else.opt finally.opt
   81     | . "return" exp.opt
   82     | . "break"
   83     | . "continue"
   84     | . "waituntil" "(" exp tilda.opt ")"
   85     | . "waituntil" "(" event_match ")"
   86     | . "whenever" "(" exp tilda.opt ")" stmt else.opt
   87     | . "whenever" "(" event_match ")" stmt else.opt
  108     | . "try" block catches.1 else.opt finally.opt
  109     | . "try" block "finally" block
  110     | . "throw" exp.opt
  111     | . "loop" stmt
  112     | . "for" "(" exp ")" stmt
  113     | . "for" "(" stmt.opt ";" exp ";" stmt.opt ")" stmt
  113     | "for" "(" stmt.opt ";" exp ";" stmt.opt ")" . stmt
  114     | . "for" "(" "var" "identifier" in_or_colon exp ")" stmt
  115     | . "while" "(" exp ")" stmt
  118 primary-exp: . block
  119            | . "do" "(" exp ")" block
  120 detach: . "detach"
  121       | . "disown"
  122 primary-exp: . "assert" "(" exp ")"
  123            | . "assert" "{" claims "}"
  124            | . detach "(" exp ")"
  125            | . detach block
  126            | . "isdef" "(" k1_id ")"
  127            | . "watch" "(" exp ")"
  128 lvalue: . id
  129       | . primary-exp "." id
  130       | . primary-exp "." "*"
  131 primary-exp: . "&" id
  132            | . primary-exp "." "&" id
  133 id: . "identifier"
  134 bitor-exp: . "var" bitor-exp
  135          | . "const" "var" bitor-exp
  136 primary-exp: . lvalue
  137            | . lvalue args
  138 new: . "new" "identifier" args.opt
  139 bitor-exp: . new
  140 id: . "new"
  141 primary-exp: . routine formals block
  142 float-exp: . "float"
  143 duration: . "duration"
  144         | . duration "duration"
  150 dictionary: . "[" assocs "]"
  154 tuple: . "(" tuple.exps ")"
  159 literal-exp: . float-exp
  160            | . "angle"
  161            | . duration
  162            | . string
  163            | . "[" exps "]"
  164            | . "<" bitor-exps ">"
  165            | . dictionary
  166            | . tuple
  167 string: . "string"
  168       | . string "string"
  169 literal-exp: . "__HERE__"
  175 lvalue: . primary-exp "[" exps "]"
  176 literal-exp: . "this"
  177            | . "call"
  178 primary-exp: . literal-exp
  179            | . "(" exp ")"
  180            | . "(" error ")"
  181            | . primary-exp "**" primary-exp
  182 unary-exp: . primary-exp
  183          | . "--" lvalue
  184          | . "++" lvalue
  185          | . "+" unary-exp
  186          | . "-" unary-exp
  187          | . "!" unary-exp
  188          | . "compl" unary-exp
  189 bitor-exp: . unary-exp
  190          | . bitor-exp "+" bitor-exp
  191          | . bitor-exp "-" bitor-exp
  192          | . bitor-exp "*" bitor-exp
  193          | . bitor-exp "/" bitor-exp
  194          | . bitor-exp "%" bitor-exp
  195          | . bitor-exp "^" bitor-exp
  196          | . bitor-exp "<<" bitor-exp
  197          | . bitor-exp "bitand" bitor-exp
  198          | . bitor-exp "bitor" bitor-exp
  199          | . bitor-exp ">>" bitor-exp
  210 rel-exp: . bitor-exp rel-ops
  213 exp: . rel-exp
  214    | . exp "&&" exp
  215    | . exp "||" exp
  216    | . exp "in" exp
  217    | . exp "!" "in" exp
  221    | . "%unscope:" unsigned
  222 primary-exp: . "%exp:" unsigned
  223 lvalue: . "%lvalue:" unsigned
  224       | . "%id:" unsigned
  225       | . primary-exp "." "%id:" unsigned
  226 primary-exp: . lvalue "(" "%exps:" unsigned ")"

    "__HERE__"    shift, and go to state 7
    "break"       shift, and go to state 8
    "closure"     shift, and go to state 9
    "const"       shift, and go to state 10
    "continue"    shift, and go to state 11
    "freezeif"    shift, and go to state 12
    "function"    shift, and go to state 13
    "if"          shift, and go to state 14
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "return"      shift, and go to state 19
    "stopif"      shift, and go to state 20
    "switch"      shift, and go to state 21
    "throw"       shift, and go to state 22
    "timeout"     shift, and go to state 23
    "try"         shift, and go to state 24
    "var"         shift, and go to state 25
    "waituntil"   shift, and go to state 26
    "watch"       shift, and go to state 27
    "whenever"    shift, and go to state 28
    "&"           shift, and go to state 29
    "every"       shift, and go to state 30
    "for"         shift, and go to state 31
    "loop"        shift, and go to state 32
    "while"       shift, and go to state 33
    "at"          shift, and go to state 34
    "identifier"  shift, and go to state 35
    "class"       shift, and go to state 36
    "package"     shift, and go to state 37
    "enum"        shift, and go to state 38
    "external"    shift, and go to state 39
    "import"      shift, and go to state 40
    "--"          shift, and go to state 41
    "++"          shift, and go to state 42
    "do"          shift, and go to state 43
    "assert"      shift, and go to state 44
    "detach"      shift, and go to state 45
    "disown"      shift, and go to state 46
    "new"         shift, and go to state 47
    "angle"       shift, and go to state 48
    "duration"    shift, and go to state 49
    "float"       shift, and go to state 50
    "string"      shift, and go to state 51
    "call"        shift, and go to state 52
    "this"        shift, and go to state 53
    "!"           shift, and go to state 54
    "compl"       shift, and go to state 55
    "-"           shift, and go to state 56
    "+"           shift, and go to state 57
    "<"           shift, and go to state 58
    "%unscope:"   shift, and go to state 59
    "%exp:"       shift, and go to state 60
    "%lvalue:"    shift, and go to state 61
    "%id:"        shift, and go to state 62

    stmt         go to state 491
    block        go to state 67
    exp          go to state 68
    routine      go to state 69
    primary-exp  go to state 70
    detach       go to state 71
    lvalue       go to state 72
    id           go to state 73
    bitor-exp    go to state 74
    new          go to state 75
    float-exp    go to state 76
    duration     go to state 77
    dictionary   go to state 78
    tuple        go to state 79
    literal-exp  go to state 80
    string       go to state 81
    unary-exp    go to state 82
    rel-exp      go to state 83


state 486

   73 stmt: "at" identifiers "(" exp tilda.opt ")" stmt onleave.opt .

    $default  reduce using rule 73 (stmt)


state 487

   93 onleave.opt: "onleave" stmt .

    $default  reduce using rule 93 (onleave.opt)


state 488

   44 from: . "identifier"
   49 stmt: "external" event_or_function "(" unsigned ")" "identifier" "." "identifier" . from "identifier"

    "identifier"  shift, and go to state 454

    from  go to state 492


state 489

   12 stmts: . cstmt.opt
   13      | . stmts ";" cstmt.opt
   14      | . stmts "," cstmt.opt
   15 cstmt.opt: .  ["case", "default", "}", ",", ";"]
   16          | . cstmt
   17          | . cstmt "|"
   18 cstmt: . stmt
   19      | . cstmt "|" cstmt
   20      | . cstmt "&" cstmt
   23 stmt: . primary-exp ":" stmt
   24     | . exp
   25 block: . "{" stmts "}"
   26      | . "{" error "}"
   27      | . "{" id "~" id "}"
   37 exp: . "class" lvalue protos block
   38    | . "package" lvalue protos block
   43 stmt: . "enum" id "{" id.0 "}"
   47     | . "external" "identifier" "identifier"
   48     | . "external" "var" "identifier" "." "identifier" from "identifier"
   49     | . "external" event_or_function "(" unsigned ")" "identifier" "." "identifier" from "identifier"
   50     | . "import" lvalue
   51     | . exp "!" args.opt tilda.opt
   52 routine: . "closure"
   53        | . "function"
   54 stmt: . routine k1_id formals block
   55     | . id id formals block
   62 exp: . exp "=" exp
   63    | . exp "=" exp modifiers
   64    | . lvalue "+=" exp
   65    | . lvalue "-=" exp
   66    | . lvalue "*=" exp
   67    | . lvalue "/=" exp
   68    | . lvalue "^=" exp
   69    | . lvalue "%=" exp
   70 primary-exp: . lvalue "--"
   71            | . lvalue "++"
   72            | . lvalue "->" id
   73 stmt: . "at" identifiers "(" exp tilda.opt ")" stmt onleave.opt
   74     | . "at" identifiers "(" event_match ")" stmt onleave.opt
   75     | . "every" "(" exp ")" stmt
   76     | . "if" "(" stmts ")" stmt else.opt
   77     | . "freezeif" "(" exp ")" stmt
   78     | . "stopif" "(" exp ")" stmt
   79     | . "switch" "(" exp ")" "{" cases default.opt "}"
   80     | . "timeout" "(" exp ")" stmt catch.opt else.opt finally.opt
   81     | . "return" exp.opt
   82     | . "break"
   83     | . "continue"
   84     | . "waituntil" "(" exp tilda.opt ")"
   85     | . "waituntil" "(" event_match ")"
   86     | . "whenever" "(" exp tilda.opt ")" stmt else.opt
   87     | . "whenever" "(" event_match ")" stmt else.opt
   96 case: "case" match ":" . stmts
  108 stmt: . "try" block catches.1 else.opt finally.opt
  109     | . "try" block "finally" block
  110     | . "throw" exp.opt
  111     | . "loop" stmt
  112     | . "for" "(" exp ")" stmt
  113     | . "for" "(" stmt.opt ";" exp ";" stmt.opt ")" stmt
  114     | . "for" "(" "var" "identifier" in_or_colon exp ")" stmt
  115     | . "while" "(" exp ")" stmt
  118 primary-exp: . block
  119            | . "do" "(" exp ")" block
  120 detach: . "detach"
  121       | . "disown"
  122 primary-exp: . "assert" "(" exp ")"
  123            | . "assert" "{" claims "}"
  124            | . detach "(" exp ")"
  125            | . detach block
  126            | . "isdef" "(" k1_id ")"
  127            | . "watch" "(" exp ")"
  128 lvalue: . id
  129       | . primary-exp "." id
  130       | . primary-exp "." "*"
  131 primary-exp: . "&" id
  132            | . primary-exp "." "&" id
  133 id: . "identifier"
  134 bitor-exp: . "var" bitor-exp
  135          | . "const" "var" bitor-exp
  136 primary-exp: . lvalue
  137            | . lvalue args
  138 new: . "new" "identifier" args.opt
  139 bitor-exp: . new
  140 id: . "new"
  141 primary-exp: . routine formals block
  142 float-exp: . "float"
  143 duration: . "duration"
  144         | . duration "duration"
  150 dictionary: . "[" assocs "]"
  154 tuple: . "(" tuple.exps ")"
  159 literal-exp: . float-exp
  160            | . "angle"
  161            | . duration
  162            | . string
  163            | . "[" exps "]"
  164            | . "<" bitor-exps ">"
  165            | . dictionary
  166            | . tuple
  167 string: . "string"
  168       | . string "string"
  169 literal-exp: . "__HERE__"
  175 lvalue: . primary-exp "[" exps "]"
  176 literal-exp: . "this"
  177            | . "call"
  178 primary-exp: . literal-exp
  179            | . "(" exp ")"
  180            | . "(" error ")"
  181            | . primary-exp "**" primary-exp
  182 unary-exp: . primary-exp
  183          | . "--" lvalue
  184          | . "++" lvalue
  185          | . "+" unary-exp
  186          | . "-" unary-exp
  187          | . "!" unary-exp
  188          | . "compl" unary-exp
  189 bitor-exp: . unary-exp
  190          | . bitor-exp "+" bitor-exp
  191          | . bitor-exp "-" bitor-exp
  192          | . bitor-exp "*" bitor-exp
  193          | . bitor-exp "/" bitor-exp
  194          | . bitor-exp "%" bitor-exp
  195          | . bitor-exp "^" bitor-exp
  196          | . bitor-exp "<<" bitor-exp
  197          | . bitor-exp "bitand" bitor-exp
  198          | . bitor-exp "bitor" bitor-exp
  199          | . bitor-exp ">>" bitor-exp
  210 rel-exp: . bitor-exp rel-ops
  213 exp: . rel-exp
  214    | . exp "&&" exp
  215    | . exp "||" exp
  216    | . exp "in" exp
  217    | . exp "!" "in" exp
  221    | . "%unscope:" unsigned
  222 primary-exp: . "%exp:" unsigned
  223 lvalue: . "%lvalue:" unsigned
  224       | . "%id:" unsigned
  225       | . primary-exp "." "%id:" unsigned
  226 primary-exp: . lvalue "(" "%exps:" unsigned ")"

    "__HERE__"    shift, and go to state 7
    "break"       shift, and go to state 8
    "closure"     shift, and go to state 9
    "const"       shift, and go to state 10
    "continue"    shift, and go to state 11
    "freezeif"    shift, and go to state 12
    "function"    shift, and go to state 13
    "if"          shift, and go to state 14
    "isdef"       shift, and go to state 15
    "{"           shift, and go to state 16
    "["           shift, and go to state 17
    "("           shift, and go to state 18
    "return"      shift, and go to state 19
    "stopif"      shift, and go to state 20
    "switch"      shift, and go to state 21
    "throw"       shift, and go to state 22
    "timeout"     shift, and go to state 23
    "try"         shift, and go to state 24
    "var"         shift, and go to state 25
    "waituntil"   shift, and go to state 26
    "watch"       shift, and go to state 27
    "whenever"    shift, and go to state 28
    "&"           shift, and go to state 29
    "every"       shift, and go to state 30
    "for"         shift, and go to state 31
    "loop"        shift, and go to state 32
    "while"       shift, and go to state 33
    "at"          shift, and go to state 34
    "identifier"  shift, and go to state 35
    "class"       shift, and go to state 36
    "package"     shift, and go to state 37
    "enum"        shift, and go to state 38
    "external"    shift, and go to state 39
    "import"      shift, and go to state 40
    "--"          shift, and go to state 41
    "++"          shift, and go to state 42
    "do"          shift, and go to state 43
    "assert"      shift, and go to state 44
    "detach"      shift, and go to state 45
    "disown"      shift, and go to state 46
    "new"         shift, and go to state 47
    "angle"       shift, and go to state 48
    "duration"    shift, and go to state 49
    "float"       shift, and go to state 50
    "string"      shift, and go to state 51
    "call"        shift, and go to state 52
    "this"        shift, and go to state 53
    "!"           shift, and go to state 54
    "compl"       shift, and go to state 55
    "-"           shift, and go to state 56
    "+"           shift, and go to state 57
    "<"           shift, and go to state 58
    "%unscope:"   shift, and go to state 59
    "%exp:"       shift, and go to state 60
    "%lvalue:"    shift, and go to state 61
    "%id:"        shift, and go to state 62

    $default  reduce using rule 15 (cstmt.opt)

    stmts        go to state 493
    cstmt.opt    go to state 86
    cstmt        go to state 65
    stmt         go to state 66
    block        go to state 67
    exp          go to state 68
    routine      go to state 69
    primary-exp  go to state 70
    detach       go to state 71
    lvalue       go to state 72
    id           go to state 73
    bitor-exp    go to state 74
    new          go to state 75
    float-exp    go to state 76
    duration     go to state 77
    dictionary   go to state 78
    tuple        go to state 79
    literal-exp  go to state 80
    string       go to state 81
    unary-exp    go to state 82
    rel-exp      go to state 83


state 490

   13 stmts: stmts . ";" cstmt.opt
   14      | stmts . "," cstmt.opt
   89 default.opt: "default" ":" stmts .  ["}"]

    ","  shift, and go to state 205
    ";"  shift, and go to state 206

    $default  reduce using rule 89 (default.opt)


state 491

  113 stmt: "for" "(" stmt.opt ";" exp ";" stmt.opt ")" stmt .

    $default  reduce using rule 113 (stmt)


state 492

   49 stmt: "external" event_or_function "(" unsigned ")" "identifier" "." "identifier" from . "identifier"

    "identifier"  shift, and go to state 494


state 493

   13 stmts: stmts . ";" cstmt.opt
   14      | stmts . "," cstmt.opt
   96 case: "case" match ":" stmts .  ["case", "default", "}"]

    ","  shift, and go to state 205
    ";"  shift, and go to state 206

    $default  reduce using rule 96 (case)


state 494

   49 stmt: "external" event_or_function "(" unsigned ")" "identifier" "." "identifier" from "identifier" .

    $default  reduce using rule 49 (stmt)
