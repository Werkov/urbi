#line 2 "/home/bearclaw/qi-2/urbi/urbi/build-sys-linux-i686/src/parser/utoken.cc.raw"

#line 4 "/home/bearclaw/qi-2/urbi/urbi/build-sys-linux-i686/src/parser/utoken.cc.raw"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

    /* The c++ scanner is a mess. The FlexLexer.h header file relies on the
     * following macro. This is required in order to pass the c++-multiple-scanners
     * test in the regression suite. We get reports that it breaks inheritance.
     * We will address this in a future release of flex, or omit the C++ scanner
     * altogether.
     */
    #define yyFlexLexer yyFlexLexer

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */
#include <iostream> 
#include <errno.h>
#include <cstdlib>
#include <cstdio>
#include <cstring>
/* end standard C++ headers. */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

extern int yyleng;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{

	std::istream* yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

void *yyalloc (yy_size_t  );
void *yyrealloc (void *,yy_size_t  );
void yyfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

typedef unsigned char YY_CHAR;

#define yytext_ptr yytext
#define YY_INTERACTIVE

#include "parser/flex-lexer.hh"

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 203
#define YY_END_OF_BUFFER 204
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[790] =
    {   0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      204,  202,  195,  196,  196,   65,   19,   66,  110,  102,
      103,   67,   68,  113,   70,   99,   72,   16,   16,  100,
      112,   79,   97,   89,   96,  173,  173,  104,  105,   92,
      173,  173,  173,  173,  173,  173,  173,  173,  173,  173,
      173,  173,  173,  173,  173,  173,  173,  173,  173,  173,
      173,  106,  111,  107,  101,  202,  197,  199,  199,  198,
      198,  191,  192,  192,  174,  202,  104,   66,  195,  196,
       85,   73,   94,  124,   93,   74,   69,   75,   71,   76,
       98,  194,  193,   77,    0,   16,   18,   18,   18,    5,

       18,    6,    7,   18,   10,   18,   81,   80,   82,   83,
        0,   90,   91,  109,  170,  173,  173,  108,   78,  173,
      173,  173,   64,  173,  173,  173,  173,  173,  173,  173,
      173,  173,  173,   38,  173,  173,  173,  173,  173,  173,
      173,  173,  173,  173,  173,   44,  173,   46,  173,  173,
      173,  173,  173,  173,  173,  173,   95,  173,  173,  173,
      173,  173,  173,  173,  173,  173,  173,  173,  173,  173,
      173,  173,  173,  173,  173,  173,  173,  173,  173,  173,
      164,   95,   88,    0,  197,  199,  201,  200,  191,  192,
      192,  192,  192,  185,  184,  175,  185,  177,  178,  179,

      180,  181,  182,  183,  185,    0,    0,    0,    0,    0,
        0,   86,  193,  193,   17,   18,    0,   17,   16,   18,
       18,   18,   18,    8,   11,   18,   15,   84,   87,  170,
      171,  171,  170,  170,  171,  171,  173,  173,   94,  126,
      173,   64,  173,  173,  173,  173,  173,  173,  173,  173,
      173,  173,  173,  173,  173,  173,  173,  173,  173,  173,
      173,  173,  173,  173,  173,  173,  173,   61,  173,  173,
      173,  173,  173,  173,  141,  173,  173,  173,  173,  173,
       48,   65,  173,  173,  173,  173,  173,  173,  173,  173,
      173,  173,  173,  173,  173,  173,  173,  173,  173,  173,

      173,  173,  173,  173,  122,  173,  173,  173,  173,   56,
      173,  173,  173,  173,  173,  173,  173,   92,    0,   20,
      175,  186,    0,    0,    0,    4,    0,    0,    0,    0,
      193,  193,  193,   17,   18,   18,   17,   17,   18,   18,
        5,   18,    6,    7,   18,   10,   18,   18,   13,   18,
        9,   12,   15,   15,   18,    0,  171,    0,    0,  171,
      171,  171,  170,  170,  171,    0,  173,  173,  173,  127,
      173,  173,  128,  173,   29,   30,  173,  129,  173,  173,
      173,  173,  173,  173,  173,  173,  173,  173,  173,   39,
       40,  173,  173,  173,  173,  173,  173,   61,  173,  173,

      173,  173,  139,  173,  173,  173,  173,  142,   62,  173,
      173,  173,  173,  173,  173,  173,  173,  173,  173,  173,
      173,  173,  168,  173,  173,  173,  173,  173,  173,  173,
      173,   54,  173,  173,  173,  173,  173,  173,  173,  173,
      173,  173,  173,  163,  173,  173,  175,  187,    0,  176,
        0,    4,    0,   24,    0,    0,  193,  193,  193,    0,
       17,   17,   18,   17,   18,   18,   14,   18,  171,    0,
      171,  171,  171,  171,    0,  173,  173,  173,  173,  115,
       28,  120,   31,  173,  116,   33,  173,  173,  173,  173,
      173,  173,  173,   60,  173,  173,  173,  173,  137,  173,

      173,  173,  173,  173,  173,  173,   47,   62,  173,  173,
      173,  173,  173,  145,  173,  173,  173,  173,  173,  173,
      173,  148,  173,  173,  173,  173,  173,  173,  173,  121,
      173,  173,  173,  173,  157,  173,  159,  173,  173,  173,
       58,  173,  173,   63,  173,  188,    0,  188,    0,   22,
        0,    0,    0,  193,  193,  193,   17,   17,   18,   18,
       18,  171,    0,    0,  171,    0,  171,    0,    0,  165,
        0,  173,  125,   27,  114,  173,  173,  173,  173,  131,
       36,   37,  132,  173,   60,  173,  135,  136,  173,  173,
      173,  138,  173,   45,  140,  173,  173,  173,   85,  173,

      173,  173,  173,  173,  119,  173,  173,   51,  149,  150,
      169,   52,  152,   53,  173,  173,  173,  155,  173,  173,
      173,  173,  173,  173,  173,   63,   78,  189,  190,    0,
       23,    0,    0,  193,  193,    2,    2,   17,   18,   18,
        0,  171,  171,  171,  173,   32,  173,  173,   35,  173,
      173,  173,   41,  166,  173,  173,  173,  143,  173,   49,
      173,   50,  117,  173,  173,  173,  173,  173,   55,  154,
      173,  173,  160,  173,  173,  162,  173,    0,    0,    0,
      193,    2,  171,    0,  123,  173,   34,  173,  134,   21,
       42,   43,  167,  173,  173,  173,  146,  173,  173,  153,

      156,  158,  161,  173,   59,    0,   25,    0,  193,  173,
      173,  144,    0,  172,  172,  172,    0,  172,  172,  172,
      172,  172,  172,  172,  172,    0,  172,  173,  173,  172,
      118,  173,  173,   57,    0,   26,  193,    1,    1,  193,
      193,  130,  173,    0,    0,  172,  172,  172,  173,  173,
      173,  173,    0,    0,    0,  193,    1,  173,    0,    0,
      173,  172,  173,  151,    3,  193,  193,  133,    0,  172,
      173,    0,  173,    3,    3,  193,    1,    0,  173,  173,
        3,    0,  172,  173,  172,    0,  173,  147,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    5,    6,    7,    8,    1,    9,   10,   11,   12,
       13,   14,   15,   16,   17,   18,   19,   20,   21,   21,
       21,   21,   21,   21,   21,   22,   22,   23,   24,   25,
       26,   27,   28,    1,   29,   30,   29,   29,   31,   29,
       32,   33,   34,   32,   32,   32,   32,   35,   32,   32,
       32,   36,   32,   32,   32,   32,   32,   37,   32,   32,
       38,   39,   40,   41,   42,    1,   43,   44,   45,   46,

       47,   48,   49,   50,   51,   32,   52,   53,   54,   55,
       56,   57,   58,   59,   60,   61,   62,   63,   64,   65,
       66,   67,   68,   69,   70,   71,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[72] =
    {   0,
        1,    1,    2,    3,    1,    1,    4,    1,    1,    1,
        5,    1,    1,    6,    1,    1,    1,    7,    6,    8,
        8,    8,    1,    1,    1,    1,    1,    1,    8,    8,
        8,    9,    9,    9,    9,    9,    9,    1,    4,    1,
        1,    9,    8,    8,    8,    8,    8,    8,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    1,    1,    1,
        1
    } ;

static yyconst flex_int16_t yy_base[815] =
    {   0,
        0, 1868,   69,   71,   73,   75,    0,   73, 1866,   83,
     1874, 1877,   91, 1869, 1869, 1845, 1877, 1844,   77, 1877,
     1877,   75,   79, 1877,   80, 1877,   90,   99,  147, 1877,
     1877,   73,   99,   96, 1877, 1858,   84, 1843, 1877, 1841,
       89,  121,   91,  149,  124,  145,  161,   99,  173,  117,
      104,  166,  175,  176,   97,  192,  200,  102,  193,  215,
      118, 1877,  126, 1877, 1840, 1859,    0, 1860, 1860, 1843,
     1847,    0,  130,  134, 1877,  260,  252,  231,  122, 1877,
     1834, 1877, 1877, 1877, 1877, 1877, 1877, 1877, 1877, 1877,
     1877, 1877, 1851, 1877,  241,    0,    0,  280,  265, 1811,

     1798,    0,  186, 1813,    0,  306, 1877, 1877, 1829, 1877,
     1828, 1877, 1877, 1877,  309, 1842,  128, 1877, 1877,  207,
      218,  234,  300,  237,  244,  129,  132,  280,  295,  301,
      214,  323,  272,  281,  241,  298,  306,  177,  302,  259,
      220,  307,  328,  331,  311, 1841,  334,  335,  336,  337,
      350,  351,  356,  362,  359,  363,  366,  369,  370,  372,
      376,  378,  374,  379,  386,  140,  384,  388,  387,  150,
      367,  383,  389,  390,  391,  395,  393,  204,  404,  398,
     1877, 1877, 1877, 1848,    0, 1877, 1877, 1877,    0,  414,
      429,  432,  449, 1877, 1877,  438, 1838, 1877, 1877, 1877,

     1877, 1877, 1877, 1877,    0,  440, 1809, 1783, 1801, 1783,
     1790, 1877,    0,  417,  445,    0,  451,  458,  501,  461,
     1795, 1800, 1787,    0,    0, 1795,  542, 1877, 1877,  464,
      493,    0,  474,  468, 1785, 1777,  523,  495,  457, 1827,
      458, 1877,  445,  486,  480,  487,  491,  498,  482,  499,
      505,  520,  525,  535,  526,  527,  538,  541,  548,  555,
      528,  545,  542,  556,  530,  557,  559,  594,  546,  567,
      568,  565,  572,  543,  580,  592,  595,  596,  597,  600,
     1826,  604,  605,  606,  608,  609,  611,  612,  613,  618,
      615,  402,  614,  619,  620,  621,  622,  623,  624,  626,

      625,  631,  632,  634, 1825,  637,  638,  639,  640, 1824,
      643,  646,  645,  627,  649,  647,  648,  656, 1831, 1877,
      656, 1877,  687,    0,  690,    0, 1776, 1809, 1788, 1770,
      691, 1778,  623,  695,  703,  708,  714,  731,    0,  718,
     1781, 1768,    0,  703, 1783,    0,  749,  754,    0, 1779,
        0,    0,    0,    0,  777,  759,  769,  811,  762,    0,
      816,    0,  772,  781, 1763,  839,  686,  653,  660, 1812,
      688,  736, 1811,  694, 1810, 1809,  722, 1808,  754,  748,
      756,  744,  766,  777,  757,  801,  802,  774,  703, 1807,
     1806,  720,  804,  818,  819,  829,  824, 1877,  831,  832,

      834,  837, 1805,  838,  839,  841,  840, 1804,  846,  842,
      843,  854,  853,  861,  856,  862,  864,  865,  857,  858,
      860,  868, 1803,  869,  870,  872,  873,  880,  881,  884,
      879, 1802,  876,  882,  891,  895,  692,  898,  899,  902,
      900,  905,  908,  909,  911,  912, 1877, 1877,  923, 1877,
      931,    0,  910, 1877, 1759, 1766, 1755, 1752, 1748,  944,
      951,  957,  963,  969,  975,  981,    0,    0,  987,  992,
      999, 1004, 1016, 1022, 1028,  923,  928,  949,  930, 1796,
     1795, 1794, 1793,  969, 1792, 1016,  937, 1004,  983,  924,
     1021, 1028, 1029, 1043, 1034,  995, 1036, 1044, 1791, 1049,

     1051, 1050, 1052, 1054, 1055, 1058, 1790, 1877, 1057, 1060,
     1061, 1062, 1063, 1789, 1067, 1066, 1073, 1075, 1070, 1074,
     1071, 1788, 1076, 1081, 1078, 1082, 1072, 1084,  914, 1787,
     1077, 1088, 1090,  938, 1786, 1089, 1785, 1094, 1095, 1093,
     1784, 1096, 1079, 1139, 1098, 1877, 1782, 1132, 1137, 1877,
     1770, 1730, 1735, 1743, 1162, 1739, 1150, 1157, 1140, 1169,
     1173, 1180, 1192, 1196, 1199, 1203, 1208, 1764, 1211, 1877,
     1222, 1192, 1776, 1775, 1774, 1100, 1140, 1121, 1165, 1773,
     1772, 1771, 1770, 1194, 1877, 1129, 1769, 1130, 1103, 1187,
     1185, 1768, 1195, 1767, 1766, 1229, 1236, 1237, 1765, 1238,

     1199, 1241, 1243, 1245, 1764, 1246, 1248, 1763, 1762, 1761,
     1247, 1760, 1759, 1758, 1249, 1250, 1251, 1757, 1254, 1255,
     1252, 1256, 1257, 1258, 1265, 1877, 1756, 1877, 1877, 1257,
     1877, 1719, 1708, 1268, 1293, 1760, 1760, 1295, 1301, 1307,
     1310, 1313, 1318, 1324, 1309, 1751, 1260, 1289, 1750, 1314,
     1263, 1330, 1749, 1748, 1336, 1132, 1337, 1747, 1341, 1746,
     1303, 1738, 1729, 1342, 1339, 1343, 1346, 1347, 1720, 1684,
     1348, 1350, 1647, 1352, 1353, 1646, 1354, 1348, 1623, 1590,
     1400, 1877, 1351, 1355, 1620, 1356, 1619, 1363, 1618, 1617,
     1612, 1609, 1608, 1367, 1421, 1369, 1604, 1370, 1368, 1603,

     1579, 1578, 1577, 1371, 1576, 1397, 1877, 1563, 1449, 1381,
     1396, 1574, 1491, 1558, 1557, 1265, 1569, 1555, 1266, 1877,
     1438, 1554, 1261, 1553, 1361, 1538, 1551, 1398, 1414, 1375,
     1565, 1430, 1438, 1564, 1462, 1877, 1517, 1570, 1570, 1523,
     1436, 1559, 1449, 1517, 1514, 1544, 1526, 1525, 1432, 1399,
     1462, 1469, 1509, 1513, 1474, 1487, 1877, 1470, 1436, 1423,
     1439, 1457, 1500, 1464, 1434, 1465, 1552, 1417, 1365, 1368,
     1477, 1363, 1502, 1264, 1499, 1564,  400, 1240, 1501, 1529,
     1244, 1235, 1525, 1455, 1090, 1068, 1530,  710, 1877, 1591,
     1600, 1603, 1608, 1617, 1626, 1635, 1644, 1646, 1651, 1660,

     1669,  271, 1671, 1673, 1675, 1684,  146, 1693, 1702, 1711,
     1720, 1729, 1738, 1747
    } ;

static yyconst flex_int16_t yy_def[815] =
    {   0,
      789,    1,  790,  790,  791,  791,    1,    1,    1,    1,
      789,  789,  789,  789,  789,  789,  789,  789,  789,  789,
      789,  789,  789,  789,  789,  789,  789,  792,  792,  789,
      789,  789,  789,  789,  789,  793,  793,  789,  789,  789,
      793,  793,  793,  793,  793,  793,  793,  793,  793,  793,
      793,  793,  793,  793,  793,  793,  793,  793,  793,  793,
      793,  789,  789,  789,  789,  789,  794,  789,  789,  789,
      789,  795,  789,  789,  789,  796,  789,  789,  789,  789,
      789,  789,  789,  789,  789,  789,  789,  789,  789,  789,
      789,  789,  797,  789,  789,   29,  798,  798,  798,  798,

      798,  798,  798,  798,  798,  798,  789,  789,  789,  789,
      789,  789,  789,  789,  799,  793,  793,  789,  789,  793,
      793,  793,  793,  793,  793,  793,  793,  793,  793,  793,
      793,  793,  793,  793,  793,  793,  793,  793,  793,  793,
      793,  793,  793,  793,  793,  793,  793,  793,  793,  793,
      793,  793,  793,  793,  793,  793,  793,  793,  793,  793,
      793,  793,  793,  793,  793,  793,  793,  793,  793,  793,
      793,  793,  793,  793,  793,  793,  793,  793,  793,  793,
      789,  789,  789,  800,  794,  789,  789,  789,  795,  789,
      789,  789,  789,  789,  789,  789,  801,  789,  789,  789,

      789,  789,  789,  789,  802,  789,  789,  789,  789,  789,
      789,  789,  797,  797,   29,  798,  789,  803,  803,  798,
      798,  798,  798,  798,  798,  798,  803,  789,  789,  799,
      789,  804,  805,  805,  804,  804,  793,  793,  793,  793,
      793,  789,  793,  793,  793,  793,  793,  793,  793,  793,
      793,  793,  793,  793,  793,  793,  793,  793,  793,  793,
      793,  793,  793,  793,  793,  793,  793,  793,  793,  793,
      793,  793,  793,  793,  793,  793,  793,  793,  793,  793,
      793,  793,  793,  793,  793,  793,  793,  793,  793,  793,
      793,  793,  793,  793,  793,  793,  793,  793,  793,  793,

      793,  793,  793,  793,  793,  793,  793,  793,  793,  793,
      793,  793,  793,  793,  793,  793,  793,  793,  800,  789,
      789,  789,  806,  807,  789,  808,  789,  789,  789,  789,
      797,  797,  797,   29,  798,  798,   29,  219,  798,  798,
      798,  798,  798,  798,  798,  798,  798,  798,  798,  798,
      798,  798,  227,  227,  798,  789,  789,  789,  789,  804,
      804,  804,  805,  805,  804,  789,  793,  793,  793,  793,
      793,  793,  793,  793,  793,  793,  793,  793,  793,  793,
      793,  793,  793,  793,  793,  793,  793,  793,  793,  793,
      793,  793,  793,  793,  793,  793,  793,  789,  793,  793,

      793,  793,  793,  793,  793,  793,  793,  793,  793,  793,
      793,  793,  793,  793,  793,  793,  793,  793,  793,  793,
      793,  793,  793,  793,  793,  793,  793,  793,  793,  793,
      793,  793,  793,  793,  793,  793,  793,  793,  793,  793,
      793,  793,  793,  793,  793,  793,  789,  789,  809,  789,
      789,  808,  789,  789,  789,  789,  797,  797,  797,  789,
      219,  219,  798,   29,  798,  798,  798,  355,  789,  789,
      789,  804,  804,  804,  810,  793,  793,  793,  793,  793,
      793,  793,  793,  793,  793,  793,  793,  793,  793,  793,
      793,  793,  793,  793,  793,  793,  793,  793,  793,  793,

      793,  793,  793,  793,  793,  793,  793,  789,  793,  793,
      793,  793,  793,  793,  793,  793,  793,  793,  793,  793,
      793,  793,  793,  793,  793,  793,  793,  793,  793,  793,
      793,  793,  793,  793,  793,  793,  793,  793,  793,  793,
      793,  793,  793,  793,  793,  789,  811,  809,  789,  789,
      789,  789,  789,  797,  797,  797,   29,  219,  798,  798,
      798,  789,  789,  789,  789,  789,  804,  810,  810,  789,
      810,  793,  793,  793,  793,  793,  793,  793,  793,  793,
      793,  793,  793,  793,  789,  793,  793,  793,  793,  793,
      793,  793,  793,  793,  793,  793,  793,  793,  793,  793,

      793,  793,  793,  793,  793,  793,  793,  793,  793,  793,
      793,  793,  793,  793,  793,  793,  793,  793,  793,  793,
      793,  793,  793,  793,  793,  789,  793,  789,  789,  789,
      789,  789,  789,  797,  797,  789,  797,   29,  798,  798,
      789,  789,  804,  804,  793,  793,  793,  793,  793,  793,
      793,  793,  793,  793,  793,  793,  793,  793,  793,  793,
      793,  793,  793,  793,  793,  793,  793,  793,  793,  793,
      793,  793,  793,  793,  793,  793,  793,  789,  789,  789,
      797,  789,  789,  789,  793,  793,  793,  793,  793,  793,
      793,  793,  793,  793,  793,  793,  793,  793,  793,  793,

      793,  793,  793,  793,  793,  789,  789,  789,  797,  793,
      793,  793,  789,  789,  789,  789,  789,  789,  789,  789,
      789,  789,  789,  789,  789,  789,  789,  793,  793,  789,
      793,  793,  793,  793,  812,  789,  797,  789,  797,  797,
      797,  793,  793,  789,  789,  789,  789,  789,  793,  793,
      793,  793,  812,  812,  812,  813,  789,  793,  789,  789,
      793,  793,  793,  793,  814,  813,  813,  793,  789,  789,
      793,  789,  793,  814,  814,  813,  813,  789,  793,  793,
      814,  789,  793,  793,  789,  789,  793,  793,    0,  789,
      789,  789,  789,  789,  789,  789,  789,  789,  789,  789,

      789,  789,  789,  789,  789,  789,  789,  789,  789,  789,
      789,  789,  789,  789
    } ;

static yyconst flex_int16_t yy_nxt[1949] =
    {   0,
       12,   13,   14,   15,   13,   16,   17,   12,   18,   19,
       17,   20,   21,   22,   23,   24,   25,   26,   27,   28,
       29,   29,   30,   31,   32,   33,   34,   35,   36,   37,
       36,   36,   36,   36,   36,   36,   36,   38,   12,   39,
       40,   41,   42,   43,   44,   45,   46,   47,   48,   36,
       49,   36,   50,   51,   52,   53,   54,   36,   55,   56,
       57,   58,   59,   60,   61,   36,   36,   62,   63,   64,
       65,   68,   69,   68,   69,   73,   74,   73,   74,   75,
       66,   75,   70,   75,   70,   75,   83,   71,   85,   71,
       66,   78,   79,   87,  115,   79,   89,  107,  108,  115,

       86,  115,   84,   92,   88,   90,   91,  115,   93,  115,
       77,   76,  115,   76,  115,   94,   95,  117,   96,   96,
       96,  112,  113,   79,  109,  110,   79,  115,  115,   98,
      120,  115,  190,  191,  115,  114,  192,  193,  115,  115,
       99,  125,  115,  161,  100,   98,  126,  101,  102,  127,
      115,  181,  103,  450,  145,  115,  172,  104,  105,  115,
      115,  173,  237,  106,   95,  151,   96,   96,   96,  111,
      132,  115,  150,  180,  133,  121,  115,   98,  246,  134,
      122,  123,  124,  115,  245,  115,  115,  115,   99,  135,
      300,  128,  100,   98,  182,  101,  102,  136,  129,  137,

      103,  130,  115,  115,  131,  104,  105,  138,  152,  139,
      115,  140,  153,  141,  115,  305,  142,  115,  158,  143,
      146,  154,  144,  263,  115,  115,  147,  148,  115,  155,
      115,  156,  149,  157,  159,  174,  223,  160,  162,  238,
      224,  163,  164,  175,  115,  225,  167,  115,  176,  168,
      169,  115,  165,  315,  115,  166,   82,  177,  170,  178,
      215,  215,  215,  239,  179,  171,  195,  253,  254,  115,
      195,  206,  206,  206,  207,  267,  118,  208,  324,  196,
      196,  209,  115,  210,  219,  219,  219,  240,  206,  197,
      115,  115,  211,  241,  217,  260,  217,  243,  195,  218,

      218,  218,  198,  199,  244,  115,  220,  200,  115,  242,
      115,  115,  115,  266,  201,  242,  115,  115,  202,  230,
      203,  115,  204,  242,  205,  227,  227,  227,  231,  231,
      231,  258,  247,  115,  227,  227,  227,  250,  115,  248,
      249,  115,  259,  251,  115,  115,  115,  115,  227,  227,
      227,  227,  227,  227,  233,  234,  252,  261,  264,  235,
      115,  115,  265,  234,  236,  268,  115,  262,  242,  115,
      255,  272,  115,  115,  269,  256,  115,  115,  270,  115,
      115,  276,  115,  257,  115,  271,  115,  274,  115,  115,
      273,  277,  278,  115,  115,  275,  115,  115,  115,  115,

      115,  115,  757,  115,  280,  115,  767,  285,  115,  284,
      279,  283,  115,  286,  115,  289,  190,  191,  331,  281,
      287,  331,  282,  306,  290,  288,  291,  295,  297,  294,
      293,  192,  193,  307,  190,  191,  292,  301,  302,  309,
      304,  298,  308,  313,  299,  296,  303,  312,  310,  311,
      316,  192,  193,  314,  317,  115,  318,  321,  321,  325,
      325,  325,  789,  422,  334,  334,  334,  115,  115,  332,
      337,  337,  337,  333,  789,  335,  325,  338,  338,  338,
      219,  219,  219,  231,  231,  231,  336,  361,  361,  361,
      115,  335,  115,  361,  361,  361,  115,  115,  368,  340,

      370,  115,  220,  341,  369,  115,  342,  343,  115,  115,
      356,  344,  357,  357,  357,  115,  345,  346,   95,  363,
      219,  219,  219,  358,  366,  367,  377,  366,  371,  374,
      115,  347,  373,  115,  359,  115,  115,  115,  115,  358,
      115,  372,  348,  375,  376,  115,  341,  347,  115,  342,
      343,  115,  115,  115,  344,  115,  115,  378,  115,  345,
      346,  353,  353,  353,  379,  115,  115,  115,  384,  115,
      354,  354,  354,  385,  390,  115,  395,  115,  115,  380,
      386,  381,  115,  355,  354,  354,  354,  354,  354,  354,
      115,  388,  400,  405,  382,  383,  387,  389,  391,  396,

      392,  397,  115,  398,  115,  115,  115,  115,  393,  398,
      115,  394,  402,  401,  115,  115,  115,  398,  115,  115,
      403,  115,  115,  115,  115,  115,  406,  404,  115,  115,
      115,  115,  115,  115,  115,  115,  115,  115,  407,  410,
      399,  115,  115,  408,  115,  412,  411,  115,  115,  115,
      115,  413,  409,  115,  415,  115,  115,  115,  115,  115,
      416,  423,  398,  115,  414,  419,  115,  426,  420,  421,
      115,  442,  418,  417,  425,  447,  447,  424,  458,  428,
      434,  431,  427,  435,  459,  429,  430,  433,  440,  437,
      432,  443,  331,  436,  438,  331,  115,  446,  115,  477,

      445,  444,  115,  439,  115,  441,  449,  449,  449,  451,
      451,  451,  789,  115,  334,  334,  334,  460,  478,  460,
      115,  476,  461,  461,  461,  335,  451,  462,  462,  462,
      115,  789,  115,  464,  464,  464,  336,  338,  338,  338,
      536,  335,  479,  332,   97,  481,  115,  333,  789,  463,
      338,  338,  338,  223,  115,  465,  493,  224,  115,  466,
       97,  339,  225,  217,  115,  217,  115,  115,  218,  218,
      218,  482,  340,  219,  219,  219,  115,  339,  469,  469,
      469,  357,  357,  357,  115,  494,  356,  115,  357,  357,
      357,  361,  361,  361,  480,  220,  353,  353,  353,  358,

      361,  361,  361,  359,  486,  353,  353,  353,  485,  484,
      359,  115,  115,  483,  115,  358,  487,  489,  468,  353,
      353,  353,  353,  353,  353,  470,  492,  470,  115,  115,
      471,  471,  471,  356,  115,  472,  472,  472,  488,  115,
      366,  115,  115,  366,  115,  490,  473,  115,  115,  115,
      115,  115,  115,  115,  495,  508,  115,  474,  475,  475,
      475,  508,  473,  115,  115,  491,  115,  115,  115,  508,
      115,  115,  115,  500,  115,  115,  496,  497,  115,  115,
      115,  498,  115,  115,  499,  509,  115,  507,  502,  115,
      115,  115,  115,  505,  115,  512,  504,  503,  501,  506,

      511,  115,  510,  513,  515,  115,  516,  518,  115,  115,
      115,  517,  115,  514,  508,  115,  523,  519,  115,  115,
      520,  115,  115,  525,  115,  527,  521,  524,  528,  522,
      526,  529,  550,  115,  115,  547,  532,  531,  115,  530,
      115,  533,  548,  548,  548,  534,  537,  115,  115,  535,
      549,  549,  549,  572,  541,  543,  615,  544,  545,  115,
      538,  540,  539,  557,  557,  557,  542,  549,  789,  551,
      558,  558,  558,  581,  789,  575,  462,  462,  462,  115,
      619,  339,  462,  462,  462,  573,  789,  560,  464,  464,
      464,  578,  559,  115,  338,  338,  338,  339,  561,   97,

      338,  338,  338,  560,  463,  115,  562,  562,  562,  574,
      465,  471,  471,  471,  115,   97,  466,  563,  565,  565,
      565,  356,  466,  472,  472,  472,  115,  576,  564,  580,
      470,  115,  470,  563,  473,  567,  567,  567,  115,  115,
      566,  472,  472,  472,  115,  474,  115,  569,  569,  569,
      473,  570,  585,  115,  115,  587,  579,  577,  585,  115,
      115,  115,  115,  474,  115,  115,  585,  115,  115,  571,
      115,  115,  115,  115,  583,  582,  115,  115,  586,  584,
      115,  115,  115,  115,  115,  115,  115,  115,  115,  115,
      588,  115,  115,  590,  115,  592,  589,  591,  115,  115,

      115,  595,  593,  115,  115,  115,  115,  720,  115,  597,
      115,  585,  596,  115,  594,  602,  598,  604,  599,  605,
      607,  609,  611,  601,  600,  608,  603,  786,  610,  612,
      606,  115,  613,  614,  617,  618,  621,  624,  616,  115,
      115,  625,  115,  620,  547,  622,  646,  623,  626,  115,
      115,  548,  548,  548,  626,  627,  630,  630,  630,  558,
      558,  558,  626,  635,  636,  637,  635,  789,  653,  638,
      638,  638,  652,  630,  789,  115,  558,  558,  558,  651,
       97,  640,  648,  460,  647,  460,  692,  339,  461,  461,
      461,  639,  462,  462,  462,  115,   97,  115,  559,  562,

      562,  562,  115,  339,  115,  115,  641,  626,  641,  115,
      563,  642,  642,  642,  463,  562,  562,  562,  565,  565,
      565,  564,  565,  565,  565,  649,  563,  643,  643,  643,
      569,  569,  569,  645,  570,  655,  654,  564,  650,  115,
      566,  569,  569,  569,  566,  570,  115,  115,  115,  644,
      656,  115,  571,  115,  661,  115,  115,  115,  115,  115,
      115,  115,  115,  571,  115,  115,  115,  115,  115,  681,
      115,  657,  681,  115,  720,  115,  678,  678,  678,  659,
      720,  785,  658,  775,  660,  747,  720,  662,  667,  663,
      720,  720,  665,  678,  635,  636,  637,  635,  670,  115,

      782,  672,  686,  775,  673,  664,  666,  671,  674,  668,
      669,  677,  789,  115,  638,  638,  638,  675,  676,  115,
      558,  558,  558,  689,  115,   97,  558,  558,  558,  642,
      642,  642,  683,  683,  683,  687,  639,  643,  643,  643,
      115,   97,  640,  643,  643,  643,  115,  115,  640,  115,
      685,  115,  115,  115,  684,  688,  115,  115,  115,  644,
      115,  695,  115,  115,  115,  644,  115,  706,  706,  706,
      683,  683,  683,  115,  683,  683,  683,  115,  115,  115,
      115,  115,  690,  691,  706,  694,  720,  748,  696,  693,
      699,  115,  684,  700,  701,  702,  684,  697,  703,  698,

      720,  681,  720,  704,  681,  772,  115,  711,  115,  115,
      733,  778,  705,  712,  731,  710,  735,  735,  735,  709,
      709,  709,  713,  734,  115,  713,  714,  115,  732,  715,
      716,  115,  717,  735,  718,  719,  720,  721,  743,  722,
      115,  742,  115,  720,  749,  723,  724,  725,  115,  115,
      737,  738,  739,  737,  720,  740,  740,  740,  726,  115,
      750,  727,  762,  720,  746,  115,  728,  115,  740,  740,
      740,  767,  115,  775,  115,  729,  751,  741,  765,  115,
      115,  754,  754,  754,  761,  771,  770,  115,  769,  730,
      741,  720,  713,  767,  772,  713,  714,  752,  754,  715,

      716,  755,  717,  781,  718,  719,  720,  721,  758,  722,
      115,  115,  115,  755,  787,  723,  724,  725,  737,  738,
      739,  737,  763,  756,  737,  738,  739,  737,  726,  764,
      768,  727,  754,  754,  754,  115,  744,  779,  775,  115,
      115,  773,  740,  740,  740,  745,  780,  783,  755,  754,
      720,  720,  755,  776,  738,  777,  776,  720,  767,  730,
      760,  720,  786,  759,  741,  776,  738,  777,  776,  115,
      767,  784,  757,  757,  115,  115,  720,  720,  720,  720,
      720,  720,  720,  720,  115,  736,  115,  115,  115,  115,
      788,   67,   67,   67,   67,   67,   67,   67,   67,   67,

       72,   72,   72,   72,   72,   72,   72,   72,   72,   97,
       97,   97,  116,  115,  115,  116,  116,  185,  115,  115,
      185,  185,  115,  185,  185,  185,  189,  115,  115,  115,
      115,  189,  189,  189,  189,  194,  708,  194,  194,  194,
      194,  194,  194,  194,  213,  707,  213,  213,  213,  213,
      213,  213,  213,  216,  216,  232,  115,  115,  232,  232,
      319,  319,  319,  319,  319,  319,  319,  319,  319,  322,
      322,  322,  322,  322,  322,  322,  322,  322,  339,  339,
      360,  360,  362,  362,  448,  448,  448,  448,  448,  448,
      448,  448,  448,  452,  115,  452,  452,  452,  452,  452,

      452,  452,  546,  546,  546,  546,  546,  546,  546,  546,
      546,  568,  568,  568,  568,  568,  568,  568,  568,  568,
      628,  628,  628,  628,  628,  628,  628,  628,  628,  753,
      115,  753,  753,  753,  753,  753,  753,  753,  766,  115,
      766,  766,  766,  766,  766,  766,  766,  774,  115,  774,
      774,  774,  774,  774,  774,  774,  115,  115,  115,  115,
      115,  115,  682,  682,  680,  679,  115,  115,  115,  115,
      115,  115,  115,  115,  115,  115,  115,  115,  115,  115,
      115,  115,  115,  115,  115,  115,  115,  570,  634,  634,
      633,  632,  631,  629,  115,  115,  115,  115,  115,  115,

      115,  115,  115,  115,  115,  115,  115,  556,  555,  554,
      553,  552,  115,  115,  115,  115,  115,  115,  115,  115,
      115,  115,  115,  364,  467,  226,  222,  221,  457,  456,
      455,  454,  453,  320,  115,  115,  115,  115,  365,  364,
      352,  351,  350,  349,  330,  329,  328,  327,  326,  323,
      320,  115,  115,  229,  228,  226,  222,  221,  214,  212,
      188,  187,  186,  186,  184,  183,  119,  118,  115,   82,
       81,   80,   80,  789,   78,   66,   11,  789,  789,  789,
      789,  789,  789,  789,  789,  789,  789,  789,  789,  789,
      789,  789,  789,  789,  789,  789,  789,  789,  789,  789,

      789,  789,  789,  789,  789,  789,  789,  789,  789,  789,
      789,  789,  789,  789,  789,  789,  789,  789,  789,  789,
      789,  789,  789,  789,  789,  789,  789,  789,  789,  789,
      789,  789,  789,  789,  789,  789,  789,  789,  789,  789,
      789,  789,  789,  789,  789,  789,  789,  789
    } ;

static yyconst flex_int16_t yy_chk[1949] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    3,    3,    4,    4,    5,    5,    6,    6,    5,
        8,    6,    3,    5,    4,    6,   19,    3,   22,    4,
       10,   10,   13,   23,   37,   13,   25,   32,   32,   41,

       22,   43,   19,   27,   23,   25,   25,   55,   27,   48,
        8,    5,   58,    6,   51,   27,   28,   37,   28,   28,
       28,   34,   34,   79,   33,   33,   79,   50,   61,   28,
       41,   42,   73,   73,   45,   34,   74,   74,  117,  126,
       28,   43,  127,   55,   28,   28,   43,   28,   28,   43,
      166,   63,   28,  807,   48,   46,   58,   28,   28,   44,
      170,   58,  117,   28,   29,   51,   29,   29,   29,   33,
       45,   47,   50,   61,   45,   42,   52,   29,  127,   45,
       42,   42,   42,   49,  126,   53,   54,  138,   29,   45,
      166,   44,   29,   29,   63,   29,   29,   46,   44,   46,

       29,   44,   56,   59,   44,   29,   29,   46,   52,   46,
       57,   47,   52,   47,  178,  170,   47,  120,   54,   47,
       49,   52,   47,  138,  131,   60,   49,   49,  121,   53,
      141,   53,   49,   53,   54,   59,  103,   54,   56,  120,
      103,   56,   56,   59,  122,  103,   57,  124,   59,   57,
       57,  135,   56,  178,  125,   56,   78,   60,   57,   60,
       95,   95,   95,  121,   60,   57,   76,  131,  131,  140,
       76,   77,   77,   77,   77,  141,   77,   78,  802,   76,
       76,   78,  133,   78,   99,   99,   99,  122,   77,   76,
      128,  134,   78,  122,   98,  135,   98,  124,   76,   98,

       98,   98,   76,   76,  125,  129,   99,   76,  136,  123,
      123,  130,  139,  140,   76,  123,  137,  142,   76,  115,
       76,  145,   76,  123,   76,  106,  106,  106,  115,  115,
      115,  133,  128,  132,  106,  106,  106,  129,  143,  128,
      128,  144,  134,  130,  147,  148,  149,  150,  106,  106,
      106,  106,  106,  106,  115,  115,  130,  136,  139,  115,
      151,  152,  139,  115,  115,  142,  153,  137,  123,  155,
      132,  145,  154,  156,  143,  132,  157,  171,  143,  158,
      159,  149,  160,  132,  163,  144,  161,  148,  162,  164,
      147,  150,  150,  172,  167,  148,  165,  169,  168,  173,

      174,  175,  777,  177,  152,  176,  777,  157,  180,  156,
      151,  155,  292,  158,  179,  160,  190,  190,  214,  153,
      159,  214,  154,  171,  161,  159,  161,  164,  165,  163,
      162,  191,  191,  172,  192,  192,  161,  167,  168,  173,
      169,  165,  172,  177,  165,  164,  168,  176,  174,  175,
      179,  193,  193,  177,  179,  243,  180,  196,  196,  206,
      206,  206,  215,  292,  215,  215,  215,  239,  241,  214,
      217,  217,  217,  214,  230,  215,  206,  218,  218,  218,
      220,  220,  220,  230,  230,  230,  215,  234,  234,  234,
      245,  215,  249,  233,  233,  233,  244,  246,  239,  218,

      243,  247,  220,  218,  241,  238,  218,  218,  248,  250,
      231,  218,  231,  231,  231,  251,  218,  218,  219,  233,
      219,  219,  219,  231,  237,  238,  249,  237,  244,  246,
      252,  219,  245,  237,  231,  253,  255,  256,  261,  231,
      265,  244,  219,  247,  248,  254,  219,  219,  257,  219,
      219,  258,  263,  274,  219,  262,  269,  250,  259,  219,
      219,  227,  227,  227,  251,  260,  264,  266,  255,  267,
      227,  227,  227,  256,  261,  272,  265,  270,  271,  252,
      257,  253,  273,  227,  227,  227,  227,  227,  227,  227,
      275,  259,  269,  274,  254,  254,  258,  260,  262,  266,

      263,  267,  276,  268,  268,  277,  278,  279,  264,  268,
      280,  264,  271,  270,  282,  283,  284,  268,  285,  286,
      272,  287,  288,  289,  293,  291,  275,  273,  290,  294,
      295,  296,  297,  298,  299,  301,  300,  314,  276,  279,
      268,  302,  303,  277,  304,  282,  280,  306,  307,  308,
      309,  283,  278,  311,  285,  313,  312,  316,  317,  315,
      286,  293,  268,  368,  284,  289,  318,  296,  290,  291,
      369,  314,  288,  287,  295,  321,  321,  294,  333,  298,
      304,  301,  297,  306,  333,  299,  300,  303,  312,  308,
      302,  315,  331,  307,  309,  331,  367,  318,  371,  368,

      317,  316,  437,  311,  374,  313,  323,  323,  323,  325,
      325,  325,  334,  389,  334,  334,  334,  335,  369,  335,
      788,  367,  335,  335,  335,  334,  325,  336,  336,  336,
      392,  337,  377,  337,  337,  337,  334,  340,  340,  340,
      437,  334,  371,  331,  337,  374,  372,  331,  338,  336,
      338,  338,  338,  344,  382,  337,  389,  344,  380,  340,
      337,  338,  344,  347,  379,  347,  381,  385,  347,  347,
      347,  377,  338,  348,  348,  348,  383,  338,  356,  356,
      356,  359,  359,  359,  388,  392,  357,  384,  357,  357,
      357,  363,  363,  363,  372,  348,  355,  355,  355,  357,

      364,  364,  364,  359,  382,  355,  355,  355,  381,  380,
      357,  386,  387,  379,  393,  357,  383,  385,  355,  355,
      355,  355,  355,  355,  355,  358,  388,  358,  394,  395,
      358,  358,  358,  361,  397,  361,  361,  361,  384,  396,
      366,  399,  400,  366,  401,  386,  361,  402,  404,  405,
      407,  406,  410,  411,  393,  409,  409,  361,  366,  366,
      366,  409,  361,  413,  412,  387,  415,  419,  420,  409,
      421,  414,  416,  399,  417,  418,  394,  395,  422,  424,
      425,  396,  426,  427,  397,  410,  433,  407,  401,  431,
      428,  429,  434,  405,  430,  413,  404,  402,  400,  406,

      412,  435,  411,  414,  416,  436,  417,  419,  438,  439,
      441,  418,  440,  415,  409,  442,  425,  420,  443,  444,
      421,  445,  446,  427,  529,  429,  422,  426,  430,  424,
      428,  431,  453,  476,  490,  449,  435,  434,  477,  433,
      479,  435,  449,  449,  449,  435,  438,  487,  534,  436,
      451,  451,  451,  476,  442,  444,  529,  445,  446,  478,
      439,  441,  440,  460,  460,  460,  443,  451,  461,  453,
      461,  461,  461,  490,  462,  479,  462,  462,  462,  484,
      534,  461,  463,  463,  463,  477,  464,  462,  464,  464,
      464,  487,  461,  489,  465,  465,  465,  461,  462,  464,

      466,  466,  466,  462,  463,  496,  469,  469,  469,  478,
      464,  470,  470,  470,  488,  464,  465,  469,  471,  471,
      471,  472,  466,  472,  472,  472,  486,  484,  469,  489,
      473,  491,  473,  469,  472,  473,  473,  473,  492,  493,
      471,  474,  474,  474,  495,  472,  497,  475,  475,  475,
      472,  475,  494,  494,  498,  496,  488,  486,  494,  500,
      502,  501,  503,  474,  504,  505,  494,  509,  506,  475,
      510,  511,  512,  513,  492,  491,  516,  515,  495,  493,
      519,  521,  527,  517,  520,  518,  523,  531,  525,  543,
      497,  524,  526,  500,  528,  502,  498,  501,  532,  536,

      533,  505,  503,  540,  538,  539,  542,  786,  545,  509,
      576,  494,  506,  589,  504,  515,  510,  517,  511,  518,
      520,  523,  525,  513,  512,  521,  516,  785,  524,  526,
      519,  578,  527,  528,  532,  533,  538,  542,  531,  586,
      588,  543,  656,  536,  548,  539,  576,  540,  544,  544,
      577,  548,  548,  548,  544,  545,  549,  549,  549,  559,
      559,  559,  544,  555,  555,  555,  555,  557,  589,  557,
      557,  557,  588,  549,  558,  579,  558,  558,  558,  586,
      557,  559,  578,  560,  577,  560,  656,  558,  560,  560,
      560,  557,  561,  561,  561,  591,  557,  590,  558,  562,

      562,  562,  572,  558,  584,  593,  563,  544,  563,  601,
      562,  563,  563,  563,  561,  564,  564,  564,  565,  565,
      565,  562,  566,  566,  566,  579,  562,  567,  567,  567,
      569,  569,  569,  572,  569,  591,  590,  564,  584,  596,
      565,  571,  571,  571,  566,  571,  597,  598,  600,  567,
      593,  602,  569,  603,  601,  604,  606,  611,  607,  615,
      616,  617,  621,  571,  619,  620,  622,  623,  624,  634,
      647,  596,  634,  651,  716,  625,  630,  630,  630,  598,
      719,  782,  597,  781,  600,  723,  723,  602,  611,  603,
      716,  719,  606,  630,  635,  635,  635,  635,  617,  648,

      778,  620,  647,  774,  621,  604,  607,  619,  622,  615,
      616,  625,  638,  661,  638,  638,  638,  623,  624,  645,
      639,  639,  639,  651,  650,  638,  640,  640,  640,  641,
      641,  641,  642,  642,  642,  648,  638,  643,  643,  643,
      652,  638,  639,  644,  644,  644,  655,  657,  640,  665,
      645,  659,  664,  666,  642,  650,  667,  668,  671,  643,
      672,  661,  674,  675,  677,  644,  686,  678,  678,  678,
      683,  683,  683,  688,  684,  684,  684,  694,  699,  696,
      698,  704,  652,  655,  678,  659,  725,  725,  664,  657,
      667,  710,  683,  668,  671,  672,  684,  665,  674,  666,

      730,  681,  772,  675,  681,  770,  711,  688,  728,  750,
      699,  769,  677,  694,  696,  686,  706,  706,  706,  681,
      681,  681,  695,  704,  729,  695,  695,  768,  698,  695,
      695,  695,  695,  706,  695,  695,  695,  695,  711,  695,
      732,  710,  749,  730,  728,  695,  695,  695,  733,  761,
      709,  709,  709,  709,  721,  741,  741,  741,  695,  743,
      729,  695,  750,  721,  721,  784,  695,  762,  709,  709,
      709,  766,  751,  765,  764,  695,  732,  741,  755,  752,
      758,  735,  735,  735,  749,  761,  760,  771,  759,  695,
      709,  695,  713,  756,  762,  713,  713,  733,  735,  713,

      713,  735,  713,  775,  713,  713,  713,  713,  743,  713,
      763,  779,  773,  755,  784,  713,  713,  713,  737,  737,
      737,  737,  751,  737,  740,  740,  740,  740,  713,  752,
      758,  713,  754,  754,  754,  783,  713,  771,  775,  780,
      787,  763,  740,  740,  740,  713,  773,  779,  753,  754,
      748,  747,  754,  767,  767,  767,  767,  746,  767,  713,
      745,  713,  783,  744,  740,  776,  776,  776,  776,  742,
      776,  780,  739,  738,  734,  731,  727,  726,  724,  722,
      718,  717,  715,  714,  712,  708,  705,  703,  702,  701,
      787,  790,  790,  790,  790,  790,  790,  790,  790,  790,

      791,  791,  791,  791,  791,  791,  791,  791,  791,  792,
      792,  792,  793,  700,  697,  793,  793,  794,  693,  692,
      794,  794,  691,  794,  794,  794,  795,  690,  689,  687,
      685,  795,  795,  795,  795,  796,  680,  796,  796,  796,
      796,  796,  796,  796,  797,  679,  797,  797,  797,  797,
      797,  797,  797,  798,  798,  799,  676,  673,  799,  799,
      800,  800,  800,  800,  800,  800,  800,  800,  800,  801,
      801,  801,  801,  801,  801,  801,  801,  801,  803,  803,
      804,  804,  805,  805,  806,  806,  806,  806,  806,  806,
      806,  806,  806,  808,  670,  808,  808,  808,  808,  808,

      808,  808,  809,  809,  809,  809,  809,  809,  809,  809,
      809,  810,  810,  810,  810,  810,  810,  810,  810,  810,
      811,  811,  811,  811,  811,  811,  811,  811,  811,  812,
      669,  812,  812,  812,  812,  812,  812,  812,  813,  663,
      813,  813,  813,  813,  813,  813,  813,  814,  662,  814,
      814,  814,  814,  814,  814,  814,  660,  658,  654,  653,
      649,  646,  637,  636,  633,  632,  627,  618,  614,  613,
      612,  610,  609,  608,  605,  599,  595,  594,  592,  587,
      583,  582,  581,  580,  575,  574,  573,  568,  556,  554,
      553,  552,  551,  547,  541,  537,  535,  530,  522,  514,

      507,  499,  485,  483,  482,  481,  480,  459,  458,  457,
      456,  455,  432,  423,  408,  403,  391,  390,  378,  376,
      375,  373,  370,  365,  350,  345,  342,  341,  332,  330,
      329,  328,  327,  319,  310,  305,  281,  240,  236,  235,
      226,  223,  222,  221,  211,  210,  209,  208,  207,  197,
      184,  146,  116,  111,  109,  104,  101,  100,   93,   81,
       71,   70,   69,   68,   66,   65,   40,   38,   36,   18,
       16,   15,   14,   11,    9,    2,  789,  789,  789,  789,
      789,  789,  789,  789,  789,  789,  789,  789,  789,  789,
      789,  789,  789,  789,  789,  789,  789,  789,  789,  789,

      789,  789,  789,  789,  789,  789,  789,  789,  789,  789,
      789,  789,  789,  789,  789,  789,  789,  789,  789,  789,
      789,  789,  789,  789,  789,  789,  789,  789,  789,  789,
      789,  789,  789,  789,  789,  789,  789,  789,  789,  789,
      789,  789,  789,  789,  789,  789,  789,  789
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "/home/bearclaw/qi-2/urbi/urbi/src/parser/utoken.l"
/*
 * Copyright (C) 2005-2012, Gostai S.A.S.
 *
 * This software is provided "as is" without warranty of any kind,
 * either expressed or implied, including but not limited to the
 * implied warranties of fitness for a particular purpose.
 *
 * See the LICENSE file for more information.
 */
#line 11 "/home/bearclaw/qi-2/urbi/urbi/src/parser/utoken.l"
  /// \file parser/utoken.l
  /// \brief The scanner.

#include <libport/debug.hh>

#include <libport/cstdio>
#include <libport/cstdlib>
#include <libport/cstring>
#include <sstream>

#include <boost/algorithm/string/erase.hpp>
#include <boost/lexical_cast.hpp>
#include <boost/numeric/conversion/cast.hpp>

#include <libport/escape.hh>
#include <libport/format.hh>
#include <libport/ufloat.hh>

#include <parser/parser-impl.hh>
#include <parser/utoken.hh>
#include <parser/ugrammar.hh>

GD_CATEGORY(Urbi.Scanner);

// Shorter access to the tokens.
typedef yy::parser::token token;

// We need this type everywhere.
using libport::ufloat;

/// Split yytext which matches
/// "BIN"{BLANKS}{NATURAL}{BLANKS}[^;]*";"
/// setting \a keywords to the first char of keyword, and return the
/// size.
static size_t bin_split(char* yytext, size_t yyleng, char*& keywords);

// Convert an hexadecimal number without the leading 0x.
static long long hexadecimal(std::string t);

// Safe conversion to a numeric value.
template <typename Out>
static Out lexical_cast(parser::ParserImpl* up, const yy::location& loc,
                        std::string t);

// Skip the spaces in yytext.
# define SKIP_SPACES()                          \
  while (isspace(*yytext))                      \
    ++yytext

# define YY_INPUT(Buf, Result, MaxSize)                 \
  do                                                    \
  {                                                     \
    if (yyin->eof() || yyin->fail())                    \
    {                                                   \
      Result = 0;                                       \
      break;                                            \
    }                                                   \
                                                        \
    GD_FPUSH_TRACE("Input (max size = %s)", MaxSize);   \
    yyin->readsome(Buf, MaxSize);                       \
                                                        \
    if (!yyin->gcount() && !yyin->eof())                \
    {                                                   \
      yyin->peek();                                     \
      yyin->readsome(Buf, MaxSize);                     \
    }                                                   \
                                                        \
    if (yyin->bad())                                    \
    {                                                   \
      GD_INFO_DEBUG("BAD");                             \
      Result = -1;                                      \
      break;                                            \
    }                                                   \
                                                        \
    GD_FINFO_DEBUG("%s bytes", yyin->gcount());         \
    Result = yyin->gcount();                            \
  } while (0)

# define YY_USER_INIT                                           \
  static bool flex_debug = getenv("URBI_SCANNER");              \
  yy_flex_debug = flex_debug || GD_ENABLED(dump);               \
                                                                \
  static bool urbi_check_mode = getenv("URBI_CHECK_MODE");      \
                                                                \
  /* The default start condition.  */                           \
  sc_default =                                                  \
    parser_impl_->meta() ? SC_META                              \
    : urbi_check_mode ? SC_URBI_CHECK                           \
    : INITIAL;                                                  \
  BEGIN sc_default;                                             \
                                                                \
  static bool init = false;                                     \
  if (!init)                                                    \
  {                                                             \
    init = true;                                                \
    if (urbi_check_mode)                                        \
      GD_INFO("URBI_CHECK_MODE enabled.");                      \
  }

// Report an error and make a parse error.
// E.g.: bad tokens (such as "2x").
#define SCAN_FATAL(...)                                                 \
  throw yy::parser::syntax_error(loc, libport::format(__VA_ARGS__))

// Report an error in a token, but we can continue scanning.
// E.g.: bad escapes in strings.
#define SCAN_ERROR(...)                                         \
  parser_impl_->error(loc, libport::format(__VA_ARGS__))

// Stupidly enough the Flex documentation recommends redefining
// LexerError, which does not seem to be possible (since it is flex
// which generates unconditionally its definition in utoken.cc).
#define YY_FATAL_ERROR(Msg)                     \
  SCAN_FATAL(Msg)

// Each time a rule is matched.
#define YY_USER_ACTION                          \
  COLUMNS(static_cast<unsigned>(yyleng));

// Move the front cursor to the end cursor.
#define STEP()                                  \
    loc.step()

// Called via YY_USER_ACION each time we *advance* the cursor, in
// which case Num is actually the number of bytes read.
#define COLUMNS(Num)                                        \
  loc.columns(Num)

// To avoid differences between versions of Bison, set by hand the
// initial columns when advancing lines.  Does not touch pre_length,
// since LINES is always called after COLUMNS was, which did update
// pre_length.
#define LINES(Num)                                  \
  do {                                              \
    loc.lines(Num);                                 \
    loc.end.column = 1;                             \
  } while (false)

// Report an EOF error.
#define EOF_ERROR(Where)                                \
  SCAN_ERROR("unexpected end of file in %s", Where)

// Report the use of a reserved word.
#define RESERVED_ERROR                          \
  SCAN_FATAL("reserved symbol: `%s'", yytext)

// Otherwise Flex returns an int instead of an enum.
#define yyterminate()                                   \
  return yy::parser::make_EOF(loc)


// Extend the string value of valp.
#define GROW_VAL(Value)                         \
  grown_string += Value

// Extend the string value of valp.
#define APPEND_VAL(Arg1, Arg2)                  \
  grown_string.append(Arg1, Arg2)


/*----------------------------------.
| Sugar to return semantic values.  |
`----------------------------------*/

#define RETURN(Symbol)                          \
  return yy::parser::make_ ## Symbol(loc)

#define RETURN_VALUE(Symbol, Value)              \
  return yy::parser::make_ ## Symbol(Value, loc)

// UnitLength is the number of letters used for the unit.
#define RETURN_UNIT(Token, UnitLength, From, To)                        \
  do {                                                                  \
    yytext[yyleng - UnitLength] = 0;                                    \
    RETURN_VALUE(Token,                                                 \
                 lexical_cast<ufloat>(parser_impl_, loc, yytext)        \
                 / (From) * (To));                                      \
  } while (false)


#define RETURN_ANGLE(UnitLength, From, To)      \
  RETURN_UNIT(ANGLE, UnitLength, From, To)

#define RETURN_DURATION(UnitLength, Scale)      \
  RETURN_UNIT(DURATION, UnitLength, 1, Scale)


// For ",", ";", "|", and "&" (i.e., COMMA, SEMICOLON, PIPE, and AND).
#define RETURN_FLAVOR(Symbol, Flavor)           \
  RETURN_VALUE(Symbol, ast::flavor_ ## Flavor)

#define RETURN_FLAVORED_KEYWORD(Token)                  \
  switch (yytext[yyleng - 1])                           \
  {                                                     \
  case '|': RETURN_FLAVOR(Token, pipe);                 \
  case ',': RETURN_FLAVOR(Token, comma);                \
  case '&': RETURN_FLAVOR(Token, and);                  \
  case ';': RETURN_FLAVOR(Token, semicolon);            \
  default:  RETURN_FLAVOR(Token, none);                 \
  }

// Return an operator whose string representation is kept as a Symbol.
// Contrary to RETURN_SYMBOL, the symbol is resolved statically by
// precompiled-symbols.
#define RETURN_OP(Symbol)                       \
  RETURN_VALUE(Symbol, SYMBOL_(Symbol))

// Return a meta-variable type.  Only if desugaring is enabled.
#define RETURN_PERCENT(Token)                   \
  do {                                          \
    aver(parser_impl_->meta());                 \
    RETURN(PERCENT_ ## Token ## _COLON);        \
  } while (false)

// Return a std::string of kind Token with yytext as value.
#define RETURN_STR(Token)                       \
  RETURN_VALUE(Token, yytext)

// Return a Symbol of kind Token with yytext as Value.
#define RETURN_SYMBOL(Token)                    \
  RETURN_VALUE(Token, libport::Symbol(yytext))


/// Unput a large string.
//
// As this will be rescanned, length will be added.  It must
// not, otherwise we introduce an offset in the locations, so subtract
// it first.
#define UNPUT(Str)                                      \
  do {                                                  \
    std::string _rewritten = Str;                       \
    for (int i = _rewritten.length() - 1; 0 <= i; --i)  \
      unput(_rewritten[i]);                             \
    COLUMNS(-_rewritten.length());                      \
  } while (false)

// We matched an obsolete token, New is now preferered.  Unput it so
// that the regular scanning rule of New is run.  The braces are
// needed to scope msg and rewritten.
#define DEPRECATED(New)                                   \
  do {                                                    \
    std::string rewritten = New;                          \
    parser_impl_->deprecated(loc, yytext, rewritten);     \
    UNPUT(rewritten);                                     \
  } while (false)

/* No default rule. */
/* Allow faster implements. */
/* We need an interactive scanner.  Otherwise the generate scanner
   will always fetch one character of look-ahead, even when not
   needed.  This results in examples such as `lobby.received("1;");'
   not working, because we are waiting for the character after the
   (inner) `;' to process that `;'.  */
/* Even in -Cf mode, support 8 bit characters. */

// Ignore lines starting with "[000000:tag]", we are fed with a chk file.

// Enable meta variable support.

// Identifier.
// Identifier suffix for magic derivation (K1 syntax).
/* See [over.oper] in the C++ standard. */
#line 1382 "/home/bearclaw/qi-2/urbi/urbi/build-sys-linux-i686/src/parser/utoken.cc.raw"

#define INITIAL 0
#define SC_C_COMMENT 1
#define SC_STRING_OR_SYMBOL 2
#define SC_URBI_CHECK 3
#define SC_META 4

#ifndef YY_NO_UNISTD_H
/* Special case for "libport/unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <libport/unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
#define ECHO LexerOutput( yytext, yyleng )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
\
	if ( (result = LexerInput( (char *) buf, max_size )) < 0 ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) LexerError( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1
#define YY_DECL int yyFlexLexer::yylex()
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	if ( yyleng > 0 ) \
		YY_CURRENT_BUFFER_LVALUE->yy_at_bol = \
				(yytext[yyleng - 1] == '\n'); \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
#line 302 "/home/bearclaw/qi-2/urbi/urbi/src/parser/utoken.l"


  // The first delimiter of a string or a symbol : ' or ".
  // Used in SC_STRING_OR_SYMBOL to know if it is reading a string or a symbol.
  char delimiter = 0;

  // A stack of expected closing braces: ), ], } etc.
  std::vector<char> pre_closers;

  // Nesting C comments.
  unsigned int comment_level = 0;

  // Calling yylex for a new token, reset the cursor.
  STEP();


  /*-----------------------------------.
  | Internal rules for generated code. |
  `-----------------------------------*/

#line 1515 "/home/bearclaw/qi-2/urbi/urbi/build-sys-linux-i686/src/parser/utoken.cc.raw"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = & std::cin;

		if ( ! yyout )
			yyout = & std::cout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
		yy_current_state += YY_AT_BOL();
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 790 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 1877 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
#line 322 "/home/bearclaw/qi-2/urbi/urbi/src/parser/utoken.l"
{

  /* synclines are mainly made to get correct locations when loading a
     file: save the current location before loading the file, then
     restore it afterwards.

     This is simple to implement using cpp like synclines: "//#line",
     "//#push", and "//#pop".  The semantics of the first one is
     simple: it contains the location of the *next* line.  The
     semantics of //#push and //#pop is that the outer location is the
     same as if everything was removed from the push to the pop (both
     included).

     But we have to display errors about //#pop.  What's its location?
     It is chosen to the location of current location.  That's how the
     LINES and STEP etc. were placed as they are in the
     synclines-rules below.  */

  yytext += strlen("//#");
  SKIP_SPACES();

  // line|push.
  if (yytext[0] == 'p')
  {
    // When pushing, store the location that *precedes* this request,
    // that of the starting cursor.
    loc.end = loc.begin;
    parser_impl_->synclines_.push(loc);
  }
  yytext += 4;

  SKIP_SPACES();
  char* line = yytext;
  yytext += strspn(yytext, "0123456789");
  *yytext = 0;
  ++yytext;

  char* file = strchr(yytext, '"');
  if (file)
  {
    ++file;
    // FIXME: We do not support " in file names, nor quotes.
    *strchr(file, '"') = 0;
  }

  loc.initialize(!file || libport::streq(file, "-")
		 ? 0
		 : new libport::Symbol(file));
  loc.lines(lexical_cast<unsigned>(parser_impl_, loc, line) - 1);
  loc.step();
}
	YY_BREAK
case 2:
/* rule 2 can match eol */
YY_RULE_SETUP
#line 374 "/home/bearclaw/qi-2/urbi/urbi/src/parser/utoken.l"
{
  if (parser_impl_->synclines_.empty())
  {
    SCAN_ERROR("too many //#pop");
    LINES(1);
    STEP();
  }
  else
  {
    loc = parser_impl_->synclines_.top();
    parser_impl_->synclines_.pop();
  }
}
	YY_BREAK
/*-----------------------------------------------------------------.
  | Urbi check mode: skip the [01234567] lines for expected output.  |
  `-----------------------------------------------------------------*/

case 3:
YY_RULE_SETUP
#line 393 "/home/bearclaw/qi-2/urbi/urbi/src/parser/utoken.l"
/* ignore the "[timestamp:tags] whatever" messages */;
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 394 "/home/bearclaw/qi-2/urbi/urbi/src/parser/utoken.l"
/* ignore the "[:] whatever" messages */;
	YY_BREAK

/*------------.
  | The rules.  |
  `------------*/
/* Durations. */
case 5:
YY_RULE_SETUP
#line 403 "/home/bearclaw/qi-2/urbi/urbi/src/parser/utoken.l"
RETURN_DURATION(1, 60*60*24);
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 404 "/home/bearclaw/qi-2/urbi/urbi/src/parser/utoken.l"
RETURN_DURATION(1, 60*60);
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 405 "/home/bearclaw/qi-2/urbi/urbi/src/parser/utoken.l"
DEPRECATED(std::string(yytext) + "in");
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 406 "/home/bearclaw/qi-2/urbi/urbi/src/parser/utoken.l"
RETURN_DURATION(2, 60);
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 407 "/home/bearclaw/qi-2/urbi/urbi/src/parser/utoken.l"
RETURN_DURATION(3, 60);
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 408 "/home/bearclaw/qi-2/urbi/urbi/src/parser/utoken.l"
RETURN_DURATION(1, 1);
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 409 "/home/bearclaw/qi-2/urbi/urbi/src/parser/utoken.l"
RETURN_DURATION(2, 0.001);
	YY_BREAK
/* Angles. */
case 12:
YY_RULE_SETUP
#line 412 "/home/bearclaw/qi-2/urbi/urbi/src/parser/utoken.l"
RETURN_ANGLE(3,   1,    1);
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 413 "/home/bearclaw/qi-2/urbi/urbi/src/parser/utoken.l"
RETURN_ANGLE(3, 180, M_PI);
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 414 "/home/bearclaw/qi-2/urbi/urbi/src/parser/utoken.l"
RETURN_ANGLE(4, 200, M_PI);
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 416 "/home/bearclaw/qi-2/urbi/urbi/src/parser/utoken.l"
RETURN_VALUE(FLOAT, hexadecimal(yytext + 2));
	YY_BREAK
case 16:
#line 418 "/home/bearclaw/qi-2/urbi/urbi/src/parser/utoken.l"
case 17:
YY_RULE_SETUP
#line 418 "/home/bearclaw/qi-2/urbi/urbi/src/parser/utoken.l"
RETURN_VALUE(FLOAT, lexical_cast<ufloat>(parser_impl_, loc, yytext));
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 420 "/home/bearclaw/qi-2/urbi/urbi/src/parser/utoken.l"
SCAN_FATAL("invalid token: `%s'", yytext);
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 422 "/home/bearclaw/qi-2/urbi/urbi/src/parser/utoken.l"
{
                grown_string.clear();
                delimiter = *yytext;
                BEGIN SC_STRING_OR_SYMBOL;
              }
	YY_BREAK
case 20:
/* rule 20 can match eol */
YY_RULE_SETUP
#line 428 "/home/bearclaw/qi-2/urbi/urbi/src/parser/utoken.l"
LINES(1);
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 430 "/home/bearclaw/qi-2/urbi/urbi/src/parser/utoken.l"
RETURN(EXTERNAL);
	YY_BREAK

case 22:
YY_RULE_SETUP
#line 433 "/home/bearclaw/qi-2/urbi/urbi/src/parser/utoken.l"
RETURN_PERCENT(EXP);
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 434 "/home/bearclaw/qi-2/urbi/urbi/src/parser/utoken.l"
RETURN_PERCENT(EXPS);
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 435 "/home/bearclaw/qi-2/urbi/urbi/src/parser/utoken.l"
RETURN_PERCENT(ID);
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 436 "/home/bearclaw/qi-2/urbi/urbi/src/parser/utoken.l"
RETURN_PERCENT(LVALUE);
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 437 "/home/bearclaw/qi-2/urbi/urbi/src/parser/utoken.l"
RETURN_PERCENT(UNSCOPE);
	YY_BREAK

case 27:
YY_RULE_SETUP
#line 440 "/home/bearclaw/qi-2/urbi/urbi/src/parser/utoken.l"
RETURN(ASSERT);
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 441 "/home/bearclaw/qi-2/urbi/urbi/src/parser/utoken.l"
RETURN(BREAK);
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 442 "/home/bearclaw/qi-2/urbi/urbi/src/parser/utoken.l"
RETURN(CALL);
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 443 "/home/bearclaw/qi-2/urbi/urbi/src/parser/utoken.l"
RETURN(CASE);
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 444 "/home/bearclaw/qi-2/urbi/urbi/src/parser/utoken.l"
RETURN(CLASS);
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 445 "/home/bearclaw/qi-2/urbi/urbi/src/parser/utoken.l"
RETURN(CLOSURE);
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 446 "/home/bearclaw/qi-2/urbi/urbi/src/parser/utoken.l"
RETURN(CONST);
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 447 "/home/bearclaw/qi-2/urbi/urbi/src/parser/utoken.l"
RETURN(CONTINUE);
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 448 "/home/bearclaw/qi-2/urbi/urbi/src/parser/utoken.l"
RETURN(DEFAULT);
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 449 "/home/bearclaw/qi-2/urbi/urbi/src/parser/utoken.l"
RETURN(DETACH);
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 450 "/home/bearclaw/qi-2/urbi/urbi/src/parser/utoken.l"
RETURN(DISOWN);
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 451 "/home/bearclaw/qi-2/urbi/urbi/src/parser/utoken.l"
RETURN(DO);
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 452 "/home/bearclaw/qi-2/urbi/urbi/src/parser/utoken.l"
RETURN(ELSE);
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 453 "/home/bearclaw/qi-2/urbi/urbi/src/parser/utoken.l"
RETURN(ENUM);
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 454 "/home/bearclaw/qi-2/urbi/urbi/src/parser/utoken.l"
RETURN(FINALLY);
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 455 "/home/bearclaw/qi-2/urbi/urbi/src/parser/utoken.l"
RETURN(FREEZEIF);
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 456 "/home/bearclaw/qi-2/urbi/urbi/src/parser/utoken.l"
RETURN(FUNCTION);
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 457 "/home/bearclaw/qi-2/urbi/urbi/src/parser/utoken.l"
RETURN(IF);
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 458 "/home/bearclaw/qi-2/urbi/urbi/src/parser/utoken.l"
RETURN(IMPORT);
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 459 "/home/bearclaw/qi-2/urbi/urbi/src/parser/utoken.l"
RETURN(IN);
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 460 "/home/bearclaw/qi-2/urbi/urbi/src/parser/utoken.l"
RETURN(ISDEF);
	YY_BREAK
/*<no-space< New.*/
case 48:
YY_RULE_SETUP
#line 462 "/home/bearclaw/qi-2/urbi/urbi/src/parser/utoken.l"
RETURN_SYMBOL(NEW);
	YY_BREAK
/*>no-space>*/
case 49:
YY_RULE_SETUP
#line 464 "/home/bearclaw/qi-2/urbi/urbi/src/parser/utoken.l"
RETURN(ONLEAVE);
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 465 "/home/bearclaw/qi-2/urbi/urbi/src/parser/utoken.l"
RETURN(PACKAGE);
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 466 "/home/bearclaw/qi-2/urbi/urbi/src/parser/utoken.l"
RETURN(RETURN);
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 467 "/home/bearclaw/qi-2/urbi/urbi/src/parser/utoken.l"
RETURN(STOPIF);
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 468 "/home/bearclaw/qi-2/urbi/urbi/src/parser/utoken.l"
RETURN(SWITCH);
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 469 "/home/bearclaw/qi-2/urbi/urbi/src/parser/utoken.l"
RETURN(THIS);
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 470 "/home/bearclaw/qi-2/urbi/urbi/src/parser/utoken.l"
RETURN(TIMEOUT);
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 471 "/home/bearclaw/qi-2/urbi/urbi/src/parser/utoken.l"
RETURN(VAR);
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 472 "/home/bearclaw/qi-2/urbi/urbi/src/parser/utoken.l"
RETURN(WAITUNTIL);
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 473 "/home/bearclaw/qi-2/urbi/urbi/src/parser/utoken.l"
RETURN(WATCH);
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 474 "/home/bearclaw/qi-2/urbi/urbi/src/parser/utoken.l"
RETURN(WHENEVER);
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 476 "/home/bearclaw/qi-2/urbi/urbi/src/parser/utoken.l"
RETURN_FLAVORED_KEYWORD(EVERY);
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 477 "/home/bearclaw/qi-2/urbi/urbi/src/parser/utoken.l"
RETURN_FLAVORED_KEYWORD(FOR);
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 478 "/home/bearclaw/qi-2/urbi/urbi/src/parser/utoken.l"
RETURN_FLAVORED_KEYWORD(LOOP);
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 479 "/home/bearclaw/qi-2/urbi/urbi/src/parser/utoken.l"
RETURN_FLAVORED_KEYWORD(WHILE);
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 480 "/home/bearclaw/qi-2/urbi/urbi/src/parser/utoken.l"
RETURN_FLAVORED_KEYWORD(AT);
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 482 "/home/bearclaw/qi-2/urbi/urbi/src/parser/utoken.l"
RETURN_OP(BANG);
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 483 "/home/bearclaw/qi-2/urbi/urbi/src/parser/utoken.l"
RETURN_OP(PERCENT);
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 484 "/home/bearclaw/qi-2/urbi/urbi/src/parser/utoken.l"
RETURN_OP(STAR);
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 485 "/home/bearclaw/qi-2/urbi/urbi/src/parser/utoken.l"
RETURN_OP(PLUS);
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 486 "/home/bearclaw/qi-2/urbi/urbi/src/parser/utoken.l"
RETURN(PLUS_PLUS);
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 487 "/home/bearclaw/qi-2/urbi/urbi/src/parser/utoken.l"
RETURN_OP(MINUS);
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 488 "/home/bearclaw/qi-2/urbi/urbi/src/parser/utoken.l"
RETURN(MINUS_MINUS);
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 489 "/home/bearclaw/qi-2/urbi/urbi/src/parser/utoken.l"
RETURN_OP(SLASH);
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 491 "/home/bearclaw/qi-2/urbi/urbi/src/parser/utoken.l"
RETURN_OP(PERCENT_EQ);
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 492 "/home/bearclaw/qi-2/urbi/urbi/src/parser/utoken.l"
RETURN_OP(STAR_EQ);
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 493 "/home/bearclaw/qi-2/urbi/urbi/src/parser/utoken.l"
RETURN_OP(PLUS_EQ);
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 494 "/home/bearclaw/qi-2/urbi/urbi/src/parser/utoken.l"
RETURN_OP(MINUS_EQ);
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 495 "/home/bearclaw/qi-2/urbi/urbi/src/parser/utoken.l"
RETURN_OP(SLASH_EQ);
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 496 "/home/bearclaw/qi-2/urbi/urbi/src/parser/utoken.l"
RETURN_OP(CARET_EQ);
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 498 "/home/bearclaw/qi-2/urbi/urbi/src/parser/utoken.l"
RETURN_OP(LT);
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 499 "/home/bearclaw/qi-2/urbi/urbi/src/parser/utoken.l"
RETURN_OP(LT_EQ);
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 500 "/home/bearclaw/qi-2/urbi/urbi/src/parser/utoken.l"
RETURN_OP(LT_LT);
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 501 "/home/bearclaw/qi-2/urbi/urbi/src/parser/utoken.l"
RETURN_OP(EQ_EQ);
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 502 "/home/bearclaw/qi-2/urbi/urbi/src/parser/utoken.l"
RETURN(EQ_GT);
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 503 "/home/bearclaw/qi-2/urbi/urbi/src/parser/utoken.l"
RETURN_OP(EQ_EQ_EQ);
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 504 "/home/bearclaw/qi-2/urbi/urbi/src/parser/utoken.l"
RETURN_OP(BANG_EQ);
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 505 "/home/bearclaw/qi-2/urbi/urbi/src/parser/utoken.l"
RETURN_OP(BANG_EQ_EQ);
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 506 "/home/bearclaw/qi-2/urbi/urbi/src/parser/utoken.l"
RETURN_OP(EQ_TILDA_EQ);
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 507 "/home/bearclaw/qi-2/urbi/urbi/src/parser/utoken.l"
RETURN_OP(TILDA_EQ);
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 508 "/home/bearclaw/qi-2/urbi/urbi/src/parser/utoken.l"
RETURN_OP(GT);
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 509 "/home/bearclaw/qi-2/urbi/urbi/src/parser/utoken.l"
RETURN_OP(GT_EQ);
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 510 "/home/bearclaw/qi-2/urbi/urbi/src/parser/utoken.l"
RETURN_OP(GT_GT);
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 511 "/home/bearclaw/qi-2/urbi/urbi/src/parser/utoken.l"
RETURN_OP(CARET);
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 512 "/home/bearclaw/qi-2/urbi/urbi/src/parser/utoken.l"
RETURN_OP(STAR_STAR);
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 513 "/home/bearclaw/qi-2/urbi/urbi/src/parser/utoken.l"
RETURN_OP(AMPERSAND_AMPERSAND);
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 514 "/home/bearclaw/qi-2/urbi/urbi/src/parser/utoken.l"
RETURN_OP(PIPE_PIPE);
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 516 "/home/bearclaw/qi-2/urbi/urbi/src/parser/utoken.l"
RETURN(QUEST_MARK);
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 518 "/home/bearclaw/qi-2/urbi/urbi/src/parser/utoken.l"
RETURN(EQ);
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 520 "/home/bearclaw/qi-2/urbi/urbi/src/parser/utoken.l"
RETURN(MINUS_GT);
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 521 "/home/bearclaw/qi-2/urbi/urbi/src/parser/utoken.l"
RETURN(POINT);
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 522 "/home/bearclaw/qi-2/urbi/urbi/src/parser/utoken.l"
RETURN(COLON);
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 523 "/home/bearclaw/qi-2/urbi/urbi/src/parser/utoken.l"
RETURN(TILDA);
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 525 "/home/bearclaw/qi-2/urbi/urbi/src/parser/utoken.l"
RETURN(LPAREN);
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 526 "/home/bearclaw/qi-2/urbi/urbi/src/parser/utoken.l"
RETURN(RPAREN);
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 527 "/home/bearclaw/qi-2/urbi/urbi/src/parser/utoken.l"
RETURN(LBRACKET);
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 528 "/home/bearclaw/qi-2/urbi/urbi/src/parser/utoken.l"
RETURN(RBRACKET);
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 529 "/home/bearclaw/qi-2/urbi/urbi/src/parser/utoken.l"
RETURN(LBRACE);
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 530 "/home/bearclaw/qi-2/urbi/urbi/src/parser/utoken.l"
RETURN(RBRACE);
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 531 "/home/bearclaw/qi-2/urbi/urbi/src/parser/utoken.l"
RETURN(LVECTOR);
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 532 "/home/bearclaw/qi-2/urbi/urbi/src/parser/utoken.l"
RETURN(RVECTOR);
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 534 "/home/bearclaw/qi-2/urbi/urbi/src/parser/utoken.l"
RETURN_FLAVOR(AMPERSAND, and);
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 535 "/home/bearclaw/qi-2/urbi/urbi/src/parser/utoken.l"
RETURN_FLAVOR(PIPE, pipe);
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 536 "/home/bearclaw/qi-2/urbi/urbi/src/parser/utoken.l"
RETURN_FLAVOR(SEMICOLON, semicolon);
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 537 "/home/bearclaw/qi-2/urbi/urbi/src/parser/utoken.l"
RETURN_FLAVOR(COMMA, comma);
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 539 "/home/bearclaw/qi-2/urbi/urbi/src/parser/utoken.l"
RETURN_SYMBOL(BITAND);
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 540 "/home/bearclaw/qi-2/urbi/urbi/src/parser/utoken.l"
RETURN_SYMBOL(BITOR);
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 541 "/home/bearclaw/qi-2/urbi/urbi/src/parser/utoken.l"
RETURN_SYMBOL(COMPL);
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 543 "/home/bearclaw/qi-2/urbi/urbi/src/parser/utoken.l"
RETURN(PRIVATE);
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 544 "/home/bearclaw/qi-2/urbi/urbi/src/parser/utoken.l"
RETURN(PROTECTED);
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 545 "/home/bearclaw/qi-2/urbi/urbi/src/parser/utoken.l"
RETURN(PUBLIC);
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 547 "/home/bearclaw/qi-2/urbi/urbi/src/parser/utoken.l"
RETURN(CATCH);
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 548 "/home/bearclaw/qi-2/urbi/urbi/src/parser/utoken.l"
RETURN(THROW);
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 549 "/home/bearclaw/qi-2/urbi/urbi/src/parser/utoken.l"
RETURN(TRY);
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 551 "/home/bearclaw/qi-2/urbi/urbi/src/parser/utoken.l"
RETURN(__HERE__);
	YY_BREAK
/*<no-space< Reserved keywords.*/
case 124:
#line 555 "/home/bearclaw/qi-2/urbi/urbi/src/parser/utoken.l"
case 125:
#line 556 "/home/bearclaw/qi-2/urbi/urbi/src/parser/utoken.l"
case 126:
#line 557 "/home/bearclaw/qi-2/urbi/urbi/src/parser/utoken.l"
case 127:
#line 558 "/home/bearclaw/qi-2/urbi/urbi/src/parser/utoken.l"
case 128:
#line 559 "/home/bearclaw/qi-2/urbi/urbi/src/parser/utoken.l"
case 129:
#line 560 "/home/bearclaw/qi-2/urbi/urbi/src/parser/utoken.l"
case 130:
#line 561 "/home/bearclaw/qi-2/urbi/urbi/src/parser/utoken.l"
case 131:
#line 562 "/home/bearclaw/qi-2/urbi/urbi/src/parser/utoken.l"
case 132:
#line 563 "/home/bearclaw/qi-2/urbi/urbi/src/parser/utoken.l"
case 133:
#line 564 "/home/bearclaw/qi-2/urbi/urbi/src/parser/utoken.l"
case 134:
#line 565 "/home/bearclaw/qi-2/urbi/urbi/src/parser/utoken.l"
case 135:
#line 566 "/home/bearclaw/qi-2/urbi/urbi/src/parser/utoken.l"
case 136:
#line 567 "/home/bearclaw/qi-2/urbi/urbi/src/parser/utoken.l"
case 137:
#line 568 "/home/bearclaw/qi-2/urbi/urbi/src/parser/utoken.l"
case 138:
#line 569 "/home/bearclaw/qi-2/urbi/urbi/src/parser/utoken.l"
case 139:
#line 570 "/home/bearclaw/qi-2/urbi/urbi/src/parser/utoken.l"
case 140:
#line 571 "/home/bearclaw/qi-2/urbi/urbi/src/parser/utoken.l"
case 141:
#line 572 "/home/bearclaw/qi-2/urbi/urbi/src/parser/utoken.l"
case 142:
#line 573 "/home/bearclaw/qi-2/urbi/urbi/src/parser/utoken.l"
case 143:
#line 574 "/home/bearclaw/qi-2/urbi/urbi/src/parser/utoken.l"
case 144:
#line 575 "/home/bearclaw/qi-2/urbi/urbi/src/parser/utoken.l"
case 145:
#line 576 "/home/bearclaw/qi-2/urbi/urbi/src/parser/utoken.l"
case 146:
#line 577 "/home/bearclaw/qi-2/urbi/urbi/src/parser/utoken.l"
case 147:
#line 578 "/home/bearclaw/qi-2/urbi/urbi/src/parser/utoken.l"
case 148:
#line 579 "/home/bearclaw/qi-2/urbi/urbi/src/parser/utoken.l"
case 149:
#line 580 "/home/bearclaw/qi-2/urbi/urbi/src/parser/utoken.l"
case 150:
#line 581 "/home/bearclaw/qi-2/urbi/urbi/src/parser/utoken.l"
case 151:
#line 582 "/home/bearclaw/qi-2/urbi/urbi/src/parser/utoken.l"
case 152:
#line 583 "/home/bearclaw/qi-2/urbi/urbi/src/parser/utoken.l"
case 153:
#line 584 "/home/bearclaw/qi-2/urbi/urbi/src/parser/utoken.l"
case 154:
#line 585 "/home/bearclaw/qi-2/urbi/urbi/src/parser/utoken.l"
case 155:
#line 586 "/home/bearclaw/qi-2/urbi/urbi/src/parser/utoken.l"
case 156:
#line 587 "/home/bearclaw/qi-2/urbi/urbi/src/parser/utoken.l"
case 157:
#line 588 "/home/bearclaw/qi-2/urbi/urbi/src/parser/utoken.l"
case 158:
#line 589 "/home/bearclaw/qi-2/urbi/urbi/src/parser/utoken.l"
case 159:
#line 590 "/home/bearclaw/qi-2/urbi/urbi/src/parser/utoken.l"
case 160:
#line 591 "/home/bearclaw/qi-2/urbi/urbi/src/parser/utoken.l"
case 161:
#line 592 "/home/bearclaw/qi-2/urbi/urbi/src/parser/utoken.l"
case 162:
#line 593 "/home/bearclaw/qi-2/urbi/urbi/src/parser/utoken.l"
case 163:
#line 594 "/home/bearclaw/qi-2/urbi/urbi/src/parser/utoken.l"
case 164:
YY_RULE_SETUP
#line 594 "/home/bearclaw/qi-2/urbi/urbi/src/parser/utoken.l"
RESERVED_ERROR;
	YY_BREAK
/*>no-space>*/
/*----------------------.
  | The infamous k1-BIN.  |
  `----------------------*/
/* It is used only as a sort of here-doc,
     and it is just as unusable, yet necessary.

     The only supported syntax was "var foo = BIN SIZE (keywords)+; DATA"
     with DATA being SIZE long.  Note where the ";" is...
   */
case 165:
/* rule 165 can match eol */
YY_RULE_SETUP
#line 607 "/home/bearclaw/qi-2/urbi/urbi/src/parser/utoken.l"
{
  char* keywords;
  size_t size = bin_split (yytext, yyleng, keywords);
  // Eat the data.
  std::string data;
  for (size_t i = 0; i < size; ++i)
    switch (int c = yyinput())
    {
      case EOF:
        EOF_ERROR("BIN");
        goto out_of_loop;
      default:
        // Keep track of the locations.
        COLUMNS(1);
        data += c;
        break;
    }
  out_of_loop:
  UNPUT(libport::format("Binary.new(\"%s\", \"%s\");",
                        keywords, libport::escape(data, '"')));
}
	YY_BREAK
/*<no-space< Deprecated constructs. */
/*------------------------.
  | Deprecated constructs.  |
  `------------------------*/
case 166:
YY_RULE_SETUP
#line 635 "/home/bearclaw/qi-2/urbi/urbi/src/parser/utoken.l"
DEPRECATED("for");
	YY_BREAK
case 167:
YY_RULE_SETUP
#line 636 "/home/bearclaw/qi-2/urbi/urbi/src/parser/utoken.l"
DEPRECATED("");
	YY_BREAK
case 168:
YY_RULE_SETUP
#line 637 "/home/bearclaw/qi-2/urbi/urbi/src/parser/utoken.l"
DEPRECATED("this");
	YY_BREAK
case 169:
YY_RULE_SETUP
#line 638 "/home/bearclaw/qi-2/urbi/urbi/src/parser/utoken.l"
DEPRECATED("");
	YY_BREAK
case 170:
YY_RULE_SETUP
#line 640 "/home/bearclaw/qi-2/urbi/urbi/src/parser/utoken.l"
{ // Treat "n'x" as "n->x".
  // Push back "n.'\''" in the stream.
  char* quote = strchr(yytext, '\'');
  std::string s (yytext, quote - yytext);
  s += "->";
  if (!quote[1])
    s += "prime";
  else if (quote[1] == '\'')
    s += "second";
  else
    s += quote + 1;
  DEPRECATED(s);
}
	YY_BREAK
case 171:
YY_RULE_SETUP
#line 653 "/home/bearclaw/qi-2/urbi/urbi/src/parser/utoken.l"
{
  SCAN_FATAL("invalid quote: `%s'", strchr(yytext, '\''));
}
	YY_BREAK
/*>no-space>*/
/* operator XXX -> 'XXX'. */
case 172:
YY_RULE_SETUP
#line 659 "/home/bearclaw/qi-2/urbi/urbi/src/parser/utoken.l"
{
                yytext += strlen("operator");
                SKIP_SPACES();
                RETURN_SYMBOL(IDENTIFIER);
              }
	YY_BREAK
case 173:
YY_RULE_SETUP
#line 665 "/home/bearclaw/qi-2/urbi/urbi/src/parser/utoken.l"
RETURN_SYMBOL(IDENTIFIER);
	YY_BREAK
/*--------------------.
    | Strings and symbols |
    `--------------------*/
/* Handling of the strings and symbols. */
case 174:
YY_RULE_SETUP
#line 673 "/home/bearclaw/qi-2/urbi/urbi/src/parser/utoken.l"
{
       if (*yytext == delimiter)
       {
         BEGIN sc_default;
         if (*yytext == '\'')
           RETURN_VALUE(IDENTIFIER, libport::Symbol(grown_string));
         else
           RETURN_VALUE(STRING, grown_string);
       }
       else
         GROW_VAL(*yytext);
     }
	YY_BREAK
case 175:
YY_RULE_SETUP
#line 686 "/home/bearclaw/qi-2/urbi/urbi/src/parser/utoken.l"
{
       long c = strtol (yytext + 1, 0, 8);
       if (c < 256)
         GROW_VAL(c);
       else
         SCAN_ERROR("invalid number after \\-escape: `%s'", yytext + 1);
     }
	YY_BREAK
case 176:
YY_RULE_SETUP
#line 694 "/home/bearclaw/qi-2/urbi/urbi/src/parser/utoken.l"
GROW_VAL(strtol (yytext + 2, 0, 16));
	YY_BREAK
case 177:
YY_RULE_SETUP
#line 696 "/home/bearclaw/qi-2/urbi/urbi/src/parser/utoken.l"
GROW_VAL('\a');
	YY_BREAK
case 178:
YY_RULE_SETUP
#line 697 "/home/bearclaw/qi-2/urbi/urbi/src/parser/utoken.l"
GROW_VAL('\b');
	YY_BREAK
case 179:
YY_RULE_SETUP
#line 698 "/home/bearclaw/qi-2/urbi/urbi/src/parser/utoken.l"
GROW_VAL('\f');
	YY_BREAK
case 180:
YY_RULE_SETUP
#line 699 "/home/bearclaw/qi-2/urbi/urbi/src/parser/utoken.l"
GROW_VAL('\n');
	YY_BREAK
case 181:
YY_RULE_SETUP
#line 700 "/home/bearclaw/qi-2/urbi/urbi/src/parser/utoken.l"
GROW_VAL('\r');
	YY_BREAK
case 182:
YY_RULE_SETUP
#line 701 "/home/bearclaw/qi-2/urbi/urbi/src/parser/utoken.l"
GROW_VAL('\t');
	YY_BREAK
case 183:
YY_RULE_SETUP
#line 702 "/home/bearclaw/qi-2/urbi/urbi/src/parser/utoken.l"
GROW_VAL('\v');
	YY_BREAK
case 184:
YY_RULE_SETUP
#line 703 "/home/bearclaw/qi-2/urbi/urbi/src/parser/utoken.l"
GROW_VAL(yytext[1]);
	YY_BREAK
case 185:
YY_RULE_SETUP
#line 704 "/home/bearclaw/qi-2/urbi/urbi/src/parser/utoken.l"
{
                  SCAN_ERROR("invalid character after \\-escape: `%s'",
                             libport::escape(yytext + 1));
     }
	YY_BREAK
case 186:
/* rule 186 can match eol */
#line 711 "/home/bearclaw/qi-2/urbi/urbi/src/parser/utoken.l"
case 187:
/* rule 187 can match eol */
#line 712 "/home/bearclaw/qi-2/urbi/urbi/src/parser/utoken.l"
case 188:
/* rule 188 can match eol */
#line 713 "/home/bearclaw/qi-2/urbi/urbi/src/parser/utoken.l"
case 189:
/* rule 189 can match eol */
YY_RULE_SETUP
#line 713 "/home/bearclaw/qi-2/urbi/urbi/src/parser/utoken.l"
{
           SCAN_ERROR("invalid \\B(SIZE)(CONTENTS) escape: `\\%s'",
                      libport::escape(yytext + 1));
     }
	YY_BREAK
case 190:
YY_RULE_SETUP
#line 718 "/home/bearclaw/qi-2/urbi/urbi/src/parser/utoken.l"
{
       // Binary escape.
       size_t len = strtol(yytext+3, 0, 0);
       // In fast mode, a Flex scanner pass its internal buffer as
       // yytext, but it smashes yytext[yyleng] to '\0', so restore it
       // here: we are going to read it ourselves.
       *yy_c_buf_p = yy_hold_char;

       // How much is available in the buffer.
       size_t remain = (yy_n_chars
                        - (yy_c_buf_p - YY_CURRENT_BUFFER_LVALUE->yy_ch_buf));
       // How much we are going to eat.
       size_t eat = std::min(remain, len);

       // If we want more that available, go and fetch in the stream
       // itself.  Don't use yyinput, it is just not fast enough.
       if (remain < len)
       {
         // Add current buffer
         grown_string += std::string(yy_c_buf_p, remain);

         // Read remaining data
         size_t current_size = grown_string.length();
         grown_string.resize(current_size + len - eat);
         yyin->read(const_cast<char*>(grown_string.c_str()) + current_size,
                    len-eat);

       }
       else
       {
         // All we have to read is in Flex' buffer.
         aver(parser_impl_);
         grown_string += std::string(yy_c_buf_p, eat);
       }
       COLUMNS(len);

       // We played nasty tricks with Flex, tweaking its buffer by
       // hand.  Restore its state: first of all advance the cursor of
       // "eat" characters, then set the "hold" character to the next
       // character it will read (when coming back from an action,
       // flex reverses the effect of defining yytext, which starts by
       // yytext[yyleng] = 0, after having saved it in yy_hold_char).
       yy_cp = yy_c_buf_p += eat;
       yy_hold_char = *yy_cp;

       switch (int c = yyinput())
       {
       case EOF:
         EOF_ERROR("\\B");
         break;
       case ')':
         COLUMNS(1);
         break;
       default:
         SCAN_ERROR("unexpected '%s' for closing \\B, expected ')'",
                    libport::escape((char)c));
         COLUMNS(1);
         break;
       }
     }
	YY_BREAK
case 191:
YY_RULE_SETUP
#line 779 "/home/bearclaw/qi-2/urbi/urbi/src/parser/utoken.l"
APPEND_VAL(yytext, yyleng);
	YY_BREAK
case 192:
/* rule 192 can match eol */
YY_RULE_SETUP
#line 781 "/home/bearclaw/qi-2/urbi/urbi/src/parser/utoken.l"
LINES(yyleng); APPEND_VAL(yyleng, '\n');
	YY_BREAK
case YY_STATE_EOF(SC_STRING_OR_SYMBOL):
#line 783 "/home/bearclaw/qi-2/urbi/urbi/src/parser/utoken.l"
{
       EOF_ERROR(delimiter + "..." + delimiter);
       unput(delimiter);
     }
	YY_BREAK

/*----------------------------.
    | White spaces and comments.  |
    `----------------------------*/
case 193:
YY_RULE_SETUP
#line 794 "/home/bearclaw/qi-2/urbi/urbi/src/parser/utoken.l"
STEP(); // One-line comment.
	YY_BREAK
case 194:
YY_RULE_SETUP
#line 795 "/home/bearclaw/qi-2/urbi/urbi/src/parser/utoken.l"
++comment_level; BEGIN SC_C_COMMENT;
	YY_BREAK
case 195:
YY_RULE_SETUP
#line 797 "/home/bearclaw/qi-2/urbi/urbi/src/parser/utoken.l"
STEP();
	YY_BREAK
case 196:
/* rule 196 can match eol */
YY_RULE_SETUP
#line 798 "/home/bearclaw/qi-2/urbi/urbi/src/parser/utoken.l"
LINES(1); STEP();
	YY_BREAK
/* Comments. */
case YY_STATE_EOF(SC_C_COMMENT):
#line 801 "/home/bearclaw/qi-2/urbi/urbi/src/parser/utoken.l"
{
    EOF_ERROR("a comment");
    STEP();
    BEGIN sc_default;
  }
	YY_BREAK

/* Comments. */
case 197:
#line 810 "/home/bearclaw/qi-2/urbi/urbi/src/parser/utoken.l"
case 198:
YY_RULE_SETUP
#line 810 "/home/bearclaw/qi-2/urbi/urbi/src/parser/utoken.l"
continue;
	YY_BREAK
case 199:
/* rule 199 can match eol */
YY_RULE_SETUP
#line 811 "/home/bearclaw/qi-2/urbi/urbi/src/parser/utoken.l"
LINES(1);
	YY_BREAK
case 200:
YY_RULE_SETUP
#line 812 "/home/bearclaw/qi-2/urbi/urbi/src/parser/utoken.l"
++comment_level;
	YY_BREAK
case 201:
YY_RULE_SETUP
#line 813 "/home/bearclaw/qi-2/urbi/urbi/src/parser/utoken.l"
{
                  if (!--comment_level)
                  {
                    STEP();
                    BEGIN sc_default;
                  }
                }
	YY_BREAK


case 202:
YY_RULE_SETUP
#line 823 "/home/bearclaw/qi-2/urbi/urbi/src/parser/utoken.l"
SCAN_FATAL("invalid character: `%s'", libport::escape(yytext));
	YY_BREAK

case 203:
YY_RULE_SETUP
#line 826 "/home/bearclaw/qi-2/urbi/urbi/src/parser/utoken.l"
YY_FATAL_ERROR( "flex scanner jammed" );
	YY_BREAK
#line 2742 "/home/bearclaw/qi-2/urbi/urbi/build-sys-linux-i686/src/parser/utoken.cc.raw"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(SC_URBI_CHECK):
case YY_STATE_EOF(SC_META):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yylex */

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::yyFlexLexer( std::istream* arg_yyin, std::ostream* arg_yyout )
{
	yyin = arg_yyin;
	yyout = arg_yyout;
	yy_c_buf_p = 0;
	yy_init = 0;
	yy_start = 0;
	yy_flex_debug = 0;
	yylineno = 1;	// this will only get updated if %option yylineno

	yy_did_buffer_switch_on_eof = 0;

	yy_looking_for_trail_begin = 0;
	yy_more_flag = 0;
	yy_more_len = 0;
	yy_more_offset = yy_prev_more_offset = 0;

	yy_start_stack_ptr = yy_start_stack_depth = 0;
	yy_start_stack = NULL;

	yy_buffer_stack = 0;
	yy_buffer_stack_top = 0;
	yy_buffer_stack_max = 0;

	yy_state_buf = 0;

}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::~yyFlexLexer()
{
	delete [] yy_state_buf;
	yyfree(yy_start_stack  );
	yy_delete_buffer( YY_CURRENT_BUFFER );
	yyfree(yy_buffer_stack  );
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::switch_streams( std::istream* new_in, std::ostream* new_out )
{
	if ( new_in )
		{
		yy_delete_buffer( YY_CURRENT_BUFFER );
		yy_switch_to_buffer( yy_create_buffer( new_in, YY_BUF_SIZE  ) );
		}

	if ( new_out )
		yyout = new_out;
}

#ifdef YY_INTERACTIVE
int yyFlexLexer::LexerInput( char* buf, int /* max_size */ )
#else
int yyFlexLexer::LexerInput( char* buf, int max_size )
#endif
{
	if ( yyin->eof() || yyin->fail() )
		return 0;

#ifdef YY_INTERACTIVE
	yyin->get( buf[0] );

	if ( yyin->eof() )
		return 0;

	if ( yyin->bad() )
		return -1;

	return 1;

#else
	(void) yyin->read( buf, max_size );

	if ( yyin->bad() )
		return -1;
	else
		return yyin->gcount();
#endif
}

void yyFlexLexer::LexerOutput( const char* buf, int size )
{
	(void) yyout->write( buf, size );
}

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
int yyFlexLexer::yy_get_next_buffer()
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    yy_state_type yyFlexLexer::yy_get_previous_state()
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);
	yy_current_state += YY_AT_BOL();

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 790 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    yy_state_type yyFlexLexer::yy_try_NUL_trans( yy_state_type yy_current_state )
{
	register int yy_is_jam;
    	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 790 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 789);

	return yy_is_jam ? 0 : yy_current_state;
}

    void yyFlexLexer::yyunput( int c, register char* yy_bp)
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

    int yyFlexLexer::yyinput()
{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = (c == '\n');

	return c;
}

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyFlexLexer::yyrestart( std::istream* input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yyFlexLexer::yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

    void yyFlexLexer::yy_load_buffer_state()
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream* file, int size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yyFlexLexer::yy_delete_buffer( YY_BUFFER_STATE b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree((void *) b->yy_ch_buf  );

	yyfree((void *) b  );
}

extern "C" int isatty (int );

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    void yyFlexLexer::yy_init_buffer( YY_BUFFER_STATE b, std::istream* file )

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

	b->yy_is_interactive = 0;
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yyFlexLexer::yy_flush_buffer( YY_BUFFER_STATE b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yyFlexLexer::yypush_buffer_state (YY_BUFFER_STATE new_buffer)
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yyFlexLexer::yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
void yyFlexLexer::yyensure_buffer_stack(void)
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

    void yyFlexLexer::yy_push_state( int new_state )
{
    	if ( (yy_start_stack_ptr) >= (yy_start_stack_depth) )
		{
		yy_size_t new_size;

		(yy_start_stack_depth) += YY_START_STACK_INCR;
		new_size = (yy_start_stack_depth) * sizeof( int );

		if ( ! (yy_start_stack) )
			(yy_start_stack) = (int *) yyalloc(new_size  );

		else
			(yy_start_stack) = (int *) yyrealloc((void *) (yy_start_stack),new_size  );

		if ( ! (yy_start_stack) )
			YY_FATAL_ERROR( "out of memory expanding start-condition stack" );
		}

	(yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

	BEGIN(new_state);
}

    void yyFlexLexer::yy_pop_state()
{
    	if ( --(yy_start_stack_ptr) < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

    int yyFlexLexer::yy_top_state()
{
    	return (yy_start_stack)[(yy_start_stack_ptr) - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

void yyFlexLexer::LexerError( yyconst char msg[] )
{
    	std::cerr << msg << std::endl;
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void yyfree (void * ptr )
{
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 826 "/home/bearclaw/qi-2/urbi/urbi/src/parser/utoken.l"



long long
hexadecimal(std::string t)
{
  boost::algorithm::erase_all(t, "_");
  return strtoll(t.c_str(), 0, 16);
}

// Safe conversion to a numeric value.
// The name parser_impl_ is chosen so that SCAN_ERROR can be used
// from out of the scanner.
template <typename Out>
Out
lexical_cast(parser::ParserImpl* parser_impl_, const yy::location& loc,
             std::string t)
{
  boost::algorithm::erase_all(t, "_");
  try
  {
    return boost::lexical_cast<Out>(t);
  }
  catch (const boost::bad_lexical_cast&)
  {
    SCAN_ERROR("invalid numerical literal: %1%", t);
    return 0;
  }
}

/// Split yytext which matches
/// "BIN"{BLANKS}{NATURAL}[^;]*";" setting \a keywords to
/// the first char of keyword, and return the size.
static
size_t
bin_split(char* yytext, size_t yyleng, char*& keywords)
{
  // Smash the semicolon.
  yytext[--yyleng] = 0;
  // Remove all the trailing spaces.
  while (isspace(yytext[yyleng - 1]))
    yytext[--yyleng] = '\0';

  // Skip BIN.
  yytext += 3;
  ++yytext;
  SKIP_SPACES();

  char* size = yytext;
  while (isdigit(yytext[0]))
    ++yytext;
  *yytext = 0;
  size_t res = boost::lexical_cast<size_t>(size);
  ++yytext;
  SKIP_SPACES();
  keywords = yytext;
  return res;
}

// Local Variables:
// mode: C++
// End:

